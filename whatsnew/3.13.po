# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-07-23 17:09+0200\n"
"PO-Revision-Date: 2024-10-29 22:25+0100\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/whatsnew/3.13.rst:4
msgid "What's New In Python 3.13"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:0
msgid "Editor"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:6
msgid "TBD"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:48
msgid ""
"This article explains the new features in Python 3.13, compared to 3.12."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:50
msgid "For full details, see the :ref:`changelog <changelog>`."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:54
msgid ""
"Prerelease users should be aware that this document is currently in draft "
"form. It will be updated substantially as Python 3.13 moves towards release, "
"so it's worth checking back even after reading earlier versions."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:60
msgid "Summary -- Release highlights"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:71 ../Doc/whatsnew/3.13.rst:746
msgid "New Features"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:76
msgid "Other Language Changes"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:78
msgid ""
"Allow the *count* argument of :meth:`str.replace` to be a keyword. "
"(Contributed by Hugo van Kemenade in :gh:`106487`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:81
msgid ""
"Compiler now strip indents from docstrings. This will reduce the size of :"
"term:`bytecode cache <bytecode>` (e.g. ``.pyc`` file). For example, cache "
"file size for ``sqlalchemy.orm.session`` in SQLAlchemy 2.0 is reduced by "
"about 5%. This change will affect tools using docstrings, like :mod:"
"`doctest`. (Contributed by Inada Naoki in :gh:`81283`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:89
msgid "New Modules"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:91
msgid "None yet."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:95
msgid "Improved Modules"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:98
msgid "array"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:100
msgid ""
"Add ``'w'`` type code (``Py_UCS4``) that can be used for Unicode strings. It "
"can be used instead of ``'u'`` type code, which is deprecated. (Contributed "
"by Inada Naoki in :gh:`80480`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:105
msgid "io"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:107
msgid ""
"The :class:`io.IOBase` finalizer now logs the ``close()`` method errors "
"with :data:`sys.unraisablehook`. Previously, errors were ignored silently by "
"default, and only logged in :ref:`Python Development Mode <devmode>` or on :"
"ref:`Python built on debug mode <debug-build>`. (Contributed by Victor "
"Stinner in :gh:`62948`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:114
msgid "pathlib"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:116
msgid ""
"Add :exc:`pathlib.UnsupportedOperation`, which is raised instead of :exc:"
"`NotImplementedError` when a path operation isn't supported. (Contributed by "
"Barney Gale in :gh:`89812`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:120
msgid ""
"Add support for recursive wildcards in :meth:`pathlib.PurePath.match`. "
"(Contributed by Barney Gale in :gh:`73435`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:123
msgid ""
"Add *follow_symlinks* keyword-only argument to :meth:`pathlib.Path.glob`, :"
"meth:`~pathlib.Path.rglob`, :meth:`~pathlib.Path.is_file`, and :meth:"
"`~pathlib.Path.is_dir`. (Contributed by Barney Gale in :gh:`77609` and :gh:"
"`105793`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:129
msgid "traceback"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:131
msgid ""
"Add *show_group* paramter to :func:`traceback.TracebackException."
"format_exception_only` to format the nested exceptions of a :exc:"
"`BaseExceptionGroup` instance, recursively. (Contributed by Irit Katriel in :"
"gh:`105292`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:136
msgid "typing"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:138
msgid ""
"Add :func:`typing.get_protocol_members` to return the set of members "
"defining a :class:`typing.Protocol`. Add :func:`typing.is_protocol` to check "
"whether a class is a :class:`typing.Protocol`. (Contributed by Jelle "
"Zijlstra in :gh:`104873`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:144
msgid "Optimizations"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:150 ../Doc/whatsnew/3.13.rst:802
msgid "Deprecated"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:152
msgid ""
":mod:`array`: :mod:`array`'s ``'u'`` format code, deprecated in docs since "
"Python 3.3, emits :exc:`DeprecationWarning` since 3.13 and will be removed "
"in Python 3.16. Use the ``'w'`` format code instead. (contributed by Hugo "
"van Kemenade in :gh:`80480`)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:158
msgid ""
":mod:`ctypes`: Deprecate undocumented :func:`!ctypes.SetPointerType` and :"
"func:`!ctypes.ARRAY` functions. Replace ``ctypes.ARRAY(item_type, size)`` "
"with ``item_type * size``. (Contributed by Victor Stinner in :gh:`105733`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:163
msgid ""
":mod:`getopt` and :mod:`optparse` modules: They are now :term:`soft "
"deprecated`: the :mod:`argparse` should be used for new projects. "
"Previously, the :mod:`optparse` module was already deprecated, its removal "
"was not scheduled, and no warnings was emitted: so there is no change in "
"practice. (Contributed by Victor Stinner in :gh:`106535`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:170
msgid ""
":mod:`typing`: Creating a :class:`typing.NamedTuple` class using keyword "
"arguments to denote the fields (``NT = NamedTuple(\"NT\", x=int, y=int)``) "
"is deprecated, and will be disallowed in Python 3.15. Use the class-based "
"syntax or the functional syntax instead. (Contributed by Alex Waygood in :gh:"
"`105566`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:175
msgid ""
"When using the functional syntax to create a :class:`typing.NamedTuple` "
"class or a :class:`typing.TypedDict` class, failing to pass a value to the "
"'fields' parameter (``NT = NamedTuple(\"NT\")`` or ``TD = "
"TypedDict(\"TD\")``) is deprecated. Passing ``None`` to the 'fields' "
"parameter (``NT = NamedTuple(\"NT\", None)`` or ``TD = TypedDict(\"TD\", "
"None)``) is also deprecated. Both will be disallowed in Python 3.15. To "
"create a NamedTuple class with 0 fields, use ``class NT(NamedTuple): pass`` "
"or ``NT = NamedTuple(\"NT\", [])``. To create a TypedDict class with 0 "
"fields, use ``class TD(TypedDict): pass`` or ``TD = TypedDict(\"TD\", {})``. "
"(Contributed by Alex Waygood in :gh:`105566` and :gh:`105570`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:186
msgid ""
":func:`typing.no_type_check_decorator` is deprecated, and scheduled for "
"removal in Python 3.15. After eight years in the :mod:`typing` module, it "
"has yet to be supported by any major type checkers. (Contributed by Alex "
"Waygood in :gh:`106309`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:191 ../Doc/whatsnew/3.13.rst:324
msgid ""
":mod:`wave`: Deprecate the ``getmark()``, ``setmark()`` and ``getmarkers()`` "
"methods of the :class:`wave.Wave_read` and :class:`wave.Wave_write` classes. "
"They will be removed in Python 3.15. (Contributed by Victor Stinner in :gh:"
"`105096`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:197 ../Doc/whatsnew/3.13.rst:978
msgid "Pending Removal in Python 3.14"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:199
msgid ""
":mod:`argparse`: The *type*, *choices*, and *metavar* parameters of :class:`!"
"argparse.BooleanOptionalAction` are deprecated and will be removed in 3.14. "
"(Contributed by Nikita Sobolev in :gh:`92248`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:204
msgid ""
":mod:`ast`: The following features have been deprecated in documentation "
"since Python 3.8, now cause a :exc:`DeprecationWarning` to be emitted at "
"runtime when they are accessed or used, and will be removed in Python 3.14:"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:208
msgid ":class:`!ast.Num`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:209
msgid ":class:`!ast.Str`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:210
msgid ":class:`!ast.Bytes`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:211
msgid ":class:`!ast.NameConstant`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:212
msgid ":class:`!ast.Ellipsis`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:214
msgid ""
"Use :class:`ast.Constant` instead. (Contributed by Serhiy Storchaka in :gh:"
"`90953`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:217
msgid ""
":mod:`collections.abc`: Deprecated :class:`~collections.abc.ByteString`. "
"Prefer :class:`!Sequence` or :class:`~collections.abc.Buffer`. For use in "
"typing, prefer a union, like ``bytes | bytearray``, or :class:`collections."
"abc.Buffer`. (Contributed by Shantanu Jain in :gh:`91896`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:223
msgid ""
":mod:`email`: Deprecated the *isdst* parameter in :func:`email.utils."
"localtime`. (Contributed by Alan Williams in :gh:`72346`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:226
msgid ""
":mod:`importlib`: ``__package__`` and ``__cached__`` will cease to be set or "
"taken into consideration by the import system (:gh:`97879`)."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:229
msgid ":mod:`importlib.abc` deprecated classes:"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:231
msgid ":class:`!importlib.abc.ResourceReader`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:232
msgid ":class:`!importlib.abc.Traversable`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:233
msgid ":class:`!importlib.abc.TraversableResources`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:235
msgid "Use :mod:`importlib.resources.abc` classes instead:"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:237
msgid ":class:`importlib.resources.abc.Traversable`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:238
msgid ":class:`importlib.resources.abc.TraversableResources`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:240
msgid "(Contributed by Jason R. Coombs and Hugo van Kemenade in :gh:`93963`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:242
msgid ""
":mod:`itertools` had undocumented, inefficient, historically buggy, and "
"inconsistent support for copy, deepcopy, and pickle operations. This will be "
"removed in 3.14 for a significant reduction in code volume and maintenance "
"burden. (Contributed by Raymond Hettinger in :gh:`101588`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:248
msgid ""
":mod:`multiprocessing`: The default start method will change to a safer one "
"on Linux, BSDs, and other non-macOS POSIX platforms where ``'fork'`` is "
"currently the default (:gh:`84559`). Adding a runtime warning about this was "
"deemed too disruptive as the majority of code is not expected to care. Use "
"the :func:`~multiprocessing.get_context` or :func:`~multiprocessing."
"set_start_method` APIs to explicitly specify when your code *requires* "
"``'fork'``.  See :ref:`multiprocessing-start-methods`."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:256
msgid ""
":mod:`pathlib`: :meth:`~pathlib.PurePath.is_relative_to`, :meth:`~pathlib."
"PurePath.relative_to`: passing additional arguments is deprecated."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:260
msgid ""
":func:`pkgutil.find_loader` and :func:`pkgutil.get_loader` now raise :exc:"
"`DeprecationWarning`; use :func:`importlib.util.find_spec` instead. "
"(Contributed by Nikita Sobolev in :gh:`97850`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:265
msgid ":mod:`pty`:"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:267
msgid "``master_open()``: use :func:`pty.openpty`."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:268
msgid "``slave_open()``: use :func:`pty.openpty`."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:270
msgid ""
":func:`shutil.rmtree` *onerror* parameter is deprecated in 3.12, and will be "
"removed in 3.14: use the *onexc* parameter instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:273
msgid ":mod:`sqlite3`:"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:275
msgid ":data:`~sqlite3.version` and :data:`~sqlite3.version_info`."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:277
msgid ""
":meth:`~sqlite3.Cursor.execute` and :meth:`~sqlite3.Cursor.executemany` if :"
"ref:`named placeholders <sqlite3-placeholders>` are used and *parameters* is "
"a sequence instead of a :class:`dict`."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:281
msgid ""
"date and datetime adapter, date and timestamp converter: see the :mod:"
"`sqlite3` documentation for suggested replacement recipes."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:284
msgid ""
":class:`types.CodeType`: Accessing ``co_lnotab`` was deprecated in :pep:"
"`626` since 3.10 and was planned to be removed in 3.12, but it only got a "
"proper :exc:`DeprecationWarning` in 3.12. May be removed in 3.14. "
"(Contributed by Nikita Sobolev in :gh:`101866`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:290
msgid ""
":mod:`typing`: :class:`~typing.ByteString`, deprecated since Python 3.9, now "
"causes a :exc:`DeprecationWarning` to be emitted when it is used."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:293
msgid ""
":class:`!urllib.parse.Quoter` is deprecated: it was not intended to be a "
"public API. (Contributed by Gregory P. Smith in :gh:`88168`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:297
msgid ""
":mod:`xml.etree.ElementTree`: Testing the truth value of an :class:`~xml."
"etree.ElementTree.Element` is deprecated and will raise an exception in "
"Python 3.14."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:302 ../Doc/whatsnew/3.13.rst:1011
msgid "Pending Removal in Python 3.15"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:304
msgid ":class:`typing.NamedTuple`:"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:306
msgid ""
"The undocumented keyword argument syntax for creating NamedTuple classes "
"(``NT = NamedTuple(\"NT\", x=int)``) is deprecated, and will be disallowed "
"in 3.15. Use the class-based syntax or the functional syntax instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:310
msgid ""
"When using the functional syntax to create a NamedTuple class, failing to "
"pass a value to the 'fields' parameter (``NT = NamedTuple(\"NT\")``) is "
"deprecated. Passing ``None`` to the 'fields' parameter (``NT = "
"NamedTuple(\"NT\", None)``) is also deprecated. Both will be disallowed in "
"Python 3.15. To create a NamedTuple class with 0 fields, use ``class "
"NT(NamedTuple): pass`` or ``NT = NamedTuple(\"NT\", [])``."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:317
msgid ""
":class:`typing.TypedDict`: When using the functional syntax to create a "
"TypedDict class, failing to pass a value to the 'fields' parameter (``TD = "
"TypedDict(\"TD\")``) is deprecated. Passing ``None`` to the 'fields' "
"parameter (``TD = TypedDict(\"TD\", None)``) is also deprecated. Both will "
"be disallowed in Python 3.15. To create a TypedDict class with 0 fields, use "
"``class TD(TypedDict): pass`` or ``TD = TypedDict(\"TD\", {})``."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:330
msgid "Pending Removal in Python 3.16"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:332
msgid ""
":class:`array.array` ``'u'`` type (:c:type:`wchar_t`): use the ``'w'`` type "
"instead (``Py_UCS4``)."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:336 ../Doc/whatsnew/3.13.rst:1031
msgid "Pending Removal in Future Versions"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:338 ../Doc/whatsnew/3.13.rst:1033
msgid ""
"The following APIs were deprecated in earlier Python versions and will be "
"removed, although there is currently no date scheduled for their removal."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:341
msgid ""
":mod:`argparse`: Nesting argument groups and nesting mutually exclusive "
"groups are deprecated."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:344
msgid ":mod:`builtins`:"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:346
msgid "``~bool``, bitwise inversion on bool."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:347
msgid "``bool(NotImplemented)``."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:348
msgid ""
"Generators: ``throw(type, exc, tb)`` and ``athrow(type, exc, tb)`` signature "
"is deprecated: use ``throw(exc)`` and ``athrow(exc)`` instead, the single "
"argument signature."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:351
msgid ""
"Currently Python accepts numeric literals immediately followed by keywords, "
"for example ``0in x``, ``1or x``, ``0if 1else 2``.  It allows confusing and "
"ambiguous expressions like ``[0x1for x in y]`` (which can be interpreted as "
"``[0x1 for x in y]`` or ``[0x1f or x in y]``).  A syntax warning is raised "
"if the numeric literal is immediately followed by one of keywords :keyword:"
"`and`, :keyword:`else`, :keyword:`for`, :keyword:`if`, :keyword:`in`, :"
"keyword:`is` and :keyword:`or`.  In a future release it will be changed to a "
"syntax error. (:gh:`87999`)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:359
msgid ""
"Support for ``__index__()`` and ``__int__()`` method returning non-int type: "
"these methods will be required to return an instance of a strict subclass "
"of :class:`int`."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:362
msgid ""
"Support for ``__float__()`` method returning a strict subclass of :class:"
"`float`: these methods will be required to return an instance of :class:"
"`float`."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:365
msgid ""
"Support for ``__complex__()`` method returning a strict subclass of :class:"
"`complex`: these methods will be required to return an instance of :class:"
"`complex`."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:368
msgid "Delegation of ``int()`` to ``__trunc__()`` method."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:370
msgid ""
":mod:`calendar`: ``calendar.January`` and ``calendar.February`` constants "
"are deprecated and replaced by :data:`calendar.Month.JANUARY` and :data:"
"`calendar.Month.FEBRUARY`. (Contributed by Prince Roshan in :gh:`103636`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:375
msgid ":mod:`datetime`:"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:377
msgid ""
":meth:`~datetime.datetime.utcnow`: use ``datetime.datetime.now(tz=datetime."
"UTC)``."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:379
msgid ""
":meth:`~datetime.datetime.utcfromtimestamp`: use ``datetime.datetime."
"fromtimestamp(timestamp, tz=datetime.UTC)``."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:382
msgid ":mod:`gettext`: Plural value must be an integer."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:384
msgid ":mod:`importlib`:"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:386
msgid "``load_module()`` method: use ``exec_module()`` instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:387
msgid ""
":func:`~importlib.util.cache_from_source` *debug_override* parameter is "
"deprecated: use the *optimization* parameter instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:390
msgid ":mod:`importlib.metadata`:"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:392
msgid "``EntryPoints`` tuple interface."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:393
msgid "Implicit ``None`` on return values."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:395
msgid ""
":mod:`importlib.resources`: First parameter to files is renamed to 'anchor'."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:396
msgid ":mod:`importlib.resources` deprecated methods:"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:398
msgid "``contents()``"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:399
msgid "``is_resource()``"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:400
msgid "``open_binary()``"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:401
msgid "``open_text()``"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:402
msgid "``path()``"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:403
msgid "``read_binary()``"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:404
msgid "``read_text()``"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:406
msgid ""
"Use ``files()`` instead.  Refer to `importlib-resources: Migrating from "
"Legacy <https://importlib-resources.readthedocs.io/en/latest/using."
"html#migrating-from-legacy>`_ for migration advice."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:410
msgid ""
":func:`locale.getdefaultlocale`: use :func:`locale.setlocale()`, :func:"
"`locale.getencoding()` and :func:`locale.getlocale()` instead (:gh:`90817`)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:414
msgid ""
":mod:`mailbox`: Use of StringIO input and text mode is deprecated, use "
"BytesIO and binary mode instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:417
msgid ""
":mod:`os`: Calling :func:`os.register_at_fork` in multi-threaded process."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:419
msgid ""
":class:`!pydoc.ErrorDuringImport`: A tuple value for *exc_info* parameter is "
"deprecated, use an exception instance."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:422
msgid ""
":mod:`re`: More strict rules are now applied for numerical group references "
"and group names in regular expressions.  Only sequence of ASCII digits is "
"now accepted as a numerical reference.  The group name in bytes patterns and "
"replacement strings can now only contain ASCII letters and digits and "
"underscore. (Contributed by Serhiy Storchaka in :gh:`91760`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:429
msgid ":mod:`ssl` options and protocols:"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:431
msgid ":class:`ssl.SSLContext` without protocol argument is deprecated."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:432
msgid ""
":class:`ssl.SSLContext`: :meth:`~ssl.SSLContext.set_npn_protocols` and :meth:"
"`!~ssl.SSLContext.selected_npn_protocol` are deprecated: use ALPN instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:435
msgid "``ssl.OP_NO_SSL*`` options"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:436
msgid "``ssl.OP_NO_TLS*`` options"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:437
msgid "``ssl.PROTOCOL_SSLv3``"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:438
msgid "``ssl.PROTOCOL_TLS``"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:439
msgid "``ssl.PROTOCOL_TLSv1``"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:440
msgid "``ssl.PROTOCOL_TLSv1_1``"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:441
msgid "``ssl.PROTOCOL_TLSv1_2``"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:442
msgid "``ssl.TLSVersion.SSLv3``"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:443
msgid "``ssl.TLSVersion.TLSv1``"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:444
msgid "``ssl.TLSVersion.TLSv1_1``"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:446
msgid ""
":mod:`!sre_compile`, :mod:`!sre_constants` and :mod:`!sre_parse` modules."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:448
msgid "``types.CodeType.co_lnotab``: use the ``co_lines`` attribute instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:450
msgid ":class:`typing.Text` (:gh:`92332`)."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:452
msgid ""
":func:`sysconfig.is_python_build` *check_home* parameter is deprecated and "
"ignored."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:455
msgid ":mod:`threading` methods:"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:457
msgid ""
":meth:`!threading.Condition.notifyAll`: use :meth:`~threading.Condition."
"notify_all`."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:458
msgid ":meth:`!threading.Event.isSet`: use :meth:`~threading.Event.is_set`."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:459
msgid ""
":meth:`!threading.Thread.isDaemon`, :meth:`threading.Thread.setDaemon`: use :"
"attr:`threading.Thread.daemon` attribute."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:461
msgid ""
":meth:`!threading.Thread.getName`, :meth:`threading.Thread.setName`: use :"
"attr:`threading.Thread.name` attribute."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:463
msgid ":meth:`!threading.currentThread`: use :meth:`threading.current_thread`."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:464
msgid ":meth:`!threading.activeCount`: use :meth:`threading.active_count`."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:466
msgid ""
":class:`unittest.IsolatedAsyncioTestCase`: it is deprecated to return a "
"value that is not None from a test case."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:469
msgid ""
":mod:`urllib.request`: :class:`~urllib.request.URLopener` and :class:"
"`~urllib.request.FancyURLopener` style of invoking requests is deprecated. "
"Use newer :func:`~urllib.request.urlopen` functions and methods."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:473
msgid ":func:`!urllib.parse.to_bytes`."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:475
msgid ""
":mod:`urllib.parse` deprecated functions: :func:`~urllib.parse.urlparse` "
"instead"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:477
msgid "``splitattr()``"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:478
msgid "``splithost()``"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:479
msgid "``splitnport()``"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:480
msgid "``splitpasswd()``"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:481
msgid "``splitport()``"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:482
msgid "``splitquery()``"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:483
msgid "``splittag()``"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:484
msgid "``splittype()``"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:485
msgid "``splituser()``"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:486
msgid "``splitvalue()``"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:488
msgid ""
":mod:`wsgiref`: ``SimpleHandler.stdout.write()`` should not do partial "
"writes."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:491
msgid ""
":meth:`zipimport.zipimporter.load_module` is deprecated: use :meth:"
"`~zipimport.zipimporter.exec_module` instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:496 ../Doc/whatsnew/3.13.rst:838
msgid "Removed"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:498
msgid ""
":pep:`594`: Remove the :mod:`!telnetlib` module, deprecated in Python 3.11: "
"use the projects `telnetlib3 <https://pypi.org/project/telnetlib3/>`_ or "
"`Exscript <https://pypi.org/project/Exscript/>`_ instead. (Contributed by "
"Victor Stinner in :gh:`104773`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:503
msgid ""
"Remove the ``2to3`` program and the :mod:`!lib2to3` module, deprecated in "
"Python 3.11. (Contributed by Victor Stinner in :gh:`104780`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:507
msgid ""
"Namespaces ``typing.io`` and ``typing.re``, deprecated in Python 3.8, are "
"now removed. The items in those namespaces can be imported directly from :"
"mod:`typing`. (Contributed by Sebastian Rittau in :gh:`92871`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:511
msgid ""
"Remove the untested and undocumented :mod:`webbrowser` :class:`!MacOSX` "
"class, deprecated in Python 3.11. Use the :class:`!MacOSXOSAScript` class "
"(introduced in Python 3.2) instead. (Contributed by Hugo van Kemenade in :gh:"
"`104804`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:516
msgid ""
"Remove support for using :class:`pathlib.Path` objects as context managers. "
"This functionality was deprecated and made a no-op in Python 3.9."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:519
msgid ""
"Remove the undocumented :class:`!configparser.LegacyInterpolation` class, "
"deprecated in the docstring since Python 3.2, and with a deprecation warning "
"since Python 3.11. (Contributed by Hugo van Kemenade in :gh:`104886`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:524
msgid ""
"Remove the :meth:`!turtle.RawTurtle.settiltangle` method, deprecated in docs "
"since Python 3.1 and with a deprecation warning since Python 3.11. "
"(Contributed by Hugo van Kemenade in :gh:`104876`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:529
msgid ""
"Removed the following :mod:`unittest` functions, deprecated in Python 3.11:"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:531
msgid ":func:`!unittest.findTestCases`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:532
msgid ":func:`!unittest.makeSuite`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:533
msgid ":func:`!unittest.getTestCaseNames`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:535
msgid "Use :class:`~unittest.TestLoader` methods instead:"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:537
msgid ":meth:`unittest.TestLoader.loadTestsFromModule`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:538
msgid ":meth:`unittest.TestLoader.loadTestsFromTestCase`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:539
msgid ":meth:`unittest.TestLoader.getTestCaseNames`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:541
msgid "(Contributed by Hugo van Kemenade in :gh:`104835`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:543
msgid ""
":pep:`594`: Remove the :mod:`!cgi` and :mod:`!cgitb` modules, deprecated in "
"Python 3.11."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:546
msgid ""
"``cgi.FieldStorage`` can typically be replaced with :func:`urllib.parse."
"parse_qsl` for ``GET`` and ``HEAD`` requests, and the :mod:`email.message` "
"module or `multipart <https://pypi.org/project/multipart/>`__ PyPI project "
"for ``POST`` and ``PUT``."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:552
msgid ""
"``cgi.parse()`` can be replaced by calling :func:`urllib.parse.parse_qs` "
"directly on the desired query string, except for ``multipart/form-data`` "
"input, which can be handled as described for ``cgi.parse_multipart()``."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:556
msgid ""
"``cgi.parse_multipart()`` can be replaced with the functionality in the :mod:"
"`email` package (e.g. :class:`email.message.EmailMessage` and :class:`email."
"message.Message`) which implements the same MIME RFCs, or with the "
"`multipart <https://pypi.org/project/multipart/>`__ PyPI project."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:561
msgid ""
"``cgi.parse_header()`` can be replaced with the functionality in the :mod:"
"`email` package, which implements the same MIME RFCs. For example, with :"
"class:`email.message.EmailMessage`::"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:570 ../Doc/whatsnew/3.13.rst:626
msgid "(Contributed by Victor Stinner in :gh:`104773`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:572
msgid ""
":pep:`594`: Remove the :mod:`!sndhdr` module, deprecated in Python 3.11: use "
"the projects `filetype <https://pypi.org/project/filetype/>`_, `puremagic "
"<https://pypi.org/project/puremagic/>`_, or `python-magic <https://pypi.org/"
"project/python-magic/>`_ instead. (Contributed by Victor Stinner in :gh:"
"`104773`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:578
msgid ""
":pep:`594`: Remove the :mod:`!pipes` module, deprecated in Python 3.11: use "
"the :mod:`subprocess` module instead. (Contributed by Victor Stinner in :gh:"
"`104773`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:582
msgid ""
":pep:`594`: Remove the :mod:`!ossaudiodev` module, deprecated in Python "
"3.11: use the `pygame project <https://www.pygame.org/>`_ for audio "
"playback. (Contributed by Victor Stinner in :gh:`104780`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:586
msgid ""
":pep:`594`: Remove the :mod:`!sunau` module, deprecated in Python 3.11. "
"(Contributed by Victor Stinner in :gh:`104773`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:589
msgid ""
":pep:`594`: Remove the :mod:`!mailcap` module, deprecated in Python 3.11. "
"The :mod:`mimetypes` module provides an alternative. (Contributed by Victor "
"Stinner in :gh:`104773`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:593
msgid ""
":pep:`594`: Remove the :mod:`!spwd` module, deprecated in Python 3.11: the "
"`python-pam project <https://pypi.org/project/python-pam/>`_ can be used "
"instead. (Contributed by Victor Stinner in :gh:`104773`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:598
msgid ""
":pep:`594`: Remove the :mod:`!nntplib` module, deprecated in Python 3.11: "
"the `PyPI nntplib project <https://pypi.org/project/nntplib/>`_ can be used "
"instead. (Contributed by Victor Stinner in :gh:`104773`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:603
msgid ""
":pep:`594`: Remove the :mod:`!nis` module, deprecated in Python 3.11. "
"(Contributed by Victor Stinner in :gh:`104773`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:606
msgid ""
":pep:`594`: Remove the :mod:`!xdrlib` module, deprecated in Python 3.11. "
"(Contributed by Victor Stinner in :gh:`104773`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:609
msgid ""
":pep:`594`: Remove the :mod:`!msilib` module, deprecated in Python 3.11. "
"(Contributed by Zachary Ware in :gh:`104773`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:612
msgid ""
":pep:`594`: Remove the :mod:`!crypt` module and its private :mod:`!_crypt` "
"extension, deprecated in Python 3.11. The :mod:`hashlib` module is a "
"potential replacement for certain use cases. Otherwise, the following PyPI "
"projects can be used:"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:617
msgid ""
"`bcrypt <https://pypi.org/project/bcrypt/>`_: Modern password hashing for "
"your software and your servers."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:619
msgid ""
"`passlib <https://pypi.org/project/passlib/>`_: Comprehensive password "
"hashing framework supporting over 30 schemes."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:621
msgid ""
"`argon2-cffi <https://pypi.org/project/argon2-cffi/>`_: The secure Argon2 "
"password hashing algorithm."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:623
msgid ""
"`legacycrypt <https://pypi.org/project/legacycrypt/>`_: Wrapper to the POSIX "
"crypt library call and associated functionality."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:628
msgid ""
":pep:`594`: Remove the :mod:`!uu` module, deprecated in Python 3.11: the :"
"mod:`base64` module is a modern alternative. (Contributed by Victor Stinner "
"in :gh:`104773`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:632
msgid ""
":pep:`594`: Remove the :mod:`!aifc` module, deprecated in Python 3.11. "
"(Contributed by Victor Stinner in :gh:`104773`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:635
msgid ""
":pep:`594`: Remove the :mod:`!audioop` module, deprecated in Python 3.11. "
"(Contributed by Victor Stinner in :gh:`104773`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:638
msgid ""
":pep:`594`: Remove the :mod:`!chunk` module, deprecated in Python 3.11. "
"(Contributed by Victor Stinner in :gh:`104773`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:641
msgid ""
"Remove support for the keyword-argument method of creating :class:`typing."
"TypedDict` types, deprecated in Python 3.11. (Contributed by Tomas Roun in :"
"gh:`104786`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:645
msgid ""
":pep:`594`: Remove the :mod:`!imghdr` module, deprecated in Python 3.11: use "
"the projects `filetype <https://pypi.org/project/filetype/>`_, `puremagic "
"<https://pypi.org/project/puremagic/>`_, or `python-magic <https://pypi.org/"
"project/python-magic/>`_ instead. (Contributed by Victor Stinner in :gh:"
"`104773`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:652
msgid ""
"Remove the untested and undocumented :meth:`!unittest.TestProgram.usageExit` "
"method, deprecated in Python 3.11. (Contributed by Hugo van Kemenade in :gh:"
"`104992`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:656
msgid ""
"Remove the :mod:`!tkinter.tix` module, deprecated in Python 3.6.  The third-"
"party Tix library which the module wrapped is unmaintained. (Contributed by "
"Zachary Ware in :gh:`75552`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:660
msgid ""
"Remove the old trashcan macros ``Py_TRASHCAN_SAFE_BEGIN`` and "
"``Py_TRASHCAN_SAFE_END``.  They should be replaced by the new macros "
"``Py_TRASHCAN_BEGIN`` and ``Py_TRASHCAN_END``.  The new macros were added in "
"Python 3.8 and the old macros were deprecated in Python 3.11. (Contributed "
"by Irit Katriel in :gh:`105111`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:666
msgid ""
"Remove ``locale.resetlocale()`` function deprecated in Python 3.11: use "
"``locale.setlocale(locale.LC_ALL, \"\")`` instead. (Contributed by Victor "
"Stinner in :gh:`104783`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:670
msgid ""
":mod:`logging`: Remove undocumented and untested ``Logger.warn()`` and "
"``LoggerAdapter.warn()`` methods and ``logging.warn()`` function. Deprecated "
"since Python 3.3, they were aliases to the :meth:`logging.Logger.warning` "
"method, :meth:`!logging.LoggerAdapter.warning` method and :func:`logging."
"warning` function. (Contributed by Victor Stinner in :gh:`105376`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:677
msgid ""
"Remove *cafile*, *capath* and *cadefault* parameters of the :func:`urllib."
"request.urlopen` function, deprecated in Python 3.6: use the *context* "
"parameter instead. Please use :meth:`ssl.SSLContext.load_cert_chain` "
"instead, or let :func:`ssl.create_default_context` select the system's "
"trusted CA certificates for you. (Contributed by Victor Stinner in :gh:"
"`105382`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:685
msgid ""
"Remove deprecated ``webbrowser.MacOSXOSAScript._name`` attribute. Use :attr:"
"`webbrowser.MacOSXOSAScript.name <webbrowser.controller.name>` attribute "
"instead. (Contributed by Nikita Sobolev in :gh:`105546`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:690
msgid ""
"Remove undocumented, never working, and deprecated ``re.template`` function "
"and ``re.TEMPLATE`` flag (and ``re.T`` alias). (Contributed by Serhiy "
"Storchaka and Nikita Sobolev in :gh:`105687`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:696 ../Doc/whatsnew/3.13.rst:799
msgid "Porting to Python 3.13"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:698
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:701
msgid ""
"The old trashcan macros ``Py_TRASHCAN_SAFE_BEGIN`` and "
"``Py_TRASHCAN_SAFE_END`` were removed. They should be replaced by the new "
"macros ``Py_TRASHCAN_BEGIN`` and ``Py_TRASHCAN_END``."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:705
msgid "A tp_dealloc function that has the old macros, such as::"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:716
msgid "should migrate to the new macros as follows::"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:727
msgid ""
"Note that ``Py_TRASHCAN_BEGIN`` has a second argument which should be the "
"deallocation function it is in."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:732
msgid "Build Changes"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:734
msgid ""
"Autoconf 2.71 and aclocal 1.16.4 is now required to regenerate :file:`!"
"configure`. (Contributed by Christian Heimes in :gh:`89886`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:738
msgid ""
"SQLite 3.15.2 or newer is required to build the :mod:`sqlite3` extension "
"module. (Contributed by Erlend Aasland in :gh:`105875`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:743
msgid "C API Changes"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:748
msgid ""
"You no longer have to define the ``PY_SSIZE_T_CLEAN`` macro before "
"including :file:`Python.h` when using ``#`` formats in :ref:`format codes "
"<arg-parsing-string-and-buffers>`. APIs accepting the format codes always "
"use ``Py_ssize_t`` for ``#`` formats. (Contributed by Inada Naoki in :gh:"
"`104922`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:754
msgid ""
"Add :c:func:`PyImport_AddModuleRef`: similar to :c:func:"
"`PyImport_AddModule`, but return a :term:`strong reference` instead of a :"
"term:`borrowed reference`. (Contributed by Victor Stinner in :gh:`105922`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:759
msgid ""
"Add :c:func:`PyWeakref_GetRef` function: similar to :c:func:"
"`PyWeakref_GetObject` but returns a :term:`strong reference`, or ``NULL`` if "
"the referent is no longer live. (Contributed by Victor Stinner in :gh:"
"`105927`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:764
msgid ""
"Add :c:func:`PyObject_GetOptionalAttr` and :c:func:"
"`PyObject_GetOptionalAttrString`, variants of :c:func:`PyObject_GetAttr` "
"and :c:func:`PyObject_GetAttrString` which don't raise :exc:`AttributeError` "
"if the attribute is not found. These variants are more convenient and faster "
"if the missing attribute should not be treated as a failure. (Contributed by "
"Serhiy Storchaka in :gh:`106521`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:772
msgid ""
"Add :c:func:`PyMapping_GetOptionalItem` and :c:func:"
"`PyMapping_GetOptionalItemString`: variants of :c:func:`PyObject_GetItem` "
"and :c:func:`PyMapping_GetItemString` which don't raise :exc:`KeyError` if "
"the key is not found. These variants are more convenient and faster if the "
"missing key should not be treated as a failure. (Contributed by Serhiy "
"Storchaka in :gh:`106307`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:780
msgid ""
"If Python is built in :ref:`debug mode <debug-build>` or :option:`with "
"assertions <--with-assertions>`, :c:func:`PyTuple_SET_ITEM` and :c:func:"
"`PyList_SET_ITEM` now check the index argument with an assertion. If the "
"assertion fails, make sure that the size is set before. (Contributed by "
"Victor Stinner in :gh:`106168`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:786
msgid ""
"Add :c:func:`PyModule_Add` function: similar to :c:func:"
"`PyModule_AddObjectRef` and :c:func:`PyModule_AddObject` but always steals a "
"reference to the value. (Contributed by Serhiy Storchaka in :gh:`86493`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:791
msgid ""
"Added :c:func:`PyDict_GetItemRef` and :c:func:`PyDict_GetItemStringRef` "
"functions: similar to :c:func:`PyDict_GetItemWithError` but returning a :"
"term:`strong reference` instead of a :term:`borrowed reference`. Moreover, "
"these functions return -1 on error and so checking ``PyErr_Occurred()`` is "
"not needed. (Contributed by Victor Stinner in :gh:`106004`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:804
msgid ""
"Deprecate the old ``Py_UNICODE`` and ``PY_UNICODE_TYPE`` types: use directly "
"the :c:type:`wchar_t` type instead. Since Python 3.3, ``Py_UNICODE`` and "
"``PY_UNICODE_TYPE`` are just aliases to :c:type:`wchar_t`. (Contributed by "
"Victor Stinner in :gh:`105156`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:809
msgid "Deprecate old Python initialization functions:"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:811 ../Doc/whatsnew/3.13.rst:1020
msgid ""
":c:func:`PySys_ResetWarnOptions`: clear :data:`sys.warnoptions` and :data:`!"
"warnings.filters` instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:813 ../Doc/whatsnew/3.13.rst:1022
msgid ":c:func:`Py_GetExecPrefix`: get :data:`sys.exec_prefix` instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:814 ../Doc/whatsnew/3.13.rst:1023
msgid ":c:func:`Py_GetPath`: get :data:`sys.path` instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:815 ../Doc/whatsnew/3.13.rst:1024
msgid ":c:func:`Py_GetPrefix`: get :data:`sys.prefix` instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:816 ../Doc/whatsnew/3.13.rst:1025
msgid ":c:func:`Py_GetProgramFullPath`: get :data:`sys.executable` instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:817 ../Doc/whatsnew/3.13.rst:1026
msgid ":c:func:`Py_GetProgramName`: get :data:`sys.executable` instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:818 ../Doc/whatsnew/3.13.rst:1027
msgid ""
":c:func:`Py_GetPythonHome`: get :c:member:`PyConfig.home` or :envvar:"
"`PYTHONHOME` environment variable instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:821
msgid ""
"Functions scheduled for removal in Python 3.15. (Contributed by Victor "
"Stinner in :gh:`105145`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:824
msgid ""
"Deprecate the :c:func:`PyImport_ImportModuleNoBlock` function which is just "
"an alias to :c:func:`PyImport_ImportModule` since Python 3.3. Scheduled for "
"removal in Python 3.15. (Contributed by Victor Stinner in :gh:`105396`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:829
msgid ""
"Deprecate the :c:func:`PyWeakref_GetObject` and :c:func:"
"`PyWeakref_GET_OBJECT` functions, which return a :term:`borrowed reference`: "
"use the new :c:func:`PyWeakref_GetRef` function instead, it returns a :term:"
"`strong reference`. The `pythoncapi-compat project <https://github.com/"
"python/pythoncapi-compat/>`__ can be used to get :c:func:`PyWeakref_GetRef` "
"on Python 3.12 and older. (Contributed by Victor Stinner in :gh:`105927`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:840
msgid ""
"Remove many APIs (functions, macros, variables) with names prefixed by "
"``_Py`` or ``_PY`` (considered as private API). If your project is affected "
"by one of these removals and you consider that the removed API should remain "
"available, please open a new issue to request a public C API and add ``cc "
"@vstinner`` to the issue to notify Victor Stinner. (Contributed by Victor "
"Stinner in :gh:`106320`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:847
msgid "Remove functions deprecated in Python 3.9."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:849
msgid ""
"``PyEval_CallObject()``, ``PyEval_CallObjectWithKeywords()``: use :c:func:"
"`PyObject_CallNoArgs` or :c:func:`PyObject_Call` instead. Warning: :c:func:"
"`PyObject_Call` positional arguments must be a :class:`tuple` and must not "
"be *NULL*, keyword arguments must be a :class:`dict` or *NULL*, whereas "
"removed functions checked arguments type and accepted *NULL* positional and "
"keyword arguments. To replace ``PyEval_CallObjectWithKeywords(func, NULL, "
"kwargs)`` with :c:func:`PyObject_Call`, pass an empty tuple as positional "
"arguments using :c:func:`PyTuple_New(0) <PyTuple_New>`."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:858
msgid "``PyEval_CallFunction()``: use :c:func:`PyObject_CallFunction` instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:859
msgid "``PyEval_CallMethod()``: use :c:func:`PyObject_CallMethod` instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:860
msgid "``PyCFunction_Call()``: use :c:func:`PyObject_Call` instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:862
msgid "(Contributed by Victor Stinner in :gh:`105107`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:864
msgid ""
"Remove old buffer protocols deprecated in Python 3.0. Use :ref:"
"`bufferobjects` instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:866
msgid ""
":c:func:`!PyObject_CheckReadBuffer`: Use :c:func:`PyObject_CheckBuffer` to "
"test if the object supports the buffer protocol. Note that :c:func:"
"`PyObject_CheckBuffer` doesn't guarantee that :c:func:`PyObject_GetBuffer` "
"will succeed. To test if the object is actually readable, see the next "
"example of :c:func:`PyObject_GetBuffer`."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:873
msgid ""
":c:func:`!PyObject_AsCharBuffer`, :c:func:`!PyObject_AsReadBuffer`: :c:func:"
"`PyObject_GetBuffer` and :c:func:`PyBuffer_Release` instead:"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:886
msgid ""
":c:func:`!PyObject_AsWriteBuffer`: Use :c:func:`PyObject_GetBuffer` and :c:"
"func:`PyBuffer_Release` instead:"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:898
msgid "(Contributed by Inada Naoki in :gh:`85275`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:900
msgid ""
"Remove the following old functions to configure the Python initialization, "
"deprecated in Python 3.11:"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:903
msgid ""
"``PySys_AddWarnOptionUnicode()``: use :c:member:`PyConfig.warnoptions` "
"instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:904
msgid ""
"``PySys_AddWarnOption()``: use :c:member:`PyConfig.warnoptions` instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:905
msgid "``PySys_AddXOption()``: use :c:member:`PyConfig.xoptions` instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:906
msgid "``PySys_HasWarnOptions()``: use :c:member:`PyConfig.xoptions` instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:907
msgid "``PySys_SetArgvEx()``: set :c:member:`PyConfig.argv` instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:908
msgid "``PySys_SetArgv()``: set :c:member:`PyConfig.argv` instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:909
msgid ""
"``PySys_SetPath()``: set :c:member:`PyConfig.module_search_paths` instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:910
msgid "``Py_SetPath()``: set :c:member:`PyConfig.module_search_paths` instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:911
msgid "``Py_SetProgramName()``: set :c:member:`PyConfig.program_name` instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:912
msgid "``Py_SetPythonHome()``: set :c:member:`PyConfig.home` instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:913
msgid ""
"``Py_SetStandardStreamEncoding()``: set :c:member:`PyConfig.stdio_encoding` "
"instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:914
msgid ""
"``_Py_SetProgramFullPath()``: set :c:member:`PyConfig.executable` instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:916
msgid ""
"Use the new :c:type:`PyConfig` API of the :ref:`Python Initialization "
"Configuration <init-config>` instead (:pep:`587`), added to Python 3.8. "
"(Contributed by Victor Stinner in :gh:`105145`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:920
msgid ""
"Remove ``PyEval_InitThreads()`` and ``PyEval_ThreadsInitialized()`` "
"functions, deprecated in Python 3.9. Since Python 3.7, ``Py_Initialize()`` "
"always creates the GIL: calling ``PyEval_InitThreads()`` did nothing and "
"``PyEval_ThreadsInitialized()`` always returned non-zero. (Contributed by "
"Victor Stinner in :gh:`105182`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:926
msgid ""
"Remove ``PyEval_AcquireLock()`` and ``PyEval_ReleaseLock()`` functions, "
"deprecated in Python 3.2. They didn't update the current thread state. They "
"can be replaced with:"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:930
msgid ":c:func:`PyEval_SaveThread` and :c:func:`PyEval_RestoreThread`;"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:931
msgid ""
"low-level :c:func:`PyEval_AcquireThread` and :c:func:`PyEval_RestoreThread`;"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:932
msgid "or :c:func:`PyGILState_Ensure` and :c:func:`PyGILState_Release`."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:934
msgid "(Contributed by Victor Stinner in :gh:`105182`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:936
msgid ""
"Remove the old private, undocumented and untested ``_PyGC_FINALIZED()`` "
"macro which was kept for backward compatibility with Python 3.8 and older: "
"use :c:func:`PyObject_GC_IsFinalized()` instead. The `pythoncapi-compat "
"project <https://github.com/python/pythoncapi-compat/>`__ can be used to get "
"this function on Python 3.8 and older. (Contributed by Victor Stinner in :gh:"
"`105268`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:943
msgid ""
"Remove the old aliases to functions calling functions which were kept for "
"backward compatibility with Python 3.8 provisional API:"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:946
msgid "``_PyObject_CallMethodNoArgs()``: use ``PyObject_CallMethodNoArgs()``"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:947
msgid "``_PyObject_CallMethodOneArg()``: use ``PyObject_CallMethodOneArg()``"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:948
msgid "``_PyObject_CallOneArg()``: use ``PyObject_CallOneArg()``"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:949
msgid "``_PyObject_FastCallDict()``: use ``PyObject_VectorcallDict()``"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:950
msgid "``_PyObject_Vectorcall()``: use ``PyObject_Vectorcall()``"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:951
msgid "``_PyObject_VectorcallMethod()``: use ``PyObject_VectorcallMethod()``"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:952
msgid "``_PyVectorcall_Function()``: use ``PyVectorcall_Function()``"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:954
msgid ""
"Just remove the underscore prefix to update your code. (Contributed by "
"Victor Stinner in :gh:`106084`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:957
msgid ""
"Remove private ``_PyObject_FastCall()`` function: use "
"``PyObject_Vectorcall()`` which is available since Python 3.8 (:pep:`590`). "
"(Contributed by Victor Stinner in :gh:`106023`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:962
msgid ""
"Remove ``cpython/pytime.h`` header file: it only contained private "
"functions. (Contributed by Victor Stinner in :gh:`106316`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:965
msgid ""
"Remove ``_PyInterpreterState_Get()`` alias to :c:func:"
"`PyInterpreterState_Get()` which was kept for backward compatibility with "
"Python 3.8. The `pythoncapi-compat project <https://github.com/python/"
"pythoncapi-compat/>`__ can be used to get :c:func:`PyInterpreterState_Get()` "
"on Python 3.8 and older. (Contributed by Victor Stinner in :gh:`106320`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:972
msgid ""
"The :c:func:`PyModule_AddObject` function is now :term:`soft deprecated`: :c:"
"func:`PyModule_Add` or :c:func:`PyModule_AddObjectRef` functions should be "
"used instead. (Contributed by Serhiy Storchaka in :gh:`86493`.)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:980
msgid ""
"Creating immutable types (:c:macro:`Py_TPFLAGS_IMMUTABLETYPE`) with mutable "
"bases using the C API."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:982
msgid "Global configuration variables:"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:984
msgid ":c:var:`Py_DebugFlag`: use :c:member:`PyConfig.parser_debug`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:985
msgid ":c:var:`Py_VerboseFlag`: use :c:member:`PyConfig.verbose`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:986
msgid ":c:var:`Py_QuietFlag`: use :c:member:`PyConfig.quiet`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:987
msgid ":c:var:`Py_InteractiveFlag`: use :c:member:`PyConfig.interactive`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:988
msgid ":c:var:`Py_InspectFlag`: use :c:member:`PyConfig.inspect`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:989
msgid ":c:var:`Py_OptimizeFlag`: use :c:member:`PyConfig.optimization_level`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:990
msgid ":c:var:`Py_NoSiteFlag`: use :c:member:`PyConfig.site_import`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:991
msgid ":c:var:`Py_BytesWarningFlag`: use :c:member:`PyConfig.bytes_warning`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:992
msgid ":c:var:`Py_FrozenFlag`: use :c:member:`PyConfig.pathconfig_warnings`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:993
msgid ""
":c:var:`Py_IgnoreEnvironmentFlag`: use :c:member:`PyConfig.use_environment`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:994
msgid ""
":c:var:`Py_DontWriteBytecodeFlag`: use :c:member:`PyConfig.write_bytecode`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:995
msgid ""
":c:var:`Py_NoUserSiteDirectory`: use :c:member:`PyConfig.user_site_directory`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:996
msgid ""
":c:var:`Py_UnbufferedStdioFlag`: use :c:member:`PyConfig.buffered_stdio`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:997
msgid ""
":c:var:`Py_HashRandomizationFlag`: use :c:member:`PyConfig.use_hash_seed` "
"and :c:member:`PyConfig.hash_seed`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:999
msgid ":c:var:`Py_IsolatedFlag`: use :c:member:`PyConfig.isolated`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:1000
msgid ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: use :c:member:`PyPreConfig."
"legacy_windows_fs_encoding`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:1001
msgid ""
":c:var:`Py_LegacyWindowsStdioFlag`: use :c:member:`PyConfig."
"legacy_windows_stdio`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:1002
msgid ""
":c:var:`!Py_FileSystemDefaultEncoding`: use :c:member:`PyConfig."
"filesystem_encoding`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:1003
msgid ""
":c:var:`!Py_HasFileSystemDefaultEncoding`: use :c:member:`PyConfig."
"filesystem_encoding`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:1004
msgid ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: use :c:member:`PyConfig."
"filesystem_errors`"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:1005
msgid ""
":c:var:`!Py_UTF8Mode`: use :c:member:`PyPreConfig.utf8_mode` (see :c:func:"
"`Py_PreInitialize`)"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:1007
msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with :c:type:"
"`PyConfig` instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:1013
msgid ""
":c:func:`PyImport_ImportModuleNoBlock`: use :c:func:`PyImport_ImportModule`."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:1014
msgid ":c:func:`PyWeakref_GET_OBJECT`: use :c:func:`PyWeakref_GetRef` instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:1015
msgid ":c:func:`PyWeakref_GetObject`: use :c:func:`PyWeakref_GetRef` instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:1016
msgid ":c:type:`!Py_UNICODE_WIDE` type: use :c:type:`wchar_t` instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:1017
msgid ":c:type:`Py_UNICODE` type: use :c:type:`wchar_t` instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:1018
msgid "Python initialization functions:"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:1036
msgid ":c:macro:`Py_TPFLAGS_HAVE_FINALIZE`: no needed since Python 3.8."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:1037
msgid ":c:func:`PyErr_Fetch`: use :c:func:`PyErr_GetRaisedException`."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:1038
msgid ""
":c:func:`PyErr_NormalizeException`: use :c:func:`PyErr_GetRaisedException`."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:1039
msgid ":c:func:`PyErr_Restore`: use :c:func:`PyErr_SetRaisedException`."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:1040
msgid ""
":c:func:`PyModule_GetFilename`: use :c:func:`PyModule_GetFilenameObject`."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:1041
msgid ":c:func:`PyOS_AfterFork`: use :c:func:`PyOS_AfterFork_Child()`."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:1042
msgid ":c:func:`PySlice_GetIndicesEx`."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:1043
msgid ":c:func:`!PyUnicode_AsDecodedObject`."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:1044
msgid ":c:func:`!PyUnicode_AsDecodedUnicode`."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:1045
msgid ":c:func:`!PyUnicode_AsEncodedObject`."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:1046
msgid ":c:func:`!PyUnicode_AsEncodedUnicode`."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:1047
msgid ":c:func:`PyUnicode_READY`: not needed since Python 3.12."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:1048
msgid ":c:func:`!_PyErr_ChainExceptions`."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:1049
msgid ""
":c:member:`!PyBytesObject.ob_shash` member: call :c:func:`PyObject_Hash` "
"instead."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:1051
msgid ":c:member:`!PyDictObject.ma_version_tag` member."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:1052
msgid "TLS API:"
msgstr ""

#: ../Doc/whatsnew/3.13.rst:1054
msgid ":c:func:`PyThread_create_key`: use :c:func:`PyThread_tss_alloc`."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:1055
msgid ":c:func:`PyThread_delete_key`: use :c:func:`PyThread_tss_free`."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:1056
msgid ":c:func:`PyThread_set_key_value`: use :c:func:`PyThread_tss_set`."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:1057
msgid ":c:func:`PyThread_get_key_value`: use :c:func:`PyThread_tss_get`."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:1058
msgid ":c:func:`PyThread_delete_key_value`: use :c:func:`PyThread_tss_delete`."
msgstr ""

#: ../Doc/whatsnew/3.13.rst:1059
msgid ":c:func:`PyThread_ReInitTLS`: no longer needed."
msgstr ""
