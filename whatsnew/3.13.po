# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-29 22:40+0100\n"
"PO-Revision-Date: 2024-10-29 22:25+0100\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: whatsnew/3.13.rst:4
msgid "What's New In Python 3.13"
msgstr ""

#: whatsnew/3.13.rst:0
msgid "Editors"
msgstr ""

#: whatsnew/3.13.rst:6
msgid "Adam Turner and Thomas Wouters"
msgstr ""

#: whatsnew/3.13.rst:48
msgid ""
"This article explains the new features in Python 3.13, compared to 3.12. "
"Python 3.13 was released on October 7, 2024. For full details, see the :ref:"
"`changelog <changelog>`."
msgstr ""

#: whatsnew/3.13.rst:54
msgid ":pep:`719` -- Python 3.13 Release Schedule"
msgstr ""

#: whatsnew/3.13.rst:58
msgid "Summary -- Release Highlights"
msgstr ""

#: whatsnew/3.13.rst:63
msgid ""
"Python 3.13 is the latest stable release of the Python programming language, "
"with a mix of changes to the language, the implementation and the standard "
"library. The biggest changes include a new `interactive interpreter "
"<whatsnew313-better-interactive-interpreter_>`_, experimental support for "
"running in a `free-threaded mode <whatsnew313-free-threaded-cpython_>`_ (:"
"pep:`703`), and a `Just-In-Time compiler <whatsnew313-jit-compiler_>`_ (:pep:"
"`744`)."
msgstr ""

#: whatsnew/3.13.rst:72
msgid ""
"Error messages continue to improve, with tracebacks now highlighted in color "
"by default. The :func:`locals` builtin now has :ref:`defined semantics "
"<whatsnew313-locals-semantics>` for changing the returned mapping, and type "
"parameters now support default values."
msgstr ""

#: whatsnew/3.13.rst:77
msgid ""
"The library changes contain removal of deprecated APIs and modules, as well "
"as the usual improvements in user-friendliness and correctness. Several "
"legacy standard library modules have now `been removed <whatsnew313-"
"pep594_>`_ following their deprecation in Python 3.11 (:pep:`594`)."
msgstr ""

#: whatsnew/3.13.rst:82
msgid ""
"This article doesn't attempt to provide a complete specification of all new "
"features, but instead gives a convenient overview. For full details refer to "
"the documentation, such as the :ref:`Library Reference <library-index>` and :"
"ref:`Language Reference <reference-index>`. To understand the complete "
"implementation and design rationale for a change, refer to the PEP for a "
"particular new feature; but note that PEPs usually are not kept up-to-date "
"once a feature has been fully implemented. See `Porting to Python 3.13`_ for "
"guidance on upgrading from earlier versions of Python."
msgstr ""

#: whatsnew/3.13.rst:98
msgid "Interpreter improvements:"
msgstr "Améliorations de l'interpréteur :"

#: whatsnew/3.13.rst:100
msgid ""
"A greatly improved :ref:`interactive interpreter <whatsnew313-better-"
"interactive-interpreter>` and :ref:`improved error messages <whatsnew313-"
"improved-error-messages>`."
msgstr ""

#: whatsnew/3.13.rst:103
msgid ""
":pep:`667`: The :func:`locals` builtin now has :ref:`defined semantics "
"<whatsnew313-locals-semantics>` when mutating the returned mapping. Python "
"debuggers and similar tools may now more reliably update local variables in "
"optimized scopes even during concurrent code execution."
msgstr ""

#: whatsnew/3.13.rst:108
msgid ""
":pep:`703`: CPython 3.13 has experimental support for running with the :term:"
"`global interpreter lock` disabled. See :ref:`Free-threaded CPython "
"<whatsnew313-free-threaded-cpython>` for more details."
msgstr ""

#: whatsnew/3.13.rst:111
msgid ""
":pep:`744`: A basic :ref:`JIT compiler <whatsnew313-jit-compiler>` was "
"added. It is currently disabled by default (though we may turn it on later). "
"Performance improvements are modest -- we expect to improve this over the "
"next few releases."
msgstr ""

#: whatsnew/3.13.rst:115
msgid ""
"Color support in the new :ref:`interactive interpreter <whatsnew313-better-"
"interactive-interpreter>`, as well as in :ref:`tracebacks <whatsnew313-"
"improved-error-messages>` and :ref:`doctest <whatsnew313-doctest>` output. "
"This can be disabled through the :envvar:`PYTHON_COLORS` and |NO_COLOR|_ "
"environment variables."
msgstr ""

#: whatsnew/3.13.rst:122
msgid "Python data model improvements:"
msgstr ""

#: whatsnew/3.13.rst:124
msgid ""
":attr:`~type.__static_attributes__` stores the names of attributes accessed "
"through ``self.X`` in any function in a class body."
msgstr ""

#: whatsnew/3.13.rst:126
msgid ""
":attr:`~type.__firstlineno__` records the first line number of a class "
"definition."
msgstr ""

#: whatsnew/3.13.rst:129
msgid "Significant improvements in the standard library:"
msgstr ""

#: whatsnew/3.13.rst:131
msgid ""
"Add a new :exc:`PythonFinalizationError` exception, raised when an operation "
"is blocked during :term:`finalization <interpreter shutdown>`."
msgstr ""

#: whatsnew/3.13.rst:133
msgid ""
"The :mod:`argparse` module now supports deprecating command-line options, "
"positional arguments, and subcommands."
msgstr ""

#: whatsnew/3.13.rst:135
msgid ""
"The new functions :func:`base64.z85encode` and :func:`base64.z85decode` "
"support encoding and decoding `Z85 data`_."
msgstr ""

#: whatsnew/3.13.rst:137
msgid ""
"The :mod:`copy` module now has a :func:`copy.replace` function, with support "
"for many builtin types and any class defining the :func:`~object."
"__replace__` method."
msgstr ""

#: whatsnew/3.13.rst:140
msgid ""
"The new :mod:`dbm.sqlite3` module is now the default :mod:`dbm` backend."
msgstr ""

#: whatsnew/3.13.rst:141
msgid ""
"The :mod:`os` module has a :ref:`suite of new functions <os-timerfd>` for "
"working with Linux's timer notification file descriptors."
msgstr ""

#: whatsnew/3.13.rst:143
msgid ""
"The :mod:`random` module now has a :ref:`command-line interface <random-"
"cli>`."
msgstr ""

#: whatsnew/3.13.rst:145
msgid "Security improvements:"
msgstr ""

#: whatsnew/3.13.rst:147
msgid ""
":func:`ssl.create_default_context` sets :data:`ssl."
"VERIFY_X509_PARTIAL_CHAIN` and :data:`ssl.VERIFY_X509_STRICT` as default "
"flags."
msgstr ""

#: whatsnew/3.13.rst:150
msgid "C API improvements:"
msgstr ""

#: whatsnew/3.13.rst:152
msgid ""
"The :c:data:`Py_mod_gil` slot is now used to indicate that an extension "
"module supports running with the :term:`GIL` disabled."
msgstr ""

#: whatsnew/3.13.rst:154
msgid ""
"The :doc:`PyTime C API </c-api/time>` has been added, providing access to "
"system clocks."
msgstr ""

#: whatsnew/3.13.rst:156
msgid ""
":c:type:`PyMutex` is a new lightweight mutex that occupies a single byte."
msgstr ""

#: whatsnew/3.13.rst:157
msgid ""
"There is a new :ref:`suite of functions <c-api-monitoring>` for generating :"
"pep:`669` monitoring events in the C API."
msgstr ""

#: whatsnew/3.13.rst:160
msgid "New typing features:"
msgstr "Nouvelles fonctionnalités de typage :"

#: whatsnew/3.13.rst:162
msgid ""
":pep:`696`: Type parameters (:data:`typing.TypeVar`, :data:`typing."
"ParamSpec`, and :data:`typing.TypeVarTuple`) now support defaults."
msgstr ""

#: whatsnew/3.13.rst:164
msgid ""
":pep:`702`: The new :func:`warnings.deprecated` decorator adds support for "
"marking deprecations in the type system and at runtime."
msgstr ""

#: whatsnew/3.13.rst:166
msgid ""
":pep:`705`: :data:`typing.ReadOnly` can be used to mark an item of a :class:"
"`typing.TypedDict` as read-only for type checkers."
msgstr ""

#: whatsnew/3.13.rst:168
msgid ""
":pep:`742`: :data:`typing.TypeIs` provides more intuitive type narrowing "
"behavior, as an alternative to :data:`typing.TypeGuard`."
msgstr ""

#: whatsnew/3.13.rst:171
msgid "Platform support:"
msgstr ""

#: whatsnew/3.13.rst:173
msgid ""
":pep:`730`: Apple's iOS is now an :ref:`officially supported platform "
"<whatsnew313-platform-support>`, at :pep:`tier 3 <11#tier-3>`."
msgstr ""

#: whatsnew/3.13.rst:175
msgid ""
":pep:`738`: Android is now an :ref:`officially supported platform "
"<whatsnew313-platform-support>`, at :pep:`tier 3 <11#tier-3>`."
msgstr ""

#: whatsnew/3.13.rst:177
msgid ""
"``wasm32-wasi`` is now supported as a :pep:`tier 2 <11#tier-2>` platform."
msgstr ""

#: whatsnew/3.13.rst:178
msgid "``wasm32-emscripten`` is no longer an officially supported platform."
msgstr ""

#: whatsnew/3.13.rst:180
msgid "Important removals:"
msgstr ""

#: whatsnew/3.13.rst:182
msgid ""
":ref:`PEP 594 <whatsnew313-pep594>`: The remaining 19 \"dead batteries\" "
"(legacy stdlib modules) have been removed from the standard library: :mod:`!"
"aifc`, :mod:`!audioop`, :mod:`!cgi`, :mod:`!cgitb`, :mod:`!chunk`, :mod:`!"
"crypt`, :mod:`!imghdr`, :mod:`!mailcap`, :mod:`!msilib`, :mod:`!nis`, :mod:`!"
"nntplib`, :mod:`!ossaudiodev`, :mod:`!pipes`, :mod:`!sndhdr`, :mod:`!spwd`, :"
"mod:`!sunau`, :mod:`!telnetlib`, :mod:`!uu` and :mod:`!xdrlib`."
msgstr ""

#: whatsnew/3.13.rst:188
msgid ""
"Remove the :program:`2to3` tool and :mod:`!lib2to3` module (deprecated in "
"Python 3.11)."
msgstr ""

#: whatsnew/3.13.rst:190
msgid "Remove the :mod:`!tkinter.tix` module (deprecated in Python 3.6)."
msgstr ""

#: whatsnew/3.13.rst:191
msgid "Remove the :func:`!locale.resetlocale` function."
msgstr ""

#: whatsnew/3.13.rst:192
msgid "Remove the :mod:`!typing.io` and :mod:`!typing.re` namespaces."
msgstr ""

#: whatsnew/3.13.rst:193
msgid "Remove chained :class:`classmethod` descriptors."
msgstr ""

#: whatsnew/3.13.rst:195
msgid "Release schedule changes:"
msgstr ""

#: whatsnew/3.13.rst:197
msgid ""
":pep:`602` (\"Annual Release Cycle for Python\") has been updated to extend "
"the full support ('bugfix') period for new releases to two years. This "
"updated policy means that:"
msgstr ""

#: whatsnew/3.13.rst:201
msgid ""
"Python 3.9--3.12 have one and a half years of full support, followed by "
"three and a half years of security fixes."
msgstr ""

#: whatsnew/3.13.rst:203
msgid ""
"Python 3.13 and later have two years of full support, followed by three "
"years of security fixes."
msgstr ""

#: whatsnew/3.13.rst:1968
msgid "New Features"
msgstr "Nouvelles fonctionnalités"

#: whatsnew/3.13.rst:214
msgid "A better interactive interpreter"
msgstr ""

#: whatsnew/3.13.rst:216
msgid ""
"Python now uses a new :term:`interactive` shell by default, based on code "
"from the `PyPy project`_. When the user starts the :term:`REPL` from an "
"interactive terminal, the following new features are now supported:"
msgstr ""

#: whatsnew/3.13.rst:221
msgid "Multiline editing with history preservation."
msgstr ""

#: whatsnew/3.13.rst:222
msgid ""
"Direct support for REPL-specific commands like :kbd:`help`, :kbd:`exit`, "
"and :kbd:`quit`, without the need to call them as functions."
msgstr ""

#: whatsnew/3.13.rst:224
msgid ""
"Prompts and tracebacks with :ref:`color enabled by default <using-on-"
"controlling-color>`."
msgstr ""

#: whatsnew/3.13.rst:226
msgid ""
"Interactive help browsing using :kbd:`F1` with a separate command history."
msgstr ""

#: whatsnew/3.13.rst:228
msgid ""
"History browsing using :kbd:`F2` that skips output as well as the :term:"
"`>>>` and :term:`...` prompts."
msgstr ""

#: whatsnew/3.13.rst:230
msgid ""
"\"Paste mode\" with :kbd:`F3` that makes pasting larger blocks of code "
"easier (press :kbd:`F3` again to return to the regular prompt)."
msgstr ""

#: whatsnew/3.13.rst:233
msgid ""
"To disable the new interactive shell, set the :envvar:`PYTHON_BASIC_REPL` "
"environment variable. For more on interactive mode, see :ref:`tut-interac`."
msgstr ""

#: whatsnew/3.13.rst:237
msgid ""
"(Contributed by Pablo Galindo Salgado, Łukasz Langa, and Lysandros Nikolaou "
"in :gh:`111201` based on code from the PyPy project. Windows support "
"contributed by Dino Viehland and Anthony Shaw.)"
msgstr ""

#: whatsnew/3.13.rst:247
msgid "Improved error messages"
msgstr ""

#: whatsnew/3.13.rst:249
msgid ""
"The interpreter now uses color by default when displaying tracebacks in the "
"terminal. This feature :ref:`can be controlled <using-on-controlling-color>` "
"via the new :envvar:`PYTHON_COLORS` environment variable as well as the "
"canonical |NO_COLOR|_ and |FORCE_COLOR|_ environment variables. (Contributed "
"by Pablo Galindo Salgado in :gh:`112730`.)"
msgstr ""

#: whatsnew/3.13.rst:264
msgid ""
"A common mistake is to write a script with the same name as a standard "
"library module. When this results in errors, we now display a more helpful "
"error message:"
msgstr ""

#: whatsnew/3.13.rst:268
msgid ""
"$ python random.py\n"
"Traceback (most recent call last):\n"
"  File \"/home/me/random.py\", line 1, in <module>\n"
"    import random\n"
"  File \"/home/me/random.py\", line 3, in <module>\n"
"    print(random.randint(5))\n"
"          ^^^^^^^^^^^^^^\n"
"AttributeError: module 'random' has no attribute 'randint' (consider "
"renaming '/home/me/random.py' since it has the same name as the standard "
"library module named 'random' and prevents importing that standard library "
"module)"
msgstr ""

#: whatsnew/3.13.rst:279
msgid ""
"Similarly, if a script has the same name as a third-party module that it "
"attempts to import and this results in errors, we also display a more "
"helpful error message:"
msgstr ""

#: whatsnew/3.13.rst:283
msgid ""
"$ python numpy.py\n"
"Traceback (most recent call last):\n"
"  File \"/home/me/numpy.py\", line 1, in <module>\n"
"    import numpy as np\n"
"  File \"/home/me/numpy.py\", line 3, in <module>\n"
"    np.array([1, 2, 3])\n"
"    ^^^^^^^^\n"
"AttributeError: module 'numpy' has no attribute 'array' (consider renaming '/"
"home/me/numpy.py' if it has the same name as a library you intended to "
"import)"
msgstr ""

#: whatsnew/3.13.rst:294
msgid "(Contributed by Shantanu Jain in :gh:`95754`.)"
msgstr ""

#: whatsnew/3.13.rst:296
msgid ""
"The error message now tries to suggest the correct keyword argument when an "
"incorrect keyword argument is passed to a function."
msgstr ""

#: whatsnew/3.13.rst:299
msgid ""
">>> \"Better error messages!\".split(max_split=1)\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-0>\", line 1, in <module>\n"
"    \"Better error messages!\".split(max_split=1)\n"
"    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^\n"
"TypeError: split() got an unexpected keyword argument 'max_split'. Did you "
"mean 'maxsplit'?"
msgstr ""

#: whatsnew/3.13.rst:308
msgid ""
"(Contributed by Pablo Galindo Salgado and Shantanu Jain in :gh:`107944`.)"
msgstr ""

#: whatsnew/3.13.rst:314
msgid "Free-threaded CPython"
msgstr ""

#: whatsnew/3.13.rst:316
msgid ""
"CPython now has experimental support for running in a free-threaded mode, "
"with the :term:`global interpreter lock` (GIL) disabled. This is an "
"experimental feature and therefore is not enabled by default. The free-"
"threaded mode requires a different executable, usually called "
"``python3.13t`` or ``python3.13t.exe``. Pre-built binaries marked as *free-"
"threaded* can be installed as part of the official :ref:`Windows <install-"
"freethreaded-windows>` and :ref:`macOS <install-freethreaded-macos>` "
"installers, or CPython can be built from source with the :option:`--disable-"
"gil` option."
msgstr ""

#: whatsnew/3.13.rst:326
msgid ""
"Free-threaded execution allows for full utilization of the available "
"processing power by running threads in parallel on available CPU cores. "
"While not all software will benefit from this automatically, programs "
"designed with threading in mind will run faster on multi-core hardware. "
"**The free-threaded mode is experimental** and work is ongoing to improve "
"it: expect some bugs and a substantial single-threaded performance hit. Free-"
"threaded builds of CPython support optionally running with the GIL enabled "
"at runtime using the environment variable :envvar:`PYTHON_GIL` or the "
"command-line option :option:`-X gil=1`."
msgstr ""

#: whatsnew/3.13.rst:336
msgid ""
"To check if the current interpreter supports free-threading, :option:`python "
"-VV <-V>` and :attr:`sys.version` contain \"experimental free-threading "
"build\". The new :func:`!sys._is_gil_enabled` function can be used to check "
"whether the GIL is actually disabled in the running process."
msgstr ""

#: whatsnew/3.13.rst:341
msgid ""
"C-API extension modules need to be built specifically for the free-threaded "
"build. Extensions that support running with the :term:`GIL` disabled should "
"use the :c:data:`Py_mod_gil` slot. Extensions using single-phase init should "
"use :c:func:`PyUnstable_Module_SetGIL` to indicate whether they support "
"running with the GIL disabled. Importing C extensions that don't use these "
"mechanisms will cause the GIL to be enabled, unless the GIL was explicitly "
"disabled with the :envvar:`PYTHON_GIL` environment variable or the :option:`-"
"X gil=0` option. pip 24.1 or newer is required to install packages with C "
"extensions in the free-threaded build."
msgstr ""

#: whatsnew/3.13.rst:352
msgid ""
"This work was made possible thanks to many individuals and organizations, "
"including the large community of contributors to Python and third-party "
"projects to test and enable free-threading support. Notable contributors "
"include: Sam Gross, Ken Jin, Donghee Na, Itamar Oren, Matt Page, Brett "
"Simmers, Dino Viehland, Carl Meyer, Nathan Goldbaum, Ralf Gommers, Lysandros "
"Nikolaou, and many others. Many of these contributors are employed by Meta, "
"which has provided significant engineering resources to support this project."
msgstr ""

#: whatsnew/3.13.rst:364
msgid ""
":pep:`703` \"Making the Global Interpreter Lock Optional in CPython\" "
"contains rationale and information surrounding this work."
msgstr ""

#: whatsnew/3.13.rst:367
msgid ""
"`Porting Extension Modules to Support Free-Threading <https://py-free-"
"threading.github.io/porting/>`_: A community-maintained porting guide for "
"extension authors."
msgstr ""

#: whatsnew/3.13.rst:375
msgid "An experimental just-in-time (JIT) compiler"
msgstr ""

#: whatsnew/3.13.rst:377
msgid ""
"When CPython is configured and built using the :option:`!--enable-"
"experimental-jit` option, a just-in-time (JIT) compiler is added which may "
"speed up some Python programs. On Windows, use ``PCbuild/build.bat --"
"experimental-jit`` to enable the JIT or ``--experimental-jit-interpreter`` "
"to enable the Tier 2 interpreter. Build requirements and further supporting "
"information `are contained at`__ :file:`Tools/jit/README.md`."
msgstr ""

#: whatsnew/3.13.rst:387
msgid ""
"The :option:`!--enable-experimental-jit` option takes these (optional) "
"values, defaulting to ``yes`` if :option:`!--enable-experimental-jit` is "
"present without the optional value."
msgstr ""

#: whatsnew/3.13.rst:391
msgid "``no``: Disable the entire Tier 2 and JIT pipeline."
msgstr ""

#: whatsnew/3.13.rst:392
msgid ""
"``yes``: Enable the JIT. To disable the JIT at runtime, pass the environment "
"variable ``PYTHON_JIT=0``."
msgstr ""

#: whatsnew/3.13.rst:394
msgid ""
"``yes-off``: Build the JIT but disable it by default. To enable the JIT at "
"runtime, pass the environment variable ``PYTHON_JIT=1``."
msgstr ""

#: whatsnew/3.13.rst:396
msgid ""
"``interpreter``: Enable the Tier 2 interpreter but disable the JIT. The "
"interpreter can be disabled by running with ``PYTHON_JIT=0``."
msgstr ""

#: whatsnew/3.13.rst:399
msgid "The internal architecture is roughly as follows:"
msgstr ""

#: whatsnew/3.13.rst:401
msgid ""
"We start with specialized *Tier 1 bytecode*. See :ref:`What's new in 3.11 "
"<whatsnew311-pep659>` for details."
msgstr ""

#: whatsnew/3.13.rst:403
msgid ""
"When the Tier 1 bytecode gets hot enough, it gets translated to a new purely "
"internal intermediate representation (IR), called the *Tier 2 IR*, and "
"sometimes referred to as micro-ops (\"uops\")."
msgstr ""

#: whatsnew/3.13.rst:406
msgid ""
"The Tier 2 IR uses the same stack-based virtual machine as Tier 1, but the "
"instruction format is better suited to translation to machine code."
msgstr ""

#: whatsnew/3.13.rst:408
msgid ""
"We have several optimization passes for Tier 2 IR, which are applied before "
"it is interpreted or translated to machine code."
msgstr ""

#: whatsnew/3.13.rst:410
msgid ""
"There is a Tier 2 interpreter, but it is mostly intended for debugging the "
"earlier stages of the optimization pipeline. The Tier 2 interpreter can be "
"enabled by configuring Python with ``--enable-experimental-jit=interpreter``."
msgstr ""

#: whatsnew/3.13.rst:414
msgid ""
"When the JIT is enabled, the optimized Tier 2 IR is translated to machine "
"code, which is then executed."
msgstr ""

#: whatsnew/3.13.rst:416
msgid ""
"The machine code translation process uses a technique called *copy-and-"
"patch*. It has no runtime dependencies, but there is a new build-time "
"dependency on LLVM."
msgstr ""

#: whatsnew/3.13.rst:420
msgid ":pep:`744`"
msgstr ""

#: whatsnew/3.13.rst:422
msgid ""
"(JIT by Brandt Bucher, inspired by a paper by Haoran Xu and Fredrik "
"Kjolstad. Tier 2 IR by Mark Shannon and Guido van Rossum. Tier 2 optimizer "
"by Ken Jin.)"
msgstr ""

#: whatsnew/3.13.rst:430
msgid "Defined mutation semantics for :py:func:`locals`"
msgstr ""

#: whatsnew/3.13.rst:432
msgid ""
"Historically, the expected result of mutating the return value of :func:"
"`locals` has been left to individual Python implementations to define. "
"Starting from Python 3.13, :pep:`667` standardises the historical behavior "
"of CPython for most code execution scopes, but changes :term:`optimized "
"scopes <optimized scope>` (functions, generators, coroutines, "
"comprehensions, and generator expressions) to explicitly return independent "
"snapshots of the currently assigned local variables, including locally "
"referenced nonlocal variables captured in closures."
msgstr ""

#: whatsnew/3.13.rst:441
msgid ""
"This change to the semantics of :func:`locals` in optimized scopes also "
"affects the default behavior of code execution functions that implicitly "
"target :func:`!locals` if no explicit namespace is provided (such as :func:"
"`exec` and :func:`eval`). In previous versions, whether or not changes could "
"be accessed by calling :func:`!locals` after calling the code execution "
"function was implementation-dependent. In CPython specifically, such code "
"would typically appear to work as desired, but could sometimes fail in "
"optimized scopes based on other code (including debuggers and code execution "
"tracing tools) potentially resetting the shared snapshot in that scope. Now, "
"the code will always run against an independent snapshot of the local "
"variables in optimized scopes, and hence the changes will never be visible "
"in subsequent calls to :func:`!locals`. To access the changes made in these "
"cases, an explicit namespace reference must now be passed to the relevant "
"function. Alternatively, it may make sense to update affected code to use a "
"higher level code execution API that returns the resulting code execution "
"namespace (e.g. :func:`runpy.run_path` when executing Python files from "
"disk)."
msgstr ""

#: whatsnew/3.13.rst:460
msgid ""
"To ensure debuggers and similar tools can reliably update local variables in "
"scopes affected by this change, :attr:`FrameType.f_locals <frame.f_locals>` "
"now returns a write-through proxy to the frame's local and locally "
"referenced nonlocal variables in these scopes, rather than returning an "
"inconsistently updated shared ``dict`` instance with undefined runtime "
"semantics."
msgstr ""

#: whatsnew/3.13.rst:466
msgid ""
"See :pep:`667` for more details, including related C API changes and "
"deprecations. Porting notes are also provided below for the affected :ref:"
"`Python APIs <pep667-porting-notes-py>` and :ref:`C APIs <pep667-porting-"
"notes-c>`."
msgstr ""

#: whatsnew/3.13.rst:471
msgid ""
"(PEP and implementation contributed by Mark Shannon and Tian Gao in :gh:"
"`74929`. Documentation updates provided by Guido van Rossum and Alyssa "
"Coghlan.)"
msgstr ""

#: whatsnew/3.13.rst:479
msgid "Support for mobile platforms"
msgstr ""

#: whatsnew/3.13.rst:481
msgid ""
":pep:`730`: iOS is now a :pep:`11` supported platform, with the ``arm64-"
"apple-ios`` and ``arm64-apple-ios-simulator`` targets at tier 3 (iPhone and "
"iPad devices released after 2013 and the Xcode iOS simulator running on "
"Apple silicon hardware, respectively). ``x86_64-apple-ios-simulator`` (the "
"Xcode iOS simulator running on older ``x86_64`` hardware) is not a tier 3 "
"supported platform, but will have best-effort support. (PEP written and "
"implementation contributed by Russell Keith-Magee in :gh:`114099`.)"
msgstr ""

#: whatsnew/3.13.rst:491
msgid ""
":pep:`738`: Android is now a :pep:`11` supported platform, with the "
"``aarch64-linux-android`` and ``x86_64-linux-android`` targets at tier 3. "
"The 32-bit targets ``arm-linux-androideabi`` and ``i686-linux-android`` are "
"not tier 3 supported platforms, but will have best-effort support. (PEP "
"written and implementation contributed by Malcolm Smith in :gh:`116622`.)"
msgstr ""

#: whatsnew/3.13.rst:498
msgid ":pep:`730`, :pep:`738`"
msgstr ""

#: whatsnew/3.13.rst:502
msgid "Other Language Changes"
msgstr "Autres changements au langage"

#: whatsnew/3.13.rst:504
msgid ""
"The compiler now strips common leading whitespace from every line in a "
"docstring. This reduces the size of the :term:`bytecode cache <bytecode>` "
"(such as ``.pyc`` files), with reductions in file size of around 5%, for "
"example in :mod:`!sqlalchemy.orm.session` from SQLAlchemy 2.0. This change "
"affects tools that use docstrings, such as :mod:`doctest`."
msgstr ""

#: whatsnew/3.13.rst:511
msgid ""
">>> def spam():\n"
"...     \"\"\"\n"
"...         This is a docstring with\n"
"...           leading whitespace.\n"
"...\n"
"...         It even has multiple paragraphs!\n"
"...     \"\"\"\n"
"...\n"
">>> spam.__doc__\n"
"'\\nThis is a docstring with\\n  leading whitespace.\\n\\nIt even has "
"multiple paragraphs!\\n'"
msgstr ""

#: whatsnew/3.13.rst:524
msgid "(Contributed by Inada Naoki in :gh:`81283`.)"
msgstr ""

#: whatsnew/3.13.rst:526
msgid ""
":ref:`Annotation scopes <annotation-scopes>` within class scopes can now "
"contain lambdas and comprehensions. Comprehensions that are located within "
"class scopes are not inlined into their parent scope."
msgstr ""

#: whatsnew/3.13.rst:531
msgid ""
"class C[T]:\n"
"    type Alias = lambda: T"
msgstr ""

#: whatsnew/3.13.rst:536
msgid "(Contributed by Jelle Zijlstra in :gh:`109118` and :gh:`118160`.)"
msgstr ""

#: whatsnew/3.13.rst:538
msgid ""
":ref:`Future statements <future>` are no longer triggered by relative "
"imports of the :mod:`__future__` module, meaning that statements of the form "
"``from .__future__ import ...`` are now simply standard relative imports, "
"with no special features activated. (Contributed by Jeremiah Gabriel Pascual "
"in :gh:`118216`.)"
msgstr ""

#: whatsnew/3.13.rst:544
msgid ""
":keyword:`global` declarations are now permitted in :keyword:`except` blocks "
"when that global is used in the :keyword:`else` block. Previously this "
"raised an erroneous :exc:`SyntaxError`. (Contributed by Irit Katriel in :gh:"
"`111123`.)"
msgstr ""

#: whatsnew/3.13.rst:549
msgid ""
"Add :envvar:`PYTHON_FROZEN_MODULES`, a new environment variable that "
"determines whether frozen modules are ignored by the import machinery, "
"equivalent to the :option:`-X frozen_modules <-X>` command-line option. "
"(Contributed by Yilei Yang in :gh:`111374`.)"
msgstr ""

#: whatsnew/3.13.rst:554
msgid ""
"Add :ref:`support for the perf profiler <perf_profiling>` working without "
"`frame pointers <https://en.wikipedia.org/wiki/Call_stack>`_ through the new "
"environment variable :envvar:`PYTHON_PERF_JIT_SUPPORT` and command-line "
"option :option:`-X perf_jit <-X>`. (Contributed by Pablo Galindo in :gh:"
"`118518`.)"
msgstr ""

#: whatsnew/3.13.rst:560
msgid ""
"The location of a :file:`.python_history` file can be changed via the new :"
"envvar:`PYTHON_HISTORY` environment variable. (Contributed by Levi Sabah, "
"Zackery Spytz and Hugo van Kemenade in :gh:`73965`.)"
msgstr ""

#: whatsnew/3.13.rst:565
msgid ""
"Classes have a new :attr:`~type.__static_attributes__` attribute. This is "
"populated by the compiler with a tuple of the class's attribute names which "
"are assigned through ``self.<name>`` from any function in its body. "
"(Contributed by Irit Katriel in :gh:`115775`.)"
msgstr ""

#: whatsnew/3.13.rst:570
msgid ""
"The compiler now creates a :attr:`!__firstlineno__` attribute on classes "
"with the line number of the first line of the class definition. (Contributed "
"by Serhiy Storchaka in :gh:`118465`.)"
msgstr ""

#: whatsnew/3.13.rst:574
msgid ""
"The :func:`exec` and :func:`eval` builtins now accept the *globals* and "
"*locals* arguments as keywords. (Contributed by Raphael Gaschignard in :gh:"
"`105879`)"
msgstr ""

#: whatsnew/3.13.rst:578
msgid ""
"The :func:`compile` builtin now accepts a new flag, ``ast."
"PyCF_OPTIMIZED_AST``, which is similar to ``ast.PyCF_ONLY_AST`` except that "
"the returned AST is optimized according to the value of the *optimize* "
"argument. (Contributed by Irit Katriel in :gh:`108113`)."
msgstr ""

#: whatsnew/3.13.rst:584
msgid ""
"Add a :attr:`~property.__name__` attribute on :class:`property` objects. "
"(Contributed by Eugene Toder in :gh:`101860`.)"
msgstr ""

#: whatsnew/3.13.rst:587
msgid ""
"Add :exc:`PythonFinalizationError`, a new exception derived from :exc:"
"`RuntimeError` and used to signal when operations are blocked during :term:"
"`finalization <interpreter shutdown>`. The following callables now raise :"
"exc:`!PythonFinalizationError`, instead of :exc:`RuntimeError`:"
msgstr ""

#: whatsnew/3.13.rst:593
msgid ":func:`_thread.start_new_thread`"
msgstr ""

#: whatsnew/3.13.rst:594
msgid ":func:`os.fork`"
msgstr ""

#: whatsnew/3.13.rst:595
msgid ":func:`os.forkpty`"
msgstr ""

#: whatsnew/3.13.rst:596
msgid ":class:`subprocess.Popen`"
msgstr ""

#: whatsnew/3.13.rst:598
msgid "(Contributed by Victor Stinner in :gh:`114570`.)"
msgstr ""

#: whatsnew/3.13.rst:600
msgid ""
"Allow the *count* argument of :meth:`str.replace` to be a keyword. "
"(Contributed by Hugo van Kemenade in :gh:`106487`.)"
msgstr ""

#: whatsnew/3.13.rst:603
msgid ""
"Many functions now emit a warning if a boolean value is passed as a file "
"descriptor argument. This can help catch some errors earlier. (Contributed "
"by Serhiy Storchaka in :gh:`82626`.)"
msgstr ""

#: whatsnew/3.13.rst:608
msgid ""
"Added :attr:`!name` and :attr:`!mode` attributes for compressed and archived "
"file-like objects in the :mod:`bz2`, :mod:`lzma`, :mod:`tarfile`, and :mod:"
"`zipfile` modules. (Contributed by Serhiy Storchaka in :gh:`115961`.)"
msgstr ""

#: whatsnew/3.13.rst:615
msgid "New Modules"
msgstr "Nouveaux modules"

#: whatsnew/3.13.rst:617
msgid ""
":mod:`dbm.sqlite3`: An SQLite backend for :mod:`dbm`. (Contributed by "
"Raymond Hettinger and Erlend E. Aasland in :gh:`100414`.)"
msgstr ""

#: whatsnew/3.13.rst:622
msgid "Improved Modules"
msgstr "Modules améliorés"

#: whatsnew/3.13.rst:626
msgid "argparse"
msgstr "argparse"

#: whatsnew/3.13.rst:628
msgid ""
"Add the *deprecated* parameter to the :meth:`~argparse.ArgumentParser."
"add_argument` and :meth:`!add_parser` methods, to enable deprecating command-"
"line options, positional arguments, and subcommands. (Contributed by Serhiy "
"Storchaka in :gh:`83648`.)"
msgstr ""

#: whatsnew/3.13.rst:636
msgid "array"
msgstr "*array*"

#: whatsnew/3.13.rst:638
msgid ""
"Add the ``'w'`` type code (``Py_UCS4``) for Unicode characters. It should be "
"used instead of the deprecated ``'u'`` type code. (Contributed by Inada "
"Naoki in :gh:`80480`.)"
msgstr ""

#: whatsnew/3.13.rst:642
msgid ""
"Register :class:`array.array` as a :class:`~collections.abc.MutableSequence` "
"by implementing the :meth:`~array.array.clear` method. (Contributed by Mike "
"Zimin in :gh:`114894`.)"
msgstr ""

#: whatsnew/3.13.rst:648
msgid "ast"
msgstr "*ast*"

#: whatsnew/3.13.rst:650
msgid ""
"The constructors of node types in the :mod:`ast` module are now stricter in "
"the arguments they accept, with more intuitive behavior when arguments are "
"omitted."
msgstr ""

#: whatsnew/3.13.rst:654
msgid ""
"If an optional field on an AST node is not included as an argument when "
"constructing an instance, the field will now be set to ``None``. Similarly, "
"if a list field is omitted, that field will now be set to an empty list, and "
"if an :class:`!expr_context` field is omitted, it defaults to :class:`Load() "
"<ast.Load>`. (Previously, in all cases, the attribute would be missing on "
"the newly constructed AST node instance.)"
msgstr ""

#: whatsnew/3.13.rst:662
msgid ""
"In all other cases, where a required argument is omitted, the node "
"constructor will emit a :exc:`DeprecationWarning`. This will raise an "
"exception in Python 3.15. Similarly, passing a keyword argument to the "
"constructor that does not map to a field on the AST node is now deprecated, "
"and will raise an exception in Python 3.15."
msgstr ""

#: whatsnew/3.13.rst:669
msgid ""
"These changes do not apply to user-defined subclasses of :class:`ast.AST` "
"unless the class opts in to the new behavior by defining the :attr:`.AST."
"_field_types` mapping."
msgstr ""

#: whatsnew/3.13.rst:673
msgid ""
"(Contributed by Jelle Zijlstra in :gh:`105858`, :gh:`117486`, and :gh:"
"`118851`.)"
msgstr ""

#: whatsnew/3.13.rst:675
msgid ""
":func:`ast.parse` now accepts an optional argument *optimize* which is "
"passed on to :func:`compile`. This makes it possible to obtain an optimized "
"AST. (Contributed by Irit Katriel in :gh:`108113`.)"
msgstr ""

#: whatsnew/3.13.rst:682
msgid "asyncio"
msgstr "*asyncio*"

#: whatsnew/3.13.rst:684
msgid ""
":func:`asyncio.as_completed` now returns an object that is both an :term:"
"`asynchronous iterator` and a plain :term:`iterator` of :term:`awaitables "
"<awaitable>`. The awaitables yielded by asynchronous iteration include "
"original task or future objects that were passed in, making it easier to "
"associate results with the tasks being completed. (Contributed by Justin "
"Arthur in :gh:`77714`.)"
msgstr ""

#: whatsnew/3.13.rst:692
msgid ""
":meth:`asyncio.loop.create_unix_server` will now automatically remove the "
"Unix socket when the server is closed. (Contributed by Pierre Ossman in :gh:"
"`111246`.)"
msgstr ""

#: whatsnew/3.13.rst:696
msgid ""
":meth:`.DatagramTransport.sendto` will now send zero-length datagrams if "
"called with an empty bytes object. The transport flow control also now "
"accounts for the datagram header when calculating the buffer size. "
"(Contributed by Jamie Phan in :gh:`115199`.)"
msgstr ""

#: whatsnew/3.13.rst:702
msgid ""
"Add :meth:`Queue.shutdown <asyncio.Queue.shutdown>` and :exc:`~asyncio."
"QueueShutDown` to manage queue termination. (Contributed by Laurie Opperman "
"and Yves Duprat in :gh:`104228`.)"
msgstr ""

#: whatsnew/3.13.rst:706
msgid ""
"Add the :meth:`.Server.close_clients` and :meth:`.Server.abort_clients` "
"methods, which more forcefully close an asyncio server. (Contributed by "
"Pierre Ossman in :gh:`113538`.)"
msgstr ""

#: whatsnew/3.13.rst:710
msgid ""
"Accept a tuple of separators in :meth:`.StreamReader.readuntil`, stopping "
"when any one of them is encountered. (Contributed by Bruce Merry in :gh:"
"`81322`.)"
msgstr ""

#: whatsnew/3.13.rst:714
msgid ""
"Improve the behavior of :class:`~asyncio.TaskGroup` when an external "
"cancellation collides with an internal cancellation. For example, when two "
"task groups are nested and both experience an exception in a child task "
"simultaneously, it was possible that the outer task group would hang, "
"because its internal cancellation was swallowed by the inner task group."
msgstr ""

#: whatsnew/3.13.rst:721
msgid ""
"In the case where a task group is cancelled externally and also must raise "
"an :exc:`ExceptionGroup`, it will now call the parent task's :meth:`~asyncio."
"Task.cancel` method. This ensures that a :exc:`~asyncio.CancelledError` will "
"be raised at the next :keyword:`await`, so the cancellation is not lost."
msgstr ""

#: whatsnew/3.13.rst:727
msgid ""
"An added benefit of these changes is that task groups now preserve the "
"cancellation count (:meth:`~asyncio.Task.cancelling`)."
msgstr ""

#: whatsnew/3.13.rst:730
msgid ""
"In order to handle some corner cases, :meth:`~asyncio.Task.uncancel` may now "
"reset the undocumented ``_must_cancel`` flag when the cancellation count "
"reaches zero."
msgstr ""

#: whatsnew/3.13.rst:734
msgid "(Inspired by an issue reported by Arthur Tacca in :gh:`116720`.)"
msgstr ""

#: whatsnew/3.13.rst:736
msgid ""
"When :meth:`.TaskGroup.create_task` is called on an inactive :class:"
"`~asyncio.TaskGroup`, the given coroutine will be closed (which prevents a :"
"exc:`RuntimeWarning` about the given coroutine being never awaited). "
"(Contributed by Arthur Tacca and Jason Zhang in :gh:`115957`.)"
msgstr ""

#: whatsnew/3.13.rst:744
msgid "base64"
msgstr "base64"

#: whatsnew/3.13.rst:746
msgid ""
"Add :func:`~base64.z85encode` and :func:`~base64.z85decode` functions for "
"encoding :class:`bytes` as `Z85 data`_ and decoding Z85-encoded data to :"
"class:`!bytes`. (Contributed by Matan Perelman in :gh:`75299`.)"
msgstr ""

#: whatsnew/3.13.rst:755
msgid "compileall"
msgstr "*compileall*"

#: whatsnew/3.13.rst:765 whatsnew/3.13.rst:1017
msgid ""
"The default number of worker threads and processes is now selected using :"
"func:`os.process_cpu_count` instead of :func:`os.cpu_count`. (Contributed by "
"Victor Stinner in :gh:`109649`.)"
msgstr ""

#: whatsnew/3.13.rst:763
msgid "concurrent.futures"
msgstr "*concurrent.futures*"

#: whatsnew/3.13.rst:1612
msgid "configparser"
msgstr "configparser"

#: whatsnew/3.13.rst:773
msgid ""
":class:`~configparser.ConfigParser` now has support for unnamed sections, "
"which allows for top-level key-value pairs. This can be enabled with the new "
"*allow_unnamed_section* parameter. (Contributed by Pedro Sousa Lacerda in :"
"gh:`66449`.)"
msgstr ""

#: whatsnew/3.13.rst:780
msgid "copy"
msgstr ""

#: whatsnew/3.13.rst:782
msgid ""
"The new :func:`~copy.replace` function and the :meth:`replace protocol "
"<object.__replace__>` make creating modified copies of objects much simpler. "
"This is especially useful when working with immutable objects. The following "
"types support the :func:`~copy.replace` function and implement the replace "
"protocol:"
msgstr ""

#: whatsnew/3.13.rst:788
msgid ":func:`collections.namedtuple`"
msgstr ""

#: whatsnew/3.13.rst:789
msgid ":class:`dataclasses.dataclass`"
msgstr ""

#: whatsnew/3.13.rst:790
msgid ""
":class:`datetime.datetime`, :class:`datetime.date`, :class:`datetime.time`"
msgstr ""

#: whatsnew/3.13.rst:791
msgid ":class:`inspect.Signature`, :class:`inspect.Parameter`"
msgstr ""

#: whatsnew/3.13.rst:792
msgid ":class:`types.SimpleNamespace`"
msgstr ""

#: whatsnew/3.13.rst:793
msgid ":ref:`code objects <code-objects>`"
msgstr ""

#: whatsnew/3.13.rst:795
msgid ""
"Any user-defined class can also support :func:`copy.replace` by defining "
"the :meth:`~object.__replace__` method. (Contributed by Serhiy Storchaka in :"
"gh:`108751`.)"
msgstr ""

#: whatsnew/3.13.rst:801
msgid "ctypes"
msgstr "ctypes"

#: whatsnew/3.13.rst:803
msgid ""
"As a consequence of necessary internal refactoring, initialization of "
"internal metaclasses now happens in ``__init__`` rather than in ``__new__``. "
"This affects projects that subclass these internal metaclasses to provide "
"custom initialization. Generally:"
msgstr ""

#: whatsnew/3.13.rst:809
msgid ""
"Custom logic that was done in ``__new__`` after calling ``super().__new__`` "
"should be moved to ``__init__``."
msgstr ""

#: whatsnew/3.13.rst:811
msgid ""
"To create a class, call the metaclass, not only the metaclass's ``__new__`` "
"method."
msgstr ""

#: whatsnew/3.13.rst:814
msgid ""
"See :gh:`124520` for discussion and links to changes in some affected "
"projects."
msgstr ""

#: whatsnew/3.13.rst:817
msgid ""
":class:`ctypes.Structure` objects have a new :attr:`~ctypes.Structure."
"_align_` attribute which allows the alignment of the structure being packed "
"to/from memory to be specified explicitly. (Contributed by Matt Sanderson "
"in :gh:`112433`)"
msgstr ""

#: whatsnew/3.13.rst:823
msgid "dbm"
msgstr "dbm"

#: whatsnew/3.13.rst:825
msgid ""
"Add :mod:`dbm.sqlite3`, a new module which implements an SQLite backend, and "
"make it the default :mod:`!dbm` backend. (Contributed by Raymond Hettinger "
"and Erlend E. Aasland in :gh:`100414`.)"
msgstr ""

#: whatsnew/3.13.rst:829
msgid ""
"Allow removing all items from the database through the new :meth:`.gdbm."
"clear` and :meth:`.ndbm.clear` methods. (Contributed by Donghee Na in :gh:"
"`107122`.)"
msgstr ""

#: whatsnew/3.13.rst:835
msgid "dis"
msgstr "dis"

#: whatsnew/3.13.rst:837
msgid ""
"Change the output of :mod:`dis` module functions to show logical labels for "
"jump targets and exception handlers, rather than offsets. The offsets can be "
"added with the new :option:`-O <dis --show-offsets>` command-line option or "
"the *show_offsets* argument. (Contributed by Irit Katriel in :gh:`112137`.)"
msgstr ""

#: whatsnew/3.13.rst:844
msgid ""
":meth:`~dis.get_instructions` no longer represents cache entries as separate "
"instructions. Instead, it returns them as part of the :class:`~dis."
"Instruction`, in the new *cache_info* field. The *show_caches* argument to :"
"meth:`~dis.get_instructions` is deprecated and no longer has any effect. "
"(Contributed by Irit Katriel in :gh:`112962`.)"
msgstr ""

#: whatsnew/3.13.rst:856
msgid "doctest"
msgstr "doctest"

#: whatsnew/3.13.rst:858
msgid ""
":mod:`doctest` output is now colored by default. This can be controlled via "
"the new :envvar:`PYTHON_COLORS` environment variable as well as the "
"canonical |NO_COLOR|_ and |FORCE_COLOR|_ environment variables. See also :"
"ref:`using-on-controlling-color`. (Contributed by Hugo van Kemenade in :gh:"
"`117225`.)"
msgstr ""

#: whatsnew/3.13.rst:865
msgid ""
"The :meth:`.DocTestRunner.run` method now counts the number of skipped "
"tests. Add the :attr:`.DocTestRunner.skips` and :attr:`.TestResults.skipped` "
"attributes. (Contributed by Victor Stinner in :gh:`108794`.)"
msgstr ""

#: whatsnew/3.13.rst:871
msgid "email"
msgstr "email"

#: whatsnew/3.13.rst:873
msgid ""
"Headers with embedded newlines are now quoted on output. The :mod:`~email."
"generator` will now refuse to serialize (write) headers that are improperly "
"folded or delimited, such that they would be parsed as multiple headers or "
"joined with adjacent data. If you need to turn this safety feature off, set :"
"attr:`~email.policy.Policy.verify_generated_headers`. (Contributed by Bas "
"Bloemsaat and Petr Viktorin in :gh:`121650`.)"
msgstr ""

#: whatsnew/3.13.rst:881
msgid ""
":func:`~email.utils.getaddresses` and :func:`~email.utils.parseaddr` now "
"return ``('', '')`` pairs in more situations where invalid email addresses "
"are encountered instead of potentially inaccurate values. The two functions "
"have a new optional *strict* parameter (default ``True``). To get the old "
"behavior (accepting malformed input), use ``strict=False``. ``getattr(email."
"utils, 'supports_strict_parsing', False)`` can be used to check if the "
"*strict* parameter is available. (Contributed by Thomas Dwyer and Victor "
"Stinner for :gh:`102988` to improve the :cve:`2023-27043` fix.)"
msgstr ""

#: whatsnew/3.13.rst:893
msgid "fractions"
msgstr "``fractions``"

#: whatsnew/3.13.rst:895
msgid ""
":class:`~fractions.Fraction` objects now support the standard :ref:`format "
"specification mini-language <formatspec>` rules for fill, alignment, sign "
"handling, minimum width, and grouping. (Contributed by Mark Dickinson in :gh:"
"`111320`.)"
msgstr ""

#: whatsnew/3.13.rst:902
msgid "glob"
msgstr "glob"

#: whatsnew/3.13.rst:904
msgid ""
"Add :func:`~glob.translate`, a function to convert a path specification with "
"shell-style wildcards to a regular expression. (Contributed by Barney Gale "
"in :gh:`72904`.)"
msgstr ""

#: whatsnew/3.13.rst:910
msgid "importlib"
msgstr "*importlib*"

#: whatsnew/3.13.rst:912
msgid ""
"The following functions in :mod:`importlib.resources` now allow accessing a "
"directory (or tree) of resources, using multiple positional arguments (the "
"*encoding* and *errors* arguments in the text-reading functions are now "
"keyword-only):"
msgstr ""

#: whatsnew/3.13.rst:917
msgid ":func:`~importlib.resources.is_resource`"
msgstr ""

#: whatsnew/3.13.rst:918
msgid ":func:`~importlib.resources.open_binary`"
msgstr ""

#: whatsnew/3.13.rst:919
msgid ":func:`~importlib.resources.open_text`"
msgstr ""

#: whatsnew/3.13.rst:920
msgid ":func:`~importlib.resources.path`"
msgstr ""

#: whatsnew/3.13.rst:921
msgid ":func:`~importlib.resources.read_binary`"
msgstr ""

#: whatsnew/3.13.rst:922
msgid ":func:`~importlib.resources.read_text`"
msgstr ""

#: whatsnew/3.13.rst:924
msgid ""
"These functions are no longer deprecated and are not scheduled for removal. "
"(Contributed by Petr Viktorin in :gh:`116608`.)"
msgstr ""

#: whatsnew/3.13.rst:927
msgid ""
":func:`~importlib.resources.contents` remains deprecated in favor of the "
"fully-featured :class:`~importlib.resources.abc.Traversable` API. However, "
"there is now no plan to remove it. (Contributed by Petr Viktorin in :gh:"
"`116608`.)"
msgstr ""

#: whatsnew/3.13.rst:934
msgid "io"
msgstr ""

#: whatsnew/3.13.rst:936
msgid ""
"The :class:`~io.IOBase` finalizer now logs any errors raised by the :meth:"
"`~io.IOBase.close` method with :data:`sys.unraisablehook`. Previously, "
"errors were ignored silently by default, and only logged in :ref:`Python "
"Development Mode <devmode>` or when using a :ref:`Python debug build <debug-"
"build>`. (Contributed by Victor Stinner in :gh:`62948`.)"
msgstr ""

#: whatsnew/3.13.rst:945
msgid "ipaddress"
msgstr "*ipaddress*"

#: whatsnew/3.13.rst:947
msgid ""
"Add the :attr:`.IPv4Address.ipv6_mapped` property, which returns the IPv4-"
"mapped IPv6 address. (Contributed by Charles Machalow in :gh:`109466`.)"
msgstr ""

#: whatsnew/3.13.rst:951
msgid ""
"Fix ``is_global`` and ``is_private`` behavior in :class:`~ipaddress."
"IPv4Address`, :class:`~ipaddress.IPv6Address`, :class:`~ipaddress."
"IPv4Network`, and :class:`~ipaddress.IPv6Network`. (Contributed by Jakub "
"Stasiak in :gh:`113171`.)"
msgstr ""

#: whatsnew/3.13.rst:958
msgid "itertools"
msgstr ""

#: whatsnew/3.13.rst:960
msgid ""
":func:`~itertools.batched` has a new *strict* parameter, which raises a :exc:"
"`ValueError` if the final batch is shorter than the specified batch size. "
"(Contributed by Raymond Hettinger in :gh:`113202`.)"
msgstr ""

#: whatsnew/3.13.rst:967
msgid "marshal"
msgstr ""

#: whatsnew/3.13.rst:969
msgid ""
"Add the *allow_code* parameter in module functions. Passing "
"``allow_code=False`` prevents serialization and de-serialization of code "
"objects which are incompatible between Python versions. (Contributed by "
"Serhiy Storchaka in :gh:`113626`.)"
msgstr ""

#: whatsnew/3.13.rst:976
msgid "math"
msgstr "*math*"

#: whatsnew/3.13.rst:978
msgid ""
"The new function :func:`~math.fma` performs fused multiply-add operations. "
"This computes ``x * y + z`` with only a single round, and so avoids any "
"intermediate loss of precision. It wraps the ``fma()`` function provided by "
"C99, and follows the specification of the IEEE 754 \"fusedMultiplyAdd\" "
"operation for special cases. (Contributed by Mark Dickinson and Victor "
"Stinner in :gh:`73468`.)"
msgstr ""

#: whatsnew/3.13.rst:988
msgid "mimetypes"
msgstr ""

#: whatsnew/3.13.rst:990
msgid ""
"Add the :func:`~mimetypes.guess_file_type` function to guess a MIME type "
"from a filesystem path. Using paths with :func:`~mimetypes.guess_type` is "
"now :term:`soft deprecated`. (Contributed by Serhiy Storchaka in :gh:"
"`66543`.)"
msgstr ""

#: whatsnew/3.13.rst:997
msgid "mmap"
msgstr ""

#: whatsnew/3.13.rst:999
msgid ""
":class:`~mmap.mmap` is now protected from crashing on Windows when the "
"mapped memory is inaccessible due to file system errors or access "
"violations. (Contributed by Jannis Weigend in :gh:`118209`.)"
msgstr ""

#: whatsnew/3.13.rst:1003
msgid ""
":class:`~mmap.mmap` has a new :meth:`~mmap.mmap.seekable` method that can be "
"used when a seekable file-like object is required. The :meth:`~mmap.mmap."
"seek` method now returns the new absolute position. (Contributed by Donghee "
"Na and Sylvie Liberman in :gh:`111835`.)"
msgstr ""

#: whatsnew/3.13.rst:1008
msgid ""
"The new UNIX-only *trackfd* parameter for :class:`~mmap.mmap` controls file "
"descriptor duplication; if false, the file descriptor specified by *fileno* "
"will not be duplicated. (Contributed by Zackery Spytz and Petr Viktorin in :"
"gh:`78502`.)"
msgstr ""

#: whatsnew/3.13.rst:1015
msgid "multiprocessing"
msgstr "*multiprocessing*"

#: whatsnew/3.13.rst:1023
msgid "os"
msgstr "*os*"

#: whatsnew/3.13.rst:1025
msgid ""
"Add :func:`~os.process_cpu_count` function to get the number of logical CPU "
"cores usable by the calling thread of the current process. (Contributed by "
"Victor Stinner in :gh:`109649`.)"
msgstr ""

#: whatsnew/3.13.rst:1029
msgid ""
":func:`~os.cpu_count` and :func:`~os.process_cpu_count` can be overridden "
"through the new environment variable :envvar:`PYTHON_CPU_COUNT` or the new "
"command-line option :option:`-X cpu_count <-X>`. This option is useful for "
"users who need to limit CPU resources of a container system without having "
"to modify application code or the container itself. (Contributed by Donghee "
"Na in :gh:`109595`.)"
msgstr ""

#: whatsnew/3.13.rst:1037
msgid ""
"Add a :ref:`low level interface <os-timerfd>` to Linux's :manpage:`timer "
"file descriptors <timerfd_create(2)>` via :func:`~os.timerfd_create`, :func:"
"`~os.timerfd_settime`, :func:`~os.timerfd_settime_ns`, :func:`~os."
"timerfd_gettime`, :func:`~os.timerfd_gettime_ns`, :const:`~os."
"TFD_NONBLOCK`, :const:`~os.TFD_CLOEXEC`, :const:`~os.TFD_TIMER_ABSTIME`, "
"and :const:`~os.TFD_TIMER_CANCEL_ON_SET` (Contributed by Masaru Tsuchiyama "
"in :gh:`108277`.)"
msgstr ""

#: whatsnew/3.13.rst:1046
msgid ""
":func:`~os.lchmod` and the *follow_symlinks* argument of :func:`~os.chmod` "
"are both now available on Windows. Note that the default value of "
"*follow_symlinks* in :func:`!lchmod` is ``False`` on Windows. (Contributed "
"by Serhiy Storchaka in :gh:`59616`.)"
msgstr ""

#: whatsnew/3.13.rst:1052
msgid ""
":func:`~os.fchmod` and support for file descriptors in :func:`~os.chmod` are "
"both now available on Windows. (Contributed by Serhiy Storchaka in :gh:"
"`113191`.)"
msgstr ""

#: whatsnew/3.13.rst:1056
msgid ""
"On Windows, :func:`~os.mkdir` and :func:`~os.makedirs` now support passing a "
"*mode* value of ``0o700`` to apply access control to the new directory. This "
"implicitly affects :func:`tempfile.mkdtemp` and is a mitigation for :cve:"
"`2024-4030`. Other values for *mode* continue to be ignored. (Contributed by "
"Steve Dower in :gh:`118486`.)"
msgstr ""

#: whatsnew/3.13.rst:1063
msgid ""
":func:`~os.posix_spawn` now accepts ``None`` for the *env* argument, which "
"makes the newly spawned process use the current process environment. "
"(Contributed by Jakub Kulik in :gh:`113119`.)"
msgstr ""

#: whatsnew/3.13.rst:1067
msgid ""
":func:`~os.posix_spawn` can now use the :attr:`~os.POSIX_SPAWN_CLOSEFROM` "
"attribute in the *file_actions* parameter on platforms that support :c:func:"
"`!posix_spawn_file_actions_addclosefrom_np`. (Contributed by Jakub Kulik in :"
"gh:`113117`.)"
msgstr ""

#: whatsnew/3.13.rst:1074
msgid "os.path"
msgstr "``os.path``"

#: whatsnew/3.13.rst:1076
msgid ""
"Add :func:`~os.path.isreserved` to check if a path is reserved on the "
"current system. This function is only available on Windows. (Contributed by "
"Barney Gale in :gh:`88569`.)"
msgstr ""

#: whatsnew/3.13.rst:1081
msgid ""
"On Windows, :func:`~os.path.isabs` no longer considers paths starting with "
"exactly one slash (``\\`` or ``/``) to be absolute. (Contributed by Barney "
"Gale and Jon Foster in :gh:`44626`.)"
msgstr ""

#: whatsnew/3.13.rst:1085
msgid ""
":func:`~os.path.realpath` now resolves MS-DOS style file names even if the "
"file is not accessible. (Contributed by Moonsik Park in :gh:`82367`.)"
msgstr ""

#: whatsnew/3.13.rst:1652
msgid "pathlib"
msgstr "*pathlib*"

#: whatsnew/3.13.rst:1093
msgid ""
"Add :exc:`~pathlib.UnsupportedOperation`, which is raised instead of :exc:"
"`NotImplementedError` when a path operation isn't supported. (Contributed by "
"Barney Gale in :gh:`89812`.)"
msgstr ""

#: whatsnew/3.13.rst:1097
msgid ""
"Add a new constructor for creating :class:`~pathlib.Path` objects from "
"'file' URIs (``file:///``), :meth:`.Path.from_uri`. (Contributed by Barney "
"Gale in :gh:`107465`.)"
msgstr ""

#: whatsnew/3.13.rst:1101
msgid ""
"Add :meth:`.PurePath.full_match` for matching paths with shell-style "
"wildcards, including the recursive wildcard \"``**``\". (Contributed by "
"Barney Gale in :gh:`73435`.)"
msgstr ""

#: whatsnew/3.13.rst:1105
msgid ""
"Add the :attr:`.PurePath.parser` class attribute to store the implementation "
"of :mod:`os.path` used for low-level path parsing and joining. This will be "
"either :mod:`!posixpath` or :mod:`!ntpath`."
msgstr ""

#: whatsnew/3.13.rst:1110
msgid ""
"Add *recurse_symlinks* keyword-only argument to :meth:`.Path.glob` and :meth:"
"`~pathlib.Path.rglob`. (Contributed by Barney Gale in :gh:`77609`.)"
msgstr ""

#: whatsnew/3.13.rst:1114
msgid ""
":meth:`.Path.glob` and :meth:`~pathlib.Path.rglob` now return files and "
"directories when given a pattern that ends with \"``**``\". Previously, only "
"directories were returned. (Contributed by Barney Gale in :gh:`70303`.)"
msgstr ""

#: whatsnew/3.13.rst:1119
msgid ""
"Add the *follow_symlinks* keyword-only argument to :meth:`Path.is_file "
"<pathlib.Path.is_file>`, :meth:`Path.is_dir <pathlib.Path.is_dir>`, :meth:`."
"Path.owner`, and :meth:`.Path.group`. (Contributed by Barney Gale in :gh:"
"`105793` and Kamil Turek in :gh:`107962`.)"
msgstr ""

#: whatsnew/3.13.rst:1127
msgid "pdb"
msgstr "*pdb*"

#: whatsnew/3.13.rst:1129
msgid ""
":func:`breakpoint` and :func:`~pdb.set_trace` now enter the debugger "
"immediately rather than on the next line of code to be executed. This change "
"prevents the debugger from breaking outside of the context when :func:`!"
"breakpoint` is positioned at the end of the context. (Contributed by Tian "
"Gao in :gh:`118579`.)"
msgstr ""

#: whatsnew/3.13.rst:1135
msgid ""
"``sys.path[0]`` is no longer replaced by the directory of the script being "
"debugged when :attr:`sys.flags.safe_path` is set. (Contributed by Tian Gao "
"and Christian Walther in :gh:`111762`.)"
msgstr ""

#: whatsnew/3.13.rst:1139
msgid ""
":mod:`zipapp` is now supported as a debugging target. (Contributed by Tian "
"Gao in :gh:`118501`.)"
msgstr ""

#: whatsnew/3.13.rst:1142
msgid ""
"Add ability to move between chained exceptions during post-mortem debugging "
"in :func:`~pdb.pm` using the new :pdbcmd:`exceptions [exc_number] "
"<exceptions>` command for Pdb. (Contributed by Matthias Bussonnier in :gh:"
"`106676`.)"
msgstr ""

#: whatsnew/3.13.rst:1147
msgid ""
"Expressions and statements whose prefix is a pdb command are now correctly "
"identified and executed. (Contributed by Tian Gao in :gh:`108464`.)"
msgstr ""

#: whatsnew/3.13.rst:1153
msgid "queue"
msgstr ""

#: whatsnew/3.13.rst:1155
msgid ""
"Add :meth:`Queue.shutdown <queue.Queue.shutdown>` and :exc:`~queue.ShutDown` "
"to manage queue termination. (Contributed by Laurie Opperman and Yves Duprat "
"in :gh:`104750`.)"
msgstr ""

#: whatsnew/3.13.rst:1161
msgid "random"
msgstr "*random*"

#: whatsnew/3.13.rst:1163
msgid ""
"Add a :ref:`command-line interface <random-cli>`. (Contributed by Hugo van "
"Kemenade in :gh:`118131`.)"
msgstr ""

#: whatsnew/3.13.rst:1660
msgid "re"
msgstr "``re``"

#: whatsnew/3.13.rst:1170
msgid ""
"Rename :exc:`!re.error` to :exc:`~re.PatternError` for improved clarity. :"
"exc:`!re.error` is kept for backward compatibility."
msgstr ""

#: whatsnew/3.13.rst:1175
msgid "shutil"
msgstr "``shutils``"

#: whatsnew/3.13.rst:1177
msgid ""
"Support the *dir_fd* and *follow_symlinks* keyword arguments in :func:"
"`~shutil.chown`. (Contributed by Berker Peksag and Tahia K in :gh:`62308`)"
msgstr ""

#: whatsnew/3.13.rst:1183
msgid "site"
msgstr "``site``"

#: whatsnew/3.13.rst:1185
msgid ""
":file:`.pth` files are now decoded using UTF-8 first, and then with the :"
"term:`locale encoding` if UTF-8 decoding fails. (Contributed by Inada Naoki "
"in :gh:`117802`.)"
msgstr ""

#: whatsnew/3.13.rst:1191
msgid "sqlite3"
msgstr "``sqlite3``"

#: whatsnew/3.13.rst:1193
msgid ""
"A :exc:`ResourceWarning` is now emitted if a :class:`~sqlite3.Connection` "
"object is not :meth:`closed <sqlite3.Connection.close>` explicitly. "
"(Contributed by Erlend E. Aasland in :gh:`105539`.)"
msgstr ""

#: whatsnew/3.13.rst:1197
msgid ""
"Add the *filter* keyword-only parameter to :meth:`.Connection.iterdump` for "
"filtering database objects to dump. (Contributed by Mariusz Felisiak in :gh:"
"`91602`.)"
msgstr ""

#: whatsnew/3.13.rst:1203
msgid "ssl"
msgstr "``ssl``"

#: whatsnew/3.13.rst:1205
msgid ""
"The :func:`~ssl.create_default_context` API now includes :data:`~ssl."
"VERIFY_X509_PARTIAL_CHAIN` and :data:`~ssl.VERIFY_X509_STRICT` in its "
"default flags."
msgstr ""

#: whatsnew/3.13.rst:1211
msgid ""
":data:`~ssl.VERIFY_X509_STRICT` may reject pre-:rfc:`5280` or malformed "
"certificates that the underlying OpenSSL implementation might otherwise "
"accept. Whilst disabling this is not recommended, you can do so using:"
msgstr ""

#: whatsnew/3.13.rst:1216
msgid ""
"import ssl\n"
"\n"
"ctx = ssl.create_default_context()\n"
"ctx.verify_flags &= ~ssl.VERIFY_X509_STRICT"
msgstr ""

#: whatsnew/3.13.rst:1223
msgid "(Contributed by William Woodruff in :gh:`112389`.)"
msgstr ""

#: whatsnew/3.13.rst:1227
msgid "statistics"
msgstr "``statistics``"

#: whatsnew/3.13.rst:1229
msgid ""
"Add :func:`~statistics.kde` for kernel density estimation. This makes it "
"possible to estimate a continuous probability density function from a fixed "
"number of discrete samples. (Contributed by Raymond Hettinger in :gh:"
"`115863`.)"
msgstr ""

#: whatsnew/3.13.rst:1234
msgid ""
"Add :func:`~statistics.kde_random` for sampling from an estimated "
"probability density function created by :func:`~statistics.kde`. "
"(Contributed by Raymond Hettinger in :gh:`115863`.)"
msgstr ""

#: whatsnew/3.13.rst:1242
msgid "subprocess"
msgstr "subprocess"

#: whatsnew/3.13.rst:1244
msgid ""
"The :mod:`subprocess` module now uses the :func:`~os.posix_spawn` function "
"in more situations."
msgstr ""

#: whatsnew/3.13.rst:1247
msgid ""
"Notably, when *close_fds* is ``True`` (the default), :func:`~os.posix_spawn` "
"will be used when the C library provides :c:func:`!"
"posix_spawn_file_actions_addclosefrom_np`, which includes recent versions of "
"Linux, FreeBSD, and Solaris. On Linux, this should perform similarly to the "
"existing Linux :c:func:`!vfork` based code."
msgstr ""

#: whatsnew/3.13.rst:1254
msgid ""
"A private control knob :attr:`!subprocess._USE_POSIX_SPAWN` can be set to "
"``False`` if you need to force :mod:`subprocess` to never use :func:`~os."
"posix_spawn`. Please report your reason and platform details in the :ref:"
"`issue tracker <using-the-tracker>` if you set this so that we can improve "
"our API selection logic for everyone. (Contributed by Jakub Kulik in :gh:"
"`113117`.)"
msgstr ""

#: whatsnew/3.13.rst:1264
msgid "sys"
msgstr "*sys*"

#: whatsnew/3.13.rst:1266
msgid ""
"Add the :func:`~sys._is_interned` function to test if a string was interned. "
"This function is not guaranteed to exist in all implementations of Python. "
"(Contributed by Serhiy Storchaka in :gh:`78573`.)"
msgstr ""

#: whatsnew/3.13.rst:1272
msgid "tempfile"
msgstr ""

#: whatsnew/3.13.rst:1274
msgid ""
"On Windows, the default mode ``0o700`` used by :func:`tempfile.mkdtemp` now "
"limits access to the new directory due to changes to :func:`os.mkdir`. This "
"is a mitigation for :cve:`2024-4030`. (Contributed by Steve Dower in :gh:"
"`118486`.)"
msgstr ""

#: whatsnew/3.13.rst:1281
msgid "time"
msgstr "*time*"

#: whatsnew/3.13.rst:1283
msgid ""
"On Windows, :func:`~time.monotonic` now uses the "
"``QueryPerformanceCounter()`` clock for a resolution of 1 microsecond, "
"instead of the ``GetTickCount64()`` clock which has a resolution of 15.6 "
"milliseconds. (Contributed by Victor Stinner in :gh:`88494`.)"
msgstr ""

#: whatsnew/3.13.rst:1289
msgid ""
"On Windows, :func:`~time.time` now uses the "
"``GetSystemTimePreciseAsFileTime()`` clock for a resolution of 1 "
"microsecond, instead of the ``GetSystemTimeAsFileTime()`` clock which has a "
"resolution of 15.6 milliseconds. (Contributed by Victor Stinner in :gh:"
"`63207`.)"
msgstr ""

#: whatsnew/3.13.rst:1297
msgid "tkinter"
msgstr "tkinter"

#: whatsnew/3.13.rst:1299
msgid ""
"Add :mod:`tkinter` widget methods: :meth:`!tk_busy_hold`, :meth:`!"
"tk_busy_configure`, :meth:`!tk_busy_cget`, :meth:`!tk_busy_forget`, :meth:`!"
"tk_busy_current`, and :meth:`!tk_busy_status`. (Contributed by Miguel, "
"klappnase and Serhiy Storchaka in :gh:`72684`.)"
msgstr ""

#: whatsnew/3.13.rst:1305
msgid ""
"The :mod:`tkinter` widget method :meth:`!wm_attributes` now accepts the "
"attribute name without the minus prefix to get window attributes, for "
"example ``w.wm_attributes('alpha')`` and allows specifying attributes and "
"values to set as keyword arguments, for example ``w."
"wm_attributes(alpha=0.5)``. (Contributed by Serhiy Storchaka in :gh:`43457`.)"
msgstr ""

#: whatsnew/3.13.rst:1312
msgid ""
":meth:`!wm_attributes` can now return attributes as a :class:`dict`, by "
"using the new optional keyword-only parameter *return_python_dict*. "
"(Contributed by Serhiy Storchaka in :gh:`43457`.)"
msgstr ""

#: whatsnew/3.13.rst:1316
msgid ""
":meth:`!Text.count` can now return a simple :class:`int` when the new "
"optional keyword-only parameter *return_ints* is used. Otherwise, the single "
"count is returned as a 1-tuple or ``None``. (Contributed by Serhiy Storchaka "
"in :gh:`97928`.)"
msgstr ""

#: whatsnew/3.13.rst:1321
msgid ""
"Support the \"vsapi\" element type in the :meth:`~tkinter.ttk.Style."
"element_create` method of :class:`tkinter.ttk.Style`. (Contributed by Serhiy "
"Storchaka in :gh:`68166`.)"
msgstr ""

#: whatsnew/3.13.rst:1326
msgid ""
"Add the :meth:`!after_info` method for Tkinter widgets. (Contributed by "
"Cheryl Sabella in :gh:`77020`.)"
msgstr ""

#: whatsnew/3.13.rst:1329
msgid ""
"Add a new :meth:`!copy_replace` method to :class:`!PhotoImage` to copy a "
"region from one image to another, possibly with pixel zooming, subsampling, "
"or both. (Contributed by Serhiy Storchaka in :gh:`118225`.)"
msgstr ""

#: whatsnew/3.13.rst:1334
msgid ""
"Add *from_coords* parameter to the :class:`!PhotoImage` methods :meth:`!"
"copy`, :meth:`!zoom` and :meth:`!subsample`. Add *zoom* and *subsample* "
"parameters to the :class:`!PhotoImage` method :meth:`!copy`. (Contributed by "
"Serhiy Storchaka in :gh:`118225`.)"
msgstr ""

#: whatsnew/3.13.rst:1340
msgid ""
"Add the :class:`!PhotoImage` methods :meth:`!read` to read an image from a "
"file and :meth:`!data` to get the image data. Add *background* and "
"*grayscale* parameters to the :meth:`!write` method. (Contributed by Serhiy "
"Storchaka in :gh:`118271`.)"
msgstr ""

#: whatsnew/3.13.rst:1348
msgid "traceback"
msgstr "traceback"

#: whatsnew/3.13.rst:1350
msgid ""
"Add the :attr:`~traceback.TracebackException.exc_type_str` attribute to :"
"class:`~traceback.TracebackException`, which holds a string display of the "
"*exc_type*. Deprecate the :attr:`~traceback.TracebackException.exc_type` "
"attribute, which holds the type object itself. Add parameter *save_exc_type* "
"(default ``True``) to indicate whether ``exc_type`` should be saved. "
"(Contributed by Irit Katriel in :gh:`112332`.)"
msgstr ""

#: whatsnew/3.13.rst:1359
msgid ""
"Add a new *show_group* keyword-only parameter to :meth:`.TracebackException."
"format_exception_only` to (recursively) format the nested exceptions of a :"
"exc:`BaseExceptionGroup` instance. (Contributed by Irit Katriel in :gh:"
"`105292`.)"
msgstr ""

#: whatsnew/3.13.rst:1366
msgid "types"
msgstr "``types``"

#: whatsnew/3.13.rst:1368
msgid ""
":class:`~types.SimpleNamespace` can now take a single positional argument to "
"initialise the namespace's arguments. This argument must either be a mapping "
"or an iterable of key-value pairs. (Contributed by Serhiy Storchaka in :gh:"
"`108191`.)"
msgstr ""

#: whatsnew/3.13.rst:1685
msgid "typing"
msgstr "*typing*"

#: whatsnew/3.13.rst:1377
msgid ""
":pep:`705`: Add :data:`~typing.ReadOnly`, a special typing construct to mark "
"a :class:`~typing.TypedDict` item as read-only for type checkers."
msgstr ""

#: whatsnew/3.13.rst:1380
msgid ""
":pep:`742`: Add :data:`~typing.TypeIs`, a typing construct that can be used "
"to instruct a type checker how to narrow a type."
msgstr ""

#: whatsnew/3.13.rst:1383
msgid ""
"Add :data:`~typing.NoDefault`, a sentinel object used to represent the "
"defaults of some parameters in the :mod:`typing` module. (Contributed by "
"Jelle Zijlstra in :gh:`116126`.)"
msgstr ""

#: whatsnew/3.13.rst:1387
msgid ""
"Add :func:`~typing.get_protocol_members` to return the set of members "
"defining a :class:`typing.Protocol`. (Contributed by Jelle Zijlstra in :gh:"
"`104873`.)"
msgstr ""

#: whatsnew/3.13.rst:1391
msgid ""
"Add :func:`~typing.is_protocol` to check whether a class is a :class:"
"`~typing.Protocol`. (Contributed by Jelle Zijlstra in :gh:`104873`.)"
msgstr ""

#: whatsnew/3.13.rst:1395
msgid ""
":data:`~typing.ClassVar` can now be nested in :data:`~typing.Final`, and "
"vice versa. (Contributed by Mehdi Drissi in :gh:`89547`.)"
msgstr ""

#: whatsnew/3.13.rst:1401
msgid "unicodedata"
msgstr "*unicodedata*"

#: whatsnew/3.13.rst:1403
msgid ""
"Update the Unicode database to `version 15.1.0`__. (Contributed by James "
"Gerity in :gh:`109559`.)"
msgstr ""

#: whatsnew/3.13.rst:1410
msgid "venv"
msgstr "*venv*"

#: whatsnew/3.13.rst:1412
msgid ""
"Add support for creating source control management (SCM) ignore files in a "
"virtual environment's directory. By default, Git is supported. This is "
"implemented as opt-in via the API, which can be extended to support other "
"SCMs (:class:`~venv.EnvBuilder` and :func:`~venv.create`), and opt-out via "
"the CLI, using :option:`!--without-scm-ignore-files`. (Contributed by Brett "
"Cannon in :gh:`108125`.)"
msgstr ""

#: whatsnew/3.13.rst:1423
msgid "warnings"
msgstr ""

#: whatsnew/3.13.rst:1425
msgid ""
":pep:`702`: The new :func:`warnings.deprecated` decorator provides a way to "
"communicate deprecations to a :term:`static type checker` and to warn on "
"usage of deprecated classes and functions. A :exc:`DeprecationWarning` may "
"also be emitted when a decorated function or class is used at runtime. "
"(Contributed by Jelle Zijlstra in :gh:`104003`.)"
msgstr ""

#: whatsnew/3.13.rst:1434
msgid "xml"
msgstr "*xml*"

#: whatsnew/3.13.rst:1436
msgid ""
"Allow controlling Expat >=2.6.0 reparse deferral (:cve:`2023-52425`) by "
"adding five new methods:"
msgstr ""

#: whatsnew/3.13.rst:1439
msgid ":meth:`xml.etree.ElementTree.XMLParser.flush`"
msgstr ""

#: whatsnew/3.13.rst:1440
msgid ":meth:`xml.etree.ElementTree.XMLPullParser.flush`"
msgstr ""

#: whatsnew/3.13.rst:1441
msgid ":meth:`xml.parsers.expat.xmlparser.GetReparseDeferralEnabled`"
msgstr ""

#: whatsnew/3.13.rst:1442
msgid ":meth:`xml.parsers.expat.xmlparser.SetReparseDeferralEnabled`"
msgstr ""

#: whatsnew/3.13.rst:1443
msgid ":meth:`!xml.sax.expatreader.ExpatParser.flush`"
msgstr ""

#: whatsnew/3.13.rst:1445
msgid "(Contributed by Sebastian Pipping in :gh:`115623`.)"
msgstr ""

#: whatsnew/3.13.rst:1447
msgid ""
"Add the :meth:`!close` method for the iterator returned by :func:`~xml.etree."
"ElementTree.iterparse` for explicit cleanup. (Contributed by Serhiy "
"Storchaka in :gh:`69893`.)"
msgstr ""

#: whatsnew/3.13.rst:1453
msgid "zipimport"
msgstr "``zipimport``"

#: whatsnew/3.13.rst:1455
msgid ""
"Add support for ZIP64_ format files. Everybody loves huge data, right? "
"(Contributed by Tim Hatch in :gh:`94146`.)"
msgstr ""

#: whatsnew/3.13.rst:1463
msgid "Optimizations"
msgstr "Optimisations"

#: whatsnew/3.13.rst:1465
msgid ""
"Several standard library modules have had their import times significantly "
"improved. For example, the import time of the :mod:`typing` module has been "
"reduced by around a third by removing dependencies on :mod:`re` and :mod:"
"`contextlib`. Other modules to enjoy import-time speedups include :mod:"
"`email.utils`, :mod:`enum`, :mod:`functools`, :mod:`importlib.metadata`, "
"and :mod:`threading`. (Contributed by Alex Waygood, Shantanu Jain, Adam "
"Turner, Daniel Hollas, and others in :gh:`109653`.)"
msgstr ""

#: whatsnew/3.13.rst:1476
msgid ""
":func:`textwrap.indent` is now around 30% faster than before for large "
"input. (Contributed by Inada Naoki in :gh:`107369`.)"
msgstr ""

#: whatsnew/3.13.rst:1479
msgid ""
"The :mod:`subprocess` module now uses the :func:`~os.posix_spawn` function "
"in more situations, including when *close_fds* is ``True`` (the default) on "
"many modern platforms. This should provide a notable performance increase "
"when launching processes on FreeBSD and Solaris. See the :ref:`subprocess "
"<whatsnew313-subprocess>` section above for details. (Contributed by Jakub "
"Kulik in :gh:`113117`.)"
msgstr ""

#: whatsnew/3.13.rst:1489
msgid "Removed Modules And APIs"
msgstr ""

#: whatsnew/3.13.rst:1495
msgid "PEP 594: Remove \"dead batteries\" from the standard library"
msgstr ""

#: whatsnew/3.13.rst:1497
msgid ""
":pep:`594` proposed removing 19 modules from the standard library, "
"colloquially referred to as 'dead batteries' due to their historic, "
"obsolete, or insecure status. All of the following modules were deprecated "
"in Python 3.11, and are now removed:"
msgstr ""

#: whatsnew/3.13.rst:1503
msgid ":mod:`!aifc`"
msgstr ""

#: whatsnew/3.13.rst:1504
msgid ":mod:`!audioop`"
msgstr ""

#: whatsnew/3.13.rst:1505
msgid ":mod:`!chunk`"
msgstr ""

#: whatsnew/3.13.rst:1506
msgid ":mod:`!cgi` and :mod:`!cgitb`"
msgstr ""

#: whatsnew/3.13.rst:1508
msgid ""
":class:`!cgi.FieldStorage` can typically be replaced with :func:`urllib."
"parse.parse_qsl` for ``GET`` and ``HEAD`` requests, and the :mod:`email."
"message` module or the :pypi:`multipart` library for ``POST`` and ``PUT`` "
"requests."
msgstr ""

#: whatsnew/3.13.rst:1513
msgid ""
":func:`!cgi.parse` can be replaced by calling :func:`urllib.parse.parse_qs` "
"directly on the desired query string, unless the input is ``multipart/form-"
"data``, which should be replaced as described below for :func:`!cgi."
"parse_multipart`."
msgstr ""

#: whatsnew/3.13.rst:1518
msgid ""
":func:`!cgi.parse_header` can be replaced with the functionality in the :mod:"
"`email` package, which implements the same MIME RFCs. For example, with :"
"class:`email.message.EmailMessage`:"
msgstr ""

#: whatsnew/3.13.rst:1522
msgid ""
"from email.message import EmailMessage\n"
"\n"
"msg = EmailMessage()\n"
"msg['content-type'] = 'application/json; charset=\"utf8\"'\n"
"main, params = msg.get_content_type(), msg['content-type'].params"
msgstr ""

#: whatsnew/3.13.rst:1530
msgid ""
":func:`!cgi.parse_multipart` can be replaced with the functionality in the :"
"mod:`email` package, which implements the same MIME RFCs, or with the :pypi:"
"`multipart` library. For example, the :class:`email.message.EmailMessage` "
"and :class:`email.message.Message` classes."
msgstr ""

#: whatsnew/3.13.rst:1536
msgid ""
":mod:`!crypt` and the private :mod:`!_crypt` extension. The :mod:`hashlib` "
"module may be an appropriate replacement when simply hashing a value is "
"required. Otherwise, various third-party libraries on PyPI are available:"
msgstr ""

#: whatsnew/3.13.rst:1541
msgid ""
":pypi:`bcrypt`: Modern password hashing for your software and your servers."
msgstr ""

#: whatsnew/3.13.rst:1543
msgid ""
":pypi:`passlib`: Comprehensive password hashing framework supporting over 30 "
"schemes."
msgstr ""

#: whatsnew/3.13.rst:1545
msgid ":pypi:`argon2-cffi`: The secure Argon2 password hashing algorithm."
msgstr ""

#: whatsnew/3.13.rst:1547
msgid ""
":pypi:`legacycrypt`: :mod:`ctypes` wrapper to the POSIX crypt library call "
"and associated functionality."
msgstr ""

#: whatsnew/3.13.rst:1550
msgid ""
":pypi:`crypt_r`: Fork of the :mod:`!crypt` module, wrapper to the :manpage:"
"`crypt_r(3)` library call and associated functionality."
msgstr ""

#: whatsnew/3.13.rst:1555
msgid ""
":mod:`!imghdr`: The :pypi:`filetype`, :pypi:`puremagic`, or :pypi:`python-"
"magic` libraries should be used as replacements. For example, the :func:`!"
"puremagic.what` function can be used to replace the :func:`!imghdr.what` "
"function for all file formats that were supported by :mod:`!imghdr`."
msgstr ""

#: whatsnew/3.13.rst:1561
msgid ":mod:`!mailcap`: Use the :mod:`mimetypes` module instead."
msgstr ""

#: whatsnew/3.13.rst:1563
msgid ":mod:`!msilib`"
msgstr ""

#: whatsnew/3.13.rst:1564
msgid ":mod:`!nis`"
msgstr ""

#: whatsnew/3.13.rst:1565
msgid ":mod:`!nntplib`: Use the :pypi:`pynntp` library from PyPI instead."
msgstr ""

#: whatsnew/3.13.rst:1567
msgid ""
":mod:`!ossaudiodev`: For audio playback, use the :pypi:`pygame` library from "
"PyPI instead."
msgstr ""

#: whatsnew/3.13.rst:1569
msgid ":mod:`!pipes`: Use the :mod:`subprocess` module instead."
msgstr ""

#: whatsnew/3.13.rst:1571
msgid ""
":mod:`!sndhdr`: The :pypi:`filetype`, :pypi:`puremagic`, or :pypi:`python-"
"magic` libraries should be used as replacements."
msgstr ""

#: whatsnew/3.13.rst:1574
msgid ":mod:`!spwd`: Use the :pypi:`python-pam` library from PyPI instead."
msgstr ""

#: whatsnew/3.13.rst:1576
msgid ":mod:`!sunau`"
msgstr ""

#: whatsnew/3.13.rst:1577
msgid ""
":mod:`!telnetlib`, Use the :pypi:`telnetlib3` or :pypi:`Exscript` libraries "
"from PyPI instead."
msgstr ""

#: whatsnew/3.13.rst:1579
msgid ""
":mod:`!uu`: Use the :mod:`base64` module instead, as a modern alternative."
msgstr ""

#: whatsnew/3.13.rst:1581
msgid ":mod:`!xdrlib`"
msgstr ""

#: whatsnew/3.13.rst:1583
msgid ""
"(Contributed by Victor Stinner and Zachary Ware in :gh:`104773` and :gh:"
"`104780`.)"
msgstr ""

#: whatsnew/3.13.rst:1587
msgid "2to3"
msgstr "2to3"

#: whatsnew/3.13.rst:1589
msgid ""
"Remove the :program:`2to3` program and the :mod:`!lib2to3` module, "
"previously deprecated in Python 3.11. (Contributed by Victor Stinner in :gh:"
"`104780`.)"
msgstr ""

#: whatsnew/3.13.rst:1595
msgid "builtins"
msgstr "builtins"

#: whatsnew/3.13.rst:1597
msgid ""
"Remove support for chained :class:`classmethod` descriptors (introduced in :"
"gh:`63272`). These can no longer be used to wrap other descriptors, such as :"
"class:`property`. The core design of this feature was flawed and led to "
"several problems. To \"pass-through\" a :class:`classmethod`, consider using "
"the :attr:`!__wrapped__` attribute that was added in Python 3.10. "
"(Contributed by Raymond Hettinger in :gh:`89519`.)"
msgstr ""

#: whatsnew/3.13.rst:1606
msgid ""
"Raise a :exc:`RuntimeError` when calling :meth:`frame.clear` on a suspended "
"frame (as has always been the case for an executing frame). (Contributed by "
"Irit Katriel in :gh:`79932`.)"
msgstr ""

#: whatsnew/3.13.rst:1614
msgid ""
"Remove the undocumented :class:`!LegacyInterpolation` class, deprecated in "
"the docstring since Python 3.2, and at runtime since Python 3.11. "
"(Contributed by Hugo van Kemenade in :gh:`104886`.)"
msgstr ""

#: whatsnew/3.13.rst:1621
msgid "importlib.metadata"
msgstr "``importlib.metadata``"

#: whatsnew/3.13.rst:1623
msgid ""
"Remove deprecated subscript (:meth:`~object.__getitem__`) access for :ref:"
"`EntryPoint <entry-points>` objects. (Contributed by Jason R. Coombs in :gh:"
"`113175`.)"
msgstr ""

#: whatsnew/3.13.rst:1629
msgid "locale"
msgstr ""

#: whatsnew/3.13.rst:1631
msgid ""
"Remove the :func:`!locale.resetlocale` function, deprecated in Python 3.11. "
"Use ``locale.setlocale(locale.LC_ALL, \"\")`` instead. (Contributed by "
"Victor Stinner in :gh:`104783`.)"
msgstr ""

#: whatsnew/3.13.rst:1637
msgid "opcode"
msgstr ""

#: whatsnew/3.13.rst:1639
msgid ""
"Move :attr:`!opcode.ENABLE_SPECIALIZATION` to :attr:`!_opcode."
"ENABLE_SPECIALIZATION`. This field was added in 3.12, it was never "
"documented, and is not intended for external use. (Contributed by Irit "
"Katriel in :gh:`105481`.)"
msgstr ""

#: whatsnew/3.13.rst:1644
msgid ""
"Remove :func:`!opcode.is_pseudo`, :attr:`!opcode.MIN_PSEUDO_OPCODE`, and :"
"attr:`!opcode.MAX_PSEUDO_OPCODE`, which were added in Python 3.12, but were "
"neither documented nor exposed through :mod:`dis`, and were not intended to "
"be used externally. (Contributed by Irit Katriel in :gh:`105481`.)"
msgstr ""

#: whatsnew/3.13.rst:1654
msgid ""
"Remove the ability to use :class:`~pathlib.Path` objects as context "
"managers. This functionality was deprecated and has had no effect since "
"Python 3.9. (Contributed by Barney Gale in :gh:`83863`.)"
msgstr ""

#: whatsnew/3.13.rst:1662
msgid ""
"Remove the undocumented, deprecated, and broken :func:`!re.template` "
"function and :attr:`!re.TEMPLATE` / :attr:`!re.T` flag. (Contributed by "
"Serhiy Storchaka and Nikita Sobolev in :gh:`105687`.)"
msgstr ""

#: whatsnew/3.13.rst:1668
msgid "tkinter.tix"
msgstr ""

#: whatsnew/3.13.rst:1670
msgid ""
"Remove the :mod:`!tkinter.tix` module, deprecated in Python 3.6. The third-"
"party Tix library which the module wrapped is unmaintained. (Contributed by "
"Zachary Ware in :gh:`75552`.)"
msgstr ""

#: whatsnew/3.13.rst:1676
msgid "turtle"
msgstr ""

#: whatsnew/3.13.rst:1678
msgid ""
"Remove the :meth:`!RawTurtle.settiltangle` method, deprecated in the "
"documentation since Python 3.1 and at runtime since Python 3.11. "
"(Contributed by Hugo van Kemenade in :gh:`104876`.)"
msgstr ""

#: whatsnew/3.13.rst:1687
msgid ""
"Remove the :mod:`!typing.io` and :mod:`!typing.re` namespaces, deprecated "
"since Python 3.8. The items in those namespaces can be imported directly "
"from the :mod:`typing` module. (Contributed by Sebastian Rittau in :gh:"
"`92871`.)"
msgstr ""

#: whatsnew/3.13.rst:1693
msgid ""
"Remove the keyword-argument method of creating :class:`~typing.TypedDict` "
"types, deprecated in Python 3.11. (Contributed by Tomas Roun in :gh:"
"`104786`.)"
msgstr ""

#: whatsnew/3.13.rst:1699
msgid "unittest"
msgstr "unittest"

#: whatsnew/3.13.rst:1701
msgid ""
"Remove the following :mod:`unittest` functions, deprecated in Python 3.11:"
msgstr ""

#: whatsnew/3.13.rst:1703
msgid ":func:`!unittest.findTestCases`"
msgstr ""

#: whatsnew/3.13.rst:1704
msgid ":func:`!unittest.makeSuite`"
msgstr ""

#: whatsnew/3.13.rst:1705
msgid ":func:`!unittest.getTestCaseNames`"
msgstr ""

#: whatsnew/3.13.rst:1707
msgid "Use :class:`~unittest.TestLoader` methods instead:"
msgstr ""

#: whatsnew/3.13.rst:1709
msgid ":meth:`~unittest.TestLoader.loadTestsFromModule`"
msgstr ""

#: whatsnew/3.13.rst:1710
msgid ":meth:`~unittest.TestLoader.loadTestsFromTestCase`"
msgstr ""

#: whatsnew/3.13.rst:1711
msgid ":meth:`~unittest.TestLoader.getTestCaseNames`"
msgstr ""

#: whatsnew/3.13.rst:1713
msgid "(Contributed by Hugo van Kemenade in :gh:`104835`.)"
msgstr ""

#: whatsnew/3.13.rst:1715
msgid ""
"Remove the untested and undocumented :meth:`!TestProgram.usageExit` method, "
"deprecated in Python 3.11. (Contributed by Hugo van Kemenade in :gh:"
"`104992`.)"
msgstr ""

#: whatsnew/3.13.rst:1721
msgid "urllib"
msgstr "urllib"

#: whatsnew/3.13.rst:1723
msgid ""
"Remove the *cafile*, *capath*, and *cadefault* parameters of the :func:"
"`urllib.request.urlopen` function, deprecated in Python 3.6. Use the "
"*context* parameter instead with an :class:`~ssl.SSLContext` instance. The :"
"meth:`ssl.SSLContext.load_cert_chain` function can be used to load specific "
"certificates, or let :func:`ssl.create_default_context` select the operating "
"system's trusted certificate authority (CA) certificates. (Contributed by "
"Victor Stinner in :gh:`105382`.)"
msgstr ""

#: whatsnew/3.13.rst:1734
msgid "webbrowser"
msgstr "webbrowser"

#: whatsnew/3.13.rst:1736
msgid ""
"Remove the untested and undocumented :class:`!MacOSX` class, deprecated in "
"Python 3.11. Use the :class:`!MacOSXOSAScript` class (introduced in Python "
"3.2) instead. (Contributed by Hugo van Kemenade in :gh:`104804`.)"
msgstr ""

#: whatsnew/3.13.rst:1741
msgid ""
"Remove the deprecated :attr:`!MacOSXOSAScript._name` attribute. Use the :"
"attr:`MacOSXOSAScript.name <webbrowser.controller.name>` attribute instead. "
"(Contributed by Nikita Sobolev in :gh:`105546`.)"
msgstr ""

#: whatsnew/3.13.rst:1748
msgid "New Deprecations"
msgstr ""

#: whatsnew/3.13.rst:1750
msgid ":ref:`User-defined functions <user-defined-funcs>`:"
msgstr ""

#: whatsnew/3.13.rst:1752
msgid ""
"Deprecate assignment to a function's :attr:`~function.__code__` attribute, "
"where the new code object's type does not match the function's type. The "
"different types are: plain function, generator, async generator, and "
"coroutine. (Contributed by Irit Katriel in :gh:`81137`.)"
msgstr ""

#: whatsnew/3.13.rst:1758 deprecations/pending-removal-in-3.16.rst:13
msgid ":mod:`array`:"
msgstr ""

#: whatsnew/3.13.rst:1760
msgid ""
"Deprecate the ``'u'`` format code (:c:type:`wchar_t`) at runtime. This "
"format code has been deprecated in documentation since Python 3.3, and will "
"be removed in Python 3.16. Use the ``'w'`` format code (:c:type:`Py_UCS4`) "
"for Unicode characters instead. (Contributed by Hugo van Kemenade in :gh:"
"`80480`.)"
msgstr ""

#: whatsnew/3.13.rst:1767 deprecations/pending-removal-in-3.15.rst:16
msgid ":mod:`ctypes`:"
msgstr ""

#: whatsnew/3.13.rst:1769
msgid ""
"Deprecate the undocumented :func:`!SetPointerType` function, to be removed "
"in Python 3.15. (Contributed by Victor Stinner in :gh:`105733`.)"
msgstr ""

#: whatsnew/3.13.rst:1773
msgid ""
":term:`Soft-deprecate <soft deprecated>` the :func:`~ctypes.ARRAY` function "
"in favour of ``type * length`` multiplication. (Contributed by Victor "
"Stinner in :gh:`105733`.)"
msgstr ""

#: whatsnew/3.13.rst:1777
msgid ":mod:`decimal`:"
msgstr ""

#: whatsnew/3.13.rst:1779
msgid ""
"Deprecate the non-standard and undocumented :class:`~decimal.Decimal` format "
"specifier ``'N'``, which is only supported in the :mod:`!decimal` module's C "
"implementation. (Contributed by Serhiy Storchaka in :gh:`89902`.)"
msgstr ""

#: whatsnew/3.13.rst:1784
msgid ":mod:`dis`:"
msgstr ""

#: whatsnew/3.13.rst:1786
msgid ""
"Deprecate the :attr:`!HAVE_ARGUMENT` separator. Check membership in :data:"
"`~dis.hasarg` instead. (Contributed by Irit Katriel in :gh:`109319`.)"
msgstr ""

#: whatsnew/3.13.rst:1790
msgid ":mod:`getopt` and :mod:`optparse`:"
msgstr ""

#: whatsnew/3.13.rst:1792
msgid ""
"Both modules are now :term:`soft deprecated`, with :mod:`argparse` preferred "
"for new projects. This is a new soft-deprecation for the :mod:`!getopt` "
"module, whereas the :mod:`!optparse` module was already *de facto* soft "
"deprecated. (Contributed by Victor Stinner in :gh:`106535`.)"
msgstr ""

#: whatsnew/3.13.rst:1798
msgid ":mod:`gettext`:"
msgstr ""

#: whatsnew/3.13.rst:1800
msgid ""
"Deprecate non-integer numbers as arguments to functions and methods that "
"consider plural forms in the :mod:`!gettext` module, even if no translation "
"was found. (Contributed by Serhiy Storchaka in :gh:`88434`.)"
msgstr ""

#: whatsnew/3.13.rst:1805
msgid ":mod:`glob`:"
msgstr ""

#: whatsnew/3.13.rst:1807
msgid ""
"Deprecate the undocumented :func:`!glob0` and :func:`!glob1` functions. Use :"
"func:`~glob.glob` and pass a :term:`path-like object` specifying the root "
"directory to the *root_dir* parameter instead. (Contributed by Barney Gale "
"in :gh:`117337`.)"
msgstr ""

#: whatsnew/3.13.rst:1812 deprecations/pending-removal-in-3.15.rst:21
msgid ":mod:`http.server`:"
msgstr ""

#: whatsnew/3.13.rst:1814
msgid ""
"Deprecate :class:`~http.server.CGIHTTPRequestHandler`, to be removed in "
"Python 3.15. Process-based CGI HTTP servers have been out of favor for a "
"very long time. This code was outdated, unmaintained, and rarely used. It "
"has a high potential for both security and functionality bugs. (Contributed "
"by Gregory P. Smith in :gh:`109096`.)"
msgstr ""

#: whatsnew/3.13.rst:1821
msgid ""
"Deprecate the :option:`!--cgi` flag to the :program:`python -m http.server` "
"command-line interface, to be removed in Python 3.15. (Contributed by "
"Gregory P. Smith in :gh:`109096`.)"
msgstr ""

#: whatsnew/3.13.rst:1826
msgid ":mod:`mimetypes`:"
msgstr ""

#: whatsnew/3.13.rst:1828
msgid ""
":term:`Soft-deprecate <soft deprecated>` file path arguments to :func:"
"`~mimetypes.guess_type`, use :func:`~mimetypes.guess_file_type` instead. "
"(Contributed by Serhiy Storchaka in :gh:`66543`.)"
msgstr ""

#: whatsnew/3.13.rst:1833
msgid ":mod:`re`:"
msgstr ""

#: whatsnew/3.13.rst:1835
msgid ""
"Deprecate passing the optional *maxsplit*, *count*, or *flags* arguments as "
"positional arguments to the module-level :func:`~re.split`, :func:`~re.sub`, "
"and :func:`~re.subn` functions. These parameters will become :ref:`keyword-"
"only <keyword-only_parameter>` in a future version of Python. (Contributed "
"by Serhiy Storchaka in :gh:`56166`.)"
msgstr ""

#: whatsnew/3.13.rst:1842 deprecations/pending-removal-in-3.15.rst:42
msgid ":mod:`pathlib`:"
msgstr ""

#: whatsnew/3.13.rst:1844
msgid ""
"Deprecate :meth:`.PurePath.is_reserved`, to be removed in Python 3.15. Use :"
"func:`os.path.isreserved` to detect reserved paths on Windows. (Contributed "
"by Barney Gale in :gh:`88569`.)"
msgstr ""

#: whatsnew/3.13.rst:1849 deprecations/pending-removal-in-3.15.rst:48
msgid ":mod:`platform`:"
msgstr ""

#: whatsnew/3.13.rst:1851
msgid ""
"Deprecate :func:`~platform.java_ver`, to be removed in Python 3.15. This "
"function is only useful for Jython support, has a confusing API, and is "
"largely untested. (Contributed by Nikita Sobolev in :gh:`116349`.)"
msgstr ""

#: whatsnew/3.13.rst:1857
msgid ":mod:`pydoc`:"
msgstr ""

#: whatsnew/3.13.rst:1859
msgid ""
"Deprecate the undocumented :func:`!ispackage` function. (Contributed by "
"Zackery Spytz in :gh:`64020`.)"
msgstr ""

#: whatsnew/3.13.rst:1862 deprecations/pending-removal-in-3.14.rst:98
msgid ":mod:`sqlite3`:"
msgstr ""

#: whatsnew/3.13.rst:1864
msgid ""
"Deprecate passing more than one positional argument to the :func:`~sqlite3."
"connect` function and the :class:`~sqlite3.Connection` constructor. The "
"remaining parameters will become keyword-only in Python 3.15. (Contributed "
"by Erlend E. Aasland in :gh:`107948`.)"
msgstr ""

#: whatsnew/3.13.rst:1870
msgid ""
"Deprecate passing name, number of arguments, and the callable as keyword "
"arguments for :meth:`.Connection.create_function` and :meth:`.Connection."
"create_aggregate` These parameters will become positional-only in Python "
"3.15. (Contributed by Erlend E. Aasland in :gh:`108278`.)"
msgstr ""

#: whatsnew/3.13.rst:1876
msgid ""
"Deprecate passing the callback callable by keyword for the :meth:`~sqlite3."
"Connection.set_authorizer`, :meth:`~sqlite3.Connection."
"set_progress_handler`, and :meth:`~sqlite3.Connection.set_trace_callback` :"
"class:`~sqlite3.Connection` methods. The callback callables will become "
"positional-only in Python 3.15. (Contributed by Erlend E. Aasland in :gh:"
"`108278`.)"
msgstr ""

#: whatsnew/3.13.rst:1884 deprecations/pending-removal-in-3.16.rst:33
msgid ":mod:`sys`:"
msgstr ""

#: whatsnew/3.13.rst:1886
msgid ""
"Deprecate the :func:`~sys._enablelegacywindowsfsencoding` function, to be "
"removed in Python 3.16. Use the :envvar:`PYTHONLEGACYWINDOWSFSENCODING` "
"environment variable instead. (Contributed by Inada Naoki in :gh:`73427`.)"
msgstr ""

#: whatsnew/3.13.rst:1891 deprecations/pending-removal-in-3.16.rst:39
msgid ":mod:`tarfile`:"
msgstr ""

#: whatsnew/3.13.rst:1893
msgid ""
"Deprecate the undocumented and unused :attr:`!TarFile.tarfile` attribute, to "
"be removed in Python 3.16. (Contributed in :gh:`115256`.)"
msgstr ""

#: whatsnew/3.13.rst:1897
msgid ":mod:`traceback`:"
msgstr ""

#: whatsnew/3.13.rst:1899
msgid ""
"Deprecate the :attr:`.TracebackException.exc_type` attribute. Use :attr:`."
"TracebackException.exc_type_str` instead. (Contributed by Irit Katriel in :"
"gh:`112332`.)"
msgstr ""

#: whatsnew/3.13.rst:1903 deprecations/pending-removal-in-3.15.rst:62
msgid ":mod:`typing`:"
msgstr ""

#: whatsnew/3.13.rst:1905
msgid ""
"Deprecate the undocumented keyword argument syntax for creating :class:"
"`~typing.NamedTuple` classes (e.g. ``Point = NamedTuple(\"Point\", x=int, "
"y=int)``), to be removed in Python 3.15. Use the class-based syntax or the "
"functional syntax instead. (Contributed by Alex Waygood in :gh:`105566`.)"
msgstr ""

#: whatsnew/3.13.rst:1912
msgid ""
"Deprecate omitting the *fields* parameter when creating a :class:`~typing."
"NamedTuple` or :class:`typing.TypedDict` class, and deprecate passing "
"``None`` to the *fields* parameter of both types. Python 3.15 will require a "
"valid sequence for the *fields* parameter. To create a NamedTuple class with "
"zero fields, use ``class NT(NamedTuple): pass`` or ``NT = NamedTuple(\"NT\", "
"())``. To create a TypedDict class with zero fields, use ``class "
"TD(TypedDict): pass`` or ``TD = TypedDict(\"TD\", {})``. (Contributed by "
"Alex Waygood in :gh:`105566` and :gh:`105570`.)"
msgstr ""

#: whatsnew/3.13.rst:1922
msgid ""
"Deprecate the :func:`typing.no_type_check_decorator` decorator function, to "
"be removed in in Python 3.15. After eight years in the :mod:`typing` module, "
"it has yet to be supported by any major type checker. (Contributed by Alex "
"Waygood in :gh:`106309`.)"
msgstr ""

#: whatsnew/3.13.rst:1928
msgid ""
"Deprecate :data:`typing.AnyStr`. In Python 3.16, it will be removed from "
"``typing.__all__``, and a :exc:`DeprecationWarning` will be emitted at "
"runtime when it is imported or accessed. It will be removed entirely in "
"Python 3.18. Use the new :ref:`type parameter syntax <type-params>` instead. "
"(Contributed by Michael The in :gh:`107116`.)"
msgstr ""

#: whatsnew/3.13.rst:1936 deprecations/pending-removal-in-3.15.rst:75
msgid ":mod:`wave`:"
msgstr ""

#: whatsnew/3.13.rst:1938
msgid ""
"Deprecate the :meth:`~wave.Wave_read.getmark`, :meth:`!setmark`, and :meth:"
"`~wave.Wave_read.getmarkers` methods of the :class:`~wave.Wave_read` and :"
"class:`~wave.Wave_write` classes, to be removed in Python 3.15. (Contributed "
"by Victor Stinner in :gh:`105096`.)"
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:2
#: deprecations/pending-removal-in-3.14.rst:2
msgid "Pending Removal in Python 3.14"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:4
#: deprecations/pending-removal-in-3.15.rst:4
msgid "The import system:"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:6
msgid ""
"Setting :attr:`~module.__loader__` on a module while failing to set :attr:"
"`__spec__.loader <importlib.machinery.ModuleSpec.loader>` is deprecated. In "
"Python 3.14, :attr:`!__loader__` will cease to be set or taken into "
"consideration by the import system or the standard library."
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:11
msgid ""
":mod:`argparse`: The *type*, *choices*, and *metavar* parameters of :class:`!"
"argparse.BooleanOptionalAction` are deprecated and will be removed in 3.14. "
"(Contributed by Nikita Sobolev in :gh:`92248`.)"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:16
msgid ""
":mod:`ast`: The following features have been deprecated in documentation "
"since Python 3.8, now cause a :exc:`DeprecationWarning` to be emitted at "
"runtime when they are accessed or used, and will be removed in Python 3.14:"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:20
msgid ":class:`!ast.Num`"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:21
msgid ":class:`!ast.Str`"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:22
msgid ":class:`!ast.Bytes`"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:23
msgid ":class:`!ast.NameConstant`"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:24
msgid ":class:`!ast.Ellipsis`"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:26
msgid ""
"Use :class:`ast.Constant` instead. (Contributed by Serhiy Storchaka in :gh:"
"`90953`.)"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:29
msgid ":mod:`asyncio`:"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:31
msgid ""
"The child watcher classes :class:`~asyncio.MultiLoopChildWatcher`, :class:"
"`~asyncio.FastChildWatcher`, :class:`~asyncio.AbstractChildWatcher` and :"
"class:`~asyncio.SafeChildWatcher` are deprecated and will be removed in "
"Python 3.14. (Contributed by Kumar Aditya in :gh:`94597`.)"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:37
msgid ""
":func:`asyncio.set_child_watcher`, :func:`asyncio.get_child_watcher`, :meth:"
"`asyncio.AbstractEventLoopPolicy.set_child_watcher` and :meth:`asyncio."
"AbstractEventLoopPolicy.get_child_watcher` are deprecated and will be "
"removed in Python 3.14. (Contributed by Kumar Aditya in :gh:`94597`.)"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:43
msgid ""
"The :meth:`~asyncio.get_event_loop` method of the default event loop policy "
"now emits a :exc:`DeprecationWarning` if there is no current event loop set "
"and it decides to create one. (Contributed by Serhiy Storchaka and Guido van "
"Rossum in :gh:`100160`.)"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:48
msgid ""
":mod:`collections.abc`: Deprecated :class:`~collections.abc.ByteString`. "
"Prefer :class:`!Sequence` or :class:`~collections.abc.Buffer`. For use in "
"typing, prefer a union, like ``bytes | bytearray``, or :class:`collections."
"abc.Buffer`. (Contributed by Shantanu Jain in :gh:`91896`.)"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:54
msgid ""
":mod:`email`: Deprecated the *isdst* parameter in :func:`email.utils."
"localtime`. (Contributed by Alan Williams in :gh:`72346`.)"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:57
msgid ":mod:`importlib.abc` deprecated classes:"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:59
msgid ":class:`!importlib.abc.ResourceReader`"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:60
msgid ":class:`!importlib.abc.Traversable`"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:61
msgid ":class:`!importlib.abc.TraversableResources`"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:63
msgid "Use :mod:`importlib.resources.abc` classes instead:"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:65
msgid ":class:`importlib.resources.abc.Traversable`"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:66
msgid ":class:`importlib.resources.abc.TraversableResources`"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:68
msgid "(Contributed by Jason R. Coombs and Hugo van Kemenade in :gh:`93963`.)"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:70
msgid ""
":mod:`itertools` had undocumented, inefficient, historically buggy, and "
"inconsistent support for copy, deepcopy, and pickle operations. This will be "
"removed in 3.14 for a significant reduction in code volume and maintenance "
"burden. (Contributed by Raymond Hettinger in :gh:`101588`.)"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:76
msgid ""
":mod:`multiprocessing`: The default start method will change to a safer one "
"on Linux, BSDs, and other non-macOS POSIX platforms where ``'fork'`` is "
"currently the default (:gh:`84559`). Adding a runtime warning about this was "
"deemed too disruptive as the majority of code is not expected to care. Use "
"the :func:`~multiprocessing.get_context` or :func:`~multiprocessing."
"set_start_method` APIs to explicitly specify when your code *requires* "
"``'fork'``.  See :ref:`multiprocessing-start-methods`."
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:84
msgid ""
":mod:`pathlib`: :meth:`~pathlib.PurePath.is_relative_to` and :meth:`~pathlib."
"PurePath.relative_to`: passing additional arguments is deprecated."
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:88
msgid ""
":mod:`pkgutil`: :func:`~pkgutil.find_loader` and :func:`~pkgutil.get_loader` "
"now raise :exc:`DeprecationWarning`; use :func:`importlib.util.find_spec` "
"instead. (Contributed by Nikita Sobolev in :gh:`97850`.)"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:93
msgid ":mod:`pty`:"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:95
msgid "``master_open()``: use :func:`pty.openpty`."
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:96
msgid "``slave_open()``: use :func:`pty.openpty`."
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:100
msgid ":data:`~sqlite3.version` and :data:`~sqlite3.version_info`."
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:102
msgid ""
":meth:`~sqlite3.Cursor.execute` and :meth:`~sqlite3.Cursor.executemany` if :"
"ref:`named placeholders <sqlite3-placeholders>` are used and *parameters* is "
"a sequence instead of a :class:`dict`."
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:106
msgid ""
"date and datetime adapter, date and timestamp converter: see the :mod:"
"`sqlite3` documentation for suggested replacement recipes."
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:109
msgid ""
":class:`types.CodeType`: Accessing :attr:`~codeobject.co_lnotab` was "
"deprecated in :pep:`626` since 3.10 and was planned to be removed in 3.12, "
"but it only got a proper :exc:`DeprecationWarning` in 3.12. May be removed "
"in 3.14. (Contributed by Nikita Sobolev in :gh:`101866`.)"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:116
msgid ""
":mod:`typing`: :class:`~typing.ByteString`, deprecated since Python 3.9, now "
"causes a :exc:`DeprecationWarning` to be emitted when it is used."
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:119
msgid ""
":mod:`urllib`: :class:`!urllib.parse.Quoter` is deprecated: it was not "
"intended to be a public API. (Contributed by Gregory P. Smith in :gh:"
"`88168`.)"
msgstr ""

#: deprecations/c-api-pending-removal-in-3.15.rst:2
#: deprecations/pending-removal-in-3.15.rst:2
msgid "Pending Removal in Python 3.15"
msgstr ""

#: deprecations/pending-removal-in-3.15.rst:6
msgid ""
"Setting :attr:`~module.__cached__` on a module while failing to set :attr:"
"`__spec__.cached <importlib.machinery.ModuleSpec.cached>` is deprecated. In "
"Python 3.15, :attr:`!__cached__` will cease to be set or take into "
"consideration by the import system or standard library. (:gh:`97879`)"
msgstr ""

#: deprecations/pending-removal-in-3.15.rst:11
msgid ""
"Setting :attr:`~module.__package__` on a module while failing to set :attr:"
"`__spec__.parent <importlib.machinery.ModuleSpec.parent>` is deprecated. In "
"Python 3.15, :attr:`!__package__` will cease to be set or take into "
"consideration by the import system or standard library. (:gh:`97879`)"
msgstr ""

#: deprecations/pending-removal-in-3.15.rst:18
msgid ""
"The undocumented :func:`!ctypes.SetPointerType` function has been deprecated "
"since Python 3.13."
msgstr ""

#: deprecations/pending-removal-in-3.15.rst:23
msgid ""
"The obsolete and rarely used :class:`~http.server.CGIHTTPRequestHandler` has "
"been deprecated since Python 3.13. No direct replacement exists. *Anything* "
"is better than CGI to interface a web server with a request handler."
msgstr ""

#: deprecations/pending-removal-in-3.15.rst:29
msgid ""
"The :option:`!--cgi` flag to the :program:`python -m http.server` command-"
"line interface has been deprecated since Python 3.13."
msgstr ""

#: deprecations/pending-removal-in-3.15.rst:32
msgid ":class:`locale`:"
msgstr ""

#: deprecations/pending-removal-in-3.15.rst:34
msgid ""
"The :func:`~locale.getdefaultlocale` function has been deprecated since "
"Python 3.11. Its removal was originally planned for Python 3.13 (:gh:"
"`90817`), but has been postponed to Python 3.15. Use :func:`~locale."
"getlocale`, :func:`~locale.setlocale`, and :func:`~locale.getencoding` "
"instead. (Contributed by Hugo van Kemenade in :gh:`111187`.)"
msgstr ""

#: deprecations/pending-removal-in-3.15.rst:44
msgid ""
":meth:`.PurePath.is_reserved` has been deprecated since Python 3.13. Use :"
"func:`os.path.isreserved` to detect reserved paths on Windows."
msgstr ""

#: deprecations/pending-removal-in-3.15.rst:50
msgid ""
":func:`~platform.java_ver` has been deprecated since Python 3.13. This "
"function is only useful for Jython support, has a confusing API, and is "
"largely untested."
msgstr ""

#: deprecations/pending-removal-in-3.15.rst:54
msgid ":mod:`threading`:"
msgstr ""

#: deprecations/pending-removal-in-3.15.rst:56
msgid ""
":func:`~threading.RLock` will take no arguments in Python 3.15. Passing any "
"arguments has been deprecated since Python 3.14, as the  Python version does "
"not permit any arguments, but the C version allows any number of positional "
"or keyword arguments, ignoring every argument."
msgstr ""

#: deprecations/pending-removal-in-3.15.rst:64
msgid ""
"The undocumented keyword argument syntax for creating :class:`~typing."
"NamedTuple` classes (e.g. ``Point = NamedTuple(\"Point\", x=int, y=int)``) "
"has been deprecated since Python 3.13. Use the class-based syntax or the "
"functional syntax instead."
msgstr ""

#: deprecations/pending-removal-in-3.15.rst:70
msgid ""
"The :func:`typing.no_type_check_decorator` decorator function has been "
"deprecated since Python 3.13. After eight years in the :mod:`typing` module, "
"it has yet to be supported by any major type checker."
msgstr ""

#: deprecations/pending-removal-in-3.15.rst:77
msgid ""
"The :meth:`~wave.Wave_read.getmark`, :meth:`!setmark`, and :meth:`~wave."
"Wave_read.getmarkers` methods of the :class:`~wave.Wave_read` and :class:"
"`~wave.Wave_write` classes have been deprecated since Python 3.13."
msgstr ""

#: deprecations/pending-removal-in-3.16.rst:2
msgid "Pending Removal in Python 3.16"
msgstr ""

#: deprecations/pending-removal-in-3.16.rst:4
#: deprecations/pending-removal-in-future.rst:12
msgid ":mod:`builtins`:"
msgstr ""

#: deprecations/pending-removal-in-3.16.rst:6
msgid ""
"Bitwise inversion on boolean types, ``~True`` or ``~False`` has been "
"deprecated since Python 3.12, as it produces surprising and unintuitive "
"results (``-2`` and ``-1``). Use ``not x`` instead for the logical negation "
"of a Boolean. In the rare case that you need the bitwise inversion of the "
"underlying integer, convert to ``int`` explicitly (``~int(x)``)."
msgstr ""

#: deprecations/pending-removal-in-3.16.rst:15
msgid ""
"The ``'u'`` format code (:c:type:`wchar_t`) has been deprecated in "
"documentation since Python 3.3 and at runtime since Python 3.13. Use the "
"``'w'`` format code (:c:type:`Py_UCS4`) for Unicode characters instead."
msgstr ""

#: deprecations/pending-removal-in-3.16.rst:21
msgid ":mod:`shutil`:"
msgstr ""

#: deprecations/pending-removal-in-3.16.rst:23
msgid ""
"The :class:`!ExecError` exception has been deprecated since Python 3.14. It "
"has not been used by any function in :mod:`!shutil` since Python 3.4, and is "
"now an alias of :exc:`RuntimeError`."
msgstr ""

#: deprecations/pending-removal-in-3.16.rst:28
msgid ":mod:`symtable`:"
msgstr ""

#: deprecations/pending-removal-in-3.16.rst:30
msgid ""
"The :meth:`Class.get_methods <symtable.Class.get_methods>` method has been "
"deprecated since Python 3.14."
msgstr ""

#: deprecations/pending-removal-in-3.16.rst:35
msgid ""
"The :func:`~sys._enablelegacywindowsfsencoding` function has been deprecated "
"since Python 3.13. Use the :envvar:`PYTHONLEGACYWINDOWSFSENCODING` "
"environment variable instead."
msgstr ""

#: deprecations/pending-removal-in-3.16.rst:41
msgid ""
"The undocumented and unused :attr:`!TarFile.tarfile` attribute has been "
"deprecated since Python 3.13."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:2
#: deprecations/pending-removal-in-future.rst:2
msgid "Pending Removal in Future Versions"
msgstr ""

#: deprecations/pending-removal-in-future.rst:4
msgid ""
"The following APIs will be removed in the future, although there is "
"currently no date scheduled for their removal."
msgstr ""

#: deprecations/pending-removal-in-future.rst:7
msgid ""
":mod:`argparse`: Nesting argument groups and nesting mutually exclusive "
"groups are deprecated."
msgstr ""

#: deprecations/pending-removal-in-future.rst:10
msgid ":mod:`array`'s ``'u'`` format code (:gh:`57281`)"
msgstr ""

#: deprecations/pending-removal-in-future.rst:14
msgid "``bool(NotImplemented)``."
msgstr ""

#: deprecations/pending-removal-in-future.rst:15
msgid ""
"Generators: ``throw(type, exc, tb)`` and ``athrow(type, exc, tb)`` signature "
"is deprecated: use ``throw(exc)`` and ``athrow(exc)`` instead, the single "
"argument signature."
msgstr ""

#: deprecations/pending-removal-in-future.rst:18
msgid ""
"Currently Python accepts numeric literals immediately followed by keywords, "
"for example ``0in x``, ``1or x``, ``0if 1else 2``.  It allows confusing and "
"ambiguous expressions like ``[0x1for x in y]`` (which can be interpreted as "
"``[0x1 for x in y]`` or ``[0x1f or x in y]``).  A syntax warning is raised "
"if the numeric literal is immediately followed by one of keywords :keyword:"
"`and`, :keyword:`else`, :keyword:`for`, :keyword:`if`, :keyword:`in`, :"
"keyword:`is` and :keyword:`or`.  In a future release it will be changed to a "
"syntax error. (:gh:`87999`)"
msgstr ""

#: deprecations/pending-removal-in-future.rst:26
msgid ""
"Support for ``__index__()`` and ``__int__()`` method returning non-int type: "
"these methods will be required to return an instance of a strict subclass "
"of :class:`int`."
msgstr ""

#: deprecations/pending-removal-in-future.rst:29
msgid ""
"Support for ``__float__()`` method returning a strict subclass of :class:"
"`float`: these methods will be required to return an instance of :class:"
"`float`."
msgstr ""

#: deprecations/pending-removal-in-future.rst:32
msgid ""
"Support for ``__complex__()`` method returning a strict subclass of :class:"
"`complex`: these methods will be required to return an instance of :class:"
"`complex`."
msgstr ""

#: deprecations/pending-removal-in-future.rst:35
msgid "Delegation of ``int()`` to ``__trunc__()`` method."
msgstr ""

#: deprecations/pending-removal-in-future.rst:36
msgid ""
"Passing a complex number as the *real* or *imag* argument in the :func:"
"`complex` constructor is now deprecated; it should only be passed as a "
"single positional argument. (Contributed by Serhiy Storchaka in :gh:"
"`109218`.)"
msgstr ""

#: deprecations/pending-removal-in-future.rst:41
msgid ""
":mod:`calendar`: ``calendar.January`` and ``calendar.February`` constants "
"are deprecated and replaced by :data:`calendar.JANUARY` and :data:`calendar."
"FEBRUARY`. (Contributed by Prince Roshan in :gh:`103636`.)"
msgstr ""

#: deprecations/pending-removal-in-future.rst:46
msgid ""
":attr:`codeobject.co_lnotab`: use the :meth:`codeobject.co_lines` method "
"instead."
msgstr ""

#: deprecations/pending-removal-in-future.rst:49
msgid ":mod:`datetime`:"
msgstr ""

#: deprecations/pending-removal-in-future.rst:51
msgid ""
":meth:`~datetime.datetime.utcnow`: use ``datetime.datetime.now(tz=datetime."
"UTC)``."
msgstr ""

#: deprecations/pending-removal-in-future.rst:53
msgid ""
":meth:`~datetime.datetime.utcfromtimestamp`: use ``datetime.datetime."
"fromtimestamp(timestamp, tz=datetime.UTC)``."
msgstr ""

#: deprecations/pending-removal-in-future.rst:56
msgid ":mod:`gettext`: Plural value must be an integer."
msgstr ""

#: deprecations/pending-removal-in-future.rst:58
msgid ":mod:`importlib`:"
msgstr ""

#: deprecations/pending-removal-in-future.rst:60
msgid "``load_module()`` method: use ``exec_module()`` instead."
msgstr ""

#: deprecations/pending-removal-in-future.rst:61
msgid ""
":func:`~importlib.util.cache_from_source` *debug_override* parameter is "
"deprecated: use the *optimization* parameter instead."
msgstr ""

#: deprecations/pending-removal-in-future.rst:64
msgid ":mod:`importlib.metadata`:"
msgstr ""

#: deprecations/pending-removal-in-future.rst:66
msgid "``EntryPoints`` tuple interface."
msgstr ""

#: deprecations/pending-removal-in-future.rst:67
msgid "Implicit ``None`` on return values."
msgstr ""

#: deprecations/pending-removal-in-future.rst:69
msgid ""
":mod:`logging`: the ``warn()`` method has been deprecated since Python 3.3, "
"use :meth:`~logging.warning` instead."
msgstr ""

#: deprecations/pending-removal-in-future.rst:72
msgid ""
":mod:`mailbox`: Use of StringIO input and text mode is deprecated, use "
"BytesIO and binary mode instead."
msgstr ""

#: deprecations/pending-removal-in-future.rst:75
msgid ""
":mod:`os`: Calling :func:`os.register_at_fork` in multi-threaded process."
msgstr ""

#: deprecations/pending-removal-in-future.rst:77
msgid ""
":class:`!pydoc.ErrorDuringImport`: A tuple value for *exc_info* parameter is "
"deprecated, use an exception instance."
msgstr ""

#: deprecations/pending-removal-in-future.rst:80
msgid ""
":mod:`re`: More strict rules are now applied for numerical group references "
"and group names in regular expressions.  Only sequence of ASCII digits is "
"now accepted as a numerical reference.  The group name in bytes patterns and "
"replacement strings can now only contain ASCII letters and digits and "
"underscore. (Contributed by Serhiy Storchaka in :gh:`91760`.)"
msgstr ""

#: deprecations/pending-removal-in-future.rst:87
msgid ""
":mod:`!sre_compile`, :mod:`!sre_constants` and :mod:`!sre_parse` modules."
msgstr ""

#: deprecations/pending-removal-in-future.rst:89
msgid ""
":mod:`shutil`: :func:`~shutil.rmtree`'s *onerror* parameter is deprecated in "
"Python 3.12; use the *onexc* parameter instead."
msgstr ""

#: deprecations/pending-removal-in-future.rst:92
msgid ":mod:`ssl` options and protocols:"
msgstr ""

#: deprecations/pending-removal-in-future.rst:94
msgid ":class:`ssl.SSLContext` without protocol argument is deprecated."
msgstr ""

#: deprecations/pending-removal-in-future.rst:95
msgid ""
":class:`ssl.SSLContext`: :meth:`~ssl.SSLContext.set_npn_protocols` and :meth:"
"`!selected_npn_protocol` are deprecated: use ALPN instead."
msgstr ""

#: deprecations/pending-removal-in-future.rst:98
msgid "``ssl.OP_NO_SSL*`` options"
msgstr ""

#: deprecations/pending-removal-in-future.rst:99
msgid "``ssl.OP_NO_TLS*`` options"
msgstr ""

#: deprecations/pending-removal-in-future.rst:100
msgid "``ssl.PROTOCOL_SSLv3``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:101
msgid "``ssl.PROTOCOL_TLS``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:102
msgid "``ssl.PROTOCOL_TLSv1``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:103
msgid "``ssl.PROTOCOL_TLSv1_1``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:104
msgid "``ssl.PROTOCOL_TLSv1_2``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:105
msgid "``ssl.TLSVersion.SSLv3``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:106
msgid "``ssl.TLSVersion.TLSv1``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:107
msgid "``ssl.TLSVersion.TLSv1_1``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:109
msgid ""
":func:`sysconfig.is_python_build` *check_home* parameter is deprecated and "
"ignored."
msgstr ""

#: deprecations/pending-removal-in-future.rst:112
msgid ":mod:`threading` methods:"
msgstr ""

#: deprecations/pending-removal-in-future.rst:114
msgid ""
":meth:`!threading.Condition.notifyAll`: use :meth:`~threading.Condition."
"notify_all`."
msgstr ""

#: deprecations/pending-removal-in-future.rst:115
msgid ":meth:`!threading.Event.isSet`: use :meth:`~threading.Event.is_set`."
msgstr ""

#: deprecations/pending-removal-in-future.rst:116
msgid ""
":meth:`!threading.Thread.isDaemon`, :meth:`threading.Thread.setDaemon`: use :"
"attr:`threading.Thread.daemon` attribute."
msgstr ""

#: deprecations/pending-removal-in-future.rst:118
msgid ""
":meth:`!threading.Thread.getName`, :meth:`threading.Thread.setName`: use :"
"attr:`threading.Thread.name` attribute."
msgstr ""

#: deprecations/pending-removal-in-future.rst:120
msgid ":meth:`!threading.currentThread`: use :meth:`threading.current_thread`."
msgstr ""

#: deprecations/pending-removal-in-future.rst:121
msgid ":meth:`!threading.activeCount`: use :meth:`threading.active_count`."
msgstr ""

#: deprecations/pending-removal-in-future.rst:123
msgid ":class:`typing.Text` (:gh:`92332`)."
msgstr ""

#: deprecations/pending-removal-in-future.rst:125
msgid ""
":class:`unittest.IsolatedAsyncioTestCase`: it is deprecated to return a "
"value that is not ``None`` from a test case."
msgstr ""

#: deprecations/pending-removal-in-future.rst:128
msgid ""
":mod:`urllib.parse` deprecated functions: :func:`~urllib.parse.urlparse` "
"instead"
msgstr ""

#: deprecations/pending-removal-in-future.rst:130
msgid "``splitattr()``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:131
msgid "``splithost()``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:132
msgid "``splitnport()``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:133
msgid "``splitpasswd()``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:134
msgid "``splitport()``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:135
msgid "``splitquery()``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:136
msgid "``splittag()``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:137
msgid "``splittype()``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:138
msgid "``splituser()``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:139
msgid "``splitvalue()``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:140
msgid "``to_bytes()``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:142
msgid ""
":mod:`urllib.request`: :class:`~urllib.request.URLopener` and :class:"
"`~urllib.request.FancyURLopener` style of invoking requests is deprecated. "
"Use newer :func:`~urllib.request.urlopen` functions and methods."
msgstr ""

#: deprecations/pending-removal-in-future.rst:146
msgid ""
":mod:`wsgiref`: ``SimpleHandler.stdout.write()`` should not do partial "
"writes."
msgstr ""

#: deprecations/pending-removal-in-future.rst:149
msgid ""
":mod:`xml.etree.ElementTree`: Testing the truth value of an :class:`~xml."
"etree.ElementTree.Element` is deprecated. In a future release it will always "
"return ``True``. Prefer explicit ``len(elem)`` or ``elem is not None`` tests "
"instead."
msgstr ""

#: deprecations/pending-removal-in-future.rst:154
msgid ""
":meth:`zipimport.zipimporter.load_module` is deprecated: use :meth:"
"`~zipimport.zipimporter.exec_module` instead."
msgstr ""

#: whatsnew/3.13.rst:1955
msgid "CPython Bytecode Changes"
msgstr ""

#: whatsnew/3.13.rst:1957
msgid ""
"The oparg of :opcode:`YIELD_VALUE` is now ``1`` if the yield is part of a "
"yield-from or await, and ``0`` otherwise. The oparg of :opcode:`RESUME` was "
"changed to add a bit indicating if the except-depth is 1, which is needed to "
"optimize closing of generators. (Contributed by Irit Katriel in :gh:"
"`111354`.)"
msgstr ""

#: whatsnew/3.13.rst:1965
msgid "C API Changes"
msgstr "Changements à l'API C"

#: whatsnew/3.13.rst:1970
msgid ""
"Add the :ref:`PyMonitoring C API <c-api-monitoring>` for generating :pep:"
"`669` monitoring events:"
msgstr ""

#: whatsnew/3.13.rst:1973
msgid ":c:type:`PyMonitoringState`"
msgstr ""

#: whatsnew/3.13.rst:1974
msgid ":c:func:`PyMonitoring_FirePyStartEvent`"
msgstr ""

#: whatsnew/3.13.rst:1975
msgid ":c:func:`PyMonitoring_FirePyResumeEvent`"
msgstr ""

#: whatsnew/3.13.rst:1976
msgid ":c:func:`PyMonitoring_FirePyReturnEvent`"
msgstr ""

#: whatsnew/3.13.rst:1977
msgid ":c:func:`PyMonitoring_FirePyYieldEvent`"
msgstr ""

#: whatsnew/3.13.rst:1978
msgid ":c:func:`PyMonitoring_FireCallEvent`"
msgstr ""

#: whatsnew/3.13.rst:1979
msgid ":c:func:`PyMonitoring_FireLineEvent`"
msgstr ""

#: whatsnew/3.13.rst:1980
msgid ":c:func:`PyMonitoring_FireJumpEvent`"
msgstr ""

#: whatsnew/3.13.rst:1981
msgid ":c:func:`PyMonitoring_FireBranchEvent`"
msgstr ""

#: whatsnew/3.13.rst:1982
msgid ":c:func:`PyMonitoring_FireCReturnEvent`"
msgstr ""

#: whatsnew/3.13.rst:1983
msgid ":c:func:`PyMonitoring_FirePyThrowEvent`"
msgstr ""

#: whatsnew/3.13.rst:1984
msgid ":c:func:`PyMonitoring_FireRaiseEvent`"
msgstr ""

#: whatsnew/3.13.rst:1985
msgid ":c:func:`PyMonitoring_FireCRaiseEvent`"
msgstr ""

#: whatsnew/3.13.rst:1986
msgid ":c:func:`PyMonitoring_FireReraiseEvent`"
msgstr ""

#: whatsnew/3.13.rst:1987
msgid ":c:func:`PyMonitoring_FireExceptionHandledEvent`"
msgstr ""

#: whatsnew/3.13.rst:1988
msgid ":c:func:`PyMonitoring_FirePyUnwindEvent`"
msgstr ""

#: whatsnew/3.13.rst:1989
msgid ":c:func:`PyMonitoring_FireStopIterationEvent`"
msgstr ""

#: whatsnew/3.13.rst:1990
msgid ":c:func:`PyMonitoring_EnterScope`"
msgstr ""

#: whatsnew/3.13.rst:1991
msgid ":c:func:`PyMonitoring_ExitScope`"
msgstr ""

#: whatsnew/3.13.rst:1993
msgid "(Contributed by Irit Katriel in :gh:`111997`)."
msgstr ""

#: whatsnew/3.13.rst:1995
msgid ""
"Add :c:type:`PyMutex`, a lightweight mutex that occupies a single byte, and "
"the new :c:func:`PyMutex_Lock` and :c:func:`PyMutex_Unlock` functions. :c:"
"func:`!PyMutex_Lock` will release the :term:`GIL` (if currently held) if the "
"operation needs to block. (Contributed by Sam Gross in :gh:`108724`.)"
msgstr ""

#: whatsnew/3.13.rst:2001
msgid ""
"Add the :ref:`PyTime C API <c-api-time>` to provide access to system clocks:"
msgstr ""

#: whatsnew/3.13.rst:2003
msgid ":c:type:`PyTime_t`."
msgstr ""

#: whatsnew/3.13.rst:2004
msgid ":c:var:`PyTime_MIN` and :c:var:`PyTime_MAX`."
msgstr ""

#: whatsnew/3.13.rst:2005
msgid ":c:func:`PyTime_AsSecondsDouble`."
msgstr ""

#: whatsnew/3.13.rst:2006
msgid ":c:func:`PyTime_Monotonic`."
msgstr ""

#: whatsnew/3.13.rst:2007
msgid ":c:func:`PyTime_MonotonicRaw`."
msgstr ""

#: whatsnew/3.13.rst:2008
msgid ":c:func:`PyTime_PerfCounter`."
msgstr ""

#: whatsnew/3.13.rst:2009
msgid ":c:func:`PyTime_PerfCounterRaw`."
msgstr ""

#: whatsnew/3.13.rst:2010
msgid ":c:func:`PyTime_Time`."
msgstr ""

#: whatsnew/3.13.rst:2011
msgid ":c:func:`PyTime_TimeRaw`."
msgstr ""

#: whatsnew/3.13.rst:2013
msgid "(Contributed by Victor Stinner and Petr Viktorin in :gh:`110850`.)"
msgstr ""

#: whatsnew/3.13.rst:2015
msgid ""
"Add the :c:func:`PyDict_ContainsString` function with the same behavior as :"
"c:func:`PyDict_Contains`, but *key* is specified as a :c:expr:`const char*` "
"UTF-8 encoded bytes string, rather than a :c:expr:`PyObject*`. (Contributed "
"by Victor Stinner in :gh:`108314`.)"
msgstr ""

#: whatsnew/3.13.rst:2021
msgid ""
"Add the :c:func:`PyDict_GetItemRef` and :c:func:`PyDict_GetItemStringRef` "
"functions, which behave similarly to :c:func:`PyDict_GetItemWithError`, but "
"return a  :term:`strong reference` instead of a :term:`borrowed reference`. "
"Moreover, these functions return ``-1`` on error, removing the need to "
"check :c:func:`!PyErr_Occurred`. (Contributed by Victor Stinner in :gh:"
"`106004`.)"
msgstr ""

#: whatsnew/3.13.rst:2029
msgid ""
"Add the :c:func:`PyDict_SetDefaultRef` function, which behaves similarly to :"
"c:func:`PyDict_SetDefault`, but returns a :term:`strong reference` instead "
"of a :term:`borrowed reference`. This function returns ``-1`` on error, "
"``0`` on insertion, and ``1`` if the key was already present in the "
"dictionary. (Contributed by Sam Gross in :gh:`112066`.)"
msgstr ""

#: whatsnew/3.13.rst:2037
msgid ""
"Add the :c:func:`PyDict_Pop` and :c:func:`PyDict_PopString` functions to "
"remove a key from a dictionary and optionally return the removed value. This "
"is similar to :meth:`dict.pop`, though there is no default value, and :exc:"
"`KeyError` is not raised for missing keys. (Contributed by Stefan Behnel and "
"Victor Stinner in :gh:`111262`.)"
msgstr ""

#: whatsnew/3.13.rst:2044
msgid ""
"Add the :c:func:`PyMapping_GetOptionalItem` and :c:func:"
"`PyMapping_GetOptionalItemString` functions as alternatives to :c:func:"
"`PyObject_GetItem` and :c:func:`PyMapping_GetItemString` respectively. The "
"new functions do not raise :exc:`KeyError` if the requested key is missing "
"from the mapping. These variants are more convenient and faster if a missing "
"key should not be treated as a failure. (Contributed by Serhiy Storchaka in :"
"gh:`106307`.)"
msgstr ""

#: whatsnew/3.13.rst:2054
msgid ""
"Add the :c:func:`PyObject_GetOptionalAttr` and :c:func:"
"`PyObject_GetOptionalAttrString` functions as alternatives to  :c:func:"
"`PyObject_GetAttr` and :c:func:`PyObject_GetAttrString` respectively. The "
"new functions do not raise :exc:`AttributeError` if the requested attribute "
"is not found on the object. These variants are more convenient and faster if "
"the missing attribute should not be treated as a failure. (Contributed by "
"Serhiy Storchaka in :gh:`106521`.)"
msgstr ""

#: whatsnew/3.13.rst:2064
msgid ""
"Add the :c:func:`PyErr_FormatUnraisable` function as an extension to :c:func:"
"`PyErr_WriteUnraisable` that allows customizing the warning message. "
"(Contributed by Serhiy Storchaka in :gh:`108082`.)"
msgstr ""

#: whatsnew/3.13.rst:2069
msgid ""
"Add new functions that return a :term:`strong reference` instead of a :term:"
"`borrowed reference` for frame locals, globals, and builtins, as part of :"
"ref:`PEP 667 <whatsnew313-locals-semantics>`:"
msgstr ""

#: whatsnew/3.13.rst:2073
msgid ":c:func:`PyEval_GetFrameBuiltins` replaces :c:func:`PyEval_GetBuiltins`"
msgstr ""

#: whatsnew/3.13.rst:2074
msgid ":c:func:`PyEval_GetFrameGlobals` replaces :c:func:`PyEval_GetGlobals`"
msgstr ""

#: whatsnew/3.13.rst:2075
msgid ":c:func:`PyEval_GetFrameLocals` replaces :c:func:`PyEval_GetLocals`"
msgstr ""

#: whatsnew/3.13.rst:2077
msgid "(Contributed by Mark Shannon and Tian Gao in :gh:`74929`.)"
msgstr ""

#: whatsnew/3.13.rst:2079
msgid ""
"Add the :c:func:`Py_GetConstant` and :c:func:`Py_GetConstantBorrowed` "
"functions to get :term:`strong <strong reference>` or :term:`borrowed "
"<borrowed reference>` references to constants. For example, "
"``Py_GetConstant(Py_CONSTANT_ZERO)`` returns a strong reference to the "
"constant zero. (Contributed by Victor  Stinner in :gh:`115754`.)"
msgstr ""

#: whatsnew/3.13.rst:2086
msgid ""
"Add the :c:func:`PyImport_AddModuleRef` function as a replacement for :c:"
"func:`PyImport_AddModule` that returns a :term:`strong reference` instead of "
"a :term:`borrowed reference`. (Contributed by Victor Stinner in :gh:"
"`105922`.)"
msgstr ""

#: whatsnew/3.13.rst:2091
msgid ""
"Add the :c:func:`Py_IsFinalizing` function to check whether the main Python "
"interpreter is :term:`shutting down <interpreter shutdown>`. (Contributed by "
"Victor Stinner in :gh:`108014`.)"
msgstr ""

#: whatsnew/3.13.rst:2096
msgid ""
"Add the :c:func:`PyList_GetItemRef` function as a replacement for :c:func:"
"`PyList_GetItem` that returns a :term:`strong reference` instead of a :term:"
"`borrowed reference`. (Contributed by Sam Gross in :gh:`114329`.)"
msgstr ""

#: whatsnew/3.13.rst:2101
msgid ""
"Add the :c:func:`PyList_Extend` and :c:func:`PyList_Clear` functions, "
"mirroring the Python :meth:`!list.extend` and :meth:`!list.clear` methods. "
"(Contributed by Victor Stinner in :gh:`111138`.)"
msgstr ""

#: whatsnew/3.13.rst:2105
msgid ""
"Add the :c:func:`PyLong_AsInt` function. It behaves similarly to :c:func:"
"`PyLong_AsLong`, but stores the result in a C :c:expr:`int` instead of a C :"
"c:expr:`long`. (Contributed by Victor Stinner in :gh:`108014`.)"
msgstr ""

#: whatsnew/3.13.rst:2110
msgid ""
"Add the :c:func:`PyLong_AsNativeBytes`, :c:func:`PyLong_FromNativeBytes`, "
"and :c:func:`PyLong_FromUnsignedNativeBytes` functions to simplify "
"converting between native integer types and Python :class:`int` objects. "
"(Contributed by Steve Dower in :gh:`111140`.)"
msgstr ""

#: whatsnew/3.13.rst:2116
msgid ""
"Add :c:func:`PyModule_Add` function, which is similar to :c:func:"
"`PyModule_AddObjectRef` and :c:func:`PyModule_AddObject`, but always steals "
"a reference to the value. (Contributed by Serhiy Storchaka in :gh:`86493`.)"
msgstr ""

#: whatsnew/3.13.rst:2121
msgid ""
"Add the :c:func:`PyObject_GenericHash` function that implements the default "
"hashing function of a Python object. (Contributed by Serhiy Storchaka in :gh:"
"`113024`.)"
msgstr ""

#: whatsnew/3.13.rst:2125
msgid ""
"Add the :c:func:`Py_HashPointer` function to hash a raw pointer. "
"(Contributed by Victor Stinner in :gh:`111545`.)"
msgstr ""

#: whatsnew/3.13.rst:2128
msgid ""
"Add the :c:func:`PyObject_VisitManagedDict` and :c:func:"
"`PyObject_ClearManagedDict` functions. which must be called by the traverse "
"and clear functions of a type using the :c:macro:`Py_TPFLAGS_MANAGED_DICT` "
"flag. The `pythoncapi-compat project`_ can be used to use these functions "
"with Python 3.11 and 3.12. (Contributed by Victor Stinner in :gh:`107073`.)"
msgstr ""

#: whatsnew/3.13.rst:2136
msgid ""
"Add the :c:func:`PyRefTracer_SetTracer` and :c:func:`PyRefTracer_GetTracer` "
"functions, which enable tracking object creation and destruction in the same "
"way that the :mod:`tracemalloc` module does. (Contributed by Pablo Galindo "
"in :gh:`93502`.)"
msgstr ""

#: whatsnew/3.13.rst:2142
msgid ""
"Add the :c:func:`PySys_AuditTuple` function as an alternative to :c:func:"
"`PySys_Audit` that takes event arguments as a Python :class:`tuple` object. "
"(Contributed by Victor Stinner in :gh:`85283`.)"
msgstr ""

#: whatsnew/3.13.rst:2147
msgid ""
"Add the :c:func:`PyThreadState_GetUnchecked()` function as an alternative "
"to :c:func:`PyThreadState_Get()` that doesn't kill the process with a fatal "
"error if it is ``NULL``. The caller is responsible for checking if the "
"result is ``NULL``. (Contributed by Victor Stinner in :gh:`108867`.)"
msgstr ""

#: whatsnew/3.13.rst:2153
msgid ""
"Add the :c:func:`PyType_GetFullyQualifiedName` function to get the type's "
"fully qualified name. The module name is prepended if :attr:`type."
"__module__` is a string and is not equal to either ``'builtins'`` or "
"``'__main__'``. (Contributed by Victor Stinner in :gh:`111696`.)"
msgstr ""

#: whatsnew/3.13.rst:2159
msgid ""
"Add the :c:func:`PyType_GetModuleName` function to get the type's module "
"name. This is equivalent to getting the :attr:`type.__module__` attribute. "
"(Contributed by Eric Snow and Victor Stinner in :gh:`111696`.)"
msgstr ""

#: whatsnew/3.13.rst:2164
msgid ""
"Add the :c:func:`PyUnicode_EqualToUTF8AndSize` and :c:func:"
"`PyUnicode_EqualToUTF8` functions to compare a Unicode object with a :c:expr:"
"`const char*` UTF-8 encoded string and ``1`` if they are equal or ``0`` "
"otherwise. These functions do not raise exceptions. (Contributed by Serhiy "
"Storchaka in :gh:`110289`.)"
msgstr ""

#: whatsnew/3.13.rst:2171
msgid ""
"Add the :c:func:`PyWeakref_GetRef` function as an alternative to  :c:func:"
"`PyWeakref_GetObject` that returns a :term:`strong reference` or ``NULL`` if "
"the referent is no longer live. (Contributed by Victor Stinner in :gh:"
"`105927`.)"
msgstr ""

#: whatsnew/3.13.rst:2177
msgid "Add fixed variants of functions which silently ignore errors:"
msgstr ""

#: whatsnew/3.13.rst:2179
msgid ""
":c:func:`PyObject_HasAttrWithError` replaces :c:func:`PyObject_HasAttr`."
msgstr ""

#: whatsnew/3.13.rst:2180
msgid ""
":c:func:`PyObject_HasAttrStringWithError` replaces :c:func:"
"`PyObject_HasAttrString`."
msgstr ""

#: whatsnew/3.13.rst:2182
msgid ""
":c:func:`PyMapping_HasKeyWithError` replaces :c:func:`PyMapping_HasKey`."
msgstr ""

#: whatsnew/3.13.rst:2183
msgid ""
":c:func:`PyMapping_HasKeyStringWithError` replaces :c:func:"
"`PyMapping_HasKeyString`."
msgstr ""

#: whatsnew/3.13.rst:2186
msgid ""
"The new functions return ``-1`` for errors and the standard ``1`` for true "
"and ``0`` for false."
msgstr ""

#: whatsnew/3.13.rst:2189
msgid "(Contributed by Serhiy Storchaka in :gh:`108511`.)"
msgstr ""

#: whatsnew/3.13.rst:2193
msgid "Changed C APIs"
msgstr ""

#: whatsnew/3.13.rst:2195
msgid ""
"The *keywords* parameter of :c:func:`PyArg_ParseTupleAndKeywords` and :c:"
"func:`PyArg_VaParseTupleAndKeywords` now has type :c:expr:`char * const *` "
"in C and :c:expr:`const char * const *` in C++, instead of :c:expr:`char "
"**`. In C++, this makes these functions compatible with arguments of type :c:"
"expr:`const char * const *`, :c:expr:`const char **`, or :c:expr:`char * "
"const *` without an explicit type cast. In C, the functions only support "
"arguments of type :c:expr:`char * const *`. This can be overridden with the :"
"c:macro:`PY_CXX_CONST` macro. (Contributed by Serhiy Storchaka in :gh:"
"`65210`.)"
msgstr ""

#: whatsnew/3.13.rst:2207
msgid ""
":c:func:`PyArg_ParseTupleAndKeywords` now supports non-ASCII keyword "
"parameter names. (Contributed by Serhiy Storchaka in :gh:`110815`.)"
msgstr ""

#: whatsnew/3.13.rst:2211
msgid ""
"The :c:func:`!PyCode_GetFirstFree` function is now unstable API and is now "
"named :c:func:`PyUnstable_Code_GetFirstFree`. (Contributed by Bogdan "
"Romanyuk in :gh:`115781`.)"
msgstr ""

#: whatsnew/3.13.rst:2215
msgid ""
"The :c:func:`PyDict_GetItem`, :c:func:`PyDict_GetItemString`, :c:func:"
"`PyMapping_HasKey`, :c:func:`PyMapping_HasKeyString`, :c:func:"
"`PyObject_HasAttr`, :c:func:`PyObject_HasAttrString`, and :c:func:"
"`PySys_GetObject` functions, each of which clears all errors which occurred "
"when calling them now reports these errors using :func:`sys.unraisablehook`. "
"You may replace them with other functions as recommended in the "
"documentation. (Contributed by Serhiy Storchaka in :gh:`106672`.)"
msgstr ""

#: whatsnew/3.13.rst:2224
msgid ""
"Add support for the ``%T``, ``%#T``, ``%N`` and ``%#N`` formats to :c:func:"
"`PyUnicode_FromFormat`:"
msgstr ""

#: whatsnew/3.13.rst:2227
msgid "``%T``: Get the fully qualified name of an object type"
msgstr ""

#: whatsnew/3.13.rst:2228
msgid "``%#T``: As above, but use a colon as the separator"
msgstr ""

#: whatsnew/3.13.rst:2229
msgid "``%N``: Get the fully qualified name of a type"
msgstr ""

#: whatsnew/3.13.rst:2230
msgid "``%#N``: As above, but use a colon as the separator"
msgstr ""

#: whatsnew/3.13.rst:2232
msgid ""
"See :pep:`737` for more information. (Contributed by Victor Stinner in :gh:"
"`111696`.)"
msgstr ""

#: whatsnew/3.13.rst:2235
msgid ""
"You no longer have to define the ``PY_SSIZE_T_CLEAN`` macro before "
"including :file:`Python.h` when using ``#`` formats in :ref:`format codes "
"<arg-parsing-string-and-buffers>`. APIs accepting the format codes always "
"use ``Py_ssize_t`` for ``#`` formats. (Contributed by Inada Naoki in :gh:"
"`104922`.)"
msgstr ""

#: whatsnew/3.13.rst:2241
msgid ""
"If Python is built in :ref:`debug mode <debug-build>` or :option:`with "
"assertions <--with-assertions>`, :c:func:`PyTuple_SET_ITEM` and :c:func:"
"`PyList_SET_ITEM` now check the index argument with an assertion. "
"(Contributed by Victor Stinner in :gh:`106168`.)"
msgstr ""

#: whatsnew/3.13.rst:2249
msgid "Limited C API Changes"
msgstr ""

#: whatsnew/3.13.rst:2251
msgid "The following functions are now included in the Limited C API:"
msgstr ""

#: whatsnew/3.13.rst:2253
msgid ":c:func:`PyMem_RawMalloc`"
msgstr ""

#: whatsnew/3.13.rst:2254
msgid ":c:func:`PyMem_RawCalloc`"
msgstr ""

#: whatsnew/3.13.rst:2255
msgid ":c:func:`PyMem_RawRealloc`"
msgstr ""

#: whatsnew/3.13.rst:2256
msgid ":c:func:`PyMem_RawFree`"
msgstr ""

#: whatsnew/3.13.rst:2257
msgid ":c:func:`PySys_Audit`"
msgstr ""

#: whatsnew/3.13.rst:2258
msgid ":c:func:`PySys_AuditTuple`"
msgstr ""

#: whatsnew/3.13.rst:2259
msgid ":c:func:`PyType_GetModuleByDef`"
msgstr ""

#: whatsnew/3.13.rst:2261
msgid ""
"(Contributed by Victor Stinner in :gh:`85283`, :gh:`85283`, and :gh:"
"`116936`.)"
msgstr ""

#: whatsnew/3.13.rst:2263
msgid ""
"Python built with :option:`--with-trace-refs` (tracing references) now "
"supports the :ref:`Limited API <limited-c-api>`. (Contributed by Victor "
"Stinner in :gh:`108634`.)"
msgstr ""

#: whatsnew/3.13.rst:2269
msgid "Removed C APIs"
msgstr ""

#: whatsnew/3.13.rst:2271
msgid ""
"Remove several functions, macros, variables, etc with names prefixed by "
"``_Py`` or ``_PY`` (which are considered private). If your project is "
"affected  by one of these removals and you believe that the removed API "
"should remain available, please :ref:`open a new issue <using-the-tracker>` "
"to request a public C API and add ``cc: @vstinner`` to the issue to notify "
"Victor Stinner. (Contributed by Victor Stinner in :gh:`106320`.)"
msgstr ""

#: whatsnew/3.13.rst:2279
msgid ""
"Remove old buffer protocols deprecated in Python 3.0. Use :ref:"
"`bufferobjects` instead."
msgstr ""

#: whatsnew/3.13.rst:2282
msgid ""
":c:func:`!PyObject_CheckReadBuffer`: Use :c:func:`PyObject_CheckBuffer` to "
"test whether the object supports the buffer protocol. Note that :c:func:"
"`PyObject_CheckBuffer` doesn't guarantee that :c:func:`PyObject_GetBuffer` "
"will succeed. To test if the object is actually readable, see the next "
"example of :c:func:`PyObject_GetBuffer`."
msgstr ""

#: whatsnew/3.13.rst:2290
msgid ""
":c:func:`!PyObject_AsCharBuffer`, :c:func:`!PyObject_AsReadBuffer`: Use :c:"
"func:`PyObject_GetBuffer` and :c:func:`PyBuffer_Release` instead:"
msgstr ""

#: whatsnew/3.13.rst:2293
msgid ""
"Py_buffer view;\n"
"if (PyObject_GetBuffer(obj, &view, PyBUF_SIMPLE) < 0) {\n"
"    return NULL;\n"
"}\n"
"// Use `view.buf` and `view.len` to read from the buffer.\n"
"// You may need to cast buf as `(const char*)view.buf`.\n"
"PyBuffer_Release(&view);"
msgstr ""

#: whatsnew/3.13.rst:2303
msgid ""
":c:func:`!PyObject_AsWriteBuffer`: Use :c:func:`PyObject_GetBuffer` and :c:"
"func:`PyBuffer_Release` instead:"
msgstr ""

#: whatsnew/3.13.rst:2306
msgid ""
"Py_buffer view;\n"
"if (PyObject_GetBuffer(obj, &view, PyBUF_WRITABLE) < 0) {\n"
"    return NULL;\n"
"}\n"
"// Use `view.buf` and `view.len` to write to the buffer.\n"
"PyBuffer_Release(&view);"
msgstr ""

#: whatsnew/3.13.rst:2315
msgid "(Contributed by Inada Naoki in :gh:`85275`.)"
msgstr ""

#: whatsnew/3.13.rst:2317
msgid "Remove various functions deprecated in Python 3.9:"
msgstr ""

#: whatsnew/3.13.rst:2319
msgid ""
":c:func:`!PyEval_CallObject`, :c:func:`!PyEval_CallObjectWithKeywords`: Use :"
"c:func:`PyObject_CallNoArgs` or :c:func:`PyObject_Call` instead."
msgstr ""

#: whatsnew/3.13.rst:2324
msgid ""
"In :c:func:`PyObject_Call`, positional arguments must be a :class:`tuple` "
"and must not be ``NULL``, and keyword arguments must be a :class:`dict` or "
"``NULL``, whereas the removed functions checked argument types and accepted "
"``NULL`` positional and keyword arguments. To replace "
"``PyEval_CallObjectWithKeywords(func, NULL, kwargs)`` with :c:func:"
"`PyObject_Call`, pass an empty tuple as positional arguments using :c:func:"
"`PyTuple_New(0) <PyTuple_New>`."
msgstr ""

#: whatsnew/3.13.rst:2334
msgid ""
":c:func:`!PyEval_CallFunction`: Use :c:func:`PyObject_CallFunction` instead."
msgstr ""

#: whatsnew/3.13.rst:2336
msgid ""
":c:func:`!PyEval_CallMethod`: Use :c:func:`PyObject_CallMethod` instead."
msgstr ""

#: whatsnew/3.13.rst:2338
msgid ":c:func:`!PyCFunction_Call`: Use :c:func:`PyObject_Call` instead."
msgstr ""

#: whatsnew/3.13.rst:2341
msgid "(Contributed by Victor Stinner in :gh:`105107`.)"
msgstr ""

#: whatsnew/3.13.rst:2343
msgid ""
"Remove the following old functions to configure the Python initialization, "
"deprecated in Python 3.11:"
msgstr ""

#: whatsnew/3.13.rst:2346
msgid ""
":c:func:`!PySys_AddWarnOptionUnicode`: Use :c:member:`PyConfig.warnoptions` "
"instead."
msgstr ""

#: whatsnew/3.13.rst:2348
msgid ""
":c:func:`!PySys_AddWarnOption`: Use :c:member:`PyConfig.warnoptions` instead."
msgstr ""

#: whatsnew/3.13.rst:2350
msgid ":c:func:`!PySys_AddXOption`: Use :c:member:`PyConfig.xoptions` instead."
msgstr ""

#: whatsnew/3.13.rst:2352
msgid ""
":c:func:`!PySys_HasWarnOptions`: Use :c:member:`PyConfig.xoptions` instead."
msgstr ""

#: whatsnew/3.13.rst:2354
msgid ""
":c:func:`!PySys_SetPath`: Set :c:member:`PyConfig.module_search_paths` "
"instead."
msgstr ""

#: whatsnew/3.13.rst:2356
msgid ""
":c:func:`!Py_SetPath`: Set :c:member:`PyConfig.module_search_paths` instead."
msgstr ""

#: whatsnew/3.13.rst:2358
msgid ""
":c:func:`!Py_SetStandardStreamEncoding`: Set :c:member:`PyConfig."
"stdio_encoding` instead, and set also maybe :c:member:`PyConfig."
"legacy_windows_stdio` (on Windows)."
msgstr ""

#: whatsnew/3.13.rst:2361
msgid ""
":c:func:`!_Py_SetProgramFullPath`: Set :c:member:`PyConfig.executable` "
"instead."
msgstr ""

#: whatsnew/3.13.rst:2364
msgid ""
"Use the new :c:type:`PyConfig` API of the :ref:`Python Initialization "
"Configuration <init-config>` instead (:pep:`587`), added to Python 3.8. "
"(Contributed by Victor Stinner in :gh:`105145`.)"
msgstr ""

#: whatsnew/3.13.rst:2368
msgid ""
"Remove :c:func:`!PyEval_AcquireLock` and :c:func:`!PyEval_ReleaseLock` "
"functions, deprecated in Python 3.2. They didn't update the current thread "
"state. They can be replaced with:"
msgstr ""

#: whatsnew/3.13.rst:2373
msgid ":c:func:`PyEval_SaveThread` and :c:func:`PyEval_RestoreThread`;"
msgstr ""

#: whatsnew/3.13.rst:2374
msgid ""
"low-level :c:func:`PyEval_AcquireThread` and :c:func:`PyEval_RestoreThread`;"
msgstr ""

#: whatsnew/3.13.rst:2375
msgid "or :c:func:`PyGILState_Ensure` and :c:func:`PyGILState_Release`."
msgstr ""

#: whatsnew/3.13.rst:2377
msgid "(Contributed by Victor Stinner in :gh:`105182`.)"
msgstr ""

#: whatsnew/3.13.rst:2379
msgid ""
"Remove the :c:func:`!PyEval_ThreadsInitialized` function, deprecated in "
"Python 3.9. Since Python 3.7, :c:func:`!Py_Initialize` always creates the "
"GIL: calling :c:func:`!PyEval_InitThreads` does nothing and :c:func:`!"
"PyEval_ThreadsInitialized` always returns non-zero. (Contributed by Victor "
"Stinner in :gh:`105182`.)"
msgstr ""

#: whatsnew/3.13.rst:2386
msgid ""
"Remove the :c:func:`!_PyInterpreterState_Get` alias to :c:func:"
"`PyInterpreterState_Get()` which was kept for backward compatibility with "
"Python 3.8. The `pythoncapi-compat project`_ can be used to get :c:func:"
"`PyInterpreterState_Get()` on Python 3.8 and older. (Contributed by Victor "
"Stinner in :gh:`106320`.)"
msgstr ""

#: whatsnew/3.13.rst:2393
msgid ""
"Remove the private :c:func:`!_PyObject_FastCall` function: use :c:func:`!"
"PyObject_Vectorcall` which is available since Python 3.8 (:pep:`590`). "
"(Contributed by Victor Stinner in :gh:`106023`.)"
msgstr ""

#: whatsnew/3.13.rst:2398
msgid ""
"Remove the ``cpython/pytime.h`` header file, which only contained private "
"functions. (Contributed by Victor Stinner in :gh:`106316`.)"
msgstr ""

#: whatsnew/3.13.rst:2402
msgid ""
"Remove the undocumented ``PY_TIMEOUT_MAX`` constant from the limited C API. "
"(Contributed by Victor Stinner in :gh:`110014`.)"
msgstr ""

#: whatsnew/3.13.rst:2405
msgid ""
"Remove the old trashcan macros ``Py_TRASHCAN_SAFE_BEGIN`` and "
"``Py_TRASHCAN_SAFE_END``. Replace both with the new macros "
"``Py_TRASHCAN_BEGIN`` and ``Py_TRASHCAN_END``. (Contributed by Irit Katriel "
"in :gh:`105111`.)"
msgstr ""

#: whatsnew/3.13.rst:2412
msgid "Deprecated C APIs"
msgstr ""

#: whatsnew/3.13.rst:2414
msgid "Deprecate old Python initialization functions:"
msgstr ""

#: whatsnew/3.13.rst:2416 deprecations/c-api-pending-removal-in-3.15.rst:13
msgid ""
":c:func:`PySys_ResetWarnOptions`: Clear :data:`sys.warnoptions` and :data:`!"
"warnings.filters` instead."
msgstr ""

#: whatsnew/3.13.rst:2418
msgid ":c:func:`Py_GetExecPrefix`: Get :data:`sys.exec_prefix` instead."
msgstr ""

#: whatsnew/3.13.rst:2420 deprecations/c-api-pending-removal-in-3.15.rst:17
msgid ":c:func:`Py_GetPath`: Get :data:`sys.path` instead."
msgstr ""

#: whatsnew/3.13.rst:2422
msgid ":c:func:`Py_GetPrefix`: Get :data:`sys.prefix` instead."
msgstr ""

#: whatsnew/3.13.rst:2424 deprecations/c-api-pending-removal-in-3.15.rst:21
msgid ":c:func:`Py_GetProgramFullPath`: Get :data:`sys.executable` instead."
msgstr ""

#: whatsnew/3.13.rst:2426 deprecations/c-api-pending-removal-in-3.15.rst:23
msgid ":c:func:`Py_GetProgramName`: Get :data:`sys.executable` instead."
msgstr ""

#: whatsnew/3.13.rst:2428 deprecations/c-api-pending-removal-in-3.15.rst:25
msgid ""
":c:func:`Py_GetPythonHome`: Get :c:member:`PyConfig.home` or the :envvar:"
"`PYTHONHOME` environment variable instead."
msgstr ""

#: whatsnew/3.13.rst:2432
msgid "(Contributed by Victor Stinner in :gh:`105145`.)"
msgstr ""

#: whatsnew/3.13.rst:2434
msgid ""
":term:`Soft deprecate <soft deprecated>` the :c:func:`PyEval_GetBuiltins`, :"
"c:func:`PyEval_GetGlobals`, and :c:func:`PyEval_GetLocals` functions, which "
"return a :term:`borrowed reference`. (Soft deprecated as part of :pep:`667`.)"
msgstr ""

#: whatsnew/3.13.rst:2440
msgid ""
"Deprecate the :c:func:`PyImport_ImportModuleNoBlock` function, which is just "
"an alias to :c:func:`PyImport_ImportModule` since Python 3.3. (Contributed "
"by Victor Stinner in :gh:`105396`.)"
msgstr ""

#: whatsnew/3.13.rst:2444
msgid ""
":term:`Soft deprecate <soft deprecated>` the :c:func:`PyModule_AddObject` "
"function. It should be replaced with :c:func:`PyModule_Add` or :c:func:"
"`PyModule_AddObjectRef`. (Contributed by Serhiy Storchaka in :gh:`86493`.)"
msgstr ""

#: whatsnew/3.13.rst:2450
msgid ""
"Deprecate the old ``Py_UNICODE`` and ``PY_UNICODE_TYPE`` types and the :c:"
"macro:`!Py_UNICODE_WIDE` define. Use the :c:type:`wchar_t` type directly "
"instead. Since Python 3.3, ``Py_UNICODE`` and ``PY_UNICODE_TYPE`` are just "
"aliases to :c:type:`!wchar_t`. (Contributed by Victor Stinner in :gh:"
"`105156`.)"
msgstr ""

#: whatsnew/3.13.rst:2457
msgid ""
"Deprecate the :c:func:`PyWeakref_GetObject` and :c:func:"
"`PyWeakref_GET_OBJECT` functions, which return a :term:`borrowed reference`. "
"Replace them with the new :c:func:`PyWeakref_GetRef` function, which returns "
"a :term:`strong reference`. The `pythoncapi-compat project`_ can be used to "
"get :c:func:`PyWeakref_GetRef` on Python 3.12 and older. (Contributed by "
"Victor Stinner in :gh:`105927`.)"
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:4
msgid ""
"The ``ma_version_tag`` field in :c:type:`PyDictObject` for extension modules "
"(:pep:`699`; :gh:`101193`)."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:7
msgid ""
"Creating :c:data:`immutable types <Py_TPFLAGS_IMMUTABLETYPE>` with mutable "
"bases (:gh:`95388`)."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:10
msgid ""
"Functions to configure Python's initialization, deprecated in Python 3.11:"
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:12
msgid ":c:func:`!PySys_SetArgvEx()`: Set :c:member:`PyConfig.argv` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:14
msgid ":c:func:`!PySys_SetArgv()`: Set :c:member:`PyConfig.argv` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:16
msgid ""
":c:func:`!Py_SetProgramName()`: Set :c:member:`PyConfig.program_name` "
"instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:18
msgid ":c:func:`!Py_SetPythonHome()`: Set :c:member:`PyConfig.home` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:21
#: deprecations/c-api-pending-removal-in-3.14.rst:71
msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with :c:type:"
"`PyConfig` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:24
msgid "Global configuration variables:"
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:26
msgid ":c:var:`Py_DebugFlag`: Use :c:member:`PyConfig.parser_debug` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:28
msgid ":c:var:`Py_VerboseFlag`: Use :c:member:`PyConfig.verbose` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:30
msgid ":c:var:`Py_QuietFlag`: Use :c:member:`PyConfig.quiet` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:32
msgid ""
":c:var:`Py_InteractiveFlag`: Use :c:member:`PyConfig.interactive` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:34
msgid ":c:var:`Py_InspectFlag`: Use :c:member:`PyConfig.inspect` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:36
msgid ""
":c:var:`Py_OptimizeFlag`: Use :c:member:`PyConfig.optimization_level` "
"instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:38
msgid ":c:var:`Py_NoSiteFlag`: Use :c:member:`PyConfig.site_import` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:40
msgid ""
":c:var:`Py_BytesWarningFlag`: Use :c:member:`PyConfig.bytes_warning` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:42
msgid ""
":c:var:`Py_FrozenFlag`: Use :c:member:`PyConfig.pathconfig_warnings` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:44
msgid ""
":c:var:`Py_IgnoreEnvironmentFlag`: Use :c:member:`PyConfig.use_environment` "
"instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:46
msgid ""
":c:var:`Py_DontWriteBytecodeFlag`: Use :c:member:`PyConfig.write_bytecode` "
"instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:48
msgid ""
":c:var:`Py_NoUserSiteDirectory`: Use :c:member:`PyConfig."
"user_site_directory` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:50
msgid ""
":c:var:`Py_UnbufferedStdioFlag`: Use :c:member:`PyConfig.buffered_stdio` "
"instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:52
msgid ""
":c:var:`Py_HashRandomizationFlag`: Use :c:member:`PyConfig.use_hash_seed` "
"and :c:member:`PyConfig.hash_seed` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:55
msgid ":c:var:`Py_IsolatedFlag`: Use :c:member:`PyConfig.isolated` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:57
msgid ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: Use :c:member:`PyPreConfig."
"legacy_windows_fs_encoding` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:59
msgid ""
":c:var:`Py_LegacyWindowsStdioFlag`: Use :c:member:`PyConfig."
"legacy_windows_stdio` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:61
msgid ""
":c:var:`!Py_FileSystemDefaultEncoding`: Use :c:member:`PyConfig."
"filesystem_encoding` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:63
msgid ""
":c:var:`!Py_HasFileSystemDefaultEncoding`: Use :c:member:`PyConfig."
"filesystem_encoding` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:65
msgid ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: Use :c:member:`PyConfig."
"filesystem_errors` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:67
msgid ""
":c:var:`!Py_UTF8Mode`: Use :c:member:`PyPreConfig.utf8_mode` instead. (see :"
"c:func:`Py_PreInitialize`)"
msgstr ""

#: deprecations/c-api-pending-removal-in-3.15.rst:4
msgid "The bundled copy of ``libmpdecimal``."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.15.rst:5
msgid ""
"The :c:func:`PyImport_ImportModuleNoBlock`: Use :c:func:"
"`PyImport_ImportModule` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.15.rst:7
msgid ""
":c:func:`PyWeakref_GetObject` and :c:func:`PyWeakref_GET_OBJECT`: Use :c:"
"func:`PyWeakref_GetRef` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.15.rst:9
msgid ""
":c:type:`Py_UNICODE` type and the :c:macro:`!Py_UNICODE_WIDE` macro: Use :c:"
"type:`wchar_t` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.15.rst:11
msgid "Python initialization functions:"
msgstr ""

#: deprecations/c-api-pending-removal-in-3.15.rst:15
msgid ""
":c:func:`Py_GetExecPrefix`: Get :data:`sys.base_exec_prefix` and :data:`sys."
"exec_prefix` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.15.rst:19
msgid ""
":c:func:`Py_GetPrefix`: Get :data:`sys.base_prefix` and :data:`sys.prefix` "
"instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:4
msgid ""
"The following APIs are deprecated and will be removed, although there is "
"currently no date scheduled for their removal."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:7
msgid ":c:macro:`Py_TPFLAGS_HAVE_FINALIZE`: Unneeded since Python 3.8."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:9
msgid ":c:func:`PyErr_Fetch`: Use :c:func:`PyErr_GetRaisedException` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:11
msgid ""
":c:func:`PyErr_NormalizeException`: Use :c:func:`PyErr_GetRaisedException` "
"instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:13
msgid ""
":c:func:`PyErr_Restore`: Use :c:func:`PyErr_SetRaisedException` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:15
msgid ""
":c:func:`PyModule_GetFilename`: Use :c:func:`PyModule_GetFilenameObject` "
"instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:17
msgid ":c:func:`PyOS_AfterFork`: Use :c:func:`PyOS_AfterFork_Child` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:19
msgid ""
":c:func:`PySlice_GetIndicesEx`: Use :c:func:`PySlice_Unpack` and :c:func:"
"`PySlice_AdjustIndices` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:21
msgid ""
":c:func:`!PyUnicode_AsDecodedObject`: Use :c:func:`PyCodec_Decode` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:23
msgid ""
":c:func:`!PyUnicode_AsDecodedUnicode`: Use :c:func:`PyCodec_Decode` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:25
msgid ""
":c:func:`!PyUnicode_AsEncodedObject`: Use :c:func:`PyCodec_Encode` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:27
msgid ""
":c:func:`!PyUnicode_AsEncodedUnicode`: Use :c:func:`PyCodec_Encode` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:29
msgid ":c:func:`PyUnicode_READY`: Unneeded since Python 3.12"
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:31
msgid ":c:func:`!PyErr_Display`: Use :c:func:`PyErr_DisplayException` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:33
msgid ""
":c:func:`!_PyErr_ChainExceptions`: Use :c:func:`!_PyErr_ChainExceptions1` "
"instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:35
msgid ""
":c:member:`!PyBytesObject.ob_shash` member: call :c:func:`PyObject_Hash` "
"instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:37
msgid ":c:member:`!PyDictObject.ma_version_tag` member."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:38
msgid "Thread Local Storage (TLS) API:"
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:40
msgid ""
":c:func:`PyThread_create_key`: Use :c:func:`PyThread_tss_alloc` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:42
msgid ":c:func:`PyThread_delete_key`: Use :c:func:`PyThread_tss_free` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:44
msgid ""
":c:func:`PyThread_set_key_value`: Use :c:func:`PyThread_tss_set` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:46
msgid ""
":c:func:`PyThread_get_key_value`: Use :c:func:`PyThread_tss_get` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:48
msgid ""
":c:func:`PyThread_delete_key_value`: Use :c:func:`PyThread_tss_delete` "
"instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:50
msgid ":c:func:`PyThread_ReInitTLS`: Unneeded since Python 3.7."
msgstr ""

#: whatsnew/3.13.rst:2477
msgid "Build Changes"
msgstr "Changements à la compilation"

#: whatsnew/3.13.rst:2479
msgid ""
"``arm64-apple-ios`` and ``arm64-apple-ios-simulator`` are both now :pep:`11` "
"tier 3 platforms. (:ref:`PEP 730 <whatsnew313-platform-support>` written and "
"implementation contributed by Russell Keith-Magee in :gh:`114099`.)"
msgstr ""

#: whatsnew/3.13.rst:2484
msgid ""
"``aarch64-linux-android`` and ``x86_64-linux-android`` are both now :pep:"
"`11` tier 3 platforms. (:ref:`PEP 738 <whatsnew313-platform-support>` "
"written and implementation contributed by Malcolm Smith in :gh:`116622`.)"
msgstr ""

#: whatsnew/3.13.rst:2489
msgid ""
"``wasm32-wasi`` is now a :pep:`11` tier 2 platform. (Contributed by Brett "
"Cannon in :gh:`115192`.)"
msgstr ""

#: whatsnew/3.13.rst:2492
msgid ""
"``wasm32-emscripten`` is no longer a :pep:`11` supported platform. "
"(Contributed by Brett Cannon in :gh:`115192`.)"
msgstr ""

#: whatsnew/3.13.rst:2495
msgid ""
"Building CPython now requires a compiler with support for the C11 atomic "
"library, GCC built-in atomic functions, or MSVC interlocked intrinsics."
msgstr ""

#: whatsnew/3.13.rst:2498
msgid ""
"Autoconf 2.71 and aclocal 1.16.5 are now required to regenerate the :file:"
"`configure` script. (Contributed by Christian Heimes in :gh:`89886` and by "
"Victor Stinner in :gh:`112090`.)"
msgstr ""

#: whatsnew/3.13.rst:2502
msgid ""
"SQLite 3.15.2 or newer is required to build the :mod:`sqlite3` extension "
"module. (Contributed by Erlend Aasland in :gh:`105875`.)"
msgstr ""

#: whatsnew/3.13.rst:2506
msgid ""
"CPython now bundles the `mimalloc library`_ by default. It is licensed under "
"the MIT license; see :ref:`mimalloc license <mimalloc-license>`. The bundled "
"mimalloc has custom changes, see :gh:`113141` for details. (Contributed by "
"Dino Viehland in :gh:`109914`.)"
msgstr ""

#: whatsnew/3.13.rst:2514
msgid ""
"The :file:`configure` option :option:`--with-system-libmpdec` now defaults "
"to ``yes``. The bundled copy of ``libmpdecimal`` will be removed in Python "
"3.15."
msgstr ""

#: whatsnew/3.13.rst:2518
msgid ""
"Python built with :file:`configure` :option:`--with-trace-refs` (tracing "
"references) is now ABI compatible with the Python release build and :ref:"
"`debug build <debug-build>`. (Contributed by Victor Stinner in :gh:`108634`.)"
msgstr ""

#: whatsnew/3.13.rst:2523
msgid ""
"On POSIX systems, the pkg-config (``.pc``) filenames now include the ABI "
"flags.  For example, the free-threaded build generates ``python-3.13t.pc`` "
"and the debug build generates ``python-3.13d.pc``."
msgstr ""

#: whatsnew/3.13.rst:2527
msgid ""
"The ``errno``, ``fcntl``, ``grp``, ``md5``, ``pwd``, ``resource``, "
"``termios``, ``winsound``, ``_ctypes_test``, ``_multiprocessing."
"posixshmem``, ``_scproxy``, ``_stat``, ``_statistics``, ``_testconsole``, "
"``_testimportmultiple`` and ``_uuid`` C extensions are now built with the :"
"ref:`limited C API <limited-c-api>`. (Contributed by Victor Stinner in :gh:"
"`85283`.)"
msgstr ""

#: whatsnew/3.13.rst:2536
msgid "Porting to Python 3.13"
msgstr ""

#: whatsnew/3.13.rst:2538
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr ""
"Cette section liste les changements mentionnés préalablement et d'autres "
"améliorations qui peuvent demander des changements à votre code."

#: whatsnew/3.13.rst:2542
msgid "Changes in the Python API"
msgstr "Changements dans l'API Python"

#: whatsnew/3.13.rst:2546
msgid ""
":ref:`PEP 667 <whatsnew313-locals-semantics>` introduces several changes to "
"the semantics of :func:`locals` and :attr:`f_locals <frame.f_locals>`:"
msgstr ""

#: whatsnew/3.13.rst:2549
msgid ""
"Calling :func:`locals` in an :term:`optimized scope` now produces an "
"independent snapshot on each call, and hence no longer implicitly updates "
"previously returned references. Obtaining the legacy CPython behavior now "
"requires explicit calls to update the initially returned dictionary with the "
"results of subsequent calls to :func:`!locals`. Code execution functions "
"that implicitly target :func:`!locals` (such as ``exec`` and ``eval``) must "
"be passed an explicit namespace to access their results in an optimized "
"scope. (Changed as part of :pep:`667`.)"
msgstr ""

#: whatsnew/3.13.rst:2558
msgid ""
"Calling :func:`locals` from a comprehension at module or class scope "
"(including via ``exec`` or ``eval``) once more behaves as if the "
"comprehension were running as an independent nested function (i.e. the local "
"variables from the containing scope are not included). In Python 3.12, this "
"had changed to include the local variables from the containing scope when "
"implementing :pep:`709`. (Changed as part of :pep:`667`.)"
msgstr ""

#: whatsnew/3.13.rst:2565
msgid ""
"Accessing :attr:`FrameType.f_locals <frame.f_locals>` in an :term:`optimized "
"scope` now returns a write-through proxy rather than a snapshot that gets "
"updated at ill-specified times. If a snapshot is desired, it must be created "
"explicitly with ``dict`` or the proxy's ``.copy()`` method. (Changed as part "
"of :pep:`667`.)"
msgstr ""

#: whatsnew/3.13.rst:2571
msgid ""
":class:`functools.partial` now emits a :exc:`FutureWarning` when used as a "
"method. The behavior will change in future Python versions. Wrap it in :func:"
"`staticmethod` if you want to preserve the old behavior. (Contributed by "
"Serhiy Storchaka in :gh:`121027`.)"
msgstr ""

#: whatsnew/3.13.rst:2577
msgid ""
"An :exc:`OSError` is now raised by :func:`getpass.getuser` for any failure "
"to retrieve a username, instead of :exc:`ImportError` on non-Unix platforms "
"or :exc:`KeyError` on Unix platforms where the password database is empty."
msgstr ""

#: whatsnew/3.13.rst:2582
msgid ""
"The value of the :attr:`!mode` attribute of :class:`gzip.GzipFile` is now a "
"string (``'rb'`` or ``'wb'``) instead of an integer (``1`` or ``2``). The "
"value of the :attr:`!mode` attribute of the readable file-like object "
"returned by :meth:`zipfile.ZipFile.open` is now ``'rb'`` instead of ``'r'``. "
"(Contributed by Serhiy Storchaka in :gh:`115961`.)"
msgstr ""

#: whatsnew/3.13.rst:2588
msgid ""
":class:`mailbox.Maildir` now ignores files with a leading dot (``.``). "
"(Contributed by Zackery Spytz in :gh:`65559`.)"
msgstr ""

#: whatsnew/3.13.rst:2591
msgid ""
":meth:`pathlib.Path.glob` and :meth:`~pathlib.Path.rglob` now return both "
"files and directories if a pattern that ends with \"``**``\" is given, "
"rather than directories only. Add a trailing slash to keep the previous "
"behavior and only match directories."
msgstr ""

#: whatsnew/3.13.rst:2596
msgid ""
"The :mod:`threading` module now expects the :mod:`!_thread` module to have "
"an :func:`!_is_main_interpreter` function. This function takes no arguments "
"and returns ``True`` if the current interpreter is the main interpreter."
msgstr ""

#: whatsnew/3.13.rst:2601
msgid ""
"Any library or application that provides a custom :mod:`!_thread` module "
"must provide :func:`!_is_main_interpreter`, just like the module's other "
"\"private\" attributes. (:gh:`112826`.)"
msgstr ""

#: whatsnew/3.13.rst:2608
msgid "Changes in the C API"
msgstr "Changements dans l'API C"

#: whatsnew/3.13.rst:2610
msgid ""
"``Python.h`` no longer includes the ``<ieeefp.h>`` standard header. It was "
"included for the :c:func:`!finite` function which is now provided by the "
"``<math.h>`` header. It should now be included explicitly if needed. Remove "
"also the ``HAVE_IEEEFP_H`` macro. (Contributed by Victor Stinner in :gh:"
"`108765`.)"
msgstr ""

#: whatsnew/3.13.rst:2616
msgid ""
"``Python.h`` no longer includes these standard header files: ``<time.h>``, "
"``<sys/select.h>`` and ``<sys/time.h>``. If needed, they should now be "
"included explicitly. For example, ``<time.h>`` provides the :c:func:`!clock` "
"and :c:func:`!gmtime` functions, ``<sys/select.h>`` provides the :c:func:`!"
"select` function, and ``<sys/time.h>`` provides the :c:func:`!futimes`, :c:"
"func:`!gettimeofday` and :c:func:`!setitimer` functions. (Contributed by "
"Victor Stinner in :gh:`108765`.)"
msgstr ""

#: whatsnew/3.13.rst:2624
msgid ""
"On Windows, ``Python.h`` no longer includes the ``<stddef.h>`` standard "
"header file. If needed, it should now be included explicitly. For example, "
"it provides :c:func:`!offsetof` function, and ``size_t`` and ``ptrdiff_t`` "
"types. Including ``<stddef.h>`` explicitly was already needed by all other "
"platforms, the ``HAVE_STDDEF_H`` macro is only defined on Windows. "
"(Contributed by Victor Stinner in :gh:`108765`.)"
msgstr ""

#: whatsnew/3.13.rst:2631
msgid ""
"If the :c:macro:`Py_LIMITED_API` macro is defined, :c:macro:`!"
"Py_BUILD_CORE`, :c:macro:`!Py_BUILD_CORE_BUILTIN` and :c:macro:`!"
"Py_BUILD_CORE_MODULE` macros are now undefined by ``<Python.h>``. "
"(Contributed by Victor Stinner in :gh:`85283`.)"
msgstr ""

#: whatsnew/3.13.rst:2636
msgid ""
"The old trashcan macros ``Py_TRASHCAN_SAFE_BEGIN`` and "
"``Py_TRASHCAN_SAFE_END`` were removed. They should be replaced by the new "
"macros ``Py_TRASHCAN_BEGIN`` and ``Py_TRASHCAN_END``."
msgstr ""

#: whatsnew/3.13.rst:2640
msgid "A ``tp_dealloc`` function that has the old macros, such as::"
msgstr ""

#: whatsnew/3.13.rst:2642
msgid ""
"static void\n"
"mytype_dealloc(mytype *p)\n"
"{\n"
"    PyObject_GC_UnTrack(p);\n"
"    Py_TRASHCAN_SAFE_BEGIN(p);\n"
"    ...\n"
"    Py_TRASHCAN_SAFE_END\n"
"}"
msgstr ""

#: whatsnew/3.13.rst:2651
msgid "should migrate to the new macros as follows::"
msgstr ""

#: whatsnew/3.13.rst:2653
msgid ""
"static void\n"
"mytype_dealloc(mytype *p)\n"
"{\n"
"    PyObject_GC_UnTrack(p);\n"
"    Py_TRASHCAN_BEGIN(p, mytype_dealloc)\n"
"    ...\n"
"    Py_TRASHCAN_END\n"
"}"
msgstr ""

#: whatsnew/3.13.rst:2662
msgid ""
"Note that ``Py_TRASHCAN_BEGIN`` has a second argument which should be the "
"deallocation function it is in. The new macros were added in Python 3.8 and "
"the old macros were deprecated in Python 3.11. (Contributed by Irit Katriel "
"in :gh:`105111`.)"
msgstr ""

#: whatsnew/3.13.rst:2669
msgid ""
":ref:`PEP 667 <whatsnew313-locals-semantics>` introduces several changes to "
"frame-related functions:"
msgstr ""

#: whatsnew/3.13.rst:2672
msgid ""
"The effects of mutating the dictionary returned from :c:func:"
"`PyEval_GetLocals` in an :term:`optimized scope` have changed. New dict "
"entries added this way will now *only* be visible to subsequent :c:func:"
"`PyEval_GetLocals` calls in that frame, as :c:func:`PyFrame_GetLocals`, :"
"func:`locals`, and :attr:`FrameType.f_locals <frame.f_locals>` no longer "
"access the same underlying cached dictionary. Changes made to entries for "
"actual variable names and names added via the write-through proxy interfaces "
"will be overwritten on subsequent calls to :c:func:`PyEval_GetLocals` in "
"that frame. The recommended code update depends on how the function was "
"being used, so refer to the deprecation notice on the function for details."
msgstr ""

#: whatsnew/3.13.rst:2685
msgid ""
"Calling :c:func:`PyFrame_GetLocals` in an :term:`optimized scope` now "
"returns a write-through proxy rather than a snapshot that gets updated at "
"ill-specified times. If a snapshot is desired, it must be created explicitly "
"(e.g. with :c:func:`PyDict_Copy`), or by calling the new :c:func:"
"`PyEval_GetFrameLocals` API."
msgstr ""

#: whatsnew/3.13.rst:2692
msgid ""
":c:func:`!PyFrame_FastToLocals` and :c:func:`!PyFrame_FastToLocalsWithError` "
"no longer have any effect. Calling these functions has been redundant since "
"Python 3.11, when :c:func:`PyFrame_GetLocals` was first introduced."
msgstr ""

#: whatsnew/3.13.rst:2697
msgid ""
":c:func:`!PyFrame_LocalsToFast` no longer has any effect. Calling this "
"function is redundant now that :c:func:`PyFrame_GetLocals` returns a write-"
"through proxy for :term:`optimized scopes <optimized scope>`."
msgstr ""

#: whatsnew/3.13.rst:2702
msgid "Regression Test Changes"
msgstr ""

#: whatsnew/3.13.rst:2704
msgid ""
"Python built with :file:`configure` :option:`--with-pydebug` now supports a :"
"option:`-X presite=package.module <-X>` command-line option. If used, it "
"specifies a module that should be imported early in the lifecycle of the "
"interpreter, before ``site.py`` is executed. (Contributed by Łukasz Langa "
"in :gh:`110769`.)"
msgstr ""
