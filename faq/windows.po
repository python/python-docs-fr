# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-29 16:06+0100\n"
"PO-Revision-Date: 2018-10-04 17:53+0200\n"
"Last-Translator: Julien Palard <julien@palard.fr>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 1.8.11\n"

#: ../Doc/faq/windows.rst:9
msgid "Python on Windows FAQ"
msgstr "FAQ : Python et Windows"

#: ../Doc/faq/windows.rst:12
msgid "Contents"
msgstr "Sommaire"

#: ../Doc/faq/windows.rst:20
msgid "How do I run a Python program under Windows?"
msgstr "Comment exécuter un programme Python sous Windows ?"

#: ../Doc/faq/windows.rst:22
msgid ""
"This is not necessarily a straightforward question. If you are already "
"familiar with running programs from the Windows command line then everything "
"will seem obvious; otherwise, you might need a little more guidance."
msgstr ""
"Ce n'est pas forcément une question simple. Si vous êtes déjà familier avec "
"le lancement de programmes depuis la ligne de commande de Windows alors tout "
"semblera évident; Sinon, vous auriez besoin d'être un peu guidé."

#: ../Doc/faq/windows.rst:26
#, fuzzy
msgid ""
"Unless you use some sort of integrated development environment, you will end "
"up *typing* Windows commands into what is variously referred to as a \"DOS "
"window\" or \"Command prompt window\".  Usually you can create such a window "
"from your search bar by searching for ``cmd``.  You should be able to "
"recognize when you have started such a window because you will see a Windows "
"\"command prompt\", which usually looks like this:"
msgstr ""
"A moins que vous n'utilisiez quelque environnement de développement, vous "
"devrez entrer des commandes Windows dans ce qui est diversement référé comme "
"\"DOS Windows\" ou \"invite de commande Windows\". En général vous pouvez "
"ouvrir cette fenêtre depuis le menu Démarrer; sous Windows 7, allez dans :"
"Démarrer --> Programmes --> Accessoires --> Invite de commande. Vous serez "
"dans la bonne fenêtre quand vous verrez une fenêtre invite de commande qui "
"ressemble normalement à ça :"

#: ../Doc/faq/windows.rst:37
msgid ""
"The letter may be different, and there might be other things after it, so "
"you might just as easily see something like:"
msgstr ""
"La lettre peut être différente, et il peut y avoir d'autres choses à la "
"suite, alors il se peut aussi bien que vous voyez quelque chose tel que :"

#: ../Doc/faq/windows.rst:44
msgid ""
"depending on how your computer has been set up and what else you have "
"recently done with it.  Once you have started such a window, you are well on "
"the way to running Python programs."
msgstr ""
"selon la configuration de votre ordinateur et ce que vous avez récemment "
"fait avec. Une fois que vous avez ouvert cette fenêtre, vous êtes bien "
"partis pour pouvoir lancer des programmes Python."

#: ../Doc/faq/windows.rst:48
msgid ""
"You need to realize that your Python scripts have to be processed by another "
"program called the Python *interpreter*.  The interpreter reads your script, "
"compiles it into bytecodes, and then executes the bytecodes to run your "
"program. So, how do you arrange for the interpreter to handle your Python?"
msgstr ""
"Retenez que vos scripts Python doivent être traités par un autre programme "
"appelé \"l’interpréteur\" Python. L’interpréteur lit votre script, le "
"compile en *bytecode*, et exécute le *bytecode* pour faire tourner votre "
"programme. Alors, comment faire pour donner votre code Python à "
"l'interpréteur ?"

#: ../Doc/faq/windows.rst:53
#, fuzzy
msgid ""
"First, you need to make sure that your command window recognises the word "
"\"py\" as an instruction to start the interpreter.  If you have opened a "
"command window, you should try entering the command ``py`` and hitting "
"return:"
msgstr ""
"Tout d'abord, vous devez vous assurer que votre fenêtre d'invite de commande "
"reconnaît le mot \"python\" comme une instruction pour démarrer "
"l'interpréteur. Si vous avez ouvert une fenêtre de commande, entrez la "
"commande ``python``, puis appuyez sur la touche entrée :"

#: ../Doc/faq/windows.rst:62
msgid "You should then see something like:"
msgstr "Vous devez vous trouver face à quelque chose comme ça :"

#: ../Doc/faq/windows.rst:70
msgid ""
"You have started the interpreter in \"interactive mode\". That means you can "
"enter Python statements or expressions interactively and have them executed "
"or evaluated while you wait.  This is one of Python's strongest features.  "
"Check it by entering a few expressions of your choice and seeing the results:"
msgstr ""
"Vous avez lancé l'interpréteur dans son \"mode interactif\". Cela signifie "
"que vous pouvez entrer des instructions ou des expressions Python de manière "
"interactive pour qu'elles soient exécutées. Il s'agit là d'une des plus "
"puissantes fonctionnalités de Python. Vous pouvez le vérifier en entrant "
"quelques commandes de votre choix et en regardant le résultat :"

#: ../Doc/faq/windows.rst:82
#, fuzzy
msgid ""
"Many people use the interactive mode as a convenient yet highly programmable "
"calculator.  When you want to end your interactive Python session, call the :"
"func:`exit` function or hold the :kbd:`Ctrl` key down while you enter a :kbd:"
"`Z`, then hit the \":kbd:`Enter`\" key to get back to your Windows command "
"prompt."
msgstr ""
"Beaucoup de personnes utilisent le mode interactif comme une calculatrice "
"programmable. Lorsque vous souhaitez sortir du mode interactif de Python, "
"maintenez la touche :kbd:`Ctrl` appuyée, puis appuyez sur :kbd:`Z`. Validez "
"avec \":kbd:`Entrée`\" pour retrouver votre  ligne de commande Windows."

#: ../Doc/faq/windows.rst:88
#, fuzzy
msgid ""
"You may also find that you have a Start-menu entry such as :menuselection:"
"`Start --> Programs --> Python 3.x --> Python (command line)` that results "
"in you seeing the ``>>>`` prompt in a new window.  If so, the window will "
"disappear after you call the :func:`exit` function or enter the :kbd:`Ctrl-"
"Z` character; Windows is running a single \"python\" command in the window, "
"and closes it when you terminate the interpreter."
msgstr ""
"Peut-être avez-vous remarqué une nouvelle entrée dans votre menu Démarrer, "
"comme : :menuselection:`Démarrer --> Programmes --> Python 3.3 --> Python "
"(ligne de commande)`, qui lance l’interpréteur dans une nouvelle fenêtre. "
"Dans ce cas, la fenêtre disparaîtra lorsque vous entrerez :kbd:`Ctrl-Z` ; la "
"fenêtre Python ouverte par Windows est fermée lorsque vous quittez "
"l'interpréteur."

#: ../Doc/faq/windows.rst:95
msgid ""
"Now that we know the ``py`` command is recognized, you can give your Python "
"script to it. You'll have to give either an absolute or a relative path to "
"the Python script. Let's say your Python script is located in your desktop "
"and is named ``hello.py``, and your command prompt is nicely opened in your "
"home directory so you're seeing something similar to::"
msgstr ""

#: ../Doc/faq/windows.rst:104
msgid ""
"So now you'll ask the ``py`` command to give your script to Python by typing "
"``py`` followed by your script path::"
msgstr ""

#: ../Doc/faq/windows.rst:112
msgid "How do I make Python scripts executable?"
msgstr "Comment rendre des scripts Python exécutables ?"

#: ../Doc/faq/windows.rst:114
msgid ""
"On Windows, the standard Python installer already associates the .py "
"extension with a file type (Python.File) and gives that file type an open "
"command that runs the interpreter (``D:\\Program Files\\Python\\python.exe "
"\"%1\" %*``).  This is enough to make scripts executable from the command "
"prompt as 'foo.py'.  If you'd rather be able to execute the script by simple "
"typing 'foo' with no extension you need to add .py to the PATHEXT "
"environment variable."
msgstr ""
"Sous Windows, l'installateur Python associe l'extension *.py* avec un type "
"de fichier (Python.File) et une commande qui lance l’interpréteur (``D:"
"\\Program Files\\Python\\python.exe \"%1\" %*``). Cela suffit pour pouvoir "
"exécuter les scripts Python depuis la ligne de commande en saisissant *foo."
"py*. Si vous souhaitez pouvoir exécuter les scripts en saisissant simplement "
"*foo* sans l’extension, vous devez ajouter *.py* au paramètre "
"d’environnement PATHEXT."

#: ../Doc/faq/windows.rst:122
msgid "Why does Python sometimes take so long to start?"
msgstr "Pourquoi Python met-il du temps à démarrer ?"

#: ../Doc/faq/windows.rst:124
msgid ""
"Usually Python starts very quickly on Windows, but occasionally there are "
"bug reports that Python suddenly begins to take a long time to start up.  "
"This is made even more puzzling because Python will work fine on other "
"Windows systems which appear to be configured identically."
msgstr ""
"Normalement, sous Windows, Python se lance très rapidement, mais parfois des "
"rapports d'erreurs indiquent que Python commence soudain à prendre beaucoup "
"de temps pour démarrer. C'est d'autant plus intrigant que Python fonctionne "
"correctement avec d'autres Windows configurés de façon similaire."

#: ../Doc/faq/windows.rst:129
msgid ""
"The problem may be caused by a misconfiguration of virus checking software "
"on the problem machine.  Some virus scanners have been known to introduce "
"startup overhead of two orders of magnitude when the scanner is configured "
"to monitor all reads from the filesystem.  Try checking the configuration of "
"virus scanning software on your systems to ensure that they are indeed "
"configured identically. McAfee, when configured to scan all file system read "
"activity, is a particular offender."
msgstr ""
"Le problème peut venir d'un antivirus mal configuré. Certains antivirus sont "
"connus pour doubler le temps de démarrage lorsqu'ils sont configurés pour "
"surveiller toutes les lectures du système de fichiers. Essayez de regarder "
"si les antivirus des deux machines sont bien paramétrés à l'identique. "
"*McAfee* est particulièrement problématique lorsqu'il est paramétré pour "
"surveiller toutes les lectures du système de fichiers."

#: ../Doc/faq/windows.rst:139
msgid "How do I make an executable from a Python script?"
msgstr "Comment construire un exécutable depuis un script Python ?"

#: ../Doc/faq/windows.rst:141
msgid ""
"See `cx_Freeze <https://anthony-tuininga.github.io/cx_Freeze/>`_ for a "
"distutils extension that allows you to create console and GUI executables "
"from Python code. `py2exe <http://www.py2exe.org/>`_, the most popular "
"extension for building Python 2.x-based executables, does not yet support "
"Python 3 but a version that does is in development."
msgstr ""

#: ../Doc/faq/windows.rst:149
msgid "Is a ``*.pyd`` file the same as a DLL?"
msgstr "Est-ce qu'un fichier ``*.pyd`` est la même chose qu'une DLL ?"

#: ../Doc/faq/windows.rst:151
msgid ""
"Yes, .pyd files are dll's, but there are a few differences.  If you have a "
"DLL named ``foo.pyd``, then it must have a function ``PyInit_foo()``.  You "
"can then write Python \"import foo\", and Python will search for foo.pyd (as "
"well as foo.py, foo.pyc) and if it finds it, will attempt to call "
"``PyInit_foo()`` to initialize it.  You do not link your .exe with foo.lib, "
"as that would cause Windows to require the DLL to be present."
msgstr ""

#: ../Doc/faq/windows.rst:158
msgid ""
"Note that the search path for foo.pyd is PYTHONPATH, not the same as the "
"path that Windows uses to search for foo.dll.  Also, foo.pyd need not be "
"present to run your program, whereas if you linked your program with a dll, "
"the dll is required.  Of course, foo.pyd is required if you want to say "
"``import foo``.  In a DLL, linkage is declared in the source code with "
"``__declspec(dllexport)``. In a .pyd, linkage is defined in a list of "
"available functions."
msgstr ""

#: ../Doc/faq/windows.rst:167
msgid "How can I embed Python into a Windows application?"
msgstr ""

#: ../Doc/faq/windows.rst:169
msgid ""
"Embedding the Python interpreter in a Windows app can be summarized as "
"follows:"
msgstr ""

#: ../Doc/faq/windows.rst:171
msgid ""
"Do _not_ build Python into your .exe file directly.  On Windows, Python must "
"be a DLL to handle importing modules that are themselves DLL's.  (This is "
"the first key undocumented fact.)  Instead, link to :file:`python{NN}.dll`; "
"it is typically installed in ``C:\\Windows\\System``.  *NN* is the Python "
"version, a number such as \"33\" for Python 3.3."
msgstr ""

#: ../Doc/faq/windows.rst:177
msgid ""
"You can link to Python in two different ways.  Load-time linking means "
"linking against :file:`python{NN}.lib`, while run-time linking means linking "
"against :file:`python{NN}.dll`.  (General note: :file:`python{NN}.lib` is "
"the so-called \"import lib\" corresponding to :file:`python{NN}.dll`.  It "
"merely defines symbols for the linker.)"
msgstr ""

#: ../Doc/faq/windows.rst:183
msgid ""
"Run-time linking greatly simplifies link options; everything happens at run "
"time.  Your code must load :file:`python{NN}.dll` using the Windows "
"``LoadLibraryEx()`` routine.  The code must also use access routines and "
"data in :file:`python{NN}.dll` (that is, Python's C API's) using pointers "
"obtained by the Windows ``GetProcAddress()`` routine.  Macros can make using "
"these pointers transparent to any C code that calls routines in Python's C "
"API."
msgstr ""

#: ../Doc/faq/windows.rst:190
msgid ""
"Borland note: convert :file:`python{NN}.lib` to OMF format using Coff2Omf."
"exe first."
msgstr ""

#: ../Doc/faq/windows.rst:195
msgid ""
"If you use SWIG, it is easy to create a Python \"extension module\" that "
"will make the app's data and methods available to Python.  SWIG will handle "
"just about all the grungy details for you.  The result is C code that you "
"link *into* your .exe file (!)  You do _not_ have to create a DLL file, and "
"this also simplifies linking."
msgstr ""

#: ../Doc/faq/windows.rst:201
msgid ""
"SWIG will create an init function (a C function) whose name depends on the "
"name of the extension module.  For example, if the name of the module is "
"leo, the init function will be called initleo().  If you use SWIG shadow "
"classes, as you should, the init function will be called initleoc().  This "
"initializes a mostly hidden helper class used by the shadow class."
msgstr ""

#: ../Doc/faq/windows.rst:207
msgid ""
"The reason you can link the C code in step 2 into your .exe file is that "
"calling the initialization function is equivalent to importing the module "
"into Python! (This is the second key undocumented fact.)"
msgstr ""

#: ../Doc/faq/windows.rst:211
msgid ""
"In short, you can use the following code to initialize the Python "
"interpreter with your extension module."
msgstr ""

#: ../Doc/faq/windows.rst:222
msgid ""
"There are two problems with Python's C API which will become apparent if you "
"use a compiler other than MSVC, the compiler used to build pythonNN.dll."
msgstr ""

#: ../Doc/faq/windows.rst:225
msgid ""
"Problem 1: The so-called \"Very High Level\" functions that take FILE * "
"arguments will not work in a multi-compiler environment because each "
"compiler's notion of a struct FILE will be different.  From an "
"implementation standpoint these are very _low_ level functions."
msgstr ""

#: ../Doc/faq/windows.rst:230
msgid ""
"Problem 2: SWIG generates the following code when generating wrappers to "
"void functions:"
msgstr ""

#: ../Doc/faq/windows.rst:239
msgid ""
"Alas, Py_None is a macro that expands to a reference to a complex data "
"structure called _Py_NoneStruct inside pythonNN.dll.  Again, this code will "
"fail in a mult-compiler environment.  Replace such code by:"
msgstr ""

#: ../Doc/faq/windows.rst:247
msgid ""
"It may be possible to use SWIG's ``%typemap`` command to make the change "
"automatically, though I have not been able to get this to work (I'm a "
"complete SWIG newbie)."
msgstr ""

#: ../Doc/faq/windows.rst:251
msgid ""
"Using a Python shell script to put up a Python interpreter window from "
"inside your Windows app is not a good idea; the resulting window will be "
"independent of your app's windowing system.  Rather, you (or the "
"wxPythonWindow class) should create a \"native\" interpreter window.  It is "
"easy to connect that window to the Python interpreter.  You can redirect "
"Python's i/o to _any_ object that supports read and write, so all you need "
"is a Python object (defined in your extension module) that contains read() "
"and write() methods."
msgstr ""

#: ../Doc/faq/windows.rst:260
msgid "How do I keep editors from inserting tabs into my Python source?"
msgstr ""
"Comment empêcher mon éditeur d'utiliser des tabulations dans mes fichiers "
"Python ?"

#: ../Doc/faq/windows.rst:262
msgid ""
"The FAQ does not recommend using tabs, and the Python style guide, :pep:`8`, "
"recommends 4 spaces for distributed Python code; this is also the Emacs "
"python-mode default."
msgstr ""
"La FAQ ne recommande pas l'utilisation des indentations et le guide "
"stylistique de Python, la :pep:`8`, recommande l'utilisation de 4 espaces "
"dans les codes Python. C'est aussi le comportement par défaut d'Emacs avec "
"Python."

#: ../Doc/faq/windows.rst:266
msgid ""
"Under any editor, mixing tabs and spaces is a bad idea.  MSVC is no "
"different in this respect, and is easily configured to use spaces: Take :"
"menuselection:`Tools --> Options --> Tabs`, and for file type \"Default\" "
"set \"Tab size\" and \"Indent size\" to 4, and select the \"Insert spaces\" "
"radio button."
msgstr ""
"Quel que soit votre éditeur, mélanger des tabulations et des espaces est une "
"mauvaise idée. *Visual C++*, par exemple, peut être facilement configuré "
"pour utiliser des espaces : allez dans :menuselection:`Tools --> Options --> "
"Tabs` et pour le type de fichier par défaut, vous devez mettre *Tab size* et "
"*Indent size* à 4, puis sélectionner *Insert spaces*."

#: ../Doc/faq/windows.rst:271
msgid ""
"Python raises :exc:`IndentationError` or :exc:`TabError` if mixed tabs and "
"spaces are causing problems in leading whitespace. You may also run the :mod:"
"`tabnanny` module to check a directory tree in batch mode."
msgstr ""
"Python va lever :exc:`IndentationError` ou :exc:`TabError` si un mélange de "
"tabulation et d’indentation pose problème en début de ligne. Vous pouvez "
"aussi utiliser le module  :mod:`tabnanny` pour détecter ces erreurs."

#: ../Doc/faq/windows.rst:278
msgid "How do I check for a keypress without blocking?"
msgstr ""

#: ../Doc/faq/windows.rst:280
msgid ""
"Use the msvcrt module.  This is a standard Windows-specific extension "
"module. It defines a function ``kbhit()`` which checks whether a keyboard "
"hit is present, and ``getch()`` which gets one character without echoing it."
msgstr ""

#~ msgid "|Python Development on XP|_"
#~ msgstr "|Python Development on XP|_"

#~ msgid ""
#~ "This series of screencasts aims to get you up and running with Python on "
#~ "Windows XP.  The knowledge is distilled into 1.5 hours and will get you "
#~ "up and running with the right Python distribution, coding in your choice "
#~ "of IDE, and debugging and writing solid code with unit-tests."
#~ msgstr ""
#~ "Cette série de vidéos a pour but de vous montrer comment utiliser Python "
#~ "sur Windows XP. Les explications durent 1 heure et demi et vous "
#~ "permettront d'utiliser la distribution Python adéquate, de développer "
#~ "dans l'IDE de votre choix, et de déboguer et écrire du code solide "
#~ "accompagné des tests unitaires."

#~ msgid ""
#~ "If the ``python`` command, instead of displaying the interpreter prompt "
#~ "``>>>``, gives you a message like::"
#~ msgstr ""
#~ "Si, au lieu de vous afficher ``>>>`` la commande ``python`` vous affiche "
#~ "un message semblable à celui-ci ::"

#~ msgid ""
#~ "Python is not added to the DOS path by default.  This screencast will "
#~ "walk you through the steps to add the correct entry to the `System Path`, "
#~ "allowing Python to be executed from the command-line by all users."
#~ msgstr ""
#~ "Par défaut, Python n'est pas ajouté au PATH. Cette vidéo vous montrera "
#~ "les étapes à suivre pour ajouter la bonne entrée au PATH, permettant "
#~ "ainsi à tous les utilisateurs d'utiliser Python en ligne de commande."

#~ msgid "or::"
#~ msgstr "ou : ::"

#~ msgid ""
#~ "then you need to make sure that your computer knows where to find the "
#~ "Python interpreter.  To do this you will have to modify a setting called "
#~ "PATH, which is a list of directories where Windows will look for programs."
#~ msgstr ""
#~ "alors, vous devez vous assurer que votre ordinateur sait où trouver "
#~ "l’interpréteur Python. Pour cela, vous devez modifier un paramètre, "
#~ "appelé \"PATH\", qui est une liste des répertoires dans lesquels Windows "
#~ "cherche les programmes."

#~ msgid "How do I extract the downloaded documentation on Windows?"
#~ msgstr "Comment décompresser la documentation téléchargée sous Windows ?"

#~ msgid ""
#~ "Sometimes, when you download the documentation package to a Windows "
#~ "machine using a web browser, the file extension of the saved file ends up "
#~ "being .EXE. This is a mistake; the extension should be .TGZ."
#~ msgstr ""
#~ "Quelquefois, lorsque vous téléchargez de la documentation avec Windows en "
#~ "utilisant un navigateur internet, l’extension du fichier est .EXE. Il "
#~ "s'agit d'une erreur ; l'extension devrait être .TGZ."

#~ msgid ""
#~ "Simply rename the downloaded file to have the .TGZ extension, and WinZip "
#~ "will be able to handle it.  (If your copy of WinZip doesn't, get a newer "
#~ "one from https://www.winzip.com.)"
#~ msgstr ""
#~ "Renommez simplement le fichier téléchargé pour lui donner l'extension ."
#~ "TGZ, puis utilisez WinZip pour le décompresser. Si WinZip ne peut pas "
#~ "décompresser le fichier, téléchargez une version plus à jour (https://www."
#~ "winzip.com)."
