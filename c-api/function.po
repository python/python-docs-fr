# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-29 21:40+0100\n"
"PO-Revision-Date: 2023-02-20 13:11+0100\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: c-api/function.rst:6
msgid "Function Objects"
msgstr "Objets fonction"

#: c-api/function.rst:10
msgid "There are a few functions specific to Python functions."
msgstr "Certaines fonctions sont spécifiques aux fonctions Python."

#: c-api/function.rst:15
msgid "The C structure used for functions."
msgstr "La structure C utilisée pour les fonctions."

#: c-api/function.rst:22
msgid ""
"This is an instance of :c:type:`PyTypeObject` and represents the Python "
"function type.  It is exposed to Python programmers as ``types."
"FunctionType``."
msgstr ""
"C'est une instance de :c:type:`PyTypeObject` et représente le type fonction "
"en Python. Il est exposé aux développeurs comme ``types.FunctionType``."

#: c-api/function.rst:28
msgid ""
"Return true if *o* is a function object (has type :c:data:"
"`PyFunction_Type`). The parameter must not be ``NULL``.  This function "
"always succeeds."
msgstr ""
"Renvoie vrai si *o* est un objet de type fonction (a comme type :c:data:"
"`PyFunction_Type`). Le paramètre ne doit pas être ``NULL``. Cette fonction "
"réussit toujours."

#: c-api/function.rst:34
msgid ""
"Return a new function object associated with the code object *code*. "
"*globals* must be a dictionary with the global variables accessible to the "
"function."
msgstr ""
"Renvoie une nouvelle fonction associée avec l'objet *code*. *globals* doit "
"être un dictionnaire avec les variables globales accessibles à la fonction."

#: c-api/function.rst:37
#, fuzzy
msgid ""
"The function's docstring and name are retrieved from the code object. :attr:"
"`~function.__module__` is retrieved from *globals*. The argument defaults, "
"annotations and closure are set to ``NULL``. :attr:`~function.__qualname__` "
"is set to the same value as the code object's :attr:`~codeobject."
"co_qualname` field."
msgstr ""
"La *docstring* et le nom de la fonction sont récupérés à partir de l'objet "
"code. *__module__* est récupéré à partir de *globals*. Les arguments par "
"défaut, les annotations et la fermeture sont mis à ``NULL``. *__qualname__* "
"est mis à la même valeur que celle du champ ``co_qualname`` de l'objet code."

#: c-api/function.rst:46
#, fuzzy
msgid ""
"As :c:func:`PyFunction_New`, but also allows setting the function object's :"
"attr:`~function.__qualname__` attribute. *qualname* should be a unicode "
"object or ``NULL``; if ``NULL``, the :attr:`!__qualname__` attribute is set "
"to the same value as the code object's :attr:`~codeobject.co_qualname` field."
msgstr ""
"Comme :c:func:`PyFunction_New`, mais accepte aussi une valeur à utiliser "
"pour l'attribut  ``__qualname__`` de l'objet fonction. *qualname* doit être "
"un objet Unicode ou ``NULL``; s'il est ``NULL``, l'attribut ``__qualname__`` "
"de l'objet fonction prend la valeur de l'attribut ``co_qualname`` de l'objet "
"code."

#: c-api/function.rst:57
msgid "Return the code object associated with the function object *op*."
msgstr "Renvoie l'objet code associé avec l'objet de la fonction *op*."

#: c-api/function.rst:62
msgid "Return the globals dictionary associated with the function object *op*."
msgstr ""
"Renvoie le dictionnaire global associé avec l'objet de la fonction *op*."

#: c-api/function.rst:67
#, fuzzy
msgid ""
"Return a :term:`borrowed reference` to the :attr:`~function.__module__` "
"attribute of the :ref:`function object <user-defined-funcs>` *op*. It can be "
"*NULL*."
msgstr ""
"Renvoie un :term:`borrowed reference` à l'attribut ``__module__`` de l'objet "
"fonction *op*. Il peut être *NULL*."

#: c-api/function.rst:71
#, fuzzy
msgid ""
"This is normally a :class:`string <str>` containing the module name, but can "
"be set to any other object by Python code."
msgstr ""
"C'est typiquement une chaîne de caractère contenant le nom du module, mais "
"il peut être changé par du code Python pour n'importe quel autre objet."

#: c-api/function.rst:77
msgid ""
"Return the argument default values of the function object *op*. This can be "
"a tuple of arguments or ``NULL``."
msgstr ""
"Renvoie les valeurs par défaut de l'argument de l'objet de la fonction *op*. "
"Cela peut être un tuple d'arguments ou ``NULL``."

#: c-api/function.rst:83
msgid ""
"Set the argument default values for the function object *op*. *defaults* "
"must be ``Py_None`` or a tuple."
msgstr ""
"Définir les valeurs par défaut de l'argument pour l'objet de la fonction "
"*op*. *defaults* doit être ``Py_None`` ou un tuple."

#: c-api/function.rst:109 c-api/function.rst:123
msgid "Raises :exc:`SystemError` and returns ``-1`` on failure."
msgstr "Lève :exc:`SystemError` et renvoie ``-1`` en cas de d'échec."

#: c-api/function.rst:91
#, fuzzy
msgid "Set the vectorcall field of a given function object *func*."
msgstr "Renvoie l'objet code associé avec l'objet de la fonction *op*."

#: c-api/function.rst:93
msgid ""
"Warning: extensions using this API must preserve the behavior of the "
"unaltered (default) vectorcall function!"
msgstr ""

#: c-api/function.rst:100
msgid ""
"Return the closure associated with the function object *op*. This can be "
"``NULL`` or a tuple of cell objects."
msgstr ""
"Renvoie la fermeture associée avec l'objet de la fonction *op*. Cela peut "
"être ``NULL`` ou un tuple d'objets cellule."

#: c-api/function.rst:106
msgid ""
"Set the closure associated with the function object *op*. *closure* must be "
"``Py_None`` or a tuple of cell objects."
msgstr ""
"Définir la fermeture associée avec l'objet de la fonction *op*. *closure* "
"doit être ``Py_None`` ou un tuple d'objets cellule."

#: c-api/function.rst:114
msgid ""
"Return the annotations of the function object *op*. This can be a mutable "
"dictionary or ``NULL``."
msgstr ""
"Renvoie les annotations de l'objet de la fonction *op*. Cela peut être un "
"dictionnaire mutable ou ``NULL``."

#: c-api/function.rst:120
msgid ""
"Set the annotations for the function object *op*. *annotations* must be a "
"dictionary or ``Py_None``."
msgstr ""
"Définir les annotations pour l'objet de la fonction *op*. *annotations* doit "
"être un dictionnaire ou ``Py_None``."

#: c-api/function.rst:128
msgid ""
"Register *callback* as a function watcher for the current interpreter. "
"Return an ID which may be passed to :c:func:`PyFunction_ClearWatcher`. In "
"case of error (e.g. no more watcher IDs available), return ``-1`` and set an "
"exception."
msgstr ""

#: c-api/function.rst:138
msgid ""
"Clear watcher identified by *watcher_id* previously returned from :c:func:"
"`PyFunction_AddWatcher` for the current interpreter. Return ``0`` on "
"success, or ``-1`` and set an exception on error (e.g.  if the given "
"*watcher_id* was never registered.)"
msgstr ""

#: c-api/function.rst:148
msgid ""
"Enumeration of possible function watcher events: - "
"``PyFunction_EVENT_CREATE`` - ``PyFunction_EVENT_DESTROY`` - "
"``PyFunction_EVENT_MODIFY_CODE`` - ``PyFunction_EVENT_MODIFY_DEFAULTS`` - "
"``PyFunction_EVENT_MODIFY_KWDEFAULTS``"
msgstr ""

#: c-api/function.rst:160
msgid "Type of a function watcher callback function."
msgstr ""

#: c-api/function.rst:162
msgid ""
"If *event* is ``PyFunction_EVENT_CREATE`` or ``PyFunction_EVENT_DESTROY`` "
"then *new_value* will be ``NULL``. Otherwise, *new_value* will hold a :term:"
"`borrowed reference` to the new value that is about to be stored in *func* "
"for the attribute that is being modified."
msgstr ""

#: c-api/function.rst:167
msgid ""
"The callback may inspect but must not modify *func*; doing so could have "
"unpredictable effects, including infinite recursion."
msgstr ""

#: c-api/function.rst:170
msgid ""
"If *event* is ``PyFunction_EVENT_CREATE``, then the callback is invoked "
"after `func` has been fully initialized. Otherwise, the callback is invoked "
"before the modification to *func* takes place, so the prior state of *func* "
"can be inspected. The runtime is permitted to optimize away the creation of "
"function objects when possible. In such cases no event will be emitted. "
"Although this creates the possibility of an observable difference of runtime "
"behavior depending on optimization decisions, it does not change the "
"semantics of the Python code being executed."
msgstr ""

#: c-api/function.rst:179
msgid ""
"If *event* is ``PyFunction_EVENT_DESTROY``,  Taking a reference in the "
"callback to the about-to-be-destroyed function will resurrect it, preventing "
"it from being freed at this time. When the resurrected object is destroyed "
"later, any watcher callbacks active at that time will be called again."
msgstr ""

#: c-api/function.rst:184
msgid ""
"If the callback sets an exception, it must return ``-1``; this exception "
"will be printed as an unraisable exception using :c:func:"
"`PyErr_WriteUnraisable`. Otherwise it should return ``0``."
msgstr ""

#: c-api/function.rst:188
msgid ""
"There may already be a pending exception set on entry to the callback. In "
"this case, the callback should return ``0`` with the same exception still "
"set. This means the callback may not call any other API that can set an "
"exception unless it saves and clears the exception state first, and restores "
"it before returning."
msgstr ""

#: c-api/function.rst:8
msgid "object"
msgstr ""

#: c-api/function.rst:8
msgid "function"
msgstr ""

#: c-api/function.rst:20
msgid "MethodType (in module types)"
msgstr ""
