# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-11 12:59+0100\n"
"PO-Revision-Date: 2019-03-29 14:17+0100\n"
"Last-Translator: Andy Kwok <andy.kwok.work@gmail.com>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.0.6\n"

#: ../Doc/c-api/weakref.rst:6
msgid "Weak Reference Objects"
msgstr "Objets à références faibles"

#: ../Doc/c-api/weakref.rst:8
msgid ""
"Python supports *weak references* as first-class objects.  There are two "
"specific object types which directly implement weak references.  The first "
"is a simple reference object, and the second acts as a proxy for the "
"original object as much as it can."
msgstr ""
"Python gère les *références faibles* comme des objets de première classe. Il "
"existe deux types d'objets spécifiques qui implémentent directement les "
"références faibles. Le premier est un objet de référence simple, et le "
"second agit autant que possible comme un mandataire vers l'objet original."

#: ../Doc/c-api/weakref.rst:16
msgid "Return true if *ob* is either a reference or proxy object."
msgstr "Renvoie vrai si *ob* est soit une référence, soit un objet proxy."

#: ../Doc/c-api/weakref.rst:21
msgid "Return true if *ob* is a reference object."
msgstr "Retourne vrai si *ob* est un objet référence."

#: ../Doc/c-api/weakref.rst:26
msgid "Return true if *ob* is a proxy object."
msgstr "Retourne vrai si *ob* est un objet proxy"

#: ../Doc/c-api/weakref.rst:31
msgid ""
"Return a weak reference object for the object *ob*.  This will always return "
"a new reference, but is not guaranteed to create a new object; an existing "
"reference object may be returned.  The second parameter, *callback*, can be "
"a callable object that receives notification when *ob* is garbage collected; "
"it should accept a single parameter, which will be the weak reference object "
"itself. *callback* may also be ``None`` or *NULL*.  If *ob* is not a weakly-"
"referencable object, or if *callback* is not callable, ``None``, or *NULL*, "
"this will return *NULL* and raise :exc:`TypeError`."
msgstr ""
"Retourne un objet de référence faible pour l'objet *ob*. Elle renvoie "
"toujours une nouvelle référence, mais cela ne signifie pas qu'un nouvel "
"objet est créé ; un objet référence existant peut être renvoyé. Le second "
"paramètre, *callback*, peut être un objet appelable qui reçoit une "
"notification lorsque *ob* est collecté par le ramasse-miette (*garbage "
"collected* en anglais) ; il doit accepter un paramètre unique, qui est "
"l'objet référence faible lui-même. *callback* peut aussi être positionné à "
"``None`` ou à *NULL*.  Si *ob* n'est pas un objet faiblement référençable, "
"ou si *callback* n'est pas appelable, ``None``` ou *NULL*, ceci retourne "
"*NULL* et lève une :exc:`TypeError`."

#: ../Doc/c-api/weakref.rst:43
msgid ""
"Return a weak reference proxy object for the object *ob*.  This will always "
"return a new reference, but is not guaranteed to create a new object; an "
"existing proxy object may be returned.  The second parameter, *callback*, "
"can be a callable object that receives notification when *ob* is garbage "
"collected; it should accept a single parameter, which will be the weak "
"reference object itself. *callback* may also be ``None`` or *NULL*.  If *ob* "
"is not a weakly-referencable object, or if *callback* is not callable, "
"``None``, or *NULL*, this will return *NULL* and raise :exc:`TypeError`."
msgstr ""
"Retourne un objet mandataire à référence faible pour l'objet *ob*. Ceci "
"renvoie toujours une nouvelle référence, mais ne garantit pas la création "
"d'un nouvel objet ; un objet proxy existant peut être retourné. Le second "
"paramètre, *callback*, peut être un objet appelable qui reçoit une "
"notification lorsque *ob* est collecté ; il doit accepter un seul paramètre, "
"qui sera l'objet de référence faible lui-même. *callback* peut aussi être "
"``None`` ou *NULLL*. Si *ob* n'est pas un objet faiblement référençable, ou "
"si *callback* n'est pas appelable, ``None``` ou *NULL*, ceci renvoie *NULL* "
"et lève une :exc:`TypeError`."

#: ../Doc/c-api/weakref.rst:55
msgid ""
"Return the referenced object from a weak reference, *ref*.  If the referent "
"is no longer live, returns :const:`Py_None`."
msgstr ""
"Retourne l'objet référencé à partir d'une référence faible, *ref*. Si le "
"référence n'existe plus, alors l'objet renvoie :const:`Py_None`."

#: ../Doc/c-api/weakref.rst:60
msgid ""
"This function returns a **borrowed reference** to the referenced object. "
"This means that you should always call :c:func:`Py_INCREF` on the object "
"except if you know that it cannot be destroyed while you are still using it."
msgstr ""
"Cette fonction renvoie une **référence empruntée** à l'objet référencé. Cela "
"signifie que vous devez toujours appeler :c:func:`Py_INCREF` sur l'objet "
"sauf si vous savez qu'il ne peut pas être détruit tant que vous l'utilisez "
"encore."

#: ../Doc/c-api/weakref.rst:68
msgid ""
"Similar to :c:func:`PyWeakref_GetObject`, but implemented as a macro that "
"does no error checking."
msgstr ""
"Similaire à :c:func:`PyWeakref_GetObject`, mais implémenté comme une macro "
"qui ne vérifie pas les erreurs."
