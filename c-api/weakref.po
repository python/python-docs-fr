# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-29 22:40+0100\n"
"PO-Revision-Date: 2021-12-16 17:25+0100\n"
"Last-Translator: Andy Kwok <andy.kwok.work@gmail.com>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.0.6\n"

#: c-api/weakref.rst:6
msgid "Weak Reference Objects"
msgstr "Objets à références faibles"

#: c-api/weakref.rst:8
msgid ""
"Python supports *weak references* as first-class objects.  There are two "
"specific object types which directly implement weak references.  The first "
"is a simple reference object, and the second acts as a proxy for the "
"original object as much as it can."
msgstr ""
"Python gère les *références faibles* comme des objets de première classe. Il "
"existe deux types d'objets spécifiques qui implémentent directement les "
"références faibles. Le premier est un objet de référence simple, et le "
"second agit autant que possible comme un mandataire vers l'objet original."

#: c-api/weakref.rst:16
#, fuzzy
msgid ""
"Return non-zero if *ob* is either a reference or proxy object.  This "
"function always succeeds."
msgstr "Renvoie vrai si *ob* est soit une référence, soit un objet proxy."

#: c-api/weakref.rst:22
#, fuzzy
msgid ""
"Return non-zero if *ob* is a reference object.  This function always "
"succeeds."
msgstr "Retourne vrai si *ob* est un objet référence."

#: c-api/weakref.rst:27
#, fuzzy
msgid ""
"Return non-zero if *ob* is a proxy object.  This function always succeeds."
msgstr "Retourne vrai si *ob* est un objet proxy"

#: c-api/weakref.rst:32
#, fuzzy
msgid ""
"Return a weak reference object for the object *ob*.  This will always return "
"a new reference, but is not guaranteed to create a new object; an existing "
"reference object may be returned.  The second parameter, *callback*, can be "
"a callable object that receives notification when *ob* is garbage collected; "
"it should accept a single parameter, which will be the weak reference object "
"itself. *callback* may also be ``None`` or ``NULL``.  If *ob* is not a "
"weakly referenceable object, or if *callback* is not callable, ``None``, or "
"``NULL``, this will return ``NULL`` and raise :exc:`TypeError`."
msgstr ""
"Retourne un objet de référence faible pour l'objet *ob*. Elle renvoie "
"toujours une nouvelle référence, mais cela ne signifie pas qu'un nouvel "
"objet est créé ; un objet référence existant peut être renvoyé. Le second "
"paramètre, *callback*, peut être un objet appelable qui reçoit une "
"notification lorsque *ob* est collecté par le ramasse-miette (*garbage "
"collected* en anglais) ; il doit accepter un paramètre unique, qui est "
"l'objet référence faible lui-même. *callback* peut aussi être positionné à "
"``None`` ou à *NULL*.  Si *ob* n'est pas un objet faiblement référençable, "
"ou si *callback* n'est pas appelable, ``None`` ou *NULL*, ceci retourne "
"*NULL* et lève une :exc:`TypeError`."

#: c-api/weakref.rst:44
#, fuzzy
msgid ""
"Return a weak reference proxy object for the object *ob*.  This will always "
"return a new reference, but is not guaranteed to create a new object; an "
"existing proxy object may be returned.  The second parameter, *callback*, "
"can be a callable object that receives notification when *ob* is garbage "
"collected; it should accept a single parameter, which will be the weak "
"reference object itself. *callback* may also be ``None`` or ``NULL``.  If "
"*ob* is not a weakly referenceable object, or if *callback* is not callable, "
"``None``, or ``NULL``, this will return ``NULL`` and raise :exc:`TypeError`."
msgstr ""
"Retourne un objet mandataire à référence faible pour l'objet *ob*. Ceci "
"renvoie toujours une nouvelle référence, mais ne garantit pas la création "
"d'un nouvel objet ; un objet proxy existant peut être retourné. Le second "
"paramètre, *callback*, peut être un objet appelable qui reçoit une "
"notification lorsque *ob* est collecté ; il doit accepter un seul paramètre, "
"qui sera l'objet de référence faible lui-même. *callback* peut aussi être "
"``None`` ou *NULL*. Si *ob* n'est pas un objet faiblement référençable, ou "
"si *callback* n'est pas appelable, ``None`` ou *NULL*, ceci renvoie *NULL* "
"et lève une :exc:`TypeError`."

#: c-api/weakref.rst:56
msgid ""
"Get a :term:`strong reference` to the referenced object from a weak "
"reference, *ref*, into *\\*pobj*."
msgstr ""

#: c-api/weakref.rst:59
msgid ""
"On success, set *\\*pobj* to a new :term:`strong reference` to the "
"referenced object and return 1."
msgstr ""

#: c-api/weakref.rst:61
msgid "If the reference is dead, set *\\*pobj* to ``NULL`` and return 0."
msgstr ""

#: c-api/weakref.rst:62
msgid "On error, raise an exception and return -1."
msgstr ""

#: c-api/weakref.rst:69
#, fuzzy
msgid ""
"Return a :term:`borrowed reference` to the referenced object from a weak "
"reference, *ref*.  If the referent is no longer live, returns ``Py_None``."
msgstr ""
"Retourne l'objet référencé à partir d'une référence faible, *ref*. Si le "
"référence n'existe plus, alors l'objet renvoie :const:`Py_None`."

#: c-api/weakref.rst:74
#, fuzzy
msgid ""
"This function returns a :term:`borrowed reference` to the referenced object. "
"This means that you should always call :c:func:`Py_INCREF` on the object "
"except when it cannot be destroyed before the last usage of the borrowed "
"reference."
msgstr ""
"Cette fonction renvoie une **référence empruntée** à l'objet référencé. Cela "
"signifie que vous devez toujours appeler :c:func:`Py_INCREF` sur l'objet "
"sauf si vous savez qu'il ne peut pas être détruit tant que vous l'utilisez "
"encore."

#: c-api/weakref.rst:87
msgid "Use :c:func:`PyWeakref_GetRef` instead."
msgstr ""

#: c-api/weakref.rst:85
#, fuzzy
msgid "Similar to :c:func:`PyWeakref_GetObject`, but does no error checking."
msgstr ""
"Similaire à :c:func:`PyWeakref_GetObject`, mais implémenté comme une macro "
"qui ne vérifie pas les erreurs."

#: c-api/weakref.rst:93
msgid ""
"This function is called by the :c:member:`~PyTypeObject.tp_dealloc` handler "
"to clear weak references."
msgstr ""

#: c-api/weakref.rst:96
msgid ""
"This iterates through the weak references for *object* and calls callbacks "
"for those references which have one. It returns when all callbacks have been "
"attempted."
msgstr ""

#: c-api/weakref.rst:103
msgid "Clears the weakrefs for *object* without calling the callbacks."
msgstr ""

#: c-api/weakref.rst:105
msgid ""
"This function is called by the :c:member:`~PyTypeObject.tp_dealloc` handler "
"for types with finalizers (i.e., :meth:`~object.__del__`).  The handler for "
"those objects first calls :c:func:`PyObject_ClearWeakRefs` to clear weakrefs "
"and call their callbacks, then the finalizer, and finally this function to "
"clear any weakrefs that may have been created by the finalizer."
msgstr ""

#: c-api/weakref.rst:111
msgid ""
"In most circumstances, it's more appropriate to use :c:func:"
"`PyObject_ClearWeakRefs` to clear weakrefs instead of this function."
msgstr ""
