# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-04 10:00+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/c-api/sys.rst:6
msgid "Operating System Utilities"
msgstr ""

#: ../Doc/c-api/sys.rst:10
msgid ""
"Return the file system representation for *path*. If the object is a :class:"
"`str` or :class:`bytes` object, then its reference count is incremented. If "
"the object implements the :class:`os.PathLike` interface, then :meth:`~os."
"PathLike.__fspath__` is returned as long as it is a :class:`str` or :class:"
"`bytes` object. Otherwise :exc:`TypeError` is raised and ``NULL`` is "
"returned."
msgstr ""

#: ../Doc/c-api/sys.rst:22
msgid ""
"Return true (nonzero) if the standard I/O file *fp* with name *filename* is "
"deemed interactive.  This is the case for files for which "
"``isatty(fileno(fp))`` is true.  If the global flag :c:data:"
"`Py_InteractiveFlag` is true, this function also returns true if the "
"*filename* pointer is ``NULL`` or if the name is equal to one of the strings "
"``'<stdin>'`` or ``'???'``."
msgstr ""

#: ../Doc/c-api/sys.rst:31
msgid ""
"Function to prepare some internal state before a process fork.  This should "
"be called before calling :c:func:`fork` or any similar function that clones "
"the current process. Only available on systems where :c:func:`fork` is "
"defined."
msgstr ""

#: ../Doc/c-api/sys.rst:37
msgid ""
"The C :c:func:`fork` call should only be made from the :ref:`\"main\" thread "
"<fork-and-threads>` (of the :ref:`\"main\" interpreter <sub-interpreter-"
"support>`).  The same is true for ``PyOS_BeforeFork()``."
msgstr ""

#: ../Doc/c-api/sys.rst:47
msgid ""
"Function to update some internal state after a process fork.  This should be "
"called from the parent process after calling :c:func:`fork` or any similar "
"function that clones the current process, regardless of whether process "
"cloning was successful. Only available on systems where :c:func:`fork` is "
"defined."
msgstr ""

#: ../Doc/c-api/sys.rst:54
msgid ""
"The C :c:func:`fork` call should only be made from the :ref:`\"main\" thread "
"<fork-and-threads>` (of the :ref:`\"main\" interpreter <sub-interpreter-"
"support>`).  The same is true for ``PyOS_AfterFork_Parent()``."
msgstr ""

#: ../Doc/c-api/sys.rst:64
msgid ""
"Function to update internal interpreter state after a process fork. This "
"must be called from the child process after calling :c:func:`fork`, or any "
"similar function that clones the current process, if there is any chance the "
"process will call back into the Python interpreter. Only available on "
"systems where :c:func:`fork` is defined."
msgstr ""

#: ../Doc/c-api/sys.rst:71
msgid ""
"The C :c:func:`fork` call should only be made from the :ref:`\"main\" thread "
"<fork-and-threads>` (of the :ref:`\"main\" interpreter <sub-interpreter-"
"support>`).  The same is true for ``PyOS_AfterFork_Child()``."
msgstr ""

#: ../Doc/c-api/sys.rst:79
msgid ""
":func:`os.register_at_fork` allows registering custom Python functions to be "
"called by :c:func:`PyOS_BeforeFork()`, :c:func:`PyOS_AfterFork_Parent` and  :"
"c:func:`PyOS_AfterFork_Child`."
msgstr ""

#: ../Doc/c-api/sys.rst:86
msgid ""
"Function to update some internal state after a process fork; this should be "
"called in the new process if the Python interpreter will continue to be "
"used. If a new executable is loaded into the new process, this function does "
"not need to be called."
msgstr ""

#: ../Doc/c-api/sys.rst:91
msgid "This function is superseded by :c:func:`PyOS_AfterFork_Child()`."
msgstr ""

#: ../Doc/c-api/sys.rst:97
msgid ""
"Return true when the interpreter runs out of stack space.  This is a "
"reliable check, but is only available when :const:`USE_STACKCHECK` is "
"defined (currently on Windows using the Microsoft Visual C++ compiler).  :"
"const:`USE_STACKCHECK` will be defined automatically; you should never "
"change the definition in your own code."
msgstr ""

#: ../Doc/c-api/sys.rst:106
msgid ""
"Return the current signal handler for signal *i*.  This is a thin wrapper "
"around either :c:func:`sigaction` or :c:func:`signal`.  Do not call those "
"functions directly! :c:type:`PyOS_sighandler_t` is a typedef alias for :c:"
"type:`void (\\*)(int)`."
msgstr ""

#: ../Doc/c-api/sys.rst:114
msgid ""
"Set the signal handler for signal *i* to be *h*; return the old signal "
"handler. This is a thin wrapper around either :c:func:`sigaction` or :c:func:"
"`signal`.  Do not call those functions directly!  :c:type:"
"`PyOS_sighandler_t` is a typedef alias for :c:type:`void (\\*)(int)`."
msgstr ""

#: ../Doc/c-api/sys.rst:121
msgid ""
"Decode a byte string from the locale encoding with the :ref:`surrogateescape "
"error handler <surrogateescape>`: undecodable bytes are decoded as "
"characters in range U+DC80..U+DCFF. If a byte sequence can be decoded as a "
"surrogate character, escape the bytes using the surrogateescape error "
"handler instead of decoding them."
msgstr ""

#: ../Doc/c-api/sys.rst:127 ../Doc/c-api/sys.rst:173
msgid "Encoding, highest priority to lowest priority:"
msgstr ""

#: ../Doc/c-api/sys.rst:129 ../Doc/c-api/sys.rst:175
msgid "``UTF-8`` on macOS, Android, and VxWorks;"
msgstr ""

#: ../Doc/c-api/sys.rst:130 ../Doc/c-api/sys.rst:176
msgid ""
"``UTF-8`` on Windows if :c:data:`Py_LegacyWindowsFSEncodingFlag` is zero;"
msgstr ""

#: ../Doc/c-api/sys.rst:131 ../Doc/c-api/sys.rst:177
msgid "``UTF-8`` if the Python UTF-8 mode is enabled;"
msgstr ""

#: ../Doc/c-api/sys.rst:132 ../Doc/c-api/sys.rst:178
msgid ""
"``ASCII`` if the ``LC_CTYPE`` locale is ``\"C\"``, ``nl_langinfo(CODESET)`` "
"returns the ``ASCII`` encoding (or an alias), and :c:func:`mbstowcs` and :c:"
"func:`wcstombs` functions uses the ``ISO-8859-1`` encoding."
msgstr ""

#: ../Doc/c-api/sys.rst:136 ../Doc/c-api/sys.rst:182
msgid "the current locale encoding."
msgstr ""

#: ../Doc/c-api/sys.rst:138
msgid ""
"Return a pointer to a newly allocated wide character string, use :c:func:"
"`PyMem_RawFree` to free the memory. If size is not ``NULL``, write the "
"number of wide characters excluding the null character into ``*size``"
msgstr ""

#: ../Doc/c-api/sys.rst:142
msgid ""
"Return ``NULL`` on decoding error or memory allocation error. If *size* is "
"not ``NULL``, ``*size`` is set to ``(size_t)-1`` on memory error or set to "
"``(size_t)-2`` on decoding error."
msgstr ""

#: ../Doc/c-api/sys.rst:146
msgid ""
"Decoding errors should never happen, unless there is a bug in the C library."
msgstr ""

#: ../Doc/c-api/sys.rst:149
msgid ""
"Use the :c:func:`Py_EncodeLocale` function to encode the character string "
"back to a byte string."
msgstr ""

#: ../Doc/c-api/sys.rst:154
msgid ""
"The :c:func:`PyUnicode_DecodeFSDefaultAndSize` and :c:func:"
"`PyUnicode_DecodeLocaleAndSize` functions."
msgstr ""

#: ../Doc/c-api/sys.rst:159 ../Doc/c-api/sys.rst:203
msgid "The function now uses the UTF-8 encoding in the UTF-8 mode."
msgstr ""

#: ../Doc/c-api/sys.rst:162 ../Doc/c-api/sys.rst:206
msgid ""
"The function now uses the UTF-8 encoding on Windows if :c:data:"
"`Py_LegacyWindowsFSEncodingFlag` is zero;"
msgstr ""

#: ../Doc/c-api/sys.rst:169
msgid ""
"Encode a wide character string to the locale encoding with the :ref:"
"`surrogateescape error handler <surrogateescape>`: surrogate characters in "
"the range U+DC80..U+DCFF are converted to bytes 0x80..0xFF."
msgstr ""

#: ../Doc/c-api/sys.rst:184
msgid "The function uses the UTF-8 encoding in the Python UTF-8 mode."
msgstr ""

#: ../Doc/c-api/sys.rst:186
msgid ""
"Return a pointer to a newly allocated byte string, use :c:func:`PyMem_Free` "
"to free the memory. Return ``NULL`` on encoding error or memory allocation "
"error"
msgstr ""

#: ../Doc/c-api/sys.rst:190
msgid ""
"If error_pos is not ``NULL``, ``*error_pos`` is set to ``(size_t)-1`` on "
"success,  or set to the index of the invalid character on encoding error."
msgstr ""

#: ../Doc/c-api/sys.rst:193
msgid ""
"Use the :c:func:`Py_DecodeLocale` function to decode the bytes string back "
"to a wide character string."
msgstr ""

#: ../Doc/c-api/sys.rst:198
msgid ""
"The :c:func:`PyUnicode_EncodeFSDefault` and :c:func:`PyUnicode_EncodeLocale` "
"functions."
msgstr ""

#: ../Doc/c-api/sys.rst:214
msgid "System Functions"
msgstr ""

#: ../Doc/c-api/sys.rst:216
msgid ""
"These are utility functions that make functionality from the :mod:`sys` "
"module accessible to C code.  They all work with the current interpreter "
"thread's :mod:`sys` module's dict, which is contained in the internal thread "
"state structure."
msgstr ""

#: ../Doc/c-api/sys.rst:222
msgid ""
"Return the object *name* from the :mod:`sys` module or ``NULL`` if it does "
"not exist, without setting an exception."
msgstr ""

#: ../Doc/c-api/sys.rst:227
msgid ""
"Set *name* in the :mod:`sys` module to *v* unless *v* is ``NULL``, in which "
"case *name* is deleted from the sys module. Returns ``0`` on success, ``-1`` "
"on error."
msgstr ""

#: ../Doc/c-api/sys.rst:233
msgid ""
"Reset :data:`sys.warnoptions` to an empty list. This function may be called "
"prior to :c:func:`Py_Initialize`."
msgstr ""

#: ../Doc/c-api/sys.rst:238
msgid ""
"Append *s* to :data:`sys.warnoptions`. This function must be called prior "
"to :c:func:`Py_Initialize` in order to affect the warnings filter list."
msgstr ""

#: ../Doc/c-api/sys.rst:243
msgid "Append *unicode* to :data:`sys.warnoptions`."
msgstr ""

#: ../Doc/c-api/sys.rst:245
msgid ""
"Note: this function is not currently usable from outside the CPython "
"implementation, as it must be called prior to the implicit import of :mod:"
"`warnings` in :c:func:`Py_Initialize` to be effective, but can't be called "
"until enough of the runtime has been initialized to permit the creation of "
"Unicode objects."
msgstr ""

#: ../Doc/c-api/sys.rst:253
msgid ""
"Set :data:`sys.path` to a list object of paths found in *path* which should "
"be a list of paths separated with the platform's search path delimiter (``:"
"`` on Unix, ``;`` on Windows)."
msgstr ""

#: ../Doc/c-api/sys.rst:259
msgid ""
"Write the output string described by *format* to :data:`sys.stdout`.  No "
"exceptions are raised, even if truncation occurs (see below)."
msgstr ""

#: ../Doc/c-api/sys.rst:262
msgid ""
"*format* should limit the total size of the formatted output string to 1000 "
"bytes or less -- after 1000 bytes, the output string is truncated. In "
"particular, this means that no unrestricted \"%s\" formats should occur; "
"these should be limited using \"%.<N>s\" where <N> is a decimal number "
"calculated so that <N> plus the maximum size of other formatted text does "
"not exceed 1000 bytes.  Also watch out for \"%f\", which can print hundreds "
"of digits for very large numbers."
msgstr ""

#: ../Doc/c-api/sys.rst:270
msgid ""
"If a problem occurs, or :data:`sys.stdout` is unset, the formatted message "
"is written to the real (C level) *stdout*."
msgstr ""

#: ../Doc/c-api/sys.rst:275
msgid ""
"As :c:func:`PySys_WriteStdout`, but write to :data:`sys.stderr` or *stderr* "
"instead."
msgstr ""

#: ../Doc/c-api/sys.rst:280
msgid ""
"Function similar to PySys_WriteStdout() but format the message using :c:func:"
"`PyUnicode_FromFormatV` and don't truncate the message to an arbitrary "
"length."
msgstr ""

#: ../Doc/c-api/sys.rst:288
msgid ""
"As :c:func:`PySys_FormatStdout`, but write to :data:`sys.stderr` or *stderr* "
"instead."
msgstr ""

#: ../Doc/c-api/sys.rst:295
msgid ""
"Parse *s* as a set of :option:`-X` options and add them to the current "
"options mapping as returned by :c:func:`PySys_GetXOptions`. This function "
"may be called prior to :c:func:`Py_Initialize`."
msgstr ""

#: ../Doc/c-api/sys.rst:303
msgid ""
"Return the current dictionary of :option:`-X` options, similarly to :data:"
"`sys._xoptions`.  On error, ``NULL`` is returned and an exception is set."
msgstr ""

#: ../Doc/c-api/sys.rst:312
msgid ""
"Raise an auditing event with any active hooks. Return zero for success and "
"non-zero with an exception set on failure."
msgstr ""

#: ../Doc/c-api/sys.rst:315
msgid ""
"If any hooks have been added, *format* and other arguments will be used to "
"construct a tuple to pass. Apart from ``N``, the same format characters as "
"used in :c:func:`Py_BuildValue` are available. If the built value is not a "
"tuple, it will be added into a single-element tuple. (The ``N`` format "
"option consumes a reference, but since there is no way to know whether "
"arguments to this function will be consumed, using it may cause reference "
"leaks.)"
msgstr ""

#: ../Doc/c-api/sys.rst:323
msgid ""
"Note that ``#`` format characters should always be treated as "
"``Py_ssize_t``, regardless of whether ``PY_SSIZE_T_CLEAN`` was defined."
msgstr ""

#: ../Doc/c-api/sys.rst:326
msgid ":func:`sys.audit` performs the same function from Python code."
msgstr ""

#: ../Doc/c-api/sys.rst:332
msgid ""
"Require ``Py_ssize_t`` for ``#`` format characters. Previously, an "
"unavoidable deprecation warning was raised."
msgstr ""

#: ../Doc/c-api/sys.rst:338
msgid ""
"Append the callable *hook* to the list of active auditing hooks. Return zero "
"for success and non-zero on failure. If the runtime has been initialized, "
"also set an error on failure. Hooks added through this API are called for "
"all interpreters created by the runtime."
msgstr ""

#: ../Doc/c-api/sys.rst:344
msgid ""
"The *userData* pointer is passed into the hook function. Since hook "
"functions may be called from different runtimes, this pointer should not "
"refer directly to Python state."
msgstr ""

#: ../Doc/c-api/sys.rst:348
msgid ""
"This function is safe to call before :c:func:`Py_Initialize`. When called "
"after runtime initialization, existing audit hooks are notified and may "
"silently abort the operation by raising an error subclassed from :class:"
"`Exception` (other errors will not be silenced)."
msgstr ""

#: ../Doc/c-api/sys.rst:353
msgid ""
"The hook function is of type :c:type:`int (*)(const char *event, PyObject "
"*args, void *userData)`, where *args* is guaranteed to be a :c:type:"
"`PyTupleObject`. The hook function is always called with the GIL held by the "
"Python interpreter that raised the event."
msgstr ""

#: ../Doc/c-api/sys.rst:358
msgid ""
"See :pep:`578` for a detailed description of auditing.  Functions in the "
"runtime and standard library that raise events are listed in the :ref:`audit "
"events table <audit-events>`. Details are in each function's documentation."
msgstr ""

#: ../Doc/c-api/sys.rst:None
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sys.addaudithook`` with no "
"arguments."
msgstr ""
"Déclenche un :ref:`événement d'audit <auditing>` ``sys.addaudithook`` sans "
"arguments."

#: ../Doc/c-api/sys.rst:365
msgid ""
"If the interpreter is initialized, this function raises a auditing event "
"``sys.addaudithook`` with no arguments. If any existing hooks raise an "
"exception derived from :class:`Exception`, the new hook will not be added "
"and the exception is cleared. As a result, callers cannot assume that their "
"hook has been added unless they control all existing hooks."
msgstr ""

#: ../Doc/c-api/sys.rst:377
msgid "Process Control"
msgstr ""

#: ../Doc/c-api/sys.rst:384
msgid ""
"Print a fatal error message and kill the process.  No cleanup is performed. "
"This function should only be invoked when a condition is detected that would "
"make it dangerous to continue using the Python interpreter; e.g., when the "
"object administration appears to be corrupted.  On Unix, the standard C "
"library function :c:func:`abort` is called which will attempt to produce a :"
"file:`core` file."
msgstr ""

#: ../Doc/c-api/sys.rst:398
msgid ""
"Exit the current process.  This calls :c:func:`Py_FinalizeEx` and then calls "
"the standard C library function ``exit(status)``.  If :c:func:"
"`Py_FinalizeEx` indicates an error, the exit status is set to 120."
msgstr ""

#: ../Doc/c-api/sys.rst:402
msgid "Errors from finalization no longer ignored."
msgstr ""

#: ../Doc/c-api/sys.rst:412
msgid ""
"Register a cleanup function to be called by :c:func:`Py_FinalizeEx`.  The "
"cleanup function will be called with no arguments and should return no "
"value.  At most 32 cleanup functions can be registered.  When the "
"registration is successful, :c:func:`Py_AtExit` returns ``0``; on failure, "
"it returns ``-1``.  The cleanup function registered last is called first. "
"Each cleanup function will be called at most once.  Since Python's internal "
"finalization will have completed before the cleanup function, no Python APIs "
"should be called by *func*."
msgstr ""
