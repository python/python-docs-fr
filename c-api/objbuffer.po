# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-02 22:11+0200\n"
"PO-Revision-Date: 2018-01-29 00:24+0100\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/c-api/objbuffer.rst:4
msgid "Old Buffer Protocol"
msgstr "Ancien *Buffer Protocol*"

#: ../Doc/c-api/objbuffer.rst:8
msgid ""
"These functions were part of the \"old buffer protocol\" API in Python 2. In "
"Python 3, this protocol doesn't exist anymore but the functions are still "
"exposed to ease porting 2.x code.  They act as a compatibility wrapper "
"around the :ref:`new buffer protocol <bufferobjects>`, but they don't give "
"you control over the lifetime of the resources acquired when a buffer is "
"exported."
msgstr ""
"Ces fonctions faisaient partie de l'API de l'ancien protocol de tampons dans "
"Python 2. Dans Python 3, ce protocole n'existe plus, mais les fonctions sont "
"toujours exposées pour simplifier le portage de code Python 2.x. Elles se "
"comportent comme une abstraction de compatibilité du :ref:`nouveau protocole "
"de tampons <bufferobjects>`, mais sans vous donner de contrôle sur la durée "
"de vie des resources acquises lorsqu'un tampon est exporté."

#: ../Doc/c-api/objbuffer.rst:15
msgid ""
"Therefore, it is recommended that you call :c:func:`PyObject_GetBuffer` (or "
"the ``y*`` or ``w*`` :ref:`format codes <arg-parsing>` with the :c:func:"
"`PyArg_ParseTuple` family of functions) to get a buffer view over an object, "
"and :c:func:`PyBuffer_Release` when the buffer view can be released."
msgstr ""
"Il est donc recommandé d'appeler :c:func:`PyObject_GetBuffer` (ou les :ref:"
"`codes <arg-parsing>` ``y*`` ou ``w*`` à la famille de fonctions :c:func:"
"`PyArg_ParseTuple`) pour obtenir une vue d'un tampon sur un objet, et :c:"
"func:`PyBuffer_Release` lorsque la vue peut être libérée."

#: ../Doc/c-api/objbuffer.rst:23
msgid ""
"Returns a pointer to a read-only memory location usable as character-based "
"input.  The *obj* argument must support the single-segment character buffer "
"interface.  On success, returns ``0``, sets *buffer* to the memory location "
"and *buffer_len* to the buffer length.  Returns ``-1`` and sets a :exc:"
"`TypeError` on error."
msgstr ""

#: ../Doc/c-api/objbuffer.rst:32
msgid ""
"Returns a pointer to a read-only memory location containing arbitrary data. "
"The *obj* argument must support the single-segment readable buffer "
"interface.  On success, returns ``0``, sets *buffer* to the memory location "
"and *buffer_len* to the buffer length.  Returns ``-1`` and sets a :exc:"
"`TypeError` on error."
msgstr ""

#: ../Doc/c-api/objbuffer.rst:41
msgid ""
"Returns ``1`` if *o* supports the single-segment readable buffer interface. "
"Otherwise returns ``0``."
msgstr ""
"Renvoie ``1`` si *o* gère l'interface *single-segment readable buffer*, "
"``0`` sinon."

#: ../Doc/c-api/objbuffer.rst:47
msgid ""
"Returns a pointer to a writable memory location.  The *obj* argument must "
"support the single-segment, character buffer interface.  On success, returns "
"``0``, sets *buffer* to the memory location and *buffer_len* to the buffer "
"length.  Returns ``-1`` and sets a :exc:`TypeError` on error."
msgstr ""
"Renvoie un pointeur vers un espace mémoire dans lequel il est possible "
"décrire.  L'argument *obj* doit gérer l'interface *single-segment, character "
"buffer*. Si tout s'est bien passé, ``0`` est renvoyé, *buffer* pointe vers "
"l'espace mémoire, et *buffer_len* vaudra la taille du buffer. Renvoie ``-1`` "
"et met l'exception :exc:`TypeError` en cas d'erreur."
