# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-10 09:35+0200\n"
"PO-Revision-Date: 2019-04-11 19:43+0200\n"
"Last-Translator: Jules Lasne <jules.lasne@gmail.com>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.2.1\n"

#: ../Doc/c-api/objbuffer.rst:4
msgid "Old Buffer Protocol"
msgstr "Ancien Protocole Tampon"

#: ../Doc/c-api/objbuffer.rst:8
msgid ""
"These functions were part of the \"old buffer protocol\" API in Python 2. In "
"Python 3, this protocol doesn't exist anymore but the functions are still "
"exposed to ease porting 2.x code.  They act as a compatibility wrapper "
"around the :ref:`new buffer protocol <bufferobjects>`, but they don't give "
"you control over the lifetime of the resources acquired when a buffer is "
"exported."
msgstr ""
"Ces fonctions faisaient partie de l'API de l'ancien protocole de tampons "
"dans Python 2. Dans Python 3, ce protocole n'existe plus, mais les fonctions "
"sont toujours exposées pour simplifier le portage de code Python 2.x. Elles "
"se comportent comme une abstraction de compatibilité du :ref:`nouveau "
"protocole de tampons <bufferobjects>`, mais sans vous donner de contrôle sur "
"la durée de vie des ressources acquises lorsqu'un tampon est exporté."

#: ../Doc/c-api/objbuffer.rst:15
msgid ""
"Therefore, it is recommended that you call :c:func:`PyObject_GetBuffer` (or "
"the ``y*`` or ``w*`` :ref:`format codes <arg-parsing>` with the :c:func:"
"`PyArg_ParseTuple` family of functions) to get a buffer view over an object, "
"and :c:func:`PyBuffer_Release` when the buffer view can be released."
msgstr ""
"Il est donc recommandé d'appeler :c:func:`PyObject_GetBuffer` (ou les :ref:"
"`codes <arg-parsing>` ``y*`` ou ``w*`` à la famille de fonctions :c:func:"
"`PyArg_ParseTuple`) pour obtenir une vue d'un tampon sur un objet, et :c:"
"func:`PyBuffer_Release` lorsque la vue peut être libérée."

#: ../Doc/c-api/objbuffer.rst:23
msgid ""
"Returns a pointer to a read-only memory location usable as character-based "
"input.  The *obj* argument must support the single-segment character buffer "
"interface.  On success, returns ``0``, sets *buffer* to the memory location "
"and *buffer_len* to the buffer length.  Returns ``-1`` and sets a :exc:"
"`TypeError` on error."
msgstr ""
"Retourne un pointeur vers un emplacement de mémoire en lecture seule "
"utilisable en tant qu'entrée basée sur des caractères. L'argument *obj* doit "
"prendre en charge l'interface de tampon de caractère à segment unique. En "
"cas de succès, retourne ``0``, définit *buffer* à l'emplacement de la "
"mémoire et *buffer_len* à la longueur de la mémoire tampon. Retourne ``-1`` "
"et affecte une exception :exc:`TypeError` en cas d'erreur."

#: ../Doc/c-api/objbuffer.rst:32
msgid ""
"Returns a pointer to a read-only memory location containing arbitrary data. "
"The *obj* argument must support the single-segment readable buffer "
"interface.  On success, returns ``0``, sets *buffer* to the memory location "
"and *buffer_len* to the buffer length.  Returns ``-1`` and sets a :exc:"
"`TypeError` on error."
msgstr ""
"Retourne un pointeur vers un emplacement de mémoire en lecture seule "
"contenant des données arbitraires. L'argument *obj* doit prendre en charge "
"l'interface de tampon lisible à segment unique. En cas de succès, retourne "
"``0``, définit *buffer* à l'emplacement de la mémoire et *buffer_len* à la "
"longueur de la mémoire tampon. Renvoie ``-1`` et affecte l'exception :exc:"
"`TypeError` en cas d'erreur."

#: ../Doc/c-api/objbuffer.rst:41
msgid ""
"Returns ``1`` if *o* supports the single-segment readable buffer interface. "
"Otherwise returns ``0``.  This function always succeeds."
msgstr ""
"Retourne ``1`` si *o* prend en charge l'interface de mémoire tampon lisible "
"à segment unique. Sinon, renvoie ``0``. Cette fonction réussit toujours."

#: ../Doc/c-api/objbuffer.rst:44
msgid ""
"Note that this function tries to get and release a buffer, and exceptions "
"which occur while calling corresponding functions will get suppressed. To "
"get error reporting use :c:func:`PyObject_GetBuffer()` instead."
msgstr ""
"Notez que cette fonction tente d'obtenir et de libérer une mémoire tampon, "
"et les exceptions qui se produisent lors de l'appel des fonctions "
"correspondantes seront supprimées. Pour que les erreurs vous soient "
"signalées, utilisez :c:func:`PyObject_GetBuffer()` à la place."

#: ../Doc/c-api/objbuffer.rst:51
msgid ""
"Returns a pointer to a writable memory location.  The *obj* argument must "
"support the single-segment, character buffer interface.  On success, returns "
"``0``, sets *buffer* to the memory location and *buffer_len* to the buffer "
"length.  Returns ``-1`` and sets a :exc:`TypeError` on error."
msgstr ""
"Retourne un pointeur vers un emplacement de mémoire accessible en écriture. "
"L'argument *obj* doit prendre en charge l'interface de mémoire tampon de "
"caractère à segment unique. En cas de succès, retourne ``0``, définit "
"*buffer* à l'emplacement de la mémoire et *buffer_len* à la longueur de la "
"mémoire tampon. Renvoie ``-1`` et affecte l'exception :exc:`TypeError` en "
"cas d'erreur."
