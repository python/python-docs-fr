# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-27 19:26+0100\n"
"PO-Revision-Date: 2018-07-03 11:36+0200\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: c-api/dict.rst:6
msgid "Dictionary Objects"
msgstr "Objets dictionnaires"

#: c-api/dict.rst:13
#, fuzzy
msgid ""
"This subtype of :c:type:`PyObject` represents a Python dictionary object."
msgstr ""
"Ce sous-type de :c:type:`PyObject` représente un objet ``bytearray`` Python."

#: c-api/dict.rst:18
#, fuzzy
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python dictionary "
"type.  This is the same object as :class:`dict` in the Python layer."
msgstr ""
"Cette instance de l'objet :c:type:`PyTypeObject` représente le type nombre à "
"virgule flottante en Python. C'est le même objet que la classe :class:"
"`float` de la couche Python."

#: c-api/dict.rst:24
msgid ""
"Return true if *p* is a dict object or an instance of a subtype of the dict "
"type.  This function always succeeds."
msgstr ""

#: c-api/dict.rst:30
msgid ""
"Return true if *p* is a dict object, but not an instance of a subtype of the "
"dict type.  This function always succeeds."
msgstr ""

#: c-api/dict.rst:36
msgid "Return a new empty dictionary, or ``NULL`` on failure."
msgstr ""

#: c-api/dict.rst:41
msgid ""
"Return a :class:`types.MappingProxyType` object for a mapping which enforces "
"read-only behavior.  This is normally used to create a view to prevent "
"modification of the dictionary for non-dynamic class types."
msgstr ""

#: c-api/dict.rst:48
msgid "Empty an existing dictionary of all key-value pairs."
msgstr ""

#: c-api/dict.rst:53
msgid ""
"Determine if dictionary *p* contains *key*.  If an item in *p* is matches "
"*key*, return ``1``, otherwise return ``0``.  On error, return ``-1``. This "
"is equivalent to the Python expression ``key in p``."
msgstr ""

#: c-api/dict.rst:60
msgid "Return a new dictionary that contains the same key-value pairs as *p*."
msgstr ""

#: c-api/dict.rst:65
msgid ""
"Insert *val* into the dictionary *p* with a key of *key*.  *key* must be :"
"term:`hashable`; if it isn't, :exc:`TypeError` will be raised. Return ``0`` "
"on success or ``-1`` on failure.  This function *does not* steal a reference "
"to *val*."
msgstr ""

#: c-api/dict.rst:75
msgid ""
"Insert *val* into the dictionary *p* using *key* as a key. *key* should be "
"a :c:type:`const char*`.  The key object is created using "
"``PyUnicode_FromString(key)``.  Return ``0`` on success or ``-1`` on "
"failure.  This function *does not* steal a reference to *val*."
msgstr ""

#: c-api/dict.rst:83
msgid ""
"Remove the entry in dictionary *p* with key *key*. *key* must be hashable; "
"if it isn't, :exc:`TypeError` is raised. If *key* is not in the dictionary, :"
"exc:`KeyError` is raised. Return ``0`` on success or ``-1`` on failure."
msgstr ""

#: c-api/dict.rst:91
msgid ""
"Remove the entry in dictionary *p* which has a key specified by the string "
"*key*. If *key* is not in the dictionary, :exc:`KeyError` is raised. Return "
"``0`` on success or ``-1`` on failure."
msgstr ""

#: c-api/dict.rst:98
msgid ""
"Return the object from dictionary *p* which has a key *key*.  Return "
"``NULL`` if the key *key* is not present, but *without* setting an exception."
msgstr ""

#: c-api/dict.rst:101
msgid ""
"Note that exceptions which occur while calling :meth:`__hash__` and :meth:"
"`__eq__` methods will get suppressed. To get error reporting use :c:func:"
"`PyDict_GetItemWithError()` instead."
msgstr ""

#: c-api/dict.rst:108
msgid ""
"Variant of :c:func:`PyDict_GetItem` that does not suppress exceptions. "
"Return ``NULL`` **with** an exception set if an exception occurred.  Return "
"``NULL`` **without** an exception set if the key wasn't present."
msgstr ""

#: c-api/dict.rst:116
msgid ""
"This is the same as :c:func:`PyDict_GetItem`, but *key* is specified as a :c:"
"type:`const char*`, rather than a :c:type:`PyObject*`."
msgstr ""

#: c-api/dict.rst:119
msgid ""
"Note that exceptions which occur while calling :meth:`__hash__` and :meth:"
"`__eq__` methods and creating a temporary string object will get suppressed. "
"To get error reporting use :c:func:`PyDict_GetItemWithError()` instead."
msgstr ""

#: c-api/dict.rst:127
msgid ""
"This is the same as the Python-level :meth:`dict.setdefault`.  If present, "
"it returns the value corresponding to *key* from the dictionary *p*.  If the "
"key is not in the dict, it is inserted with value *defaultobj* and "
"*defaultobj* is returned.  This function evaluates the hash function of "
"*key* only once, instead of evaluating it independently for the lookup and "
"the insertion."
msgstr ""

#: c-api/dict.rst:137
msgid ""
"Return a :c:type:`PyListObject` containing all the items from the dictionary."
msgstr ""

#: c-api/dict.rst:142
msgid ""
"Return a :c:type:`PyListObject` containing all the keys from the dictionary."
msgstr ""

#: c-api/dict.rst:147
msgid ""
"Return a :c:type:`PyListObject` containing all the values from the "
"dictionary *p*."
msgstr ""

#: c-api/dict.rst:155
msgid ""
"Return the number of items in the dictionary.  This is equivalent to "
"``len(p)`` on a dictionary."
msgstr ""

#: c-api/dict.rst:161
msgid ""
"Iterate over all key-value pairs in the dictionary *p*.  The :c:type:"
"`Py_ssize_t` referred to by *ppos* must be initialized to ``0`` prior to the "
"first call to this function to start the iteration; the function returns "
"true for each pair in the dictionary, and false once all pairs have been "
"reported.  The parameters *pkey* and *pvalue* should either point to :c:type:"
"`PyObject*` variables that will be filled in with each key and value, "
"respectively, or may be ``NULL``.  Any references returned through them are "
"borrowed.  *ppos* should not be altered during iteration. Its value "
"represents offsets within the internal dictionary structure, and since the "
"structure is sparse, the offsets are not consecutive."
msgstr ""

#: c-api/dict.rst:172
msgid "For example::"
msgstr "Par exemple ::"

#: c-api/dict.rst:182
msgid ""
"The dictionary *p* should not be mutated during iteration.  It is safe to "
"modify the values of the keys as you iterate over the dictionary, but only "
"so long as the set of keys does not change.  For example::"
msgstr ""

#: c-api/dict.rst:207
msgid ""
"Iterate over mapping object *b* adding key-value pairs to dictionary *a*. "
"*b* may be a dictionary, or any object supporting :c:func:`PyMapping_Keys` "
"and :c:func:`PyObject_GetItem`. If *override* is true, existing pairs in *a* "
"will be replaced if a matching key is found in *b*, otherwise pairs will "
"only be added if there is not a matching key in *a*. Return ``0`` on success "
"or ``-1`` if an exception was raised."
msgstr ""

#: c-api/dict.rst:217
msgid ""
"This is the same as ``PyDict_Merge(a, b, 1)`` in C, and is similar to ``a."
"update(b)`` in Python except that :c:func:`PyDict_Update` doesn't fall back "
"to the iterating over a sequence of key value pairs if the second argument "
"has no \"keys\" attribute.  Return ``0`` on success or ``-1`` if an "
"exception was raised."
msgstr ""

#: c-api/dict.rst:226
msgid ""
"Update or merge into dictionary *a*, from the key-value pairs in *seq2*. "
"*seq2* must be an iterable object producing iterable objects of length 2, "
"viewed as key-value pairs.  In case of duplicate keys, the last wins if "
"*override* is true, else the first wins. Return ``0`` on success or ``-1`` "
"if an exception was raised. Equivalent Python (except for the return value)::"
msgstr ""
