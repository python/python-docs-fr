# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-29 21:40+0100\n"
"PO-Revision-Date: 2021-12-11 11:57+0100\n"
"Last-Translator: Jules Lasne <jules.lasne@gmail.com>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.2.3\n"
"X-Poedit-Bookmarks: -1,-1,-1,-1,-1,-1,-1,3,-1,-1\n"

#: c-api/datetime.rst:6
msgid "DateTime Objects"
msgstr "Objets DateTime"

#: c-api/datetime.rst:8
#, fuzzy
msgid ""
"Various date and time objects are supplied by the :mod:`datetime` module. "
"Before using any of these functions, the header file :file:`datetime.h` must "
"be included in your source (note that this is not included by :file:`Python."
"h`), and the macro :c:macro:`!PyDateTime_IMPORT` must be invoked, usually as "
"part of the module initialisation function.  The macro puts a pointer to a C "
"structure into a static variable, :c:data:`!PyDateTimeAPI`, that is used by "
"the following macros."
msgstr ""
"De nombreux objets *date* et *time* sont exposés par le module :mod:"
"`DateTime`. Avant d'utiliser une de ces fonctions, le fichier d'en-tête :"
"file:`datetime.h` doit être inclus dans vos sources (veuillez noter qu'il "
"n'est pas inclus par le fichier :file:`Python.h`) et la macro :c:macro:"
"`PyDateTime_IMPORT` doit être invoquée, généralement lors de la fonction "
"d'initialisation du module. La macro crée un pointeur vers une structure C "
"et place celui-ci dans une variable statique, :c:data:`PyDateTimeAPI`, qui "
"est utilisée par les macros suivantes."

#: c-api/datetime.rst:18
msgid "This subtype of :c:type:`PyObject` represents a Python date object."
msgstr ""

#: c-api/datetime.rst:22
msgid "This subtype of :c:type:`PyObject` represents a Python datetime object."
msgstr ""

#: c-api/datetime.rst:26
msgid "This subtype of :c:type:`PyObject` represents a Python time object."
msgstr ""

#: c-api/datetime.rst:30
msgid ""
"This subtype of :c:type:`PyObject` represents the difference between two "
"datetime values."
msgstr ""

#: c-api/datetime.rst:34
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python date type; it "
"is the same object as :class:`datetime.date` in the Python layer."
msgstr ""

#: c-api/datetime.rst:39
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python datetime type; "
"it is the same object as :class:`datetime.datetime` in the Python layer."
msgstr ""

#: c-api/datetime.rst:44
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python time type; it "
"is the same object as :class:`datetime.time` in the Python layer."
msgstr ""

#: c-api/datetime.rst:49
msgid ""
"This instance of :c:type:`PyTypeObject` represents Python type for the "
"difference between two datetime values; it is the same object as :class:"
"`datetime.timedelta` in the Python layer."
msgstr ""

#: c-api/datetime.rst:55
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python time zone info "
"type; it is the same object as :class:`datetime.tzinfo` in the Python layer."
msgstr ""

#: c-api/datetime.rst:59
msgid "Macro for access to the UTC singleton:"
msgstr "Macro pour accéder au singleton UTC :"

#: c-api/datetime.rst:63
msgid ""
"Returns the time zone singleton representing UTC, the same object as :attr:"
"`datetime.timezone.utc`."
msgstr ""
"Renvoie le singleton du fuseau horaire UTC, qui est le même objet que :attr:"
"`datetime.timezone.utc`."

#: c-api/datetime.rst:69
msgid "Type-check macros:"
msgstr "Macros pour vérifier les types :"

#: c-api/datetime.rst:73
#, fuzzy
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateType` or a subtype "
"of :c:data:`!PyDateTime_DateType`.  *ob* must not be ``NULL``.  This "
"function always succeeds."
msgstr ""
"Renvoie vrai si *ob* est de type :c:data:`PyDateTime_DateType` ou un sous-"
"type de :c:data:`PyDateTime_DateType`. *ob* ne doit pas être *NULL*."

#: c-api/datetime.rst:80
#, fuzzy
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateType`. *ob* must not "
"be ``NULL``.  This function always succeeds."
msgstr ""
"Renvoie vrai si *ob* est de type :c:data:`PyDateTime_DateType`. *ob* ne doit "
"pas être *NULL*."

#: c-api/datetime.rst:86
#, fuzzy
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateTimeType` or a "
"subtype of :c:data:`!PyDateTime_DateTimeType`.  *ob* must not be ``NULL``.  "
"This function always succeeds."
msgstr ""
"Renvoie vrai si *ob* est de type :c:data:`PyDateTime_DateTimeType` ou un "
"sous-type de :c:data:`PyDateTime_DateTimeType`. *ob* ne doit pas être *NULL*."

#: c-api/datetime.rst:93
#, fuzzy
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateTimeType`. *ob* must "
"not be ``NULL``.  This function always succeeds."
msgstr ""
"Renvoie vrai si *ob* est de type :c:data:`PyDateTime_DateTimeType`. *ob* ne "
"doit pas être *NULL*."

#: c-api/datetime.rst:99
#, fuzzy
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TimeType` or a subtype "
"of :c:data:`!PyDateTime_TimeType`.  *ob* must not be ``NULL``.  This "
"function always succeeds."
msgstr ""
"Renvoie vrai si *ob* est de type :c:data:`PyDateTime_TimeType` ou un sous-"
"type de :c:data:`PyDateTime_TimeType`.  *ob* ne doit pas être *NULL*."

#: c-api/datetime.rst:106
#, fuzzy
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TimeType`. *ob* must not "
"be ``NULL``.  This function always succeeds."
msgstr ""
"Renvoie vrai si *ob* est de type :c:data:`PyDateTime_TimeType`. *ob* ne doit "
"pas être *NULL*."

#: c-api/datetime.rst:112
#, fuzzy
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DeltaType` or a subtype "
"of :c:data:`!PyDateTime_DeltaType`.  *ob* must not be ``NULL``.  This "
"function always succeeds."
msgstr ""
"Renvoie vrai si *ob* est de type :c:data:`PyDateTime_DeltaType` ou un sous-"
"type de :c:data:`PyDateTime_DeltaType`. *ob* ne doit pas être *NULL*."

#: c-api/datetime.rst:119
#, fuzzy
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DeltaType`. *ob* must not "
"be ``NULL``.  This function always succeeds."
msgstr ""
"Renvoie vrai si *ob* est de type :c:data:`PyDateTime_DeltaType`. *ob* ne "
"doit pas être *NULL*."

#: c-api/datetime.rst:125
#, fuzzy
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TZInfoType` or a subtype "
"of :c:data:`!PyDateTime_TZInfoType`.  *ob* must not be ``NULL``.  This "
"function always succeeds."
msgstr ""
"Renvoie vrai si *ob* est de type :c:data:`PyDateTime_TZInfoType` ou un sous-"
"type de :c:data:`PyDateTime_TZInfoType`. *ob* ne doit pas être *NULL*."

#: c-api/datetime.rst:132
#, fuzzy
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TZInfoType`. *ob* must "
"not be ``NULL``.  This function always succeeds."
msgstr ""
"Renvoie vrai si *ob* est de type :c:data:`PyDateTime_TZInfoType`. *ob* ne "
"doit pas être *NULL*."

#: c-api/datetime.rst:136
msgid "Macros to create objects:"
msgstr "Macros pour créer des objets :"

#: c-api/datetime.rst:140
msgid ""
"Return a :class:`datetime.date` object with the specified year, month and "
"day."
msgstr ""
"Renvoie un objet :class:`datetime.date` avec l'année, le mois et le jour "
"spécifiés."

#: c-api/datetime.rst:145
msgid ""
"Return a :class:`datetime.datetime` object with the specified year, month, "
"day, hour, minute, second and microsecond."
msgstr ""
"Renvoie un objet :class:`datetime.datetime` avec l'année, le mois, le jour, "
"l'heure, la minute, la seconde et la microseconde spécifiés."

#: c-api/datetime.rst:151
msgid ""
"Return a :class:`datetime.datetime` object with the specified year, month, "
"day, hour, minute, second, microsecond and fold."
msgstr ""
"Renvoie un objet :class:`datetime.datetime` avec l'année, le mois, le jour, "
"l'heure, la minute, la seconde, la microseconde et le pli (*fold* en "
"anglais) spécifiés."

#: c-api/datetime.rst:159
msgid ""
"Return a :class:`datetime.time` object with the specified hour, minute, "
"second and microsecond."
msgstr ""
"Renvoie un objet :class:`datetime.time` avec l'heure, la minute, la seconde "
"et la microseconde spécifiées."

#: c-api/datetime.rst:165
msgid ""
"Return a :class:`datetime.time` object with the specified hour, minute, "
"second, microsecond and fold."
msgstr ""
"Renvoie un objet :class:`datetime.time` avec l'heure, la minute, la seconde, "
"la microseconde et le pli (*fold* en anglais) spécifiés."

#: c-api/datetime.rst:173
msgid ""
"Return a :class:`datetime.timedelta` object representing the given number of "
"days, seconds and microseconds.  Normalization is performed so that the "
"resulting number of microseconds and seconds lie in the ranges documented "
"for :class:`datetime.timedelta` objects."
msgstr ""
"Renvoie un objet :class:`datetime.timedelta` représentant le nombre passé en "
"paramètre de jours, de secondes et de microsecondes. Le résultat est "
"normalisé pour que le nombre de microsecondes et de secondes tombe dans la "
"plage documentée pour les objets :class:`datetime.timedelta`."

#: c-api/datetime.rst:181
msgid ""
"Return a :class:`datetime.timezone` object with an unnamed fixed offset "
"represented by the *offset* argument."
msgstr ""
"Renvoie un objet :class:`datetime.timezone` avec un décalage anonyme fixe "
"représenté par l'argument *offset*."

#: c-api/datetime.rst:189
msgid ""
"Return a :class:`datetime.timezone` object with a fixed offset represented "
"by the *offset* argument and with tzname *name*."
msgstr ""
"Renvoie un objet :class:`datetime.timezone` avec un décalage fixe représenté "
"par l'argument *offset* et avec le nom de fuseau horaire *name*."

#: c-api/datetime.rst:195
#, fuzzy
msgid ""
"Macros to extract fields from date objects.  The argument must be an "
"instance of :c:type:`PyDateTime_Date`, including subclasses (such as :c:type:"
"`PyDateTime_DateTime`).  The argument must not be ``NULL``, and the type is "
"not checked:"
msgstr ""
"Macros pour extraire les champs des objets *date*. L'argument doit être une "
"instance de :c:data:`PyDateTime_Date`, ou une sous-classe (telle que :c:data:"
"`PyDateTime_DateTime`). L'argument ne doit pas être *NULL*, et le type n'est "
"pas vérifié :"

#: c-api/datetime.rst:202
msgid "Return the year, as a positive int."
msgstr "Renvoie l'année, sous forme d'entier positif."

#: c-api/datetime.rst:207
msgid "Return the month, as an int from 1 through 12."
msgstr "Renvoie le mois, sous forme d'entier allant de 1 à 12."

#: c-api/datetime.rst:212
msgid "Return the day, as an int from 1 through 31."
msgstr "Renvoie le jour, sous forme d'entier allant de 1 à 31."

#: c-api/datetime.rst:215
#, fuzzy
msgid ""
"Macros to extract fields from datetime objects.  The argument must be an "
"instance of :c:type:`PyDateTime_DateTime`, including subclasses. The "
"argument must not be ``NULL``, and the type is not checked:"
msgstr ""
"Macros pour extraire les champs des objets *datetime*. L'argument doit être "
"une instance de :c:data:`PyDateTime_DateTime` ou une sous-classe de celle-"
"ci. L'argument ne doit pas être *NULL*, et le type n'est pas vérifié :"

#: c-api/datetime.rst:259
msgid "Return the hour, as an int from 0 through 23."
msgstr "Renvoie l'heure, sous forme d'entier allant de 0 à 23."

#: c-api/datetime.rst:264
msgid "Return the minute, as an int from 0 through 59."
msgstr "Renvoie la minute, sous forme d'entier allant de 0 à 59."

#: c-api/datetime.rst:269
msgid "Return the second, as an int from 0 through 59."
msgstr "Renvoie la seconde, sous forme d'entier allant de 0 à 59."

#: c-api/datetime.rst:274
msgid "Return the microsecond, as an int from 0 through 999999."
msgstr "Renvoie la microseconde, sous forme d'entier allant de 0 à 999999."

#: c-api/datetime.rst:279
#, fuzzy
msgid "Return the fold, as an int from 0 through 1."
msgstr "Renvoie le jour, sous forme d'entier allant de 1 à 31."

#: c-api/datetime.rst:286
msgid "Return the tzinfo (which may be ``None``)."
msgstr ""

#: c-api/datetime.rst:253
#, fuzzy
msgid ""
"Macros to extract fields from time objects.  The argument must be an "
"instance of :c:type:`PyDateTime_Time`, including subclasses. The argument "
"must not be ``NULL``, and the type is not checked:"
msgstr ""
"Macros pour extraire les champs des objets *time*. L'argument doit être une "
"instance de :c:data:`PyDateTime_Time` ou une sous-classe de celle-ci. "
"L'argument ne doit pas être *NULL*, et le type n'est pas vérifié :"

#: c-api/datetime.rst:291
#, fuzzy
msgid ""
"Macros to extract fields from time delta objects.  The argument must be an "
"instance of :c:type:`PyDateTime_Delta`, including subclasses. The argument "
"must not be ``NULL``, and the type is not checked:"
msgstr ""
"Macros pour extraire les champs des objets *time delta*. L'argument doit "
"être une instance de :c:data:`PyDateTime_Delta` ou une sous-classe de celle-"
"ci. L'argument ne doit pas être *NULL*, et le type n'est pas vérifié :"

#: c-api/datetime.rst:297
msgid "Return the number of days, as an int from -999999999 to 999999999."
msgstr ""
"Renvoie le nombre de jours, sous forme d'entier allant de ``-999999999`` à "
"``999999999``."

#: c-api/datetime.rst:304
msgid "Return the number of seconds, as an int from 0 through 86399."
msgstr "Renvoie le nombre de secondes sous forme d'entier allant de 0 à 86399."

#: c-api/datetime.rst:311
msgid "Return the number of microseconds, as an int from 0 through 999999."
msgstr ""
"Renvoie le nombre de microsecondes, sous forme d'entier allant de 0 à 999999."

#: c-api/datetime.rst:316
msgid "Macros for the convenience of modules implementing the DB API:"
msgstr "Macros de confort pour les modules implémentant l'API DB :"

#: c-api/datetime.rst:320
#, fuzzy
msgid ""
"Create and return a new :class:`datetime.datetime` object given an argument "
"tuple suitable for passing to :meth:`datetime.datetime.fromtimestamp`."
msgstr ""
"Crée et renvoie un nouvel objet :class:`datetime.datetime` à partir d'un n-"
"uplet qui peut être passé à :meth:`datetime.datetime.fromtimestamp()`."

#: c-api/datetime.rst:326
#, fuzzy
msgid ""
"Create and return a new :class:`datetime.date` object given an argument "
"tuple suitable for passing to :meth:`datetime.date.fromtimestamp`."
msgstr ""
"Crée et renvoie un nouvel objet :class:`datetime.date` à partir d'un *n*-"
"uplet qui peut être passé à :meth:`datetime.date.fromtimestamp()`."
