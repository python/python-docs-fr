# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-01 00:16+0100\n"
"PO-Revision-Date: 2019-01-14 15:30+0100\n"
"Last-Translator: ANTOINE FOURES <afoures@student.42.fr>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: c-api/float.rst:6
#, fuzzy
msgid "Floating-Point Objects"
msgstr "Objets représentant les nombres à virgule flottante"

#: c-api/float.rst:13
#, fuzzy
msgid ""
"This subtype of :c:type:`PyObject` represents a Python floating-point object."
msgstr ""
"Ce sous-type de l'objet :c:type:`PyObject` représente un nombre à virgule "
"flottante en Python."

#: c-api/float.rst:18
#, fuzzy
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python floating-point "
"type.  This is the same object as :class:`float` in the Python layer."
msgstr ""
"Cette instance de l'objet :c:type:`PyTypeObject` représente le type nombre à "
"virgule flottante en Python. C'est le même objet que la classe :class:"
"`float` de la couche Python."

#: c-api/float.rst:24
#, fuzzy
msgid ""
"Return true if its argument is a :c:type:`PyFloatObject` or a subtype of :c:"
"type:`PyFloatObject`.  This function always succeeds."
msgstr ""
"Renvoie vrai si l'argument est de type :c:type:`PyFloatObject` ou un sous-"
"type de :c:type:`PyFloatObject`."

#: c-api/float.rst:30
#, fuzzy
msgid ""
"Return true if its argument is a :c:type:`PyFloatObject`, but not a subtype "
"of :c:type:`PyFloatObject`.  This function always succeeds."
msgstr ""
"Renvoie vrai si l'argument est de type :c:type:`PyFloatObject`, mais pas un "
"sous-type de :c:type:`PyFloatObject`."

#: c-api/float.rst:36
#, fuzzy
msgid ""
"Create a :c:type:`PyFloatObject` object based on the string value in *str*, "
"or ``NULL`` on failure."
msgstr ""
"Crée un objet :c:type:`PyFloatObject` à partir de la valeur de la chaîne de "
"caractères *str*, ou *NULL* en cas d'échec."

#: c-api/float.rst:42
#, fuzzy
msgid ""
"Create a :c:type:`PyFloatObject` object from *v*, or ``NULL`` on failure."
msgstr ""
"Crée un objet :c:type:`PyFloatObject` à partir de *v*, ou *NULL* en cas "
"d'échec."

#: c-api/float.rst:47
#, fuzzy
msgid ""
"Return a C :c:expr:`double` representation of the contents of *pyfloat*.  If "
"*pyfloat* is not a Python floating-point object but has a :meth:`~object."
"__float__` method, this method will first be called to convert *pyfloat* "
"into a float. If :meth:`!__float__` is not defined then it falls back to :"
"meth:`~object.__index__`. This method returns ``-1.0`` upon failure, so one "
"should call :c:func:`PyErr_Occurred` to check for errors."
msgstr ""
"Renvoie une représentation du contenu d'un *pyfloat* sous la forme d'un :c:"
"type:`double` en C. Si le *pyfloat* n'est pas un nombre à virgule flottante "
"mais contient une méthode :meth:`__float__`, elle est d'abord appelée pour "
"convertir le *pyfloat* en nombre à virgule flottante. Cette méthode renvoie "
"``-1.0`` en cas d'échec, il faut appeler :c:func:`PyErr_Occurred` pour "
"vérifier les erreurs."

#: c-api/float.rst:54
msgid "Use :meth:`~object.__index__` if available."
msgstr ""

#: c-api/float.rst:60
#, fuzzy
msgid ""
"Return a C :c:expr:`double` representation of the contents of *pyfloat*, but "
"without error checking."
msgstr ""
"Renvoie une représentation du contenu d'un *pyfloat* sous la forme d'un :c:"
"type:`double` en C, sans vérifier les erreurs."

#: c-api/float.rst:66
msgid ""
"Return a structseq instance which contains information about the precision, "
"minimum and maximum values of a float. It's a thin wrapper around the header "
"file :file:`float.h`."
msgstr ""
"Renvoie une instance *structseq* qui contient les informations sur la "
"précision et les valeurs minimales et maximales pour un nombre à virgule "
"flottante. C'est une enveloppe autour du fichier d'entête :file:`float.h`."

#: c-api/float.rst:73
#, fuzzy
msgid ""
"Return the maximum representable finite float *DBL_MAX* as C :c:expr:"
"`double`."
msgstr ""
"Renvoie le nombre à virgule flottante fini maximal *DBL_MAX* sous la forme "
"d'un :c:type:`double` en C."

#: c-api/float.rst:78
#, fuzzy
msgid ""
"Return the minimum normalized positive float *DBL_MIN* as C :c:expr:`double`."
msgstr ""
"Renvoie le nombre à virgule flottante minimal normalisé *DBL_MIN* sous la "
"forme :c:type:`double` en C."

#: c-api/float.rst:82
msgid "Pack and Unpack functions"
msgstr ""

#: c-api/float.rst:84
msgid ""
"The pack and unpack functions provide an efficient platform-independent way "
"to store floating-point values as byte strings. The Pack routines produce a "
"bytes string from a C :c:expr:`double`, and the Unpack routines produce a C :"
"c:expr:`double` from such a bytes string. The suffix (2, 4 or 8) specifies "
"the number of bytes in the bytes string."
msgstr ""

#: c-api/float.rst:90
msgid ""
"On platforms that appear to use IEEE 754 formats these functions work by "
"copying bits. On other platforms, the 2-byte format is identical to the IEEE "
"754 binary16 half-precision format, the 4-byte format (32-bit) is identical "
"to the IEEE 754 binary32 single precision format, and the 8-byte format to "
"the IEEE 754 binary64 double precision format, although the packing of INFs "
"and NaNs (if such things exist on the platform) isn't handled correctly, and "
"attempting to unpack a bytes string containing an IEEE INF or NaN will raise "
"an exception."
msgstr ""

#: c-api/float.rst:99
msgid ""
"On non-IEEE platforms with more precision, or larger dynamic range, than "
"IEEE 754 supports, not all values can be packed; on non-IEEE platforms with "
"less precision, or smaller dynamic range, not all values can be unpacked. "
"What happens in such cases is partly accidental (alas)."
msgstr ""

#: c-api/float.rst:107
msgid "Pack functions"
msgstr ""

#: c-api/float.rst:109
msgid ""
"The pack routines write 2, 4 or 8 bytes, starting at *p*. *le* is an :c:expr:"
"`int` argument, non-zero if you want the bytes string in little-endian "
"format (exponent last, at ``p+1``, ``p+3``, or ``p+6`` ``p+7``), zero if you "
"want big-endian format (exponent first, at *p*). The :c:macro:"
"`PY_BIG_ENDIAN` constant can be used to use the native endian: it is equal "
"to ``1`` on big endian processor, or ``0`` on little endian processor."
msgstr ""

#: c-api/float.rst:116
msgid ""
"Return value: ``0`` if all is OK, ``-1`` if error (and an exception is set, "
"most likely :exc:`OverflowError`)."
msgstr ""

#: c-api/float.rst:119
msgid "There are two problems on non-IEEE platforms:"
msgstr ""

#: c-api/float.rst:121
msgid "What this does is undefined if *x* is a NaN or infinity."
msgstr ""

#: c-api/float.rst:122
msgid "``-0.0`` and ``+0.0`` produce the same bytes string."
msgstr ""

#: c-api/float.rst:126
msgid "Pack a C double as the IEEE 754 binary16 half-precision format."
msgstr ""

#: c-api/float.rst:130
msgid "Pack a C double as the IEEE 754 binary32 single precision format."
msgstr ""

#: c-api/float.rst:134
msgid "Pack a C double as the IEEE 754 binary64 double precision format."
msgstr ""

#: c-api/float.rst:138
msgid "Unpack functions"
msgstr ""

#: c-api/float.rst:140
msgid ""
"The unpack routines read 2, 4 or 8 bytes, starting at *p*.  *le* is an :c:"
"expr:`int` argument, non-zero if the bytes string is in little-endian format "
"(exponent last, at ``p+1``, ``p+3`` or ``p+6`` and ``p+7``), zero if big-"
"endian (exponent first, at *p*). The :c:macro:`PY_BIG_ENDIAN` constant can "
"be used to use the native endian: it is equal to ``1`` on big endian "
"processor, or ``0`` on little endian processor."
msgstr ""

#: c-api/float.rst:147
msgid ""
"Return value: The unpacked double.  On error, this is ``-1.0`` and :c:func:"
"`PyErr_Occurred` is true (and an exception is set, most likely :exc:"
"`OverflowError`)."
msgstr ""

#: c-api/float.rst:151
msgid ""
"Note that on a non-IEEE platform this will refuse to unpack a bytes string "
"that represents a NaN or infinity."
msgstr ""

#: c-api/float.rst:156
msgid "Unpack the IEEE 754 binary16 half-precision format as a C double."
msgstr ""

#: c-api/float.rst:160
msgid "Unpack the IEEE 754 binary32 single precision format as a C double."
msgstr ""

#: c-api/float.rst:164
msgid "Unpack the IEEE 754 binary64 double precision format as a C double."
msgstr ""

#~ msgid "object"
#~ msgstr "objet"

#, fuzzy
#~ msgid "floating-point"
#~ msgstr "Objets représentant les nombres à virgule flottante"

#~ msgid ""
#~ "Clear the float free list. Return the number of items that could not be "
#~ "freed."
#~ msgstr ""
#~ "Libère la mémoire de la *free list* des nombres à virgule flottante. "
#~ "Renvoie le nombre d'éléments qui n'ont pas pu être libérés."
