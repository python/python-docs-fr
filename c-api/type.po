# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-11-15 18:54+0100\n"
"PO-Revision-Date: 2018-02-15 00:33+0100\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/c-api/type.rst:6
msgid "Type Objects"
msgstr "Objets type"

#: ../Doc/c-api/type.rst:13
msgid "The C structure of the objects used to describe built-in types."
msgstr ""

#: ../Doc/c-api/type.rst:18
msgid ""
"This is the type object for type objects; it is the same object as :class:"
"`type` in the Python layer."
msgstr ""

#: ../Doc/c-api/type.rst:24
msgid ""
"Return true if the object *o* is a type object, including instances of types "
"derived from the standard type object.  Return false in all other cases."
msgstr ""

#: ../Doc/c-api/type.rst:30
msgid ""
"Return true if the object *o* is a type object, but not a subtype of the "
"standard type object.  Return false in all other cases."
msgstr ""

#: ../Doc/c-api/type.rst:36
msgid "Clear the internal lookup cache. Return the current version tag."
msgstr ""

#: ../Doc/c-api/type.rst:40
msgid ""
"Return the :c:member:`~PyTypeObject.tp_flags` member of *type*. This "
"function is primarily meant for use with `Py_LIMITED_API`; the individual "
"flag bits are guaranteed to be stable across Python releases, but access to :"
"c:member:`~PyTypeObject.tp_flags` itself is not part of the limited API."
msgstr ""

#: ../Doc/c-api/type.rst:47
msgid "The return type is now ``unsigned long`` rather than ``long``."
msgstr ""

#: ../Doc/c-api/type.rst:53
msgid ""
"Invalidate the internal lookup cache for the type and all of its subtypes.  "
"This function must be called after any manual modification of the attributes "
"or base classes of the type."
msgstr ""

#: ../Doc/c-api/type.rst:60
msgid ""
"Return true if the type object *o* sets the feature *feature*.  Type "
"features are denoted by single bit flags."
msgstr ""

#: ../Doc/c-api/type.rst:66
msgid ""
"Return true if the type object includes support for the cycle detector; this "
"tests the type flag :const:`Py_TPFLAGS_HAVE_GC`."
msgstr ""

#: ../Doc/c-api/type.rst:72
msgid "Return true if *a* is a subtype of *b*."
msgstr ""

#: ../Doc/c-api/type.rst:74
msgid ""
"This function only checks for actual subtypes, which means that :meth:"
"`~class.__subclasscheck__` is not called on *b*.  Call :c:func:"
"`PyObject_IsSubclass` to do the same check that :func:`issubclass` would do."
msgstr ""

#: ../Doc/c-api/type.rst:82
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_alloc` slot of a type "
"object.  Use Python's default memory allocation mechanism to allocate a new "
"instance and initialize all its contents to ``NULL``."
msgstr ""

#: ../Doc/c-api/type.rst:88
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_new` slot of a type "
"object.  Create a new instance using the type's :c:member:`~PyTypeObject."
"tp_alloc` slot."
msgstr ""

#: ../Doc/c-api/type.rst:93
msgid ""
"Finalize a type object.  This should be called on all type objects to finish "
"their initialization.  This function is responsible for adding inherited "
"slots from a type's base class.  Return ``0`` on success, or return ``-1`` "
"and sets an exception on error."
msgstr ""

#: ../Doc/c-api/type.rst:100
msgid ""
"Return the function pointer stored in the given slot. If the result is "
"``NULL``, this indicates that either the slot is ``NULL``, or that the "
"function was called with invalid parameters. Callers will typically cast the "
"result pointer into the appropriate function type."
msgstr ""

#: ../Doc/c-api/type.rst:106
msgid ""
"See :c:member:`PyType_Slot.slot` for possible values of the *slot* argument."
msgstr ""

#: ../Doc/c-api/type.rst:108
msgid "An exception is raised if *type* is not a heap type."
msgstr ""

#: ../Doc/c-api/type.rst:114
msgid "Creating Heap-Allocated Types"
msgstr ""

#: ../Doc/c-api/type.rst:116
msgid ""
"The following functions and structs are used to create :ref:`heap types "
"<heap-types>`."
msgstr ""

#: ../Doc/c-api/type.rst:121
msgid ""
"Creates and returns a heap type object from the *spec* (:const:"
"`Py_TPFLAGS_HEAPTYPE`)."
msgstr ""

#: ../Doc/c-api/type.rst:124
msgid ""
"If *bases* is a tuple, the created heap type contains all types contained in "
"it as base types."
msgstr ""

#: ../Doc/c-api/type.rst:127
msgid ""
"If *bases* is ``NULL``, the *Py_tp_base* slot is used instead. If that also "
"is ``NULL``, the new type derives from :class:`object`."
msgstr ""

#: ../Doc/c-api/type.rst:130
msgid "This function calls :c:func:`PyType_Ready` on the new type."
msgstr ""

#: ../Doc/c-api/type.rst:136
msgid "Equivalent to ``PyType_FromSpecWithBases(spec, NULL)``."
msgstr ""

#: ../Doc/c-api/type.rst:140
msgid "Structure defining a type's behavior."
msgstr ""

#: ../Doc/c-api/type.rst:144
msgid "Name of the type, used to set :c:member:`PyTypeObject.tp_name`."
msgstr ""

#: ../Doc/c-api/type.rst:149
msgid ""
"Size of the instance in bytes, used to set :c:member:`PyTypeObject."
"tp_basicsize` and :c:member:`PyTypeObject.tp_itemsize`."
msgstr ""

#: ../Doc/c-api/type.rst:155
msgid "Type flags, used to set :c:member:`PyTypeObject.tp_flags`."
msgstr ""

#: ../Doc/c-api/type.rst:157
msgid ""
"If the ``Py_TPFLAGS_HEAPTYPE`` flag is not set, :c:func:"
"`PyType_FromSpecWithBases` sets it automatically."
msgstr ""

#: ../Doc/c-api/type.rst:162
msgid ""
"Array of :c:type:`PyType_Slot` structures. Terminated by the special slot "
"value ``{0, NULL}``."
msgstr ""

#: ../Doc/c-api/type.rst:167
msgid ""
"Structure defining optional functionality of a type, containing a slot ID "
"and a value pointer."
msgstr ""

#: ../Doc/c-api/type.rst:172
msgid "A slot ID."
msgstr ""

#: ../Doc/c-api/type.rst:174
msgid ""
"Slot IDs are named like the field names of the structures :c:type:"
"`PyTypeObject`, :c:type:`PyNumberMethods`, :c:type:`PySequenceMethods`, :c:"
"type:`PyMappingMethods` and :c:type:`PyAsyncMethods` with an added ``Py_`` "
"prefix. For example, use:"
msgstr ""

#: ../Doc/c-api/type.rst:180
msgid "``Py_tp_dealloc`` to set :c:member:`PyTypeObject.tp_dealloc`"
msgstr ""

#: ../Doc/c-api/type.rst:181
msgid "``Py_nb_add`` to set :c:member:`PyNumberMethods.nb_add`"
msgstr ""

#: ../Doc/c-api/type.rst:182
msgid "``Py_sq_length`` to set :c:member:`PySequenceMethods.sq_length`"
msgstr ""

#: ../Doc/c-api/type.rst:184
msgid ""
"The following fields cannot be set using :c:type:`PyType_Spec` and :c:type:"
"`PyType_Slot`:"
msgstr ""

#: ../Doc/c-api/type.rst:186
msgid ":c:member:`~PyTypeObject.tp_dict`"
msgstr ""

#: ../Doc/c-api/type.rst:187
msgid ":c:member:`~PyTypeObject.tp_mro`"
msgstr ""

#: ../Doc/c-api/type.rst:188
msgid ":c:member:`~PyTypeObject.tp_cache`"
msgstr ""

#: ../Doc/c-api/type.rst:189
msgid ":c:member:`~PyTypeObject.tp_subclasses`"
msgstr ""

#: ../Doc/c-api/type.rst:190
msgid ":c:member:`~PyTypeObject.tp_weaklist`"
msgstr ""

#: ../Doc/c-api/type.rst:191
msgid ":c:member:`~PyTypeObject.tp_print`"
msgstr ""

#: ../Doc/c-api/type.rst:192
msgid ":c:member:`~PyTypeObject.tp_weaklistoffset`"
msgstr ""

#: ../Doc/c-api/type.rst:193
msgid ":c:member:`~PyTypeObject.tp_dictoffset`"
msgstr ""

#: ../Doc/c-api/type.rst:194
msgid ":c:member:`~PyBufferProcs.bf_getbuffer`"
msgstr ""

#: ../Doc/c-api/type.rst:195
msgid ":c:member:`~PyBufferProcs.bf_releasebuffer`"
msgstr ""

#: ../Doc/c-api/type.rst:197
msgid ""
"Setting :c:data:`Py_tp_bases` may be problematic on some platforms. To avoid "
"issues, use the *bases* argument of :py:func:`PyType_FromSpecWithBases` "
"instead."
msgstr ""

#: ../Doc/c-api/type.rst:203
msgid ""
"The desired value of the slot. In most cases, this is a pointer to a "
"function."
msgstr ""

#: ../Doc/c-api/type.rst:206
msgid "May not be ``NULL``."
msgstr ""
