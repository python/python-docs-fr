# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-17 16:05+0100\n"
"PO-Revision-Date: 2018-02-15 00:33+0100\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: c-api/type.rst:6
msgid "Type Objects"
msgstr "Objets type"

#: c-api/type.rst:13
msgid "The C structure of the objects used to describe built-in types."
msgstr ""

#: c-api/type.rst:18
msgid ""
"This is the type object for type objects; it is the same object as :class:"
"`type` in the Python layer."
msgstr ""

#: c-api/type.rst:24
msgid ""
"Return non-zero if the object *o* is a type object, including instances of "
"types derived from the standard type object.  Return 0 in all other cases."
msgstr ""

#: c-api/type.rst:30
msgid ""
"Return non-zero if the object *o* is a type object, but not a subtype of the "
"standard type object.  Return 0 in all other cases."
msgstr ""

#: c-api/type.rst:36
msgid "Clear the internal lookup cache. Return the current version tag."
msgstr ""

#: c-api/type.rst:40
msgid ""
"Return the :c:member:`~PyTypeObject.tp_flags` member of *type*. This "
"function is primarily meant for use with `Py_LIMITED_API`; the individual "
"flag bits are guaranteed to be stable across Python releases, but access to :"
"c:member:`~PyTypeObject.tp_flags` itself is not part of the limited API."
msgstr ""

#: c-api/type.rst:47
msgid "The return type is now ``unsigned long`` rather than ``long``."
msgstr ""

#: c-api/type.rst:53
msgid ""
"Invalidate the internal lookup cache for the type and all of its subtypes.  "
"This function must be called after any manual modification of the attributes "
"or base classes of the type."
msgstr ""

#: c-api/type.rst:60
msgid ""
"Return non-zero if the type object *o* sets the feature *feature*. Type "
"features are denoted by single bit flags."
msgstr ""

#: c-api/type.rst:66
msgid ""
"Return true if the type object includes support for the cycle detector; this "
"tests the type flag :const:`Py_TPFLAGS_HAVE_GC`."
msgstr ""

#: c-api/type.rst:72
msgid "Return true if *a* is a subtype of *b*."
msgstr ""

#: c-api/type.rst:74
msgid ""
"This function only checks for actual subtypes, which means that :meth:"
"`~class.__subclasscheck__` is not called on *b*.  Call :c:func:"
"`PyObject_IsSubclass` to do the same check that :func:`issubclass` would do."
msgstr ""

#: c-api/type.rst:82
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_alloc` slot of a type "
"object.  Use Python's default memory allocation mechanism to allocate a new "
"instance and initialize all its contents to ``NULL``."
msgstr ""

#: c-api/type.rst:88
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_new` slot of a type "
"object.  Create a new instance using the type's :c:member:`~PyTypeObject."
"tp_alloc` slot."
msgstr ""

#: c-api/type.rst:93
msgid ""
"Finalize a type object.  This should be called on all type objects to finish "
"their initialization.  This function is responsible for adding inherited "
"slots from a type's base class.  Return ``0`` on success, or return ``-1`` "
"and sets an exception on error."
msgstr ""

#: c-api/type.rst:100
msgid ""
"Return the function pointer stored in the given slot. If the result is "
"``NULL``, this indicates that either the slot is ``NULL``, or that the "
"function was called with invalid parameters. Callers will typically cast the "
"result pointer into the appropriate function type."
msgstr ""

#: c-api/type.rst:106
msgid ""
"See :c:member:`PyType_Slot.slot` for possible values of the *slot* argument."
msgstr ""

#: c-api/type.rst:108
msgid "An exception is raised if *type* is not a heap type."
msgstr ""

#: c-api/type.rst:114
msgid ""
"Return the module object associated with the given type when the type was "
"created using :c:func:`PyType_FromModuleAndSpec`."
msgstr ""

#: c-api/type.rst:135
msgid ""
"If no module is associated with the given type, sets :py:class:`TypeError` "
"and returns ``NULL``."
msgstr ""

#: c-api/type.rst:120
msgid ""
"This function is usually used to get the module in which a method is "
"defined. Note that in such a method, ``PyType_GetModule(Py_TYPE(self))`` may "
"not return the intended result. ``Py_TYPE(self)`` may be a *subclass* of the "
"intended class, and subclasses are not necessarily defined in the same "
"module as their superclass. See :c:type:`PyCMethod` to get the class that "
"defines the method."
msgstr ""

#: c-api/type.rst:131
msgid ""
"Return the state of the module object associated with the given type. This "
"is a shortcut for calling :c:func:`PyModule_GetState()` on the result of :c:"
"func:`PyType_GetModule`."
msgstr ""

#: c-api/type.rst:138
msgid ""
"If the *type* has an associated module but its state is ``NULL``, returns "
"``NULL`` without setting an exception."
msgstr ""

#: c-api/type.rst:145
msgid "Creating Heap-Allocated Types"
msgstr ""

#: c-api/type.rst:147
msgid ""
"The following functions and structs are used to create :ref:`heap types "
"<heap-types>`."
msgstr ""

#: c-api/type.rst:152
msgid ""
"Creates and returns a heap type object from the *spec* (:const:"
"`Py_TPFLAGS_HEAPTYPE`)."
msgstr ""

#: c-api/type.rst:155
msgid ""
"If *bases* is a tuple, the created heap type contains all types contained in "
"it as base types."
msgstr ""

#: c-api/type.rst:158
msgid ""
"If *bases* is ``NULL``, the *Py_tp_bases* slot is used instead. If that also "
"is ``NULL``, the *Py_tp_base* slot is used instead. If that also is "
"``NULL``, the new type derives from :class:`object`."
msgstr ""

#: c-api/type.rst:162
msgid ""
"The *module* argument can be used to record the module in which the new "
"class is defined. It must be a module object or ``NULL``. If not ``NULL``, "
"the module is associated with the new type and can later be retreived with :"
"c:func:`PyType_GetModule`. The associated module is not inherited by "
"subclasses; it must be specified for each class individually."
msgstr ""

#: c-api/type.rst:169
msgid "This function calls :c:func:`PyType_Ready` on the new type."
msgstr ""

#: c-api/type.rst:175
msgid "Equivalent to ``PyType_FromModuleAndSpec(NULL, spec, bases)``."
msgstr ""

#: c-api/type.rst:181
msgid "Equivalent to ``PyType_FromSpecWithBases(spec, NULL)``."
msgstr ""

#: c-api/type.rst:185
msgid "Structure defining a type's behavior."
msgstr ""

#: c-api/type.rst:189
msgid "Name of the type, used to set :c:member:`PyTypeObject.tp_name`."
msgstr ""

#: c-api/type.rst:194
msgid ""
"Size of the instance in bytes, used to set :c:member:`PyTypeObject."
"tp_basicsize` and :c:member:`PyTypeObject.tp_itemsize`."
msgstr ""

#: c-api/type.rst:200
msgid "Type flags, used to set :c:member:`PyTypeObject.tp_flags`."
msgstr ""

#: c-api/type.rst:202
msgid ""
"If the ``Py_TPFLAGS_HEAPTYPE`` flag is not set, :c:func:"
"`PyType_FromSpecWithBases` sets it automatically."
msgstr ""

#: c-api/type.rst:207
msgid ""
"Array of :c:type:`PyType_Slot` structures. Terminated by the special slot "
"value ``{0, NULL}``."
msgstr ""

#: c-api/type.rst:212
msgid ""
"Structure defining optional functionality of a type, containing a slot ID "
"and a value pointer."
msgstr ""

#: c-api/type.rst:217
msgid "A slot ID."
msgstr ""

#: c-api/type.rst:219
msgid ""
"Slot IDs are named like the field names of the structures :c:type:"
"`PyTypeObject`, :c:type:`PyNumberMethods`, :c:type:`PySequenceMethods`, :c:"
"type:`PyMappingMethods` and :c:type:`PyAsyncMethods` with an added ``Py_`` "
"prefix. For example, use:"
msgstr ""

#: c-api/type.rst:225
msgid "``Py_tp_dealloc`` to set :c:member:`PyTypeObject.tp_dealloc`"
msgstr ""

#: c-api/type.rst:226
msgid "``Py_nb_add`` to set :c:member:`PyNumberMethods.nb_add`"
msgstr ""

#: c-api/type.rst:227
msgid "``Py_sq_length`` to set :c:member:`PySequenceMethods.sq_length`"
msgstr ""

#: c-api/type.rst:229
msgid ""
"The following fields cannot be set at all using :c:type:`PyType_Spec` and :c:"
"type:`PyType_Slot`:"
msgstr ""

#: c-api/type.rst:232
msgid ":c:member:`~PyTypeObject.tp_dict`"
msgstr ""

#: c-api/type.rst:233
msgid ":c:member:`~PyTypeObject.tp_mro`"
msgstr ""

#: c-api/type.rst:234
msgid ":c:member:`~PyTypeObject.tp_cache`"
msgstr ""

#: c-api/type.rst:235
msgid ":c:member:`~PyTypeObject.tp_subclasses`"
msgstr ""

#: c-api/type.rst:236
msgid ":c:member:`~PyTypeObject.tp_weaklist`"
msgstr ""

#: c-api/type.rst:237
msgid ":c:member:`~PyTypeObject.tp_vectorcall`"
msgstr ""

#: c-api/type.rst:238
msgid ""
":c:member:`~PyTypeObject.tp_weaklistoffset` (see :ref:`PyMemberDef "
"<pymemberdef-offsets>`)"
msgstr ""

#: c-api/type.rst:240
msgid ""
":c:member:`~PyTypeObject.tp_dictoffset` (see :ref:`PyMemberDef <pymemberdef-"
"offsets>`)"
msgstr ""

#: c-api/type.rst:242
msgid ""
":c:member:`~PyTypeObject.tp_vectorcall_offset` (see :ref:`PyMemberDef "
"<pymemberdef-offsets>`)"
msgstr ""

#: c-api/type.rst:245
msgid ""
"The following fields cannot be set using :c:type:`PyType_Spec` and :c:type:"
"`PyType_Slot` under the limited API:"
msgstr ""

#: c-api/type.rst:248
msgid ":c:member:`~PyBufferProcs.bf_getbuffer`"
msgstr ""

#: c-api/type.rst:249
msgid ":c:member:`~PyBufferProcs.bf_releasebuffer`"
msgstr ""

#: c-api/type.rst:251
msgid ""
"Setting :c:data:`Py_tp_bases` or :c:data:`Py_tp_base` may be problematic on "
"some platforms. To avoid issues, use the *bases* argument of :py:func:"
"`PyType_FromSpecWithBases` instead."
msgstr ""

#: c-api/type.rst:258
msgid "Slots in :c:type:`PyBufferProcs` in may be set in the unlimited API."
msgstr ""

#: c-api/type.rst:262
msgid ""
"The desired value of the slot. In most cases, this is a pointer to a "
"function."
msgstr ""

#: c-api/type.rst:265
msgid "May not be ``NULL``."
msgstr ""
