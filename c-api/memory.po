# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-21 16:37+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: c-api/memory.rst:8
msgid "Memory Management"
msgstr ""

#: c-api/memory.rst:17
msgid "Overview"
msgstr "Aper√ßu"

#: c-api/memory.rst:19
msgid ""
"Memory management in Python involves a private heap containing all Python "
"objects and data structures. The management of this private heap is ensured "
"internally by the *Python memory manager*.  The Python memory manager has "
"different components which deal with various dynamic storage management "
"aspects, like sharing, segmentation, preallocation or caching."
msgstr ""

#: c-api/memory.rst:25
msgid ""
"At the lowest level, a raw memory allocator ensures that there is enough "
"room in the private heap for storing all Python-related data by interacting "
"with the memory manager of the operating system. On top of the raw memory "
"allocator, several object-specific allocators operate on the same heap and "
"implement distinct memory management policies adapted to the peculiarities "
"of every object type. For example, integer objects are managed differently "
"within the heap than strings, tuples or dictionaries because integers imply "
"different storage requirements and speed/space tradeoffs. The Python memory "
"manager thus delegates some of the work to the object-specific allocators, "
"but ensures that the latter operate within the bounds of the private heap."
msgstr ""

#: c-api/memory.rst:36
msgid ""
"It is important to understand that the management of the Python heap is "
"performed by the interpreter itself and that the user has no control over "
"it, even if they regularly manipulate object pointers to memory blocks "
"inside that heap.  The allocation of heap space for Python objects and other "
"internal buffers is performed on demand by the Python memory manager through "
"the Python/C API functions listed in this document."
msgstr ""

#: c-api/memory.rst:49
msgid ""
"To avoid memory corruption, extension writers should never try to operate on "
"Python objects with the functions exported by the C library: :c:func:"
"`malloc`, :c:func:`calloc`, :c:func:`realloc` and :c:func:`free`.  This will "
"result in  mixed calls between the C allocator and the Python memory manager "
"with fatal consequences, because they implement different algorithms and "
"operate on different heaps.  However, one may safely allocate and release "
"memory blocks with the C library allocator for individual purposes, as shown "
"in the following example::"
msgstr ""

#: c-api/memory.rst:68
msgid ""
"In this example, the memory request for the I/O buffer is handled by the C "
"library allocator. The Python memory manager is involved only in the "
"allocation of the bytes object returned as a result."
msgstr ""

#: c-api/memory.rst:72
msgid ""
"In most situations, however, it is recommended to allocate memory from the "
"Python heap specifically because the latter is under control of the Python "
"memory manager. For example, this is required when the interpreter is "
"extended with new object types written in C. Another reason for using the "
"Python heap is the desire to *inform* the Python memory manager about the "
"memory needs of the extension module. Even when the requested memory is used "
"exclusively for internal, highly-specific purposes, delegating all memory "
"requests to the Python memory manager causes the interpreter to have a more "
"accurate image of its memory footprint as a whole. Consequently, under "
"certain circumstances, the Python memory manager may or may not trigger "
"appropriate actions, like garbage collection, memory compaction or other "
"preventive procedures. Note that by using the C library allocator as shown "
"in the previous example, the allocated memory for the I/O buffer escapes "
"completely the Python memory manager."
msgstr ""

#: c-api/memory.rst:88
msgid ""
"The :envvar:`PYTHONMALLOC` environment variable can be used to configure the "
"memory allocators used by Python."
msgstr ""

#: c-api/memory.rst:91
msgid ""
"The :envvar:`PYTHONMALLOCSTATS` environment variable can be used to print "
"statistics of the :ref:`pymalloc memory allocator <pymalloc>` every time a "
"new pymalloc object arena is created, and on shutdown."
msgstr ""

#: c-api/memory.rst:96
msgid "Allocator Domains"
msgstr ""

#: c-api/memory.rst:98
msgid ""
"All allocating functions belong to one of three different \"domains\" (see "
"also :c:type:`PyMemAllocatorDomain`). These domains represent different "
"allocation strategies and are optimized for different purposes. The specific "
"details on how every domain allocates memory or what internal functions each "
"domain calls is considered an implementation detail, but for debugging "
"purposes a simplified table can be found at :ref:`here <default-memory-"
"allocators>`. There is no hard requirement to use the memory returned by the "
"allocation functions belonging to a given domain for only the purposes "
"hinted by that domain (although this is the recommended practice). For "
"example, one could use the memory returned by :c:func:`PyMem_RawMalloc` for "
"allocating Python objects or the memory returned by :c:func:"
"`PyObject_Malloc` for allocating memory for buffers."
msgstr ""

#: c-api/memory.rst:110
msgid "The three allocation domains are:"
msgstr ""

#: c-api/memory.rst:112
msgid ""
"Raw domain: intended for allocating memory for general-purpose memory "
"buffers where the allocation *must* go to the system allocator or where the "
"allocator can operate without the :term:`GIL`. The memory is requested "
"directly to the system."
msgstr ""

#: c-api/memory.rst:117
msgid ""
"\"Mem\" domain: intended for allocating memory for Python buffers and "
"general-purpose memory buffers where the allocation must be performed with "
"the :term:`GIL` held. The memory is taken from the Python private heap."
msgstr ""

#: c-api/memory.rst:121
msgid ""
"Object domain: intended for allocating memory belonging to Python objects. "
"The memory is taken from the Python private heap."
msgstr ""

#: c-api/memory.rst:124
msgid ""
"When freeing memory previously allocated by the allocating functions "
"belonging to a given domain,the matching specific deallocating functions "
"must be used. For example, :c:func:`PyMem_Free` must be used to free memory "
"allocated using :c:func:`PyMem_Malloc`."
msgstr ""

#: c-api/memory.rst:129
msgid "Raw Memory Interface"
msgstr ""

#: c-api/memory.rst:131
msgid ""
"The following function sets are wrappers to the system allocator. These "
"functions are thread-safe, the :term:`GIL <global interpreter lock>` does "
"not need to be held."
msgstr ""

#: c-api/memory.rst:135
msgid ""
"The :ref:`default raw memory allocator <default-memory-allocators>` uses the "
"following functions: :c:func:`malloc`, :c:func:`calloc`, :c:func:`realloc` "
"and :c:func:`free`; call ``malloc(1)`` (or ``calloc(1, 1)``) when requesting "
"zero bytes."
msgstr ""

#: c-api/memory.rst:215 c-api/memory.rst:323
msgid ""
"Allocates *n* bytes and returns a pointer of type :c:type:`void*` to the "
"allocated memory, or ``NULL`` if the request fails."
msgstr ""

#: c-api/memory.rst:147
msgid ""
"Requesting zero bytes returns a distinct non-``NULL`` pointer if possible, "
"as if ``PyMem_RawMalloc(1)`` had been called instead. The memory will not "
"have been initialized in any way."
msgstr ""

#: c-api/memory.rst:225 c-api/memory.rst:333
msgid ""
"Allocates *nelem* elements each whose size in bytes is *elsize* and returns "
"a pointer of type :c:type:`void*` to the allocated memory, or ``NULL`` if "
"the request fails. The memory is initialized to zeros."
msgstr ""

#: c-api/memory.rst:158
msgid ""
"Requesting zero elements or elements of size zero bytes returns a distinct "
"non-``NULL`` pointer if possible, as if ``PyMem_RawCalloc(1, 1)`` had been "
"called instead."
msgstr ""

#: c-api/memory.rst:238 c-api/memory.rst:346
msgid ""
"Resizes the memory block pointed to by *p* to *n* bytes. The contents will "
"be unchanged to the minimum of the old and the new sizes."
msgstr ""

#: c-api/memory.rst:170
msgid ""
"If *p* is ``NULL``, the call is equivalent to ``PyMem_RawMalloc(n)``; else "
"if *n* is equal to zero, the memory block is resized but is not freed, and "
"the returned pointer is non-``NULL``."
msgstr ""

#: c-api/memory.rst:174
msgid ""
"Unless *p* is ``NULL``, it must have been returned by a previous call to :c:"
"func:`PyMem_RawMalloc`, :c:func:`PyMem_RawRealloc` or :c:func:"
"`PyMem_RawCalloc`."
msgstr ""

#: c-api/memory.rst:178
msgid ""
"If the request fails, :c:func:`PyMem_RawRealloc` returns ``NULL`` and *p* "
"remains a valid pointer to the previous memory area."
msgstr ""

#: c-api/memory.rst:184
msgid ""
"Frees the memory block pointed to by *p*, which must have been returned by a "
"previous call to :c:func:`PyMem_RawMalloc`, :c:func:`PyMem_RawRealloc` or :c:"
"func:`PyMem_RawCalloc`.  Otherwise, or if ``PyMem_RawFree(p)`` has been "
"called before, undefined behavior occurs."
msgstr ""

#: c-api/memory.rst:259 c-api/memory.rst:367
msgid "If *p* is ``NULL``, no operation is performed."
msgstr ""

#: c-api/memory.rst:195
msgid "Memory Interface"
msgstr ""

#: c-api/memory.rst:303
msgid ""
"The following function sets, modeled after the ANSI C standard, but "
"specifying behavior when requesting zero bytes, are available for allocating "
"and releasing memory from the Python heap."
msgstr ""

#: c-api/memory.rst:201
msgid ""
"The :ref:`default memory allocator <default-memory-allocators>` uses the :"
"ref:`pymalloc memory allocator <pymalloc>`."
msgstr ""

#: c-api/memory.rst:318
msgid ""
"The :term:`GIL <global interpreter lock>` must be held when using these "
"functions."
msgstr ""

#: c-api/memory.rst:211
msgid ""
"The default allocator is now pymalloc instead of system :c:func:`malloc`."
msgstr ""

#: c-api/memory.rst:218
msgid ""
"Requesting zero bytes returns a distinct non-``NULL`` pointer if possible, "
"as if ``PyMem_Malloc(1)`` had been called instead. The memory will not have "
"been initialized in any way."
msgstr ""

#: c-api/memory.rst:229
msgid ""
"Requesting zero elements or elements of size zero bytes returns a distinct "
"non-``NULL`` pointer if possible, as if ``PyMem_Calloc(1, 1)`` had been "
"called instead."
msgstr ""

#: c-api/memory.rst:241
msgid ""
"If *p* is ``NULL``, the call is equivalent to ``PyMem_Malloc(n)``; else if "
"*n* is equal to zero, the memory block is resized but is not freed, and the "
"returned pointer is non-``NULL``."
msgstr ""

#: c-api/memory.rst:245
msgid ""
"Unless *p* is ``NULL``, it must have been returned by a previous call to :c:"
"func:`PyMem_Malloc`, :c:func:`PyMem_Realloc` or :c:func:`PyMem_Calloc`."
msgstr ""

#: c-api/memory.rst:248
msgid ""
"If the request fails, :c:func:`PyMem_Realloc` returns ``NULL`` and *p* "
"remains a valid pointer to the previous memory area."
msgstr ""

#: c-api/memory.rst:254
msgid ""
"Frees the memory block pointed to by *p*, which must have been returned by a "
"previous call to :c:func:`PyMem_Malloc`, :c:func:`PyMem_Realloc` or :c:func:"
"`PyMem_Calloc`.  Otherwise, or if ``PyMem_Free(p)`` has been called before, "
"undefined behavior occurs."
msgstr ""

#: c-api/memory.rst:261
msgid ""
"The following type-oriented macros are provided for convenience.  Note  that "
"*TYPE* refers to any C type."
msgstr ""

#: c-api/memory.rst:267
msgid ""
"Same as :c:func:`PyMem_Malloc`, but allocates ``(n * sizeof(TYPE))`` bytes "
"of memory.  Returns a pointer cast to :c:type:`TYPE*`.  The memory will not "
"have been initialized in any way."
msgstr ""

#: c-api/memory.rst:274
msgid ""
"Same as :c:func:`PyMem_Realloc`, but the memory block is resized to ``(n * "
"sizeof(TYPE))`` bytes.  Returns a pointer cast to :c:type:`TYPE*`. On "
"return, *p* will be a pointer to the new memory area, or ``NULL`` in the "
"event of failure."
msgstr ""

#: c-api/memory.rst:279
msgid ""
"This is a C preprocessor macro; *p* is always reassigned.  Save the original "
"value of *p* to avoid losing memory when handling errors."
msgstr ""

#: c-api/memory.rst:285
msgid "Same as :c:func:`PyMem_Free`."
msgstr ""

#: c-api/memory.rst:287
msgid ""
"In addition, the following macro sets are provided for calling the Python "
"memory allocator directly, without involving the C API functions listed "
"above. However, note that their use does not preserve binary compatibility "
"across Python versions and is therefore deprecated in extension modules."
msgstr ""

#: c-api/memory.rst:292
msgid "``PyMem_MALLOC(size)``"
msgstr ""

#: c-api/memory.rst:293
msgid "``PyMem_NEW(type, size)``"
msgstr ""

#: c-api/memory.rst:294
msgid "``PyMem_REALLOC(ptr, size)``"
msgstr ""

#: c-api/memory.rst:295
msgid "``PyMem_RESIZE(ptr, type, size)``"
msgstr ""

#: c-api/memory.rst:296
msgid "``PyMem_FREE(ptr)``"
msgstr ""

#: c-api/memory.rst:297
msgid "``PyMem_DEL(ptr)``"
msgstr ""

#: c-api/memory.rst:301
msgid "Object allocators"
msgstr ""

#: c-api/memory.rst:308
msgid ""
"There is no guarantee that the memory returned by these allocators can be "
"successfully cast to a Python object when intercepting the allocating "
"functions in this domain by the methods described in the :ref:`Customize "
"Memory Allocators <customize-memory-allocators>` section."
msgstr ""

#: c-api/memory.rst:313
msgid ""
"The :ref:`default object allocator <default-memory-allocators>` uses the :"
"ref:`pymalloc memory allocator <pymalloc>`."
msgstr ""

#: c-api/memory.rst:326
msgid ""
"Requesting zero bytes returns a distinct non-``NULL`` pointer if possible, "
"as if ``PyObject_Malloc(1)`` had been called instead. The memory will not "
"have been initialized in any way."
msgstr ""

#: c-api/memory.rst:337
msgid ""
"Requesting zero elements or elements of size zero bytes returns a distinct "
"non-``NULL`` pointer if possible, as if ``PyObject_Calloc(1, 1)`` had been "
"called instead."
msgstr ""

#: c-api/memory.rst:349
msgid ""
"If *p* is ``NULL``, the call is equivalent to ``PyObject_Malloc(n)``; else "
"if *n* is equal to zero, the memory block is resized but is not freed, and "
"the returned pointer is non-``NULL``."
msgstr ""

#: c-api/memory.rst:353
msgid ""
"Unless *p* is ``NULL``, it must have been returned by a previous call to :c:"
"func:`PyObject_Malloc`, :c:func:`PyObject_Realloc` or :c:func:"
"`PyObject_Calloc`."
msgstr ""

#: c-api/memory.rst:356
msgid ""
"If the request fails, :c:func:`PyObject_Realloc` returns ``NULL`` and *p* "
"remains a valid pointer to the previous memory area."
msgstr ""

#: c-api/memory.rst:362
msgid ""
"Frees the memory block pointed to by *p*, which must have been returned by a "
"previous call to :c:func:`PyObject_Malloc`, :c:func:`PyObject_Realloc` or :c:"
"func:`PyObject_Calloc`.  Otherwise, or if ``PyObject_Free(p)`` has been "
"called before, undefined behavior occurs."
msgstr ""

#: c-api/memory.rst:373
msgid "Default Memory Allocators"
msgstr ""

#: c-api/memory.rst:375
msgid "Default memory allocators:"
msgstr ""

#: c-api/memory.rst:378
msgid "Configuration"
msgstr "Configuration"

#: c-api/memory.rst:378
msgid "Name"
msgstr "Nom"

#: c-api/memory.rst:378
msgid "PyMem_RawMalloc"
msgstr ""

#: c-api/memory.rst:378
msgid "PyMem_Malloc"
msgstr ""

#: c-api/memory.rst:378
msgid "PyObject_Malloc"
msgstr ""

#: c-api/memory.rst:380
msgid "Release build"
msgstr ""

#: c-api/memory.rst:380
msgid "``\"pymalloc\"``"
msgstr ""

#: c-api/memory.rst:382
msgid "``malloc``"
msgstr ""

#: c-api/memory.rst:380
msgid "``pymalloc``"
msgstr ""

#: c-api/memory.rst:381
msgid "Debug build"
msgstr ""

#: c-api/memory.rst:381
msgid "``\"pymalloc_debug\"``"
msgstr ""

#: c-api/memory.rst:383
msgid "``malloc`` + debug"
msgstr ""

#: c-api/memory.rst:381
msgid "``pymalloc`` + debug"
msgstr ""

#: c-api/memory.rst:382
msgid "Release build, without pymalloc"
msgstr ""

#: c-api/memory.rst:382
msgid "``\"malloc\"``"
msgstr ""

#: c-api/memory.rst:383
msgid "Debug build, without pymalloc"
msgstr ""

#: c-api/memory.rst:383
msgid "``\"malloc_debug\"``"
msgstr ""

#: c-api/memory.rst:386
msgid "Legend:"
msgstr ""

#: c-api/memory.rst:388
msgid "Name: value for :envvar:`PYTHONMALLOC` environment variable."
msgstr ""

#: c-api/memory.rst:389
msgid ""
"``malloc``: system allocators from the standard C library, C functions: :c:"
"func:`malloc`, :c:func:`calloc`, :c:func:`realloc` and :c:func:`free`."
msgstr ""

#: c-api/memory.rst:391
msgid "``pymalloc``: :ref:`pymalloc memory allocator <pymalloc>`."
msgstr ""

#: c-api/memory.rst:392
msgid ""
"\"+ debug\": with :ref:`debug hooks on the Python memory allocators <pymem-"
"debug-hooks>`."
msgstr ""

#: c-api/memory.rst:394
msgid "\"Debug build\": :ref:`Python build in debug mode <debug-build>`."
msgstr ""

#: c-api/memory.rst:399
msgid "Customize Memory Allocators"
msgstr ""

#: c-api/memory.rst:405
msgid ""
"Structure used to describe a memory block allocator. The structure has the "
"following fields:"
msgstr ""

#: c-api/memory.rst:626
msgid "Field"
msgstr "Champ"

#: c-api/memory.rst:626
msgid "Meaning"
msgstr "Signification"

#: c-api/memory.rst:628
msgid "``void *ctx``"
msgstr "``void *ctx``"

#: c-api/memory.rst:628
msgid "user context passed as first argument"
msgstr ""

#: c-api/memory.rst:413
msgid "``void* malloc(void *ctx, size_t size)``"
msgstr "``void* malloc(void *ctx, size_t size)``"

#: c-api/memory.rst:413
msgid "allocate a memory block"
msgstr ""

#: c-api/memory.rst:415
msgid "``void* calloc(void *ctx, size_t nelem, size_t elsize)``"
msgstr ""

#: c-api/memory.rst:415
msgid "allocate a memory block initialized with zeros"
msgstr ""

#: c-api/memory.rst:418
msgid "``void* realloc(void *ctx, void *ptr, size_t new_size)``"
msgstr ""

#: c-api/memory.rst:418
msgid "allocate or resize a memory block"
msgstr ""

#: c-api/memory.rst:420
msgid "``void free(void *ctx, void *ptr)``"
msgstr "``void free(void *ctx, void *ptr)``"

#: c-api/memory.rst:420
msgid "free a memory block"
msgstr ""

#: c-api/memory.rst:423
msgid ""
"The :c:type:`PyMemAllocator` structure was renamed to :c:type:"
"`PyMemAllocatorEx` and a new ``calloc`` field was added."
msgstr ""

#: c-api/memory.rst:430
msgid "Enum used to identify an allocator domain. Domains:"
msgstr ""

#: c-api/memory.rst:443 c-api/memory.rst:452
#, fuzzy
msgid "Functions:"
msgstr "Fonctions"

#: c-api/memory.rst:436
#, fuzzy
msgid ":c:func:`PyMem_RawMalloc`"
msgstr ":c:func:`PyMem_RawCalloc`,"

#: c-api/memory.rst:437
#, fuzzy
msgid ":c:func:`PyMem_RawRealloc`"
msgstr ":c:func:`PyMem_RawCalloc`,"

#: c-api/memory.rst:438
#, fuzzy
msgid ":c:func:`PyMem_RawCalloc`"
msgstr ":c:func:`PyMem_RawCalloc`,"

#: c-api/memory.rst:439
msgid ":c:func:`PyMem_RawFree`"
msgstr ""

#: c-api/memory.rst:445
#, fuzzy
msgid ":c:func:`PyMem_Malloc`,"
msgstr ":c:func:`PyMem_Calloc`,"

#: c-api/memory.rst:446
#, fuzzy
msgid ":c:func:`PyMem_Realloc`"
msgstr ":c:func:`PyMem_Calloc`,"

#: c-api/memory.rst:447
#, fuzzy
msgid ":c:func:`PyMem_Calloc`"
msgstr ":c:func:`PyMem_Calloc`,"

#: c-api/memory.rst:448
msgid ":c:func:`PyMem_Free`"
msgstr ""

#: c-api/memory.rst:454
msgid ":c:func:`PyObject_Malloc`"
msgstr ""

#: c-api/memory.rst:455
msgid ":c:func:`PyObject_Realloc`"
msgstr ""

#: c-api/memory.rst:456
msgid ":c:func:`PyObject_Calloc`"
msgstr ""

#: c-api/memory.rst:457
msgid ":c:func:`PyObject_Free`"
msgstr ""

#: c-api/memory.rst:461
msgid "Get the memory block allocator of the specified domain."
msgstr ""

#: c-api/memory.rst:466
msgid "Set the memory block allocator of the specified domain."
msgstr ""

#: c-api/memory.rst:468
msgid ""
"The new allocator must return a distinct non-``NULL`` pointer when "
"requesting zero bytes."
msgstr ""

#: c-api/memory.rst:471
msgid ""
"For the :c:data:`PYMEM_DOMAIN_RAW` domain, the allocator must be thread-"
"safe: the :term:`GIL <global interpreter lock>` is not held when the "
"allocator is called."
msgstr ""

#: c-api/memory.rst:475
msgid ""
"If the new allocator is not a hook (does not call the previous allocator), "
"the :c:func:`PyMem_SetupDebugHooks` function must be called to reinstall the "
"debug hooks on top on the new allocator."
msgstr ""

#: c-api/memory.rst:482
msgid ""
"Setup :ref:`debug hooks in the Python memory allocators <pymem-debug-hooks>` "
"to detect memory errors."
msgstr ""

#: c-api/memory.rst:489
msgid "Debug hooks on the Python memory allocators"
msgstr ""

#: c-api/memory.rst:491
msgid ""
"When :ref:`Python is built in debug mode <debug-build>`, the :c:func:"
"`PyMem_SetupDebugHooks` function is called at the :ref:`Python "
"preinitialization <c-preinit>` to setup debug hooks on Python memory "
"allocators to detect memory errors."
msgstr ""

#: c-api/memory.rst:496
msgid ""
"The :envvar:`PYTHONMALLOC` environment variable can be used to install debug "
"hooks on a Python compiled in release mode (ex: ``PYTHONMALLOC=debug``)."
msgstr ""

#: c-api/memory.rst:499
msgid ""
"The :c:func:`PyMem_SetupDebugHooks` function can be used to set debug hooks "
"after calling :c:func:`PyMem_SetAllocator`."
msgstr ""

#: c-api/memory.rst:502
msgid ""
"These debug hooks fill dynamically allocated memory blocks with special, "
"recognizable bit patterns. Newly allocated memory is filled with the byte "
"``0xCD`` (``PYMEM_CLEANBYTE``), freed memory is filled with the byte "
"``0xDD`` (``PYMEM_DEADBYTE``). Memory blocks are surrounded by \"forbidden "
"bytes\" filled with the byte ``0xFD`` (``PYMEM_FORBIDDENBYTE``). Strings of "
"these bytes are unlikely to be valid addresses, floats, or ASCII strings."
msgstr ""

#: c-api/memory.rst:509
msgid "Runtime checks:"
msgstr ""

#: c-api/memory.rst:511
msgid ""
"Detect API violations. For example, detect if :c:func:`PyObject_Free` is "
"called on a memory block allocated by :c:func:`PyMem_Malloc`."
msgstr ""

#: c-api/memory.rst:513
msgid "Detect write before the start of the buffer (buffer underflow)."
msgstr ""

#: c-api/memory.rst:514
msgid "Detect write after the end of the buffer (buffer overflow)."
msgstr ""

#: c-api/memory.rst:515
msgid ""
"Check that the :term:`GIL <global interpreter lock>` is held when allocator "
"functions of :c:data:`PYMEM_DOMAIN_OBJ` (ex: :c:func:`PyObject_Malloc`) and :"
"c:data:`PYMEM_DOMAIN_MEM` (ex: :c:func:`PyMem_Malloc`) domains are called."
msgstr ""

#: c-api/memory.rst:520
msgid ""
"On error, the debug hooks use the :mod:`tracemalloc` module to get the "
"traceback where a memory block was allocated. The traceback is only "
"displayed if :mod:`tracemalloc` is tracing Python memory allocations and the "
"memory block was traced."
msgstr ""

#: c-api/memory.rst:525
msgid ""
"Let *S* = ``sizeof(size_t)``. ``2*S`` bytes are added at each end of each "
"block of *N* bytes requested.  The memory layout is like so, where p "
"represents the address returned by a malloc-like or realloc-like function "
"(``p[i:j]`` means the slice of bytes from ``*(p+i)`` inclusive up to "
"``*(p+j)`` exclusive; note that the treatment of negative indices differs "
"from a Python slice):"
msgstr ""

#: c-api/memory.rst:532
msgid "``p[-2*S:-S]``"
msgstr ""

#: c-api/memory.rst:532
msgid ""
"Number of bytes originally asked for.  This is a size_t, big-endian (easier "
"to read in a memory dump)."
msgstr ""

#: c-api/memory.rst:539
msgid "``p[-S]``"
msgstr ""

#: c-api/memory.rst:535
msgid "API identifier (ASCII character):"
msgstr ""

#: c-api/memory.rst:537
msgid "``'r'`` for :c:data:`PYMEM_DOMAIN_RAW`."
msgstr ""

#: c-api/memory.rst:538
msgid "``'m'`` for :c:data:`PYMEM_DOMAIN_MEM`."
msgstr ""

#: c-api/memory.rst:539
msgid "``'o'`` for :c:data:`PYMEM_DOMAIN_OBJ`."
msgstr ""

#: c-api/memory.rst:542
msgid "``p[-S+1:0]``"
msgstr ""

#: c-api/memory.rst:542
msgid "Copies of PYMEM_FORBIDDENBYTE.  Used to catch under- writes and reads."
msgstr ""

#: c-api/memory.rst:551
msgid "``p[0:N]``"
msgstr ""

#: c-api/memory.rst:545
msgid ""
"The requested memory, filled with copies of PYMEM_CLEANBYTE, used to catch "
"reference to uninitialized memory.  When a realloc-like function is called "
"requesting a larger memory block, the new excess bytes are also filled with "
"PYMEM_CLEANBYTE.  When a free-like function is called, these are overwritten "
"with PYMEM_DEADBYTE, to catch reference to freed memory.  When a realloc- "
"like function is called requesting a smaller memory block, the excess old "
"bytes are also filled with PYMEM_DEADBYTE."
msgstr ""

#: c-api/memory.rst:554
msgid "``p[N:N+S]``"
msgstr ""

#: c-api/memory.rst:554
msgid "Copies of PYMEM_FORBIDDENBYTE.  Used to catch over- writes and reads."
msgstr ""

#: c-api/memory.rst:565
msgid "``p[N+S:N+2*S]``"
msgstr ""

#: c-api/memory.rst:557
msgid ""
"Only used if the ``PYMEM_DEBUG_SERIALNO`` macro is defined (not defined by "
"default)."
msgstr ""

#: c-api/memory.rst:560
msgid ""
"A serial number, incremented by 1 on each call to a malloc-like or realloc-"
"like function.  Big-endian ``size_t``.  If \"bad memory\" is detected later, "
"the serial number gives an excellent way to set a breakpoint on the next "
"run, to capture the instant at which this block was passed out.  The static "
"function bumpserialno() in obmalloc.c is the only place the serial number is "
"incremented, and exists so you can set such a breakpoint easily."
msgstr ""

#: c-api/memory.rst:567
msgid ""
"A realloc-like or free-like function first checks that the "
"PYMEM_FORBIDDENBYTE bytes at each end are intact.  If they've been altered, "
"diagnostic output is written to stderr, and the program is aborted via "
"Py_FatalError().  The other main failure mode is provoking a memory error "
"when a program reads up one of the special bit patterns and tries to use it "
"as an address.  If you get in a debugger then and look at the object, you're "
"likely to see that it's entirely filled with PYMEM_DEADBYTE (meaning freed "
"memory is getting used) or PYMEM_CLEANBYTE (meaning uninitialized memory is "
"getting used)."
msgstr ""

#: c-api/memory.rst:576
msgid ""
"The :c:func:`PyMem_SetupDebugHooks` function now also works on Python "
"compiled in release mode.  On error, the debug hooks now use :mod:"
"`tracemalloc` to get the traceback where a memory block was allocated. The "
"debug hooks now also check if the GIL is held when functions of :c:data:"
"`PYMEM_DOMAIN_OBJ` and :c:data:`PYMEM_DOMAIN_MEM` domains are called."
msgstr ""

#: c-api/memory.rst:584
msgid ""
"Byte patterns ``0xCB`` (``PYMEM_CLEANBYTE``), ``0xDB`` (``PYMEM_DEADBYTE``) "
"and ``0xFB`` (``PYMEM_FORBIDDENBYTE``) have been replaced with ``0xCD``, "
"``0xDD`` and ``0xFD`` to use the same values than Windows CRT debug "
"``malloc()`` and ``free()``."
msgstr ""

#: c-api/memory.rst:594
msgid "The pymalloc allocator"
msgstr ""

#: c-api/memory.rst:596
msgid ""
"Python has a *pymalloc* allocator optimized for small objects (smaller or "
"equal to 512 bytes) with a short lifetime. It uses memory mappings called "
"\"arenas\" with a fixed size of 256 KiB. It falls back to :c:func:"
"`PyMem_RawMalloc` and :c:func:`PyMem_RawRealloc` for allocations larger than "
"512 bytes."
msgstr ""

#: c-api/memory.rst:601
msgid ""
"*pymalloc* is the :ref:`default allocator <default-memory-allocators>` of "
"the :c:data:`PYMEM_DOMAIN_MEM` (ex: :c:func:`PyMem_Malloc`) and :c:data:"
"`PYMEM_DOMAIN_OBJ` (ex: :c:func:`PyObject_Malloc`) domains."
msgstr ""

#: c-api/memory.rst:605
msgid "The arena allocator uses the following functions:"
msgstr ""

#: c-api/memory.rst:607
msgid ":c:func:`VirtualAlloc` and :c:func:`VirtualFree` on Windows,"
msgstr ""

#: c-api/memory.rst:608
msgid ":c:func:`mmap` and :c:func:`munmap` if available,"
msgstr ""

#: c-api/memory.rst:609
msgid ":c:func:`malloc` and :c:func:`free` otherwise."
msgstr ""

#: c-api/memory.rst:611
msgid ""
"This allocator is disabled if Python is configured with the :option:`--"
"without-pymalloc` option. It can also be disabled at runtime using the :"
"envvar:`PYTHONMALLOC` environment variable (ex: ``PYTHONMALLOC=malloc``)."
msgstr ""

#: c-api/memory.rst:616
msgid "Customize pymalloc Arena Allocator"
msgstr ""

#: c-api/memory.rst:622
msgid ""
"Structure used to describe an arena allocator. The structure has three "
"fields:"
msgstr ""

#: c-api/memory.rst:630
msgid "``void* alloc(void *ctx, size_t size)``"
msgstr "``void* alloc(void *ctx, size_t size)``"

#: c-api/memory.rst:630
msgid "allocate an arena of size bytes"
msgstr ""

#: c-api/memory.rst:632
#, fuzzy
msgid "``void free(void *ctx, void *ptr, size_t size)``"
msgstr "``void free(void *ctx, void *ptr)``"

#: c-api/memory.rst:632
msgid "free an arena"
msgstr ""

#: c-api/memory.rst:637
msgid "Get the arena allocator."
msgstr ""

#: c-api/memory.rst:641
msgid "Set the arena allocator."
msgstr ""

#: c-api/memory.rst:645
msgid "tracemalloc C API"
msgstr ""

#: c-api/memory.rst:651
msgid "Track an allocated memory block in the :mod:`tracemalloc` module."
msgstr ""

#: c-api/memory.rst:653
msgid ""
"Return ``0`` on success, return ``-1`` on error (failed to allocate memory "
"to store the trace). Return ``-2`` if tracemalloc is disabled."
msgstr ""

#: c-api/memory.rst:656
msgid "If memory block is already tracked, update the existing trace."
msgstr ""

#: c-api/memory.rst:660
msgid ""
"Untrack an allocated memory block in the :mod:`tracemalloc` module. Do "
"nothing if the block was not tracked."
msgstr ""

#: c-api/memory.rst:663
msgid "Return ``-2`` if tracemalloc is disabled, otherwise return ``0``."
msgstr ""

#: c-api/memory.rst:669
msgid "Examples"
msgstr "Exemples"

#: c-api/memory.rst:671
msgid ""
"Here is the example from section :ref:`memoryoverview`, rewritten so that "
"the I/O buffer is allocated from the Python heap by using the first function "
"set::"
msgstr ""

#: c-api/memory.rst:684
msgid "The same code using the type-oriented function set::"
msgstr ""

#: c-api/memory.rst:696
msgid ""
"Note that in the two examples above, the buffer is always manipulated via "
"functions belonging to the same set. Indeed, it is required to use the same "
"memory API family for a given memory block, so that the risk of mixing "
"different allocators is reduced to a minimum. The following code sequence "
"contains two errors, one of which is labeled as *fatal* because it mixes two "
"different allocators operating on different heaps. ::"
msgstr ""

#: c-api/memory.rst:711
msgid ""
"In addition to the functions aimed at handling raw memory blocks from the "
"Python heap, objects in Python are allocated and released with :c:func:"
"`PyObject_New`, :c:func:`PyObject_NewVar` and :c:func:`PyObject_Del`."
msgstr ""

#: c-api/memory.rst:715
msgid ""
"These will be explained in the next chapter on defining and implementing new "
"object types in C."
msgstr ""

#~ msgid "``void free(void *ctx, size_t size, void *ptr)``"
#~ msgstr "``void free(void *ctx, size_t size, void *ptr)``"
