# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-24 09:01+0200\n"
"PO-Revision-Date: 2018-10-20 21:16+0200\n"
"Last-Translator: Julien Palard <julien@palard.fr>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.2\n"

#: c-api/allocation.rst:6
msgid "Allocating Objects on the Heap"
msgstr "Allouer des objets dans le tas"

#: c-api/allocation.rst:17
msgid ""
"Initialize a newly-allocated object *op* with its type and initial "
"reference.  Returns the initialized object.  If *type* indicates that the "
"object participates in the cyclic garbage detector, it is added to the "
"detector's set of observed objects. Other fields of the object are not "
"affected."
msgstr ""
"Permet d'initialiser un objet *op* nouvellement alloué ainsi que son type et "
"sa référence initiale.  Renvoie l'objet initialisé.  La présence de *type* "
"indique que l'objet doit être traité par le détecteur d'ordures cycliques, "
"il est de ce fait ajouté à l'ensemble du détecteur d'objets observés. Les "
"autres champs de l'objet ne sont pas affectés."

#: c-api/allocation.rst:26
msgid ""
"This does everything :c:func:`PyObject_Init` does, and also initializes the "
"length information for a variable-size object."
msgstr ""
"Effectue les mêmes opérations que :c:func:`PyObject_Init` fait, et "
"initialise également l'information de la longueur pour un objet de taille "
"variable."

#: c-api/allocation.rst:32
msgid ""
"Allocate a new Python object using the C structure type *TYPE* and the "
"Python type object *type*.  Fields not defined by the Python object header "
"are not initialized; the object's reference count will be one.  The size of "
"the memory allocation is determined from the :c:member:`~PyTypeObject."
"tp_basicsize` field of the type object."
msgstr ""
"Alloue un nouvel objet Python en utilisant le type de structure C *TYPE* et "
"l'objet Python *type*. Les champs non définis par l'en-tête de l'objet "
"Python ne sont pas initialisés; le compteur de la référence objet sera égal "
"à un. La taille de l'allocation mémoire est déterminée par le champ :c:"
"member:`~PyTypeObject.tp_basicsize` de l'objet type."

#: c-api/allocation.rst:41
msgid ""
"Allocate a new Python object using the C structure type *TYPE* and the "
"Python type object *type*.  Fields not defined by the Python object header "
"are not initialized.  The allocated memory allows for the *TYPE* structure "
"plus *size* fields of the size given by the :c:member:`~PyTypeObject."
"tp_itemsize` field of *type*.  This is useful for implementing objects like "
"tuples, which are able to determine their size at construction time.  "
"Embedding the array of fields into the same allocation decreases the number "
"of allocations, improving the memory management efficiency."
msgstr ""
"Alloue un nouvel objet Python en utilisant le type de structure C *TYPE* et "
"l'objet Python de type *type*. Les champs non définis par l'en-tête de "
"l'objet Python ne sont pas initialisés. La mémoire allouée est suffisante "
"pour la structure *TYPE* plus *size* champs de la taille donnée par le champ "
"de *type* :c:member:`~PyTypeObject.tp_itemsize`. Ceci est utile pour "
"l'implémentation d'objets comme les tuples, qui sont capables de déterminer "
"leur taille à la construction. Allouer les champs en même temps que l'objet "
"diminue le nombre d'allocations, améliorant ainsi les performances."

#: c-api/allocation.rst:53
msgid ""
"Releases memory allocated to an object using :c:func:`PyObject_New` or :c:"
"func:`PyObject_NewVar`.  This is normally called from the :c:member:"
"`~PyTypeObject.tp_dealloc` handler specified in the object's type.  The "
"fields of the object should not be accessed after this call as the memory is "
"no longer a valid Python object."
msgstr ""
"Libère la mémoire allouée à un objet utilisant :c:func:`PyObject_New` ou :c:"
"func:`PyObject_NewVar`. Ceci est normalement appelé par le gestionnaire :c:"
"member:`~PyTypeObject.tp_dealloc` spécifié dans le type d'objet. Les champs "
"de l'objet ne doivent plus être accédés après cet appel puisque cet "
"emplacement mémoire ne correspond plus à un objet Python valide."

#: c-api/allocation.rst:62
msgid ""
"Object which is visible in Python as ``None``.  This should only be accessed "
"using the :c:macro:`Py_None` macro, which evaluates to a pointer to this "
"object."
msgstr ""
"Objet qui est visible en tant que ``None`` dans Python. Ne devrait être "
"accessible uniquement en utilisant la macro :c:macro:`Py_None`, qui évalue "
"cet objet à un pointeur."

#: c-api/allocation.rst:69
msgid ":c:func:`PyModule_Create`"
msgstr ":c:func:`PyModule_Create`"

#: c-api/allocation.rst:70
msgid "To allocate and create extension modules."
msgstr "Allouer et créer des modules d'extension."
