# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-11-15 18:54+0100\n"
"PO-Revision-Date: 2018-10-04 12:27+0200\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/c-api/unicode.rst:6
msgid "Unicode Objects and Codecs"
msgstr ""

#: ../Doc/c-api/unicode.rst:12
msgid "Unicode Objects"
msgstr ""

#: ../Doc/c-api/unicode.rst:14
msgid ""
"Since the implementation of :pep:`393` in Python 3.3, Unicode objects "
"internally use a variety of representations, in order to allow handling the "
"complete range of Unicode characters while staying memory efficient.  There "
"are special cases for strings where all code points are below 128, 256, or "
"65536; otherwise, code points must be below 1114112 (which is the full "
"Unicode range)."
msgstr ""

#: ../Doc/c-api/unicode.rst:20
msgid ""
":c:type:`Py_UNICODE*` and UTF-8 representations are created on demand and "
"cached in the Unicode object.  The :c:type:`Py_UNICODE*` representation is "
"deprecated and inefficient; it should be avoided in performance- or memory-"
"sensitive situations."
msgstr ""

#: ../Doc/c-api/unicode.rst:25
msgid ""
"Due to the transition between the old APIs and the new APIs, Unicode objects "
"can internally be in two states depending on how they were created:"
msgstr ""

#: ../Doc/c-api/unicode.rst:28
msgid ""
"\"canonical\" Unicode objects are all objects created by a non-deprecated "
"Unicode API.  They use the most efficient representation allowed by the "
"implementation."
msgstr ""

#: ../Doc/c-api/unicode.rst:32
msgid ""
"\"legacy\" Unicode objects have been created through one of the deprecated "
"APIs (typically :c:func:`PyUnicode_FromUnicode`) and only bear the :c:type:"
"`Py_UNICODE*` representation; you will have to call :c:func:"
"`PyUnicode_READY` on them before calling any other API."
msgstr ""

#: ../Doc/c-api/unicode.rst:39
msgid "Unicode Type"
msgstr ""

#: ../Doc/c-api/unicode.rst:41
msgid ""
"These are the basic Unicode object types used for the Unicode implementation "
"in Python:"
msgstr ""

#: ../Doc/c-api/unicode.rst:48
msgid ""
"These types are typedefs for unsigned integer types wide enough to contain "
"characters of 32 bits, 16 bits and 8 bits, respectively.  When dealing with "
"single Unicode characters, use :c:type:`Py_UCS4`."
msgstr ""

#: ../Doc/c-api/unicode.rst:57
msgid ""
"This is a typedef of :c:type:`wchar_t`, which is a 16-bit type or 32-bit "
"type depending on the platform."
msgstr ""

#: ../Doc/c-api/unicode.rst:60
msgid ""
"In previous versions, this was a 16-bit type or a 32-bit type depending on "
"whether you selected a \"narrow\" or \"wide\" Unicode version of Python at "
"build time."
msgstr ""

#: ../Doc/c-api/unicode.rst:70
msgid ""
"These subtypes of :c:type:`PyObject` represent a Python Unicode object.  In "
"almost all cases, they shouldn't be used directly, since all API functions "
"that deal with Unicode objects take and return :c:type:`PyObject` pointers."
msgstr ""

#: ../Doc/c-api/unicode.rst:79
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python Unicode type.  "
"It is exposed to Python code as ``str``."
msgstr ""

#: ../Doc/c-api/unicode.rst:83
msgid ""
"The following APIs are really C macros and can be used to do fast checks and "
"to access internal read-only data of Unicode objects:"
msgstr ""

#: ../Doc/c-api/unicode.rst:88
msgid ""
"Return true if the object *o* is a Unicode object or an instance of a "
"Unicode subtype."
msgstr ""

#: ../Doc/c-api/unicode.rst:94
msgid ""
"Return true if the object *o* is a Unicode object, but not an instance of a "
"subtype."
msgstr ""

#: ../Doc/c-api/unicode.rst:100
msgid ""
"Ensure the string object *o* is in the \"canonical\" representation.  This "
"is required before using any of the access macros described below."
msgstr ""

#: ../Doc/c-api/unicode.rst:105
msgid ""
"Returns ``0`` on success and ``-1`` with an exception set on failure, which "
"in particular happens if memory allocation fails."
msgstr ""

#: ../Doc/c-api/unicode.rst:113
msgid ""
"Return the length of the Unicode string, in code points.  *o* has to be a "
"Unicode object in the \"canonical\" representation (not checked)."
msgstr ""

#: ../Doc/c-api/unicode.rst:123
msgid ""
"Return a pointer to the canonical representation cast to UCS1, UCS2 or UCS4 "
"integer types for direct character access.  No checks are performed if the "
"canonical representation has the correct character size; use :c:func:"
"`PyUnicode_KIND` to select the right macro.  Make sure :c:func:"
"`PyUnicode_READY` has been called before accessing this."
msgstr ""

#: ../Doc/c-api/unicode.rst:137
msgid "Return values of the :c:func:`PyUnicode_KIND` macro."
msgstr ""

#: ../Doc/c-api/unicode.rst:144
msgid ""
"Return one of the PyUnicode kind constants (see above) that indicate how "
"many bytes per character this Unicode object uses to store its data.  *o* "
"has to be a Unicode object in the \"canonical\" representation (not checked)."
msgstr ""

#: ../Doc/c-api/unicode.rst:155
msgid ""
"Return a void pointer to the raw Unicode buffer.  *o* has to be a Unicode "
"object in the \"canonical\" representation (not checked)."
msgstr ""

#: ../Doc/c-api/unicode.rst:164
msgid ""
"Write into a canonical representation *data* (as obtained with :c:func:"
"`PyUnicode_DATA`).  This macro does not do any sanity checks and is intended "
"for usage in loops.  The caller should cache the *kind* value and *data* "
"pointer as obtained from other macro calls.  *index* is the index in the "
"string (starts at 0) and *value* is the new code point value which should be "
"written to that location."
msgstr ""

#: ../Doc/c-api/unicode.rst:176
msgid ""
"Read a code point from a canonical representation *data* (as obtained with :"
"c:func:`PyUnicode_DATA`).  No checks or ready calls are performed."
msgstr ""

#: ../Doc/c-api/unicode.rst:184
msgid ""
"Read a character from a Unicode object *o*, which must be in the \"canonical"
"\" representation.  This is less efficient than :c:func:`PyUnicode_READ` if "
"you do multiple consecutive reads."
msgstr ""

#: ../Doc/c-api/unicode.rst:193
msgid ""
"Return the maximum code point that is suitable for creating another string "
"based on *o*, which must be in the \"canonical\" representation.  This is "
"always an approximation but more efficient than iterating over the string."
msgstr ""

#: ../Doc/c-api/unicode.rst:202
msgid "Clear the free list. Return the total number of freed items."
msgstr ""

#: ../Doc/c-api/unicode.rst:207
msgid ""
"Return the size of the deprecated :c:type:`Py_UNICODE` representation, in "
"code units (this includes surrogate pairs as 2 units).  *o* has to be a "
"Unicode object (not checked)."
msgstr ""

#: ../Doc/c-api/unicode.rst:213 ../Doc/c-api/unicode.rst:223
msgid ""
"Part of the old-style Unicode API, please migrate to using :c:func:"
"`PyUnicode_GET_LENGTH`."
msgstr ""

#: ../Doc/c-api/unicode.rst:218
msgid ""
"Return the size of the deprecated :c:type:`Py_UNICODE` representation in "
"bytes.  *o* has to be a Unicode object (not checked)."
msgstr ""

#: ../Doc/c-api/unicode.rst:229
msgid ""
"Return a pointer to a :c:type:`Py_UNICODE` representation of the object.  "
"The returned buffer is always terminated with an extra null code point.  It "
"may also contain embedded null code points, which would cause the string to "
"be truncated when used in most C functions.  The ``AS_DATA`` form casts the "
"pointer to :c:type:`const char *`.  The *o* argument has to be a Unicode "
"object (not checked)."
msgstr ""

#: ../Doc/c-api/unicode.rst:236
msgid ""
"This macro is now inefficient -- because in many cases the :c:type:"
"`Py_UNICODE` representation does not exist and needs to be created -- and "
"can fail (return ``NULL`` with an exception set).  Try to port the code to "
"use the new :c:func:`PyUnicode_nBYTE_DATA` macros or use :c:func:"
"`PyUnicode_WRITE` or :c:func:`PyUnicode_READ`."
msgstr ""

#: ../Doc/c-api/unicode.rst:245
msgid ""
"Part of the old-style Unicode API, please migrate to using the :c:func:"
"`PyUnicode_nBYTE_DATA` family of macros."
msgstr ""

#: ../Doc/c-api/unicode.rst:249
msgid "Unicode Character Properties"
msgstr ""

#: ../Doc/c-api/unicode.rst:251
msgid ""
"Unicode provides many different character properties. The most often needed "
"ones are available through these macros which are mapped to C functions "
"depending on the Python configuration."
msgstr ""

#: ../Doc/c-api/unicode.rst:258
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a whitespace character."
msgstr ""

#: ../Doc/c-api/unicode.rst:263
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a lowercase character."
msgstr ""

#: ../Doc/c-api/unicode.rst:268
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is an uppercase character."
msgstr ""

#: ../Doc/c-api/unicode.rst:273
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a titlecase character."
msgstr ""

#: ../Doc/c-api/unicode.rst:278
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a linebreak character."
msgstr ""

#: ../Doc/c-api/unicode.rst:283
msgid "Return ``1`` or ``0`` depending on whether *ch* is a decimal character."
msgstr ""

#: ../Doc/c-api/unicode.rst:288
msgid "Return ``1`` or ``0`` depending on whether *ch* is a digit character."
msgstr ""

#: ../Doc/c-api/unicode.rst:293
msgid "Return ``1`` or ``0`` depending on whether *ch* is a numeric character."
msgstr ""

#: ../Doc/c-api/unicode.rst:298
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is an alphabetic character."
msgstr ""

#: ../Doc/c-api/unicode.rst:303
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is an alphanumeric character."
msgstr ""

#: ../Doc/c-api/unicode.rst:308
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a printable character. "
"Nonprintable characters are those characters defined in the Unicode "
"character database as \"Other\" or \"Separator\", excepting the ASCII space "
"(0x20) which is considered printable.  (Note that printable characters in "
"this context are those which should not be escaped when :func:`repr` is "
"invoked on a string. It has no bearing on the handling of strings written "
"to :data:`sys.stdout` or :data:`sys.stderr`.)"
msgstr ""

#: ../Doc/c-api/unicode.rst:317
msgid "These APIs can be used for fast direct character conversions:"
msgstr ""

#: ../Doc/c-api/unicode.rst:322
msgid "Return the character *ch* converted to lower case."
msgstr ""

#: ../Doc/c-api/unicode.rst:324 ../Doc/c-api/unicode.rst:332
#: ../Doc/c-api/unicode.rst:340
msgid "This function uses simple case mappings."
msgstr ""

#: ../Doc/c-api/unicode.rst:330
msgid "Return the character *ch* converted to upper case."
msgstr ""

#: ../Doc/c-api/unicode.rst:338
msgid "Return the character *ch* converted to title case."
msgstr ""

#: ../Doc/c-api/unicode.rst:346
msgid ""
"Return the character *ch* converted to a decimal positive integer.  Return "
"``-1`` if this is not possible.  This macro does not raise exceptions."
msgstr ""

#: ../Doc/c-api/unicode.rst:352
msgid ""
"Return the character *ch* converted to a single digit integer. Return ``-1`` "
"if this is not possible.  This macro does not raise exceptions."
msgstr ""

#: ../Doc/c-api/unicode.rst:358
msgid ""
"Return the character *ch* converted to a double. Return ``-1.0`` if this is "
"not possible.  This macro does not raise exceptions."
msgstr ""

#: ../Doc/c-api/unicode.rst:362
msgid "These APIs can be used to work with surrogates:"
msgstr ""

#: ../Doc/c-api/unicode.rst:366
msgid "Check if *ch* is a surrogate (``0xD800 <= ch <= 0xDFFF``)."
msgstr ""

#: ../Doc/c-api/unicode.rst:370
msgid "Check if *ch* is a high surrogate (``0xD800 <= ch <= 0xDBFF``)."
msgstr ""

#: ../Doc/c-api/unicode.rst:374
msgid "Check if *ch* is a low surrogate (``0xDC00 <= ch <= 0xDFFF``)."
msgstr ""

#: ../Doc/c-api/unicode.rst:378
msgid ""
"Join two surrogate characters and return a single Py_UCS4 value. *high* and "
"*low* are respectively the leading and trailing surrogates in a surrogate "
"pair."
msgstr ""

#: ../Doc/c-api/unicode.rst:384
msgid "Creating and accessing Unicode strings"
msgstr ""

#: ../Doc/c-api/unicode.rst:386
msgid ""
"To create Unicode objects and access their basic sequence properties, use "
"these APIs:"
msgstr ""

#: ../Doc/c-api/unicode.rst:391
msgid ""
"Create a new Unicode object.  *maxchar* should be the true maximum code "
"point to be placed in the string.  As an approximation, it can be rounded up "
"to the nearest value in the sequence 127, 255, 65535, 1114111."
msgstr ""

#: ../Doc/c-api/unicode.rst:395
msgid ""
"This is the recommended way to allocate a new Unicode object.  Objects "
"created using this function are not resizable."
msgstr ""

#: ../Doc/c-api/unicode.rst:404
msgid ""
"Create a new Unicode object with the given *kind* (possible values are :c:"
"macro:`PyUnicode_1BYTE_KIND` etc., as returned by :c:func:"
"`PyUnicode_KIND`).  The *buffer* must point to an array of *size* units of "
"1, 2 or 4 bytes per character, as given by the kind."
msgstr ""

#: ../Doc/c-api/unicode.rst:414
msgid ""
"Create a Unicode object from the char buffer *u*.  The bytes will be "
"interpreted as being UTF-8 encoded.  The buffer is copied into the new "
"object. If the buffer is not ``NULL``, the return value might be a shared "
"object, i.e. modification of the data is not allowed."
msgstr ""

#: ../Doc/c-api/unicode.rst:419
msgid ""
"If *u* is ``NULL``, this function behaves like :c:func:"
"`PyUnicode_FromUnicode` with the buffer set to ``NULL``.  This usage is "
"deprecated in favor of :c:func:`PyUnicode_New`."
msgstr ""

#: ../Doc/c-api/unicode.rst:426
msgid ""
"Create a Unicode object from a UTF-8 encoded null-terminated char buffer *u*."
msgstr ""

#: ../Doc/c-api/unicode.rst:432
msgid ""
"Take a C :c:func:`printf`\\ -style *format* string and a variable number of "
"arguments, calculate the size of the resulting Python Unicode string and "
"return a string with the values formatted into it.  The variable arguments "
"must be C types and must correspond exactly to the format characters in the "
"*format* ASCII-encoded string. The following format characters are allowed:"
msgstr ""

#: ../Doc/c-api/unicode.rst:447
msgid "Format Characters"
msgstr "Caractères de format"

#: ../Doc/c-api/unicode.rst:447
msgid "Type"
msgstr "Type"

#: ../Doc/c-api/unicode.rst:447
#, fuzzy
msgid "Comment"
msgstr "Commentaires"

#: ../Doc/c-api/unicode.rst:449
msgid ":attr:`%%`"
msgstr ""

#: ../Doc/c-api/unicode.rst:449
msgid "*n/a*"
msgstr ""

#: ../Doc/c-api/unicode.rst:449
msgid "The literal % character."
msgstr ""

#: ../Doc/c-api/unicode.rst:451
msgid ":attr:`%c`"
msgstr ""

#: ../Doc/c-api/unicode.rst:451 ../Doc/c-api/unicode.rst:454
#: ../Doc/c-api/unicode.rst:487 ../Doc/c-api/unicode.rst:490
msgid "int"
msgstr "*int*"

#: ../Doc/c-api/unicode.rst:451
msgid "A single character, represented as a C int."
msgstr ""

#: ../Doc/c-api/unicode.rst:454
msgid ":attr:`%d`"
msgstr ""

#: ../Doc/c-api/unicode.rst:454
msgid "Equivalent to ``printf(\"%d\")``. [1]_"
msgstr ""

#: ../Doc/c-api/unicode.rst:457
msgid ":attr:`%u`"
msgstr ""

#: ../Doc/c-api/unicode.rst:457
msgid "unsigned int"
msgstr "``unsigned int``"

#: ../Doc/c-api/unicode.rst:457
msgid "Equivalent to ``printf(\"%u\")``. [1]_"
msgstr ""

#: ../Doc/c-api/unicode.rst:460
msgid ":attr:`%ld`"
msgstr ""

#: ../Doc/c-api/unicode.rst:460 ../Doc/c-api/unicode.rst:463
msgid "long"
msgstr ""

#: ../Doc/c-api/unicode.rst:460
msgid "Equivalent to ``printf(\"%ld\")``. [1]_"
msgstr ""

#: ../Doc/c-api/unicode.rst:463
msgid ":attr:`%li`"
msgstr ""

#: ../Doc/c-api/unicode.rst:463
msgid "Equivalent to ``printf(\"%li\")``. [1]_"
msgstr ""

#: ../Doc/c-api/unicode.rst:466
msgid ":attr:`%lu`"
msgstr ""

#: ../Doc/c-api/unicode.rst:466
msgid "unsigned long"
msgstr "``unsigned long``"

#: ../Doc/c-api/unicode.rst:466
msgid "Equivalent to ``printf(\"%lu\")``. [1]_"
msgstr ""

#: ../Doc/c-api/unicode.rst:469
msgid ":attr:`%lld`"
msgstr ""

#: ../Doc/c-api/unicode.rst:469 ../Doc/c-api/unicode.rst:472
msgid "long long"
msgstr ""

#: ../Doc/c-api/unicode.rst:469
msgid "Equivalent to ``printf(\"%lld\")``. [1]_"
msgstr ""

#: ../Doc/c-api/unicode.rst:472
msgid ":attr:`%lli`"
msgstr ""

#: ../Doc/c-api/unicode.rst:472
msgid "Equivalent to ``printf(\"%lli\")``. [1]_"
msgstr ""

#: ../Doc/c-api/unicode.rst:475
msgid ":attr:`%llu`"
msgstr ""

#: ../Doc/c-api/unicode.rst:475
msgid "unsigned long long"
msgstr "``unsigned long long``"

#: ../Doc/c-api/unicode.rst:475
msgid "Equivalent to ``printf(\"%llu\")``. [1]_"
msgstr ""

#: ../Doc/c-api/unicode.rst:478
msgid ":attr:`%zd`"
msgstr ""

#: ../Doc/c-api/unicode.rst:478 ../Doc/c-api/unicode.rst:481
msgid "Py_ssize_t"
msgstr ""

#: ../Doc/c-api/unicode.rst:478
msgid "Equivalent to ``printf(\"%zd\")``. [1]_"
msgstr ""

#: ../Doc/c-api/unicode.rst:481
msgid ":attr:`%zi`"
msgstr ""

#: ../Doc/c-api/unicode.rst:481
msgid "Equivalent to ``printf(\"%zi\")``. [1]_"
msgstr ""

#: ../Doc/c-api/unicode.rst:484
msgid ":attr:`%zu`"
msgstr ""

#: ../Doc/c-api/unicode.rst:484
msgid "size_t"
msgstr ""

#: ../Doc/c-api/unicode.rst:484
msgid "Equivalent to ``printf(\"%zu\")``. [1]_"
msgstr ""

#: ../Doc/c-api/unicode.rst:487
msgid ":attr:`%i`"
msgstr ""

#: ../Doc/c-api/unicode.rst:487
msgid "Equivalent to ``printf(\"%i\")``. [1]_"
msgstr ""

#: ../Doc/c-api/unicode.rst:490
msgid ":attr:`%x`"
msgstr ""

#: ../Doc/c-api/unicode.rst:490
msgid "Equivalent to ``printf(\"%x\")``. [1]_"
msgstr ""

#: ../Doc/c-api/unicode.rst:493
msgid ":attr:`%s`"
msgstr ""

#: ../Doc/c-api/unicode.rst:493
msgid "const char\\*"
msgstr ""

#: ../Doc/c-api/unicode.rst:493
msgid "A null-terminated C character array."
msgstr ""

#: ../Doc/c-api/unicode.rst:496
msgid ":attr:`%p`"
msgstr ""

#: ../Doc/c-api/unicode.rst:496
msgid "const void\\*"
msgstr ""

#: ../Doc/c-api/unicode.rst:496
msgid ""
"The hex representation of a C pointer. Mostly equivalent to ``printf(\"%p"
"\")`` except that it is guaranteed to start with the literal ``0x`` "
"regardless of what the platform's ``printf`` yields."
msgstr ""

#: ../Doc/c-api/unicode.rst:504
msgid ":attr:`%A`"
msgstr ""

#: ../Doc/c-api/unicode.rst:504 ../Doc/c-api/unicode.rst:507
#: ../Doc/c-api/unicode.rst:516 ../Doc/c-api/unicode.rst:519
msgid "PyObject\\*"
msgstr "PyObject\\*"

#: ../Doc/c-api/unicode.rst:504
msgid "The result of calling :func:`ascii`."
msgstr ""

#: ../Doc/c-api/unicode.rst:507
msgid ":attr:`%U`"
msgstr ""

#: ../Doc/c-api/unicode.rst:507
#, fuzzy
msgid "A Unicode object."
msgstr "Un objet Unicode."

#: ../Doc/c-api/unicode.rst:509
msgid ":attr:`%V`"
msgstr ""

#: ../Doc/c-api/unicode.rst:509
msgid "PyObject\\*, const char\\*"
msgstr ""

#: ../Doc/c-api/unicode.rst:509
msgid ""
"A Unicode object (which may be ``NULL``) and a null-terminated C character "
"array as a second parameter (which will be used, if the first parameter is "
"``NULL``)."
msgstr ""

#: ../Doc/c-api/unicode.rst:516
msgid ":attr:`%S`"
msgstr ""

#: ../Doc/c-api/unicode.rst:516
msgid "The result of calling :c:func:`PyObject_Str`."
msgstr ""

#: ../Doc/c-api/unicode.rst:519
msgid ":attr:`%R`"
msgstr ""

#: ../Doc/c-api/unicode.rst:519
msgid "The result of calling :c:func:`PyObject_Repr`."
msgstr ""

#: ../Doc/c-api/unicode.rst:523
msgid ""
"An unrecognized format character causes all the rest of the format string to "
"be copied as-is to the result string, and any extra arguments discarded."
msgstr ""

#: ../Doc/c-api/unicode.rst:527
msgid ""
"The width formatter unit is number of characters rather than bytes. The "
"precision formatter unit is number of bytes for ``\"%s\"`` and ``\"%V\"`` "
"(if the ``PyObject*`` argument is ``NULL``), and a number of characters for "
"``\"%A\"``, ``\"%U\"``, ``\"%S\"``, ``\"%R\"`` and ``\"%V\"`` (if the "
"``PyObject*`` argument is not ``NULL``)."
msgstr ""

#: ../Doc/c-api/unicode.rst:533
msgid ""
"For integer specifiers (d, u, ld, li, lu, lld, lli, llu, zd, zi, zu, i, x): "
"the 0-conversion flag has effect even when a precision is given."
msgstr ""

#: ../Doc/c-api/unicode.rst:536
msgid "Support for ``\"%lld\"`` and ``\"%llu\"`` added."
msgstr ""

#: ../Doc/c-api/unicode.rst:539
msgid "Support for ``\"%li\"``, ``\"%lli\"`` and ``\"%zi\"`` added."
msgstr ""

#: ../Doc/c-api/unicode.rst:542
msgid ""
"Support width and precision formatter for ``\"%s\"``, ``\"%A\"``, ``\"%U"
"\"``, ``\"%V\"``, ``\"%S\"``, ``\"%R\"`` added."
msgstr ""

#: ../Doc/c-api/unicode.rst:549
msgid ""
"Identical to :c:func:`PyUnicode_FromFormat` except that it takes exactly two "
"arguments."
msgstr ""

#: ../Doc/c-api/unicode.rst:556
msgid "Decode an encoded object *obj* to a Unicode object."
msgstr ""

#: ../Doc/c-api/unicode.rst:558
msgid ""
":class:`bytes`, :class:`bytearray` and other :term:`bytes-like objects "
"<bytes-like object>` are decoded according to the given *encoding* and using "
"the error handling defined by *errors*. Both can be ``NULL`` to have the "
"interface use the default values (see :ref:`builtincodecs` for details)."
msgstr ""

#: ../Doc/c-api/unicode.rst:564
msgid ""
"All other objects, including Unicode objects, cause a :exc:`TypeError` to be "
"set."
msgstr ""

#: ../Doc/c-api/unicode.rst:567
msgid ""
"The API returns ``NULL`` if there was an error.  The caller is responsible "
"for decref'ing the returned objects."
msgstr ""

#: ../Doc/c-api/unicode.rst:573
msgid "Return the length of the Unicode object, in code points."
msgstr ""

#: ../Doc/c-api/unicode.rst:584
msgid ""
"Copy characters from one Unicode object into another.  This function "
"performs character conversion when necessary and falls back to :c:func:"
"`memcpy` if possible.  Returns ``-1`` and sets an exception on error, "
"otherwise returns the number of copied characters."
msgstr ""

#: ../Doc/c-api/unicode.rst:595
msgid ""
"Fill a string with a character: write *fill_char* into ``unicode[start:start"
"+length]``."
msgstr ""

#: ../Doc/c-api/unicode.rst:598
msgid ""
"Fail if *fill_char* is bigger than the string maximum character, or if the "
"string has more than 1 reference."
msgstr ""

#: ../Doc/c-api/unicode.rst:601
msgid ""
"Return the number of written character, or return ``-1`` and raise an "
"exception on error."
msgstr ""

#: ../Doc/c-api/unicode.rst:610
msgid ""
"Write a character to a string.  The string must have been created through :c:"
"func:`PyUnicode_New`.  Since Unicode strings are supposed to be immutable, "
"the string must not be shared, or have been hashed yet."
msgstr ""

#: ../Doc/c-api/unicode.rst:614
msgid ""
"This function checks that *unicode* is a Unicode object, that the index is "
"not out of bounds, and that the object can be modified safely (i.e. that it "
"its reference count is one)."
msgstr ""

#: ../Doc/c-api/unicode.rst:623
msgid ""
"Read a character from a string.  This function checks that *unicode* is a "
"Unicode object and the index is not out of bounds, in contrast to the macro "
"version :c:func:`PyUnicode_READ_CHAR`."
msgstr ""

#: ../Doc/c-api/unicode.rst:633
msgid ""
"Return a substring of *str*, from character index *start* (included) to "
"character index *end* (excluded).  Negative indices are not supported."
msgstr ""

#: ../Doc/c-api/unicode.rst:642
msgid ""
"Copy the string *u* into a UCS4 buffer, including a null character, if "
"*copy_null* is set.  Returns ``NULL`` and sets an exception on error (in "
"particular, a :exc:`SystemError` if *buflen* is smaller than the length of "
"*u*).  *buffer* is returned on success."
msgstr ""

#: ../Doc/c-api/unicode.rst:652
msgid ""
"Copy the string *u* into a new UCS4 buffer that is allocated using :c:func:"
"`PyMem_Malloc`.  If this fails, ``NULL`` is returned with a :exc:"
"`MemoryError` set.  The returned buffer always has an extra null code point "
"appended."
msgstr ""

#: ../Doc/c-api/unicode.rst:661
msgid "Deprecated Py_UNICODE APIs"
msgstr ""

#: ../Doc/c-api/unicode.rst:665
msgid ""
"These API functions are deprecated with the implementation of :pep:`393`. "
"Extension modules can continue using them, as they will not be removed in "
"Python 3.x, but need to be aware that their use can now cause performance "
"and memory hits."
msgstr ""

#: ../Doc/c-api/unicode.rst:672
msgid ""
"Create a Unicode object from the Py_UNICODE buffer *u* of the given size. "
"*u* may be ``NULL`` which causes the contents to be undefined. It is the "
"user's responsibility to fill in the needed data.  The buffer is copied into "
"the new object."
msgstr ""

#: ../Doc/c-api/unicode.rst:677
msgid ""
"If the buffer is not ``NULL``, the return value might be a shared object. "
"Therefore, modification of the resulting Unicode object is only allowed when "
"*u* is ``NULL``."
msgstr ""

#: ../Doc/c-api/unicode.rst:681
msgid ""
"If the buffer is ``NULL``, :c:func:`PyUnicode_READY` must be called once the "
"string content has been filled before using any of the access macros such "
"as :c:func:`PyUnicode_KIND`."
msgstr ""

#: ../Doc/c-api/unicode.rst:685
msgid ""
"Please migrate to using :c:func:`PyUnicode_FromKindAndData`, :c:func:"
"`PyUnicode_FromWideChar` or :c:func:`PyUnicode_New`."
msgstr ""

#: ../Doc/c-api/unicode.rst:691
msgid ""
"Return a read-only pointer to the Unicode object's internal :c:type:"
"`Py_UNICODE` buffer, or ``NULL`` on error. This will create the :c:type:"
"`Py_UNICODE*` representation of the object if it is not yet available. The "
"buffer is always terminated with an extra null code point. Note that the "
"resulting :c:type:`Py_UNICODE` string may also contain embedded null code "
"points, which would cause the string to be truncated when used in most C "
"functions."
msgstr ""

#: ../Doc/c-api/unicode.rst:699
msgid ""
"Please migrate to using :c:func:`PyUnicode_AsUCS4`, :c:func:"
"`PyUnicode_AsWideChar`, :c:func:`PyUnicode_ReadChar` or similar new APIs."
msgstr ""

#: ../Doc/c-api/unicode.rst:706
msgid ""
"Create a Unicode object by replacing all decimal digits in :c:type:"
"`Py_UNICODE` buffer of the given *size* by ASCII digits 0--9 according to "
"their decimal value.  Return ``NULL`` if an exception occurs."
msgstr ""

#: ../Doc/c-api/unicode.rst:713
msgid ""
"Like :c:func:`PyUnicode_AsUnicode`, but also saves the :c:func:`Py_UNICODE` "
"array length (excluding the extra null terminator) in *size*. Note that the "
"resulting :c:type:`Py_UNICODE*` string may contain embedded null code "
"points, which would cause the string to be truncated when used in most C "
"functions."
msgstr ""

#: ../Doc/c-api/unicode.rst:724
msgid ""
"Create a copy of a Unicode string ending with a null code point. Return "
"``NULL`` and raise a :exc:`MemoryError` exception on memory allocation "
"failure, otherwise return a new allocated buffer (use :c:func:`PyMem_Free` "
"to free the buffer). Note that the resulting :c:type:`Py_UNICODE*` string "
"may contain embedded null code points, which would cause the string to be "
"truncated when used in most C functions."
msgstr ""

#: ../Doc/c-api/unicode.rst:733
msgid ""
"Please migrate to using :c:func:`PyUnicode_AsUCS4Copy` or similar new APIs."
msgstr ""

#: ../Doc/c-api/unicode.rst:738
msgid ""
"Return the size of the deprecated :c:type:`Py_UNICODE` representation, in "
"code units (this includes surrogate pairs as 2 units)."
msgstr ""

#: ../Doc/c-api/unicode.rst:741
msgid "Please migrate to using :c:func:`PyUnicode_GetLength`."
msgstr ""

#: ../Doc/c-api/unicode.rst:746
msgid ""
"Copy an instance of a Unicode subtype to a new true Unicode object if "
"necessary. If *obj* is already a true Unicode object (not a subtype), return "
"the reference with incremented refcount."
msgstr ""

#: ../Doc/c-api/unicode.rst:750
msgid ""
"Objects other than Unicode or its subtypes will cause a :exc:`TypeError`."
msgstr ""

#: ../Doc/c-api/unicode.rst:754
msgid "Locale Encoding"
msgstr ""

#: ../Doc/c-api/unicode.rst:756
msgid ""
"The current locale encoding can be used to decode text from the operating "
"system."
msgstr ""

#: ../Doc/c-api/unicode.rst:763
msgid ""
"Decode a string from UTF-8 on Android and VxWorks, or from the current "
"locale encoding on other platforms. The supported error handlers are ``"
"\"strict\"`` and ``\"surrogateescape\"`` (:pep:`383`). The decoder uses ``"
"\"strict\"`` error handler if *errors* is ``NULL``.  *str* must end with a "
"null character but cannot contain embedded null characters."
msgstr ""

#: ../Doc/c-api/unicode.rst:770
msgid ""
"Use :c:func:`PyUnicode_DecodeFSDefaultAndSize` to decode a string from :c:"
"data:`Py_FileSystemDefaultEncoding` (the locale encoding read at Python "
"startup)."
msgstr ""

#: ../Doc/c-api/unicode.rst:774 ../Doc/c-api/unicode.rst:810
msgid "This function ignores the Python UTF-8 mode."
msgstr ""

#: ../Doc/c-api/unicode.rst:778 ../Doc/c-api/unicode.rst:882
msgid "The :c:func:`Py_DecodeLocale` function."
msgstr ""

#: ../Doc/c-api/unicode.rst:782
msgid ""
"The function now also uses the current locale encoding for the "
"``surrogateescape`` error handler, except on Android. Previously, :c:func:"
"`Py_DecodeLocale` was used for the ``surrogateescape``, and the current "
"locale encoding was used for ``strict``."
msgstr ""

#: ../Doc/c-api/unicode.rst:791
msgid ""
"Similar to :c:func:`PyUnicode_DecodeLocaleAndSize`, but compute the string "
"length using :c:func:`strlen`."
msgstr ""

#: ../Doc/c-api/unicode.rst:799
msgid ""
"Encode a Unicode object to UTF-8 on Android and VxWorks, or to the current "
"locale encoding on other platforms. The supported error handlers are ``"
"\"strict\"`` and ``\"surrogateescape\"`` (:pep:`383`). The encoder uses ``"
"\"strict\"`` error handler if *errors* is ``NULL``. Return a :class:`bytes` "
"object. *unicode* cannot contain embedded null characters."
msgstr ""

#: ../Doc/c-api/unicode.rst:806
msgid ""
"Use :c:func:`PyUnicode_EncodeFSDefault` to encode a string to :c:data:"
"`Py_FileSystemDefaultEncoding` (the locale encoding read at Python startup)."
msgstr ""

#: ../Doc/c-api/unicode.rst:814 ../Doc/c-api/unicode.rst:918
msgid "The :c:func:`Py_EncodeLocale` function."
msgstr ""

#: ../Doc/c-api/unicode.rst:818
msgid ""
"The function now also uses the current locale encoding for the "
"``surrogateescape`` error handler, except on Android. Previously, :c:func:"
"`Py_EncodeLocale` was used for the ``surrogateescape``, and the current "
"locale encoding was used for ``strict``."
msgstr ""

#: ../Doc/c-api/unicode.rst:827
msgid "File System Encoding"
msgstr ""

#: ../Doc/c-api/unicode.rst:829
msgid ""
"To encode and decode file names and other environment strings, :c:data:"
"`Py_FileSystemDefaultEncoding` should be used as the encoding, and :c:data:"
"`Py_FileSystemDefaultEncodeErrors` should be used as the error handler (:pep:"
"`383` and :pep:`529`). To encode file names to :class:`bytes` during "
"argument parsing, the ``\"O&\"`` converter should be used, passing :c:func:"
"`PyUnicode_FSConverter` as the conversion function:"
msgstr ""

#: ../Doc/c-api/unicode.rst:838
msgid ""
"ParseTuple converter: encode :class:`str` objects -- obtained directly or "
"through the :class:`os.PathLike` interface -- to :class:`bytes` using :c:"
"func:`PyUnicode_EncodeFSDefault`; :class:`bytes` objects are output as-is. "
"*result* must be a :c:type:`PyBytesObject*` which must be released when it "
"is no longer used."
msgstr ""

#: ../Doc/c-api/unicode.rst:846 ../Doc/c-api/unicode.rst:863
msgid "Accepts a :term:`path-like object`."
msgstr "Accepte un :term:`path-like object`."

#: ../Doc/c-api/unicode.rst:849
msgid ""
"To decode file names to :class:`str` during argument parsing, the ``\"O&\"`` "
"converter should be used, passing :c:func:`PyUnicode_FSDecoder` as the "
"conversion function:"
msgstr ""

#: ../Doc/c-api/unicode.rst:855
msgid ""
"ParseTuple converter: decode :class:`bytes` objects -- obtained either "
"directly or indirectly through the :class:`os.PathLike` interface -- to :"
"class:`str` using :c:func:`PyUnicode_DecodeFSDefaultAndSize`; :class:`str` "
"objects are output as-is. *result* must be a :c:type:`PyUnicodeObject*` "
"which must be released when it is no longer used."
msgstr ""

#: ../Doc/c-api/unicode.rst:869
msgid ""
"Decode a string using :c:data:`Py_FileSystemDefaultEncoding` and the :c:data:"
"`Py_FileSystemDefaultEncodeErrors` error handler."
msgstr ""

#: ../Doc/c-api/unicode.rst:872 ../Doc/c-api/unicode.rst:893
#: ../Doc/c-api/unicode.rst:909
msgid ""
"If :c:data:`Py_FileSystemDefaultEncoding` is not set, fall back to the "
"locale encoding."
msgstr ""

#: ../Doc/c-api/unicode.rst:875
msgid ""
":c:data:`Py_FileSystemDefaultEncoding` is initialized at startup from the "
"locale encoding and cannot be modified later. If you need to decode a string "
"from the current locale encoding, use :c:func:"
"`PyUnicode_DecodeLocaleAndSize`."
msgstr ""

#: ../Doc/c-api/unicode.rst:884 ../Doc/c-api/unicode.rst:898
#: ../Doc/c-api/unicode.rst:922
msgid "Use :c:data:`Py_FileSystemDefaultEncodeErrors` error handler."
msgstr ""

#: ../Doc/c-api/unicode.rst:890
msgid ""
"Decode a null-terminated string using :c:data:`Py_FileSystemDefaultEncoding` "
"and the :c:data:`Py_FileSystemDefaultEncodeErrors` error handler."
msgstr ""

#: ../Doc/c-api/unicode.rst:896
msgid ""
"Use :c:func:`PyUnicode_DecodeFSDefaultAndSize` if you know the string length."
msgstr ""

#: ../Doc/c-api/unicode.rst:904
msgid ""
"Encode a Unicode object to :c:data:`Py_FileSystemDefaultEncoding` with the :"
"c:data:`Py_FileSystemDefaultEncodeErrors` error handler, and return :class:"
"`bytes`. Note that the resulting :class:`bytes` object may contain null "
"bytes."
msgstr ""

#: ../Doc/c-api/unicode.rst:912
msgid ""
":c:data:`Py_FileSystemDefaultEncoding` is initialized at startup from the "
"locale encoding and cannot be modified later. If you need to encode a string "
"to the current locale encoding, use :c:func:`PyUnicode_EncodeLocale`."
msgstr ""

#: ../Doc/c-api/unicode.rst:926
msgid "wchar_t Support"
msgstr ""

#: ../Doc/c-api/unicode.rst:928
msgid ":c:type:`wchar_t` support for platforms which support it:"
msgstr ""

#: ../Doc/c-api/unicode.rst:932
msgid ""
"Create a Unicode object from the :c:type:`wchar_t` buffer *w* of the given "
"*size*. Passing ``-1`` as the *size* indicates that the function must itself "
"compute the length, using wcslen. Return ``NULL`` on failure."
msgstr ""

#: ../Doc/c-api/unicode.rst:940
msgid ""
"Copy the Unicode object contents into the :c:type:`wchar_t` buffer *w*.  At "
"most *size* :c:type:`wchar_t` characters are copied (excluding a possibly "
"trailing null termination character).  Return the number of :c:type:"
"`wchar_t` characters copied or ``-1`` in case of an error.  Note that the "
"resulting :c:type:`wchar_t*` string may or may not be null-terminated.  It "
"is the responsibility of the caller to make sure that the :c:type:`wchar_t*` "
"string is null-terminated in case this is required by the application. Also, "
"note that the :c:type:`wchar_t*` string might contain null characters, which "
"would cause the string to be truncated when used with most C functions."
msgstr ""

#: ../Doc/c-api/unicode.rst:953
msgid ""
"Convert the Unicode object to a wide character string. The output string "
"always ends with a null character. If *size* is not ``NULL``, write the "
"number of wide characters (excluding the trailing null termination "
"character) into *\\*size*. Note that the resulting :c:type:`wchar_t` string "
"might contain null characters, which would cause the string to be truncated "
"when used with most C functions. If *size* is ``NULL`` and the :c:type:"
"`wchar_t*` string contains null characters a :exc:`ValueError` is raised."
msgstr ""

#: ../Doc/c-api/unicode.rst:961
msgid ""
"Returns a buffer allocated by :c:func:`PyMem_Alloc` (use :c:func:"
"`PyMem_Free` to free it) on success. On error, returns ``NULL`` and *"
"\\*size* is undefined. Raises a :exc:`MemoryError` if memory allocation is "
"failed."
msgstr ""

#: ../Doc/c-api/unicode.rst:968
msgid ""
"Raises a :exc:`ValueError` if *size* is ``NULL`` and the :c:type:`wchar_t*` "
"string contains null characters."
msgstr ""

#: ../Doc/c-api/unicode.rst:976
msgid "Built-in Codecs"
msgstr ""

#: ../Doc/c-api/unicode.rst:978
msgid ""
"Python provides a set of built-in codecs which are written in C for speed. "
"All of these codecs are directly usable via the following functions."
msgstr ""

#: ../Doc/c-api/unicode.rst:981
msgid ""
"Many of the following APIs take two arguments encoding and errors, and they "
"have the same semantics as the ones of the built-in :func:`str` string "
"object constructor."
msgstr ""

#: ../Doc/c-api/unicode.rst:985
msgid ""
"Setting encoding to ``NULL`` causes the default encoding to be used which is "
"ASCII.  The file system calls should use :c:func:`PyUnicode_FSConverter` for "
"encoding file names. This uses the variable :c:data:"
"`Py_FileSystemDefaultEncoding` internally. This variable should be treated "
"as read-only: on some systems, it will be a pointer to a static string, on "
"others, it will change at run-time (such as when the application invokes "
"setlocale)."
msgstr ""

#: ../Doc/c-api/unicode.rst:993
msgid ""
"Error handling is set by errors which may also be set to ``NULL`` meaning to "
"use the default handling defined for the codec.  Default error handling for "
"all built-in codecs is \"strict\" (:exc:`ValueError` is raised)."
msgstr ""

#: ../Doc/c-api/unicode.rst:997
msgid ""
"The codecs all use a similar interface.  Only deviation from the following "
"generic ones are documented for simplicity."
msgstr ""

#: ../Doc/c-api/unicode.rst:1002
msgid "Generic Codecs"
msgstr ""

#: ../Doc/c-api/unicode.rst:1004
msgid "These are the generic codec APIs:"
msgstr ""

#: ../Doc/c-api/unicode.rst:1010
msgid ""
"Create a Unicode object by decoding *size* bytes of the encoded string *s*. "
"*encoding* and *errors* have the same meaning as the parameters of the same "
"name in the :func:`str` built-in function.  The codec to be used is looked "
"up using the Python codec registry.  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: ../Doc/c-api/unicode.rst:1020
msgid ""
"Encode a Unicode object and return the result as Python bytes object. "
"*encoding* and *errors* have the same meaning as the parameters of the same "
"name in the Unicode :meth:`~str.encode` method. The codec to be used is "
"looked up using the Python codec registry. Return ``NULL`` if an exception "
"was raised by the codec."
msgstr ""

#: ../Doc/c-api/unicode.rst:1030
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer *s* of the given *size* and return a "
"Python bytes object.  *encoding* and *errors* have the same meaning as the "
"parameters of the same name in the Unicode :meth:`~str.encode` method.  The "
"codec to be used is looked up using the Python codec registry.  Return "
"``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../Doc/c-api/unicode.rst:1038 ../Doc/c-api/unicode.rst:1295
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using :c:"
"func:`PyUnicode_AsEncodedString`."
msgstr ""

#: ../Doc/c-api/unicode.rst:1042
msgid "UTF-8 Codecs"
msgstr ""

#: ../Doc/c-api/unicode.rst:1044
msgid "These are the UTF-8 codec APIs:"
msgstr ""

#: ../Doc/c-api/unicode.rst:1049
msgid ""
"Create a Unicode object by decoding *size* bytes of the UTF-8 encoded string "
"*s*. Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../Doc/c-api/unicode.rst:1056
msgid ""
"If *consumed* is ``NULL``, behave like :c:func:`PyUnicode_DecodeUTF8`. If "
"*consumed* is not ``NULL``, trailing incomplete UTF-8 byte sequences will "
"not be treated as an error. Those bytes will not be decoded and the number "
"of bytes that have been decoded will be stored in *consumed*."
msgstr ""

#: ../Doc/c-api/unicode.rst:1064
msgid ""
"Encode a Unicode object using UTF-8 and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: ../Doc/c-api/unicode.rst:1071
msgid ""
"Return a pointer to the UTF-8 encoding of the Unicode object, and store the "
"size of the encoded representation (in bytes) in *size*.  The *size* "
"argument can be ``NULL``; in this case no size will be stored.  The returned "
"buffer always has an extra null byte appended (not included in *size*), "
"regardless of whether there are any other null code points."
msgstr ""

#: ../Doc/c-api/unicode.rst:1077
msgid ""
"In the case of an error, ``NULL`` is returned with an exception set and no "
"*size* is stored."
msgstr ""

#: ../Doc/c-api/unicode.rst:1080
msgid ""
"This caches the UTF-8 representation of the string in the Unicode object, "
"and subsequent calls will return a pointer to the same buffer.  The caller "
"is not responsible for deallocating the buffer."
msgstr ""

#: ../Doc/c-api/unicode.rst:1086 ../Doc/c-api/unicode.rst:1096
msgid "The return type is now ``const char *`` rather of ``char *``."
msgstr ""

#: ../Doc/c-api/unicode.rst:1092
msgid "As :c:func:`PyUnicode_AsUTF8AndSize`, but does not store the size."
msgstr ""

#: ../Doc/c-api/unicode.rst:1102
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer *s* of the given *size* using UTF-8 "
"and return a Python bytes object.  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: ../Doc/c-api/unicode.rst:1109
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using :c:"
"func:`PyUnicode_AsUTF8String`, :c:func:`PyUnicode_AsUTF8AndSize` or :c:func:"
"`PyUnicode_AsEncodedString`."
msgstr ""

#: ../Doc/c-api/unicode.rst:1113
msgid "UTF-32 Codecs"
msgstr ""

#: ../Doc/c-api/unicode.rst:1115
msgid "These are the UTF-32 codec APIs:"
msgstr ""

#: ../Doc/c-api/unicode.rst:1121
msgid ""
"Decode *size* bytes from a UTF-32 encoded buffer string and return the "
"corresponding Unicode object.  *errors* (if non-``NULL``) defines the error "
"handling. It defaults to \"strict\"."
msgstr ""

#: ../Doc/c-api/unicode.rst:1125 ../Doc/c-api/unicode.rst:1198
msgid ""
"If *byteorder* is non-``NULL``, the decoder starts decoding using the given "
"byte order::"
msgstr ""

#: ../Doc/c-api/unicode.rst:1132
msgid ""
"If ``*byteorder`` is zero, and the first four bytes of the input data are a "
"byte order mark (BOM), the decoder switches to this byte order and the BOM "
"is not copied into the resulting Unicode string.  If ``*byteorder`` is "
"``-1`` or ``1``, any byte order mark is copied to the output."
msgstr ""

#: ../Doc/c-api/unicode.rst:1137 ../Doc/c-api/unicode.rst:1211
msgid ""
"After completion, *\\*byteorder* is set to the current byte order at the end "
"of input data."
msgstr ""

#: ../Doc/c-api/unicode.rst:1140 ../Doc/c-api/unicode.rst:1214
msgid "If *byteorder* is ``NULL``, the codec starts in native order mode."
msgstr ""

#: ../Doc/c-api/unicode.rst:1142 ../Doc/c-api/unicode.rst:1178
#: ../Doc/c-api/unicode.rst:1216 ../Doc/c-api/unicode.rst:1253
msgid "Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../Doc/c-api/unicode.rst:1148
msgid ""
"If *consumed* is ``NULL``, behave like :c:func:`PyUnicode_DecodeUTF32`. If "
"*consumed* is not ``NULL``, :c:func:`PyUnicode_DecodeUTF32Stateful` will not "
"treat trailing incomplete UTF-32 byte sequences (such as a number of bytes "
"not divisible by four) as an error. Those bytes will not be decoded and the "
"number of bytes that have been decoded will be stored in *consumed*."
msgstr ""

#: ../Doc/c-api/unicode.rst:1157
msgid ""
"Return a Python byte string using the UTF-32 encoding in native byte order. "
"The string always starts with a BOM mark.  Error handling is \"strict\". "
"Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../Doc/c-api/unicode.rst:1165
msgid ""
"Return a Python bytes object holding the UTF-32 encoded value of the Unicode "
"data in *s*.  Output is written according to the following byte order::"
msgstr ""

#: ../Doc/c-api/unicode.rst:1172 ../Doc/c-api/unicode.rst:1246
msgid ""
"If byteorder is ``0``, the output string will always start with the Unicode "
"BOM mark (U+FEFF). In the other two modes, no BOM mark is prepended."
msgstr ""

#: ../Doc/c-api/unicode.rst:1175
msgid ""
"If ``Py_UNICODE_WIDE`` is not defined, surrogate pairs will be output as a "
"single code point."
msgstr ""

#: ../Doc/c-api/unicode.rst:1182
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using :c:"
"func:`PyUnicode_AsUTF32String` or :c:func:`PyUnicode_AsEncodedString`."
msgstr ""

#: ../Doc/c-api/unicode.rst:1186
msgid "UTF-16 Codecs"
msgstr ""

#: ../Doc/c-api/unicode.rst:1188
msgid "These are the UTF-16 codec APIs:"
msgstr ""

#: ../Doc/c-api/unicode.rst:1194
msgid ""
"Decode *size* bytes from a UTF-16 encoded buffer string and return the "
"corresponding Unicode object.  *errors* (if non-``NULL``) defines the error "
"handling. It defaults to \"strict\"."
msgstr ""

#: ../Doc/c-api/unicode.rst:1205
msgid ""
"If ``*byteorder`` is zero, and the first two bytes of the input data are a "
"byte order mark (BOM), the decoder switches to this byte order and the BOM "
"is not copied into the resulting Unicode string.  If ``*byteorder`` is "
"``-1`` or ``1``, any byte order mark is copied to the output (where it will "
"result in either a ``\\ufeff`` or a ``\\ufffe`` character)."
msgstr ""

#: ../Doc/c-api/unicode.rst:1222
msgid ""
"If *consumed* is ``NULL``, behave like :c:func:`PyUnicode_DecodeUTF16`. If "
"*consumed* is not ``NULL``, :c:func:`PyUnicode_DecodeUTF16Stateful` will not "
"treat trailing incomplete UTF-16 byte sequences (such as an odd number of "
"bytes or a split surrogate pair) as an error. Those bytes will not be "
"decoded and the number of bytes that have been decoded will be stored in "
"*consumed*."
msgstr ""

#: ../Doc/c-api/unicode.rst:1231
msgid ""
"Return a Python byte string using the UTF-16 encoding in native byte order. "
"The string always starts with a BOM mark.  Error handling is \"strict\". "
"Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../Doc/c-api/unicode.rst:1239
msgid ""
"Return a Python bytes object holding the UTF-16 encoded value of the Unicode "
"data in *s*.  Output is written according to the following byte order::"
msgstr ""

#: ../Doc/c-api/unicode.rst:1249
msgid ""
"If ``Py_UNICODE_WIDE`` is defined, a single :c:type:`Py_UNICODE` value may "
"get represented as a surrogate pair. If it is not defined, each :c:type:"
"`Py_UNICODE` values is interpreted as a UCS-2 character."
msgstr ""

#: ../Doc/c-api/unicode.rst:1257
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using :c:"
"func:`PyUnicode_AsUTF16String` or :c:func:`PyUnicode_AsEncodedString`."
msgstr ""

#: ../Doc/c-api/unicode.rst:1261
msgid "UTF-7 Codecs"
msgstr ""

#: ../Doc/c-api/unicode.rst:1263
msgid "These are the UTF-7 codec APIs:"
msgstr ""

#: ../Doc/c-api/unicode.rst:1268
msgid ""
"Create a Unicode object by decoding *size* bytes of the UTF-7 encoded string "
"*s*.  Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../Doc/c-api/unicode.rst:1275
msgid ""
"If *consumed* is ``NULL``, behave like :c:func:`PyUnicode_DecodeUTF7`.  If "
"*consumed* is not ``NULL``, trailing incomplete UTF-7 base-64 sections will "
"not be treated as an error.  Those bytes will not be decoded and the number "
"of bytes that have been decoded will be stored in *consumed*."
msgstr ""

#: ../Doc/c-api/unicode.rst:1284
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given size using UTF-7 and "
"return a Python bytes object.  Return ``NULL`` if an exception was raised by "
"the codec."
msgstr ""

#: ../Doc/c-api/unicode.rst:1288
msgid ""
"If *base64SetO* is nonzero, \"Set O\" (punctuation that has no otherwise "
"special meaning) will be encoded in base-64.  If *base64WhiteSpace* is "
"nonzero, whitespace will be encoded in base-64.  Both are set to zero for "
"the Python \"utf-7\" codec."
msgstr ""

#: ../Doc/c-api/unicode.rst:1299
msgid "Unicode-Escape Codecs"
msgstr ""

#: ../Doc/c-api/unicode.rst:1301
msgid "These are the \"Unicode Escape\" codec APIs:"
msgstr ""

#: ../Doc/c-api/unicode.rst:1307
msgid ""
"Create a Unicode object by decoding *size* bytes of the Unicode-Escape "
"encoded string *s*.  Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../Doc/c-api/unicode.rst:1313
msgid ""
"Encode a Unicode object using Unicode-Escape and return the result as a "
"bytes object.  Error handling is \"strict\".  Return ``NULL`` if an "
"exception was raised by the codec."
msgstr ""

#: ../Doc/c-api/unicode.rst:1320
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using Unicode-"
"Escape and return a bytes object.  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: ../Doc/c-api/unicode.rst:1325
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using :c:"
"func:`PyUnicode_AsUnicodeEscapeString`."
msgstr ""

#: ../Doc/c-api/unicode.rst:1329
msgid "Raw-Unicode-Escape Codecs"
msgstr ""

#: ../Doc/c-api/unicode.rst:1331
msgid "These are the \"Raw Unicode Escape\" codec APIs:"
msgstr ""

#: ../Doc/c-api/unicode.rst:1337
msgid ""
"Create a Unicode object by decoding *size* bytes of the Raw-Unicode-Escape "
"encoded string *s*.  Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../Doc/c-api/unicode.rst:1343
msgid ""
"Encode a Unicode object using Raw-Unicode-Escape and return the result as a "
"bytes object.  Error handling is \"strict\".  Return ``NULL`` if an "
"exception was raised by the codec."
msgstr ""

#: ../Doc/c-api/unicode.rst:1351
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using Raw-Unicode-"
"Escape and return a bytes object.  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: ../Doc/c-api/unicode.rst:1357
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using :c:"
"func:`PyUnicode_AsRawUnicodeEscapeString` or :c:func:"
"`PyUnicode_AsEncodedString`."
msgstr ""

#: ../Doc/c-api/unicode.rst:1361
msgid "Latin-1 Codecs"
msgstr ""

#: ../Doc/c-api/unicode.rst:1363
msgid ""
"These are the Latin-1 codec APIs: Latin-1 corresponds to the first 256 "
"Unicode ordinals and only these are accepted by the codecs during encoding."
msgstr ""

#: ../Doc/c-api/unicode.rst:1369
msgid ""
"Create a Unicode object by decoding *size* bytes of the Latin-1 encoded "
"string *s*.  Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../Doc/c-api/unicode.rst:1375
msgid ""
"Encode a Unicode object using Latin-1 and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: ../Doc/c-api/unicode.rst:1382
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using Latin-1 and "
"return a Python bytes object.  Return ``NULL`` if an exception was raised by "
"the codec."
msgstr ""

#: ../Doc/c-api/unicode.rst:1389
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using :c:"
"func:`PyUnicode_AsLatin1String` or :c:func:`PyUnicode_AsEncodedString`."
msgstr ""

#: ../Doc/c-api/unicode.rst:1393
msgid "ASCII Codecs"
msgstr ""

#: ../Doc/c-api/unicode.rst:1395
msgid ""
"These are the ASCII codec APIs.  Only 7-bit ASCII data is accepted. All "
"other codes generate errors."
msgstr ""

#: ../Doc/c-api/unicode.rst:1401
msgid ""
"Create a Unicode object by decoding *size* bytes of the ASCII encoded string "
"*s*.  Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../Doc/c-api/unicode.rst:1407
msgid ""
"Encode a Unicode object using ASCII and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: ../Doc/c-api/unicode.rst:1414
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using ASCII and "
"return a Python bytes object.  Return ``NULL`` if an exception was raised by "
"the codec."
msgstr ""

#: ../Doc/c-api/unicode.rst:1421
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using :c:"
"func:`PyUnicode_AsASCIIString` or :c:func:`PyUnicode_AsEncodedString`."
msgstr ""

#: ../Doc/c-api/unicode.rst:1425
msgid "Character Map Codecs"
msgstr ""

#: ../Doc/c-api/unicode.rst:1427
msgid ""
"This codec is special in that it can be used to implement many different "
"codecs (and this is in fact what was done to obtain most of the standard "
"codecs included in the :mod:`encodings` package). The codec uses mapping to "
"encode and decode characters.  The mapping objects provided must support "
"the :meth:`__getitem__` mapping interface; dictionaries and sequences work "
"well."
msgstr ""

#: ../Doc/c-api/unicode.rst:1433
msgid "These are the mapping codec APIs:"
msgstr ""

#: ../Doc/c-api/unicode.rst:1438
msgid ""
"Create a Unicode object by decoding *size* bytes of the encoded string *s* "
"using the given *mapping* object.  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: ../Doc/c-api/unicode.rst:1442
msgid ""
"If *mapping* is ``NULL``, Latin-1 decoding will be applied.  Else *mapping* "
"must map bytes ordinals (integers in the range from 0 to 255) to Unicode "
"strings, integers (which are then interpreted as Unicode ordinals) or "
"``None``.  Unmapped data bytes -- ones which cause a :exc:`LookupError`, as "
"well as ones which get mapped to ``None``, ``0xFFFE`` or ``'\\ufffe'``, are "
"treated as undefined mappings and cause an error."
msgstr ""

#: ../Doc/c-api/unicode.rst:1453
msgid ""
"Encode a Unicode object using the given *mapping* object and return the "
"result as a bytes object.  Error handling is \"strict\".  Return ``NULL`` if "
"an exception was raised by the codec."
msgstr ""

#: ../Doc/c-api/unicode.rst:1457
msgid ""
"The *mapping* object must map Unicode ordinal integers to bytes objects, "
"integers in the range from 0 to 255 or ``None``.  Unmapped character "
"ordinals (ones which cause a :exc:`LookupError`) as well as mapped to "
"``None`` are treated as \"undefined mapping\" and cause an error."
msgstr ""

#: ../Doc/c-api/unicode.rst:1466
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using the given "
"*mapping* object and return the result as a bytes object.  Return ``NULL`` "
"if an exception was raised by the codec."
msgstr ""

#: ../Doc/c-api/unicode.rst:1473
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using :c:"
"func:`PyUnicode_AsCharmapString` or :c:func:`PyUnicode_AsEncodedString`."
msgstr ""

#: ../Doc/c-api/unicode.rst:1476
msgid "The following codec API is special in that maps Unicode to Unicode."
msgstr ""

#: ../Doc/c-api/unicode.rst:1481
msgid ""
"Translate a Unicode object using the given *mapping* object and return the "
"resulting Unicode object.  Return ``NULL`` if an exception was raised by the "
"codec."
msgstr ""

#: ../Doc/c-api/unicode.rst:1485
msgid ""
"The *mapping* object must map Unicode ordinal integers to Unicode strings, "
"integers (which are then interpreted as Unicode ordinals) or ``None`` "
"(causing deletion of the character).  Unmapped character ordinals (ones "
"which cause a :exc:`LookupError`) are left untouched and are copied as-is."
msgstr ""

#: ../Doc/c-api/unicode.rst:1494
msgid ""
"Translate a :c:type:`Py_UNICODE` buffer of the given *size* by applying a "
"character *mapping* table to it and return the resulting Unicode object. "
"Return ``NULL`` when an exception was raised by the codec."
msgstr ""

#: ../Doc/c-api/unicode.rst:1501
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using :c:"
"func:`PyUnicode_Translate`. or :ref:`generic codec based API <codec-"
"registry>`"
msgstr ""

#: ../Doc/c-api/unicode.rst:1505
msgid "MBCS codecs for Windows"
msgstr ""

#: ../Doc/c-api/unicode.rst:1507
msgid ""
"These are the MBCS codec APIs. They are currently only available on Windows "
"and use the Win32 MBCS converters to implement the conversions.  Note that "
"MBCS (or DBCS) is a class of encodings, not just one.  The target encoding "
"is defined by the user settings on the machine running the codec."
msgstr ""

#: ../Doc/c-api/unicode.rst:1514
msgid ""
"Create a Unicode object by decoding *size* bytes of the MBCS encoded string "
"*s*. Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../Doc/c-api/unicode.rst:1521
msgid ""
"If *consumed* is ``NULL``, behave like :c:func:`PyUnicode_DecodeMBCS`. If "
"*consumed* is not ``NULL``, :c:func:`PyUnicode_DecodeMBCSStateful` will not "
"decode trailing lead byte and the number of bytes that have been decoded "
"will be stored in *consumed*."
msgstr ""

#: ../Doc/c-api/unicode.rst:1529
msgid ""
"Encode a Unicode object using MBCS and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: ../Doc/c-api/unicode.rst:1536
msgid ""
"Encode the Unicode object using the specified code page and return a Python "
"bytes object.  Return ``NULL`` if an exception was raised by the codec. Use :"
"c:data:`CP_ACP` code page to get the MBCS encoder."
msgstr ""

#: ../Doc/c-api/unicode.rst:1545
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using MBCS and "
"return a Python bytes object.  Return ``NULL`` if an exception was raised by "
"the codec."
msgstr ""

#: ../Doc/c-api/unicode.rst:1552
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using :c:"
"func:`PyUnicode_AsMBCSString`, :c:func:`PyUnicode_EncodeCodePage` or :c:func:"
"`PyUnicode_AsEncodedString`."
msgstr ""

#: ../Doc/c-api/unicode.rst:1556
msgid "Methods & Slots"
msgstr ""

#: ../Doc/c-api/unicode.rst:1562
msgid "Methods and Slot Functions"
msgstr ""

#: ../Doc/c-api/unicode.rst:1564
msgid ""
"The following APIs are capable of handling Unicode objects and strings on "
"input (we refer to them as strings in the descriptions) and return Unicode "
"objects or integers as appropriate."
msgstr ""

#: ../Doc/c-api/unicode.rst:1568
msgid "They all return ``NULL`` or ``-1`` if an exception occurs."
msgstr ""

#: ../Doc/c-api/unicode.rst:1573
msgid "Concat two strings giving a new Unicode string."
msgstr ""

#: ../Doc/c-api/unicode.rst:1578
msgid ""
"Split a string giving a list of Unicode strings.  If *sep* is ``NULL``, "
"splitting will be done at all whitespace substrings.  Otherwise, splits "
"occur at the given separator.  At most *maxsplit* splits will be done.  If "
"negative, no limit is set.  Separators are not included in the resulting "
"list."
msgstr ""

#: ../Doc/c-api/unicode.rst:1586
msgid ""
"Split a Unicode string at line breaks, returning a list of Unicode strings. "
"CRLF is considered to be one line break.  If *keepend* is ``0``, the Line "
"break characters are not included in the resulting strings."
msgstr ""

#: ../Doc/c-api/unicode.rst:1594
msgid ""
"Translate a string by applying a character mapping table to it and return "
"the resulting Unicode object."
msgstr ""

#: ../Doc/c-api/unicode.rst:1597
msgid ""
"The mapping table must map Unicode ordinal integers to Unicode ordinal "
"integers or ``None`` (causing deletion of the character)."
msgstr ""

#: ../Doc/c-api/unicode.rst:1600
msgid ""
"Mapping tables need only provide the :meth:`__getitem__` interface; "
"dictionaries and sequences work well.  Unmapped character ordinals (ones "
"which cause a :exc:`LookupError`) are left untouched and are copied as-is."
msgstr ""

#: ../Doc/c-api/unicode.rst:1604
msgid ""
"*errors* has the usual meaning for codecs. It may be ``NULL`` which "
"indicates to use the default error handling."
msgstr ""

#: ../Doc/c-api/unicode.rst:1610
msgid ""
"Join a sequence of strings using the given *separator* and return the "
"resulting Unicode string."
msgstr ""

#: ../Doc/c-api/unicode.rst:1617
msgid ""
"Return ``1`` if *substr* matches ``str[start:end]`` at the given tail end "
"(*direction* == ``-1`` means to do a prefix match, *direction* == ``1`` a "
"suffix match), ``0`` otherwise. Return ``-1`` if an error occurred."
msgstr ""

#: ../Doc/c-api/unicode.rst:1625
msgid ""
"Return the first position of *substr* in ``str[start:end]`` using the given "
"*direction* (*direction* == ``1`` means to do a forward search, *direction* "
"== ``-1`` a backward search).  The return value is the index of the first "
"match; a value of ``-1`` indicates that no match was found, and ``-2`` "
"indicates that an error occurred and an exception has been set."
msgstr ""

#: ../Doc/c-api/unicode.rst:1635
msgid ""
"Return the first position of the character *ch* in ``str[start:end]`` using "
"the given *direction* (*direction* == ``1`` means to do a forward search, "
"*direction* == ``-1`` a backward search).  The return value is the index of "
"the first match; a value of ``-1`` indicates that no match was found, and "
"``-2`` indicates that an error occurred and an exception has been set."
msgstr ""

#: ../Doc/c-api/unicode.rst:1643
msgid "*start* and *end* are now adjusted to behave like ``str[start:end]``."
msgstr ""

#: ../Doc/c-api/unicode.rst:1650
msgid ""
"Return the number of non-overlapping occurrences of *substr* in ``str[start:"
"end]``.  Return ``-1`` if an error occurred."
msgstr ""

#: ../Doc/c-api/unicode.rst:1657
msgid ""
"Replace at most *maxcount* occurrences of *substr* in *str* with *replstr* "
"and return the resulting Unicode object. *maxcount* == ``-1`` means replace "
"all occurrences."
msgstr ""

#: ../Doc/c-api/unicode.rst:1664
msgid ""
"Compare two strings and return ``-1``, ``0``, ``1`` for less than, equal, "
"and greater than, respectively."
msgstr ""

#: ../Doc/c-api/unicode.rst:1667
msgid ""
"This function returns ``-1`` upon failure, so one should call :c:func:"
"`PyErr_Occurred` to check for errors."
msgstr ""

#: ../Doc/c-api/unicode.rst:1673
msgid ""
"Compare a Unicode object, *uni*, with *string* and return ``-1``, ``0``, "
"``1`` for less than, equal, and greater than, respectively. It is best to "
"pass only ASCII-encoded strings, but the function interprets the input "
"string as ISO-8859-1 if it contains non-ASCII characters."
msgstr ""

#: ../Doc/c-api/unicode.rst:1678
msgid "This function does not raise exceptions."
msgstr ""

#: ../Doc/c-api/unicode.rst:1683
msgid "Rich compare two Unicode strings and return one of the following:"
msgstr ""

#: ../Doc/c-api/unicode.rst:1685
msgid "``NULL`` in case an exception was raised"
msgstr ""

#: ../Doc/c-api/unicode.rst:1686
msgid ":const:`Py_True` or :const:`Py_False` for successful comparisons"
msgstr ""

#: ../Doc/c-api/unicode.rst:1687
msgid ":const:`Py_NotImplemented` in case the type combination is unknown"
msgstr ""

#: ../Doc/c-api/unicode.rst:1689
msgid ""
"Possible values for *op* are :const:`Py_GT`, :const:`Py_GE`, :const:"
"`Py_EQ`, :const:`Py_NE`, :const:`Py_LT`, and :const:`Py_LE`."
msgstr ""

#: ../Doc/c-api/unicode.rst:1695
msgid ""
"Return a new string object from *format* and *args*; this is analogous to "
"``format % args``."
msgstr ""

#: ../Doc/c-api/unicode.rst:1701
msgid ""
"Check whether *element* is contained in *container* and return true or false "
"accordingly."
msgstr ""

#: ../Doc/c-api/unicode.rst:1704
msgid ""
"*element* has to coerce to a one element Unicode string. ``-1`` is returned "
"if there was an error."
msgstr ""

#: ../Doc/c-api/unicode.rst:1710
msgid ""
"Intern the argument *\\*string* in place.  The argument must be the address "
"of a pointer variable pointing to a Python Unicode string object.  If there "
"is an existing interned string that is the same as *\\*string*, it sets *"
"\\*string* to it (decrementing the reference count of the old string object "
"and incrementing the reference count of the interned string object), "
"otherwise it leaves *\\*string* alone and interns it (incrementing its "
"reference count). (Clarification: even though there is a lot of talk about "
"reference counts, think of this function as reference-count-neutral; you own "
"the object after the call if and only if you owned it before the call.)"
msgstr ""

#: ../Doc/c-api/unicode.rst:1723
msgid ""
"A combination of :c:func:`PyUnicode_FromString` and :c:func:"
"`PyUnicode_InternInPlace`, returning either a new Unicode string object that "
"has been interned, or a new (\"owned\") reference to an earlier interned "
"string object with the same value."
msgstr ""
