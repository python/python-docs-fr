# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-29 22:40+0100\n"
"PO-Revision-Date: 2023-02-20 12:47+0100\n"
"Last-Translator: Victor Stinner <vstinner@python.org>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: c-api/unicode.rst:6
msgid "Unicode Objects and Codecs"
msgstr "Objets Unicode et Codecs"

#: c-api/unicode.rst:12
msgid "Unicode Objects"
msgstr "Objets Unicode"

#: c-api/unicode.rst:14
msgid ""
"Since the implementation of :pep:`393` in Python 3.3, Unicode objects "
"internally use a variety of representations, in order to allow handling the "
"complete range of Unicode characters while staying memory efficient.  There "
"are special cases for strings where all code points are below 128, 256, or "
"65536; otherwise, code points must be below 1114112 (which is the full "
"Unicode range)."
msgstr ""
"Depuis l'implémentation de :pep:`393` dans Python 3.3, les objets Unicode "
"utilisent une variété de représentations internes, pour permettre de gérer "
"l'intervalle complet des caractères Unicode en restant efficace en termes de "
"mémoire. Il y a des cas spéciaux pour les chaînes où tous les points de code "
"sont inférieurs à 128, 256, ou 65536 ; sinon, les points de code doivent "
"être inférieurs à 1114112 (qui est l'intervalle Unicode complet)."

#: c-api/unicode.rst:20
msgid ""
"UTF-8 representation is created on demand and cached in the Unicode object."
msgstr ""

#: c-api/unicode.rst:23
#, fuzzy
msgid ""
"The :c:type:`Py_UNICODE` representation has been removed since Python 3.12 "
"with deprecated APIs. See :pep:`623` for more information."
msgstr ""
"Les objets Unicode « historiques » vont être supprimés de Python 3.12 avec "
"les APIs dépréciées. Tous les objets Unicode vont être « canoniques » à "
"partir de là. Voir :pep:`623` pour plus d'information."

#: c-api/unicode.rst:29
msgid "Unicode Type"
msgstr "Type Unicode"

#: c-api/unicode.rst:31
msgid ""
"These are the basic Unicode object types used for the Unicode implementation "
"in Python:"
msgstr ""
"Voici les types d'objets Unicode utilisés pour l'implémentation Unicode en "
"Python :"

#: c-api/unicode.rst:38
msgid ""
"These types are typedefs for unsigned integer types wide enough to contain "
"characters of 32 bits, 16 bits and 8 bits, respectively.  When dealing with "
"single Unicode characters, use :c:type:`Py_UCS4`."
msgstr ""
"Voici les *typedefs* pour les types entiers non signés suffisamment large "
"pour contenir des caractères de 32 bits, 16 bits et 8 bits, respectivement. "
"Pour traiter des caractères uniques, utilisez :c:type:`Py_UCS4`."

#: c-api/unicode.rst:47
#, fuzzy
msgid ""
"This is a typedef of :c:type:`wchar_t`, which is a 16-bit type or 32-bit "
"type depending on the platform."
msgstr ""
"Ceci est un *typedef* de :c:expr:`wchar_t`, qui est un type 16-bit ou un "
"type 32-bit selon la plateforme."

#: c-api/unicode.rst:50
msgid ""
"In previous versions, this was a 16-bit type or a 32-bit type depending on "
"whether you selected a \"narrow\" or \"wide\" Unicode version of Python at "
"build time."
msgstr ""
"Dans les versions précédentes, ceci était un type 16-bit ou un type 32-bit "
"selon que vous choisissiez une version Unicode *narrow* ou *wide* de Python "
"à la compilation."

#: c-api/unicode.rst:62
msgid ""
"These subtypes of :c:type:`PyObject` represent a Python Unicode object.  In "
"almost all cases, they shouldn't be used directly, since all API functions "
"that deal with Unicode objects take and return :c:type:`PyObject` pointers."
msgstr ""

#: c-api/unicode.rst:71
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python Unicode type.  "
"It is exposed to Python code as ``str``."
msgstr ""

#: c-api/unicode.rst:75
msgid ""
"The following APIs are C macros and static inlined functions for fast checks "
"and access to internal read-only data of Unicode objects:"
msgstr ""

#: c-api/unicode.rst:80
msgid ""
"Return true if the object *obj* is a Unicode object or an instance of a "
"Unicode subtype.  This function always succeeds."
msgstr ""

#: c-api/unicode.rst:86
msgid ""
"Return true if the object *obj* is a Unicode object, but not an instance of "
"a subtype.  This function always succeeds."
msgstr ""

#: c-api/unicode.rst:92
msgid "Returns ``0``. This API is kept only for backward compatibility."
msgstr ""

#: c-api/unicode.rst:96
msgid "This API does nothing since Python 3.12."
msgstr ""

#: c-api/unicode.rst:102
msgid ""
"Return the length of the Unicode string, in code points.  *unicode* has to "
"be a Unicode object in the \"canonical\" representation (not checked)."
msgstr ""

#: c-api/unicode.rst:112
msgid ""
"Return a pointer to the canonical representation cast to UCS1, UCS2 or UCS4 "
"integer types for direct character access.  No checks are performed if the "
"canonical representation has the correct character size; use :c:func:"
"`PyUnicode_KIND` to select the right function."
msgstr ""

#: c-api/unicode.rst:124
msgid "Return values of the :c:func:`PyUnicode_KIND` macro."
msgstr ""

#: c-api/unicode.rst:128
msgid "``PyUnicode_WCHAR_KIND`` has been removed."
msgstr ""

#: c-api/unicode.rst:134
msgid ""
"Return one of the PyUnicode kind constants (see above) that indicate how "
"many bytes per character this Unicode object uses to store its data.  "
"*unicode* has to be a Unicode object in the \"canonical\" representation "
"(not checked)."
msgstr ""

#: c-api/unicode.rst:143
msgid ""
"Return a void pointer to the raw Unicode buffer.  *unicode* has to be a "
"Unicode object in the \"canonical\" representation (not checked)."
msgstr ""

#: c-api/unicode.rst:152
msgid ""
"Write into a canonical representation *data* (as obtained with :c:func:"
"`PyUnicode_DATA`).  This function performs no sanity checks, and is intended "
"for usage in loops.  The caller should cache the *kind* value and *data* "
"pointer as obtained from other calls.  *index* is the index in the string "
"(starts at 0) and *value* is the new code point value which should be "
"written to that location."
msgstr ""

#: c-api/unicode.rst:165
msgid ""
"Read a code point from a canonical representation *data* (as obtained with :"
"c:func:`PyUnicode_DATA`).  No checks or ready calls are performed."
msgstr ""

#: c-api/unicode.rst:173
msgid ""
"Read a character from a Unicode object *unicode*, which must be in the "
"\"canonical\" representation.  This is less efficient than :c:func:"
"`PyUnicode_READ` if you do multiple consecutive reads."
msgstr ""

#: c-api/unicode.rst:182
msgid ""
"Return the maximum code point that is suitable for creating another string "
"based on *unicode*, which must be in the \"canonical\" representation.  This "
"is always an approximation but more efficient than iterating over the string."
msgstr ""

#: c-api/unicode.rst:191
msgid ""
"Return ``1`` if the string is a valid identifier according to the language "
"definition, section :ref:`identifiers`. Return ``0`` otherwise."
msgstr ""

#: c-api/unicode.rst:194
msgid ""
"The function does not call :c:func:`Py_FatalError` anymore if the string is "
"not ready."
msgstr ""

#: c-api/unicode.rst:200
msgid "Unicode Character Properties"
msgstr ""

#: c-api/unicode.rst:202
msgid ""
"Unicode provides many different character properties. The most often needed "
"ones are available through these macros which are mapped to C functions "
"depending on the Python configuration."
msgstr ""

#: c-api/unicode.rst:209
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a whitespace character."
msgstr ""

#: c-api/unicode.rst:214
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a lowercase character."
msgstr ""

#: c-api/unicode.rst:219
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is an uppercase character."
msgstr ""

#: c-api/unicode.rst:224
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a titlecase character."
msgstr ""

#: c-api/unicode.rst:229
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a linebreak character."
msgstr ""

#: c-api/unicode.rst:234
msgid "Return ``1`` or ``0`` depending on whether *ch* is a decimal character."
msgstr ""

#: c-api/unicode.rst:239
msgid "Return ``1`` or ``0`` depending on whether *ch* is a digit character."
msgstr ""

#: c-api/unicode.rst:244
msgid "Return ``1`` or ``0`` depending on whether *ch* is a numeric character."
msgstr ""

#: c-api/unicode.rst:249
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is an alphabetic character."
msgstr ""

#: c-api/unicode.rst:254
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is an alphanumeric character."
msgstr ""

#: c-api/unicode.rst:259
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a printable character. "
"Nonprintable characters are those characters defined in the Unicode "
"character database as \"Other\" or \"Separator\", excepting the ASCII space "
"(0x20) which is considered printable.  (Note that printable characters in "
"this context are those which should not be escaped when :func:`repr` is "
"invoked on a string. It has no bearing on the handling of strings written "
"to :data:`sys.stdout` or :data:`sys.stderr`.)"
msgstr ""

#: c-api/unicode.rst:268
msgid "These APIs can be used for fast direct character conversions:"
msgstr ""

#: c-api/unicode.rst:273
msgid "Return the character *ch* converted to lower case."
msgstr ""

#: c-api/unicode.rst:278
msgid "Return the character *ch* converted to upper case."
msgstr ""

#: c-api/unicode.rst:283
msgid "Return the character *ch* converted to title case."
msgstr ""

#: c-api/unicode.rst:288
msgid ""
"Return the character *ch* converted to a decimal positive integer.  Return "
"``-1`` if this is not possible.  This function does not raise exceptions."
msgstr ""

#: c-api/unicode.rst:294
msgid ""
"Return the character *ch* converted to a single digit integer. Return ``-1`` "
"if this is not possible.  This function does not raise exceptions."
msgstr ""

#: c-api/unicode.rst:300
msgid ""
"Return the character *ch* converted to a double. Return ``-1.0`` if this is "
"not possible.  This function does not raise exceptions."
msgstr ""

#: c-api/unicode.rst:304
msgid "These APIs can be used to work with surrogates:"
msgstr ""

#: c-api/unicode.rst:308
msgid "Check if *ch* is a surrogate (``0xD800 <= ch <= 0xDFFF``)."
msgstr ""

#: c-api/unicode.rst:312
msgid "Check if *ch* is a high surrogate (``0xD800 <= ch <= 0xDBFF``)."
msgstr ""

#: c-api/unicode.rst:316
msgid "Check if *ch* is a low surrogate (``0xDC00 <= ch <= 0xDFFF``)."
msgstr ""

#: c-api/unicode.rst:320
msgid ""
"Join two surrogate code points and return a single :c:type:`Py_UCS4` value. "
"*high* and *low* are respectively the leading and trailing surrogates in a "
"surrogate pair. *high* must be in the range [0xD800; 0xDBFF] and *low* must "
"be in the range [0xDC00; 0xDFFF]."
msgstr ""

#: c-api/unicode.rst:327
msgid "Creating and accessing Unicode strings"
msgstr ""

#: c-api/unicode.rst:329
msgid ""
"To create Unicode objects and access their basic sequence properties, use "
"these APIs:"
msgstr ""

#: c-api/unicode.rst:334
msgid ""
"Create a new Unicode object.  *maxchar* should be the true maximum code "
"point to be placed in the string.  As an approximation, it can be rounded up "
"to the nearest value in the sequence 127, 255, 65535, 1114111."
msgstr ""

#: c-api/unicode.rst:338
msgid ""
"This is the recommended way to allocate a new Unicode object.  Objects "
"created using this function are not resizable."
msgstr ""

#: c-api/unicode.rst:341
msgid "On error, set an exception and return ``NULL``."
msgstr ""

#: c-api/unicode.rst:349
msgid ""
"Create a new Unicode object with the given *kind* (possible values are :c:"
"macro:`PyUnicode_1BYTE_KIND` etc., as returned by :c:func:"
"`PyUnicode_KIND`).  The *buffer* must point to an array of *size* units of "
"1, 2 or 4 bytes per character, as given by the kind."
msgstr ""

#: c-api/unicode.rst:354
msgid ""
"If necessary, the input *buffer* is copied and transformed into the "
"canonical representation.  For example, if the *buffer* is a UCS4 string (:c:"
"macro:`PyUnicode_4BYTE_KIND`) and it consists only of codepoints in the UCS1 "
"range, it will be transformed into UCS1 (:c:macro:`PyUnicode_1BYTE_KIND`)."
msgstr ""

#: c-api/unicode.rst:365
msgid ""
"Create a Unicode object from the char buffer *str*.  The bytes will be "
"interpreted as being UTF-8 encoded.  The buffer is copied into the new "
"object. The return value might be a shared object, i.e. modification of the "
"data is not allowed."
msgstr ""

#: c-api/unicode.rst:371
msgid "This function raises :exc:`SystemError` when:"
msgstr ""

#: c-api/unicode.rst:373
msgid "*size* < 0,"
msgstr ""

#: c-api/unicode.rst:374
msgid "*str* is ``NULL`` and *size* > 0"
msgstr ""

#: c-api/unicode.rst:376
msgid "*str* == ``NULL`` with *size* > 0 is not allowed anymore."
msgstr ""

#: c-api/unicode.rst:382
msgid ""
"Create a Unicode object from a UTF-8 encoded null-terminated char buffer "
"*str*."
msgstr ""

#: c-api/unicode.rst:388
msgid ""
"Take a C :c:func:`printf`\\ -style *format* string and a variable number of "
"arguments, calculate the size of the resulting Python Unicode string and "
"return a string with the values formatted into it.  The variable arguments "
"must be C types and must correspond exactly to the format characters in the "
"*format* ASCII-encoded string."
msgstr ""

#: c-api/unicode.rst:394
msgid ""
"A conversion specifier contains two or more characters and has the following "
"components, which must occur in this order:"
msgstr ""
"Un indicateur de conversion contient deux ou plusieurs caractères et "
"comporte les éléments suivants, qui doivent apparaître dans cet ordre :"

#: c-api/unicode.rst:397
msgid "The ``'%'`` character, which marks the start of the specifier."
msgstr "le caractère ``'%'``, qui marque le début du marqueur ;"

#: c-api/unicode.rst:399
msgid ""
"Conversion flags (optional), which affect the result of some conversion "
"types."
msgstr ""
"des indications de conversion, facultatives, qui affectent le résultat de "
"certains types de conversion ;"

#: c-api/unicode.rst:402
msgid ""
"Minimum field width (optional). If specified as an ``'*'`` (asterisk), the "
"actual width is given in the next argument, which must be of type :c:expr:"
"`int`, and the object to convert comes after the minimum field width and "
"optional precision."
msgstr ""

#: c-api/unicode.rst:407
msgid ""
"Precision (optional), given as a ``'.'`` (dot) followed by the precision. If "
"specified as ``'*'`` (an asterisk), the actual precision is given in the "
"next argument, which must be of type :c:expr:`int`, and the value to convert "
"comes after the precision."
msgstr ""

#: c-api/unicode.rst:412
msgid "Length modifier (optional)."
msgstr "modificateur de longueur (facultatif) ;"

#: c-api/unicode.rst:414
msgid "Conversion type."
msgstr "type de conversion."

#: c-api/unicode.rst:416
msgid "The conversion flag characters are:"
msgstr "Les caractères indicateurs de conversion sont :"

#: c-api/unicode.rst:421
msgid "Flag"
msgstr "Option"

#: c-api/unicode.rst:421
msgid "Meaning"
msgstr "Signification"

#: c-api/unicode.rst:423
msgid "``0``"
msgstr "``0``"

#: c-api/unicode.rst:423
msgid "The conversion will be zero padded for numeric values."
msgstr "Les valeurs numériques converties sont complétées de zéros."

#: c-api/unicode.rst:425
msgid "``-``"
msgstr ""

#: c-api/unicode.rst:425
msgid ""
"The converted value is left adjusted (overrides the ``0`` flag if both are "
"given)."
msgstr ""

#: c-api/unicode.rst:429
msgid ""
"The length modifiers for following integer conversions (``d``, ``i``, ``o``, "
"``u``, ``x``, or ``X``) specify the type of the argument (:c:expr:`int` by "
"default):"
msgstr ""

#: c-api/unicode.rst:436
msgid "Modifier"
msgstr ""

#: c-api/unicode.rst:436
#, fuzzy
msgid "Types"
msgstr "Type"

#: c-api/unicode.rst:438
msgid "``l``"
msgstr "``l``"

#: c-api/unicode.rst:438
msgid ":c:expr:`long` or :c:expr:`unsigned long`"
msgstr ""

#: c-api/unicode.rst:440
msgid "``ll``"
msgstr ""

#: c-api/unicode.rst:440
msgid ":c:expr:`long long` or :c:expr:`unsigned long long`"
msgstr ""

#: c-api/unicode.rst:442
msgid "``j``"
msgstr ""

#: c-api/unicode.rst:442
msgid ":c:type:`intmax_t` or :c:type:`uintmax_t`"
msgstr ""

#: c-api/unicode.rst:444
msgid "``z``"
msgstr ""

#: c-api/unicode.rst:444
msgid ":c:type:`size_t` or :c:type:`ssize_t`"
msgstr ""

#: c-api/unicode.rst:446
msgid "``t``"
msgstr ""

#: c-api/unicode.rst:446
msgid ":c:type:`ptrdiff_t`"
msgstr ""

#: c-api/unicode.rst:449
msgid ""
"The length modifier ``l`` for following conversions ``s`` or ``V`` specify "
"that the type of the argument is :c:expr:`const wchar_t*`."
msgstr ""

#: c-api/unicode.rst:452
msgid "The conversion specifiers are:"
msgstr ""

#: c-api/unicode.rst:458
msgid "Conversion Specifier"
msgstr ""

#: c-api/unicode.rst:459
msgid "Type"
msgstr "Type"

#: c-api/unicode.rst:460
#, fuzzy
msgid "Comment"
msgstr "Commentaires"

#: c-api/unicode.rst:462
msgid "``%``"
msgstr ""

#: c-api/unicode.rst:463
msgid "*n/a*"
msgstr ""

#: c-api/unicode.rst:464
msgid "The literal ``%`` character."
msgstr ""

#: c-api/unicode.rst:466
msgid "``d``, ``i``"
msgstr ""

#: c-api/unicode.rst:471 c-api/unicode.rst:479 c-api/unicode.rst:483
msgid "Specified by the length modifier"
msgstr ""

#: c-api/unicode.rst:468
msgid "The decimal representation of a signed C integer."
msgstr ""

#: c-api/unicode.rst:470
msgid "``u``"
msgstr ""

#: c-api/unicode.rst:472
msgid "The decimal representation of an unsigned C integer."
msgstr ""

#: c-api/unicode.rst:474
msgid "``o``"
msgstr ""

#: c-api/unicode.rst:476
msgid "The octal representation of an unsigned C integer."
msgstr ""

#: c-api/unicode.rst:478
msgid "``x``"
msgstr "``x``"

#: c-api/unicode.rst:480
msgid "The hexadecimal representation of an unsigned C integer (lowercase)."
msgstr ""

#: c-api/unicode.rst:482
msgid "``X``"
msgstr ""

#: c-api/unicode.rst:484
msgid "The hexadecimal representation of an unsigned C integer (uppercase)."
msgstr ""

#: c-api/unicode.rst:486
msgid "``c``"
msgstr "``c``"

#: c-api/unicode.rst:487
msgid ":c:expr:`int`"
msgstr ""

#: c-api/unicode.rst:488
msgid "A single character."
msgstr ""

#: c-api/unicode.rst:490
msgid "``s``"
msgstr "``s``"

#: c-api/unicode.rst:491
msgid ":c:expr:`const char*` or :c:expr:`const wchar_t*`"
msgstr ""

#: c-api/unicode.rst:492
msgid "A null-terminated C character array."
msgstr ""

#: c-api/unicode.rst:494
msgid "``p``"
msgstr "``p``"

#: c-api/unicode.rst:495
msgid ":c:expr:`const void*`"
msgstr ""

#: c-api/unicode.rst:496
msgid ""
"The hex representation of a C  pointer. Mostly equivalent to "
"``printf(\"%p\")`` except that it is guaranteed to start with the literal "
"``0x`` regardless of what the platform's ``printf`` yields."
msgstr ""

#: c-api/unicode.rst:501
msgid "``A``"
msgstr ""

#: c-api/unicode.rst:506 c-api/unicode.rst:520 c-api/unicode.rst:529
#, fuzzy
msgid ":c:expr:`PyObject*`"
msgstr "PyObject\\*"

#: c-api/unicode.rst:503
msgid "The result of calling :func:`ascii`."
msgstr ""

#: c-api/unicode.rst:505
msgid "``U``"
msgstr ""

#: c-api/unicode.rst:507
#, fuzzy
msgid "A Unicode object."
msgstr "Un objet Unicode."

#: c-api/unicode.rst:509
msgid "``V``"
msgstr ""

#: c-api/unicode.rst:510
msgid ":c:expr:`PyObject*`, :c:expr:`const char*` or :c:expr:`const wchar_t*`"
msgstr ""

#: c-api/unicode.rst:511
msgid ""
"A Unicode object (which may be ``NULL``) and a null-terminated C character "
"array as a second parameter (which will be used, if the first parameter is "
"``NULL``)."
msgstr ""

#: c-api/unicode.rst:515
msgid "``S``"
msgstr ""

#: c-api/unicode.rst:517
msgid "The result of calling :c:func:`PyObject_Str`."
msgstr ""

#: c-api/unicode.rst:519
msgid "``R``"
msgstr ""

#: c-api/unicode.rst:521
msgid "The result of calling :c:func:`PyObject_Repr`."
msgstr ""

#: c-api/unicode.rst:523
msgid "``T``"
msgstr ""

#: c-api/unicode.rst:525
msgid ""
"Get the fully qualified name of an object type; call :c:func:"
"`PyType_GetFullyQualifiedName`."
msgstr ""

#: c-api/unicode.rst:528
msgid "``#T``"
msgstr ""

#: c-api/unicode.rst:530
msgid ""
"Similar to ``T`` format, but use a colon (``:``) as separator between the "
"module name and the qualified name."
msgstr ""

#: c-api/unicode.rst:533
msgid "``N``"
msgstr "``N``"

#: c-api/unicode.rst:539
#, fuzzy
msgid ":c:expr:`PyTypeObject*`"
msgstr "PyObject\\*"

#: c-api/unicode.rst:535
msgid ""
"Get the fully qualified name of a type; call :c:func:"
"`PyType_GetFullyQualifiedName`."
msgstr ""

#: c-api/unicode.rst:538
msgid "``#N``"
msgstr ""

#: c-api/unicode.rst:540
msgid ""
"Similar to ``N`` format, but use a colon (``:``) as separator between the "
"module name and the qualified name."
msgstr ""

#: c-api/unicode.rst:544
msgid ""
"The width formatter unit is number of characters rather than bytes. The "
"precision formatter unit is number of bytes or :c:type:`wchar_t` items (if "
"the length modifier ``l`` is used) for ``\"%s\"`` and ``\"%V\"`` (if the "
"``PyObject*`` argument is ``NULL``), and a number of characters for "
"``\"%A\"``, ``\"%U\"``, ``\"%S\"``, ``\"%R\"`` and ``\"%V\"`` (if the "
"``PyObject*`` argument is not ``NULL``)."
msgstr ""

#: c-api/unicode.rst:552
msgid ""
"Unlike to C :c:func:`printf` the ``0`` flag has effect even when a precision "
"is given for integer conversions (``d``, ``i``, ``u``, ``o``, ``x``, or "
"``X``)."
msgstr ""

#: c-api/unicode.rst:556
msgid "Support for ``\"%lld\"`` and ``\"%llu\"`` added."
msgstr ""

#: c-api/unicode.rst:559
msgid "Support for ``\"%li\"``, ``\"%lli\"`` and ``\"%zi\"`` added."
msgstr ""

#: c-api/unicode.rst:562
msgid ""
"Support width and precision formatter for ``\"%s\"``, ``\"%A\"``, "
"``\"%U\"``, ``\"%V\"``, ``\"%S\"``, ``\"%R\"`` added."
msgstr ""

#: c-api/unicode.rst:566
msgid ""
"Support for conversion specifiers ``o`` and ``X``. Support for length "
"modifiers ``j`` and ``t``. Length modifiers are now applied to all integer "
"conversions. Length modifier ``l`` is now applied to conversion specifiers "
"``s`` and ``V``. Support for variable width and precision ``*``. Support for "
"flag ``-``."
msgstr ""

#: c-api/unicode.rst:574
msgid ""
"An unrecognized format character now sets a :exc:`SystemError`. In previous "
"versions it caused all the rest of the format string to be copied as-is to "
"the result string, and any extra arguments discarded."
msgstr ""

#: c-api/unicode.rst:578
msgid "Support for ``%T``, ``%#T``, ``%N`` and ``%#N`` formats added."
msgstr ""

#: c-api/unicode.rst:584
msgid ""
"Identical to :c:func:`PyUnicode_FromFormat` except that it takes exactly two "
"arguments."
msgstr ""

#: c-api/unicode.rst:590
msgid ""
"Copy an instance of a Unicode subtype to a new true Unicode object if "
"necessary. If *obj* is already a true Unicode object (not a subtype), return "
"a new :term:`strong reference` to the object."
msgstr ""

#: c-api/unicode.rst:594
msgid ""
"Objects other than Unicode or its subtypes will cause a :exc:`TypeError`."
msgstr ""

#: c-api/unicode.rst:600
msgid "Decode an encoded object *obj* to a Unicode object."
msgstr ""

#: c-api/unicode.rst:602
msgid ""
":class:`bytes`, :class:`bytearray` and other :term:`bytes-like objects "
"<bytes-like object>` are decoded according to the given *encoding* and using "
"the error handling defined by *errors*. Both can be ``NULL`` to have the "
"interface use the default values (see :ref:`builtincodecs` for details)."
msgstr ""

#: c-api/unicode.rst:608
msgid ""
"All other objects, including Unicode objects, cause a :exc:`TypeError` to be "
"set."
msgstr ""

#: c-api/unicode.rst:611
msgid ""
"The API returns ``NULL`` if there was an error.  The caller is responsible "
"for decref'ing the returned objects."
msgstr ""

#: c-api/unicode.rst:617
msgid "Return the length of the Unicode object, in code points."
msgstr ""

#: c-api/unicode.rst:619
msgid "On error, set an exception and return ``-1``."
msgstr ""

#: c-api/unicode.rst:630
msgid ""
"Copy characters from one Unicode object into another.  This function "
"performs character conversion when necessary and falls back to :c:func:`!"
"memcpy` if possible.  Returns ``-1`` and sets an exception on error, "
"otherwise returns the number of copied characters."
msgstr ""

#: c-api/unicode.rst:641
msgid ""
"Fill a string with a character: write *fill_char* into ``unicode[start:"
"start+length]``."
msgstr ""

#: c-api/unicode.rst:644
msgid ""
"Fail if *fill_char* is bigger than the string maximum character, or if the "
"string has more than 1 reference."
msgstr ""

#: c-api/unicode.rst:647
msgid ""
"Return the number of written character, or return ``-1`` and raise an "
"exception on error."
msgstr ""

#: c-api/unicode.rst:656
msgid ""
"Write a character to a string.  The string must have been created through :c:"
"func:`PyUnicode_New`.  Since Unicode strings are supposed to be immutable, "
"the string must not be shared, or have been hashed yet."
msgstr ""

#: c-api/unicode.rst:660
msgid ""
"This function checks that *unicode* is a Unicode object, that the index is "
"not out of bounds, and that the object can be modified safely (i.e. that it "
"its reference count is one)."
msgstr ""

#: c-api/unicode.rst:664
msgid "Return ``0`` on success, ``-1`` on error with an exception set."
msgstr ""

#: c-api/unicode.rst:671
msgid ""
"Read a character from a string.  This function checks that *unicode* is a "
"Unicode object and the index is not out of bounds, in contrast to :c:func:"
"`PyUnicode_READ_CHAR`, which performs no error checking."
msgstr ""

#: c-api/unicode.rst:675
msgid "Return character on success, ``-1`` on error with an exception set."
msgstr ""

#: c-api/unicode.rst:683
msgid ""
"Return a substring of *unicode*, from character index *start* (included) to "
"character index *end* (excluded).  Negative indices are not supported. On "
"error, set an exception and return ``NULL``."
msgstr ""

#: c-api/unicode.rst:693
msgid ""
"Copy the string *unicode* into a UCS4 buffer, including a null character, if "
"*copy_null* is set.  Returns ``NULL`` and sets an exception on error (in "
"particular, a :exc:`SystemError` if *buflen* is smaller than the length of "
"*unicode*).  *buffer* is returned on success."
msgstr ""

#: c-api/unicode.rst:703
msgid ""
"Copy the string *unicode* into a new UCS4 buffer that is allocated using :c:"
"func:`PyMem_Malloc`.  If this fails, ``NULL`` is returned with a :exc:"
"`MemoryError` set.  The returned buffer always has an extra null code point "
"appended."
msgstr ""

#: c-api/unicode.rst:712
msgid "Locale Encoding"
msgstr ""

#: c-api/unicode.rst:714
msgid ""
"The current locale encoding can be used to decode text from the operating "
"system."
msgstr ""

#: c-api/unicode.rst:721
msgid ""
"Decode a string from UTF-8 on Android and VxWorks, or from the current "
"locale encoding on other platforms. The supported error handlers are "
"``\"strict\"`` and ``\"surrogateescape\"`` (:pep:`383`). The decoder uses "
"``\"strict\"`` error handler if *errors* is ``NULL``.  *str* must end with a "
"null character but cannot contain embedded null characters."
msgstr ""

#: c-api/unicode.rst:728
msgid ""
"Use :c:func:`PyUnicode_DecodeFSDefaultAndSize` to decode a string from the :"
"term:`filesystem encoding and error handler`."
msgstr ""

#: c-api/unicode.rst:766
msgid "This function ignores the :ref:`Python UTF-8 Mode <utf8-mode>`."
msgstr ""

#: c-api/unicode.rst:832
msgid "The :c:func:`Py_DecodeLocale` function."
msgstr ""

#: c-api/unicode.rst:739
msgid ""
"The function now also uses the current locale encoding for the "
"``surrogateescape`` error handler, except on Android. Previously, :c:func:"
"`Py_DecodeLocale` was used for the ``surrogateescape``, and the current "
"locale encoding was used for ``strict``."
msgstr ""

#: c-api/unicode.rst:748
msgid ""
"Similar to :c:func:`PyUnicode_DecodeLocaleAndSize`, but compute the string "
"length using :c:func:`!strlen`."
msgstr ""

#: c-api/unicode.rst:756
msgid ""
"Encode a Unicode object to UTF-8 on Android and VxWorks, or to the current "
"locale encoding on other platforms. The supported error handlers are "
"``\"strict\"`` and ``\"surrogateescape\"`` (:pep:`383`). The encoder uses "
"``\"strict\"`` error handler if *errors* is ``NULL``. Return a :class:"
"`bytes` object. *unicode* cannot contain embedded null characters."
msgstr ""

#: c-api/unicode.rst:763
msgid ""
"Use :c:func:`PyUnicode_EncodeFSDefault` to encode a string to the :term:"
"`filesystem encoding and error handler`."
msgstr ""

#: c-api/unicode.rst:863
msgid "The :c:func:`Py_EncodeLocale` function."
msgstr ""

#: c-api/unicode.rst:774
msgid ""
"The function now also uses the current locale encoding for the "
"``surrogateescape`` error handler, except on Android. Previously, :c:func:"
"`Py_EncodeLocale` was used for the ``surrogateescape``, and the current "
"locale encoding was used for ``strict``."
msgstr ""

#: c-api/unicode.rst:783
msgid "File System Encoding"
msgstr ""

#: c-api/unicode.rst:785
msgid ""
"Functions encoding to and decoding from the :term:`filesystem encoding and "
"error handler` (:pep:`383` and :pep:`529`)."
msgstr ""

#: c-api/unicode.rst:788
msgid ""
"To encode file names to :class:`bytes` during argument parsing, the "
"``\"O&\"`` converter should be used, passing :c:func:`PyUnicode_FSConverter` "
"as the conversion function:"
msgstr ""

#: c-api/unicode.rst:794
msgid ""
"ParseTuple converter: encode :class:`str` objects -- obtained directly or "
"through the :class:`os.PathLike` interface -- to :class:`bytes` using :c:"
"func:`PyUnicode_EncodeFSDefault`; :class:`bytes` objects are output as-is. "
"*result* must be a :c:expr:`PyBytesObject*` which must be released when it "
"is no longer used."
msgstr ""

#: c-api/unicode.rst:819
msgid "Accepts a :term:`path-like object`."
msgstr "Accepte un :term:`path-like object`."

#: c-api/unicode.rst:805
msgid ""
"To decode file names to :class:`str` during argument parsing, the ``\"O&\"`` "
"converter should be used, passing :c:func:`PyUnicode_FSDecoder` as the "
"conversion function:"
msgstr ""

#: c-api/unicode.rst:811
msgid ""
"ParseTuple converter: decode :class:`bytes` objects -- obtained either "
"directly or indirectly through the :class:`os.PathLike` interface -- to :"
"class:`str` using :c:func:`PyUnicode_DecodeFSDefaultAndSize`; :class:`str` "
"objects are output as-is. *result* must be a :c:expr:`PyUnicodeObject*` "
"which must be released when it is no longer used."
msgstr ""

#: c-api/unicode.rst:825
msgid "Decode a string from the :term:`filesystem encoding and error handler`."
msgstr ""

#: c-api/unicode.rst:827
msgid ""
"If you need to decode a string from the current locale encoding, use :c:func:"
"`PyUnicode_DecodeLocaleAndSize`."
msgstr ""

#: c-api/unicode.rst:847 c-api/unicode.rst:867
msgid ""
"The :term:`filesystem error handler <filesystem encoding and error handler>` "
"is now used."
msgstr ""

#: c-api/unicode.rst:841
msgid ""
"Decode a null-terminated string from the :term:`filesystem encoding and "
"error handler`."
msgstr ""

#: c-api/unicode.rst:844
msgid ""
"If the string length is known, use :c:func:"
"`PyUnicode_DecodeFSDefaultAndSize`."
msgstr ""

#: c-api/unicode.rst:854
msgid ""
"Encode a Unicode object to the :term:`filesystem encoding and error "
"handler`, and return :class:`bytes`. Note that the resulting :class:`bytes` "
"object can contain null bytes."
msgstr ""

#: c-api/unicode.rst:858
msgid ""
"If you need to encode a string to the current locale encoding, use :c:func:"
"`PyUnicode_EncodeLocale`."
msgstr ""

#: c-api/unicode.rst:872
msgid "wchar_t Support"
msgstr ""

#: c-api/unicode.rst:874
msgid ":c:type:`wchar_t` support for platforms which support it:"
msgstr ""

#: c-api/unicode.rst:878
msgid ""
"Create a Unicode object from the :c:type:`wchar_t` buffer *wstr* of the "
"given *size*. Passing ``-1`` as the *size* indicates that the function must "
"itself compute the length, using :c:func:`!wcslen`. Return ``NULL`` on "
"failure."
msgstr ""

#: c-api/unicode.rst:886
msgid ""
"Copy the Unicode object contents into the :c:type:`wchar_t` buffer *wstr*.  "
"At most *size* :c:type:`wchar_t` characters are copied (excluding a possibly "
"trailing null termination character).  Return the number of :c:type:"
"`wchar_t` characters copied or ``-1`` in case of an error."
msgstr ""

#: c-api/unicode.rst:891
msgid ""
"When *wstr* is ``NULL``, instead return the *size* that would be required to "
"store all of *unicode* including a terminating null."
msgstr ""

#: c-api/unicode.rst:894
msgid ""
"Note that the resulting :c:expr:`wchar_t*` string may or may not be null-"
"terminated.  It is the responsibility of the caller to make sure that the :c:"
"expr:`wchar_t*` string is null-terminated in case this is required by the "
"application. Also, note that the :c:expr:`wchar_t*` string might contain "
"null characters, which would cause the string to be truncated when used with "
"most C functions."
msgstr ""

#: c-api/unicode.rst:904
msgid ""
"Convert the Unicode object to a wide character string. The output string "
"always ends with a null character. If *size* is not ``NULL``, write the "
"number of wide characters (excluding the trailing null termination "
"character) into *\\*size*. Note that the resulting :c:type:`wchar_t` string "
"might contain null characters, which would cause the string to be truncated "
"when used with most C functions. If *size* is ``NULL`` and the :c:expr:"
"`wchar_t*` string contains null characters a :exc:`ValueError` is raised."
msgstr ""

#: c-api/unicode.rst:912
msgid ""
"Returns a buffer allocated by :c:macro:`PyMem_New` (use :c:func:`PyMem_Free` "
"to free it) on success. On error, returns ``NULL`` and *\\*size* is "
"undefined. Raises a :exc:`MemoryError` if memory allocation is failed."
msgstr ""

#: c-api/unicode.rst:919
msgid ""
"Raises a :exc:`ValueError` if *size* is ``NULL`` and the :c:expr:`wchar_t*` "
"string contains null characters."
msgstr ""

#: c-api/unicode.rst:927
msgid "Built-in Codecs"
msgstr ""

#: c-api/unicode.rst:929
msgid ""
"Python provides a set of built-in codecs which are written in C for speed. "
"All of these codecs are directly usable via the following functions."
msgstr ""

#: c-api/unicode.rst:932
msgid ""
"Many of the following APIs take two arguments encoding and errors, and they "
"have the same semantics as the ones of the built-in :func:`str` string "
"object constructor."
msgstr ""

#: c-api/unicode.rst:936
msgid ""
"Setting encoding to ``NULL`` causes the default encoding to be used which is "
"UTF-8.  The file system calls should use :c:func:`PyUnicode_FSConverter` for "
"encoding file names. This uses the :term:`filesystem encoding and error "
"handler` internally."
msgstr ""

#: c-api/unicode.rst:941
msgid ""
"Error handling is set by errors which may also be set to ``NULL`` meaning to "
"use the default handling defined for the codec.  Default error handling for "
"all built-in codecs is \"strict\" (:exc:`ValueError` is raised)."
msgstr ""

#: c-api/unicode.rst:945
msgid ""
"The codecs all use a similar interface.  Only deviations from the following "
"generic ones are documented for simplicity."
msgstr ""

#: c-api/unicode.rst:950
msgid "Generic Codecs"
msgstr ""

#: c-api/unicode.rst:952
msgid "These are the generic codec APIs:"
msgstr ""

#: c-api/unicode.rst:958
msgid ""
"Create a Unicode object by decoding *size* bytes of the encoded string "
"*str*. *encoding* and *errors* have the same meaning as the parameters of "
"the same name in the :func:`str` built-in function.  The codec to be used is "
"looked up using the Python codec registry.  Return ``NULL`` if an exception "
"was raised by the codec."
msgstr ""

#: c-api/unicode.rst:968
msgid ""
"Encode a Unicode object and return the result as Python bytes object. "
"*encoding* and *errors* have the same meaning as the parameters of the same "
"name in the Unicode :meth:`~str.encode` method. The codec to be used is "
"looked up using the Python codec registry. Return ``NULL`` if an exception "
"was raised by the codec."
msgstr ""

#: c-api/unicode.rst:976
msgid "UTF-8 Codecs"
msgstr ""

#: c-api/unicode.rst:978
msgid "These are the UTF-8 codec APIs:"
msgstr ""

#: c-api/unicode.rst:983
msgid ""
"Create a Unicode object by decoding *size* bytes of the UTF-8 encoded string "
"*str*. Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: c-api/unicode.rst:990
msgid ""
"If *consumed* is ``NULL``, behave like :c:func:`PyUnicode_DecodeUTF8`. If "
"*consumed* is not ``NULL``, trailing incomplete UTF-8 byte sequences will "
"not be treated as an error. Those bytes will not be decoded and the number "
"of bytes that have been decoded will be stored in *consumed*."
msgstr ""

#: c-api/unicode.rst:998
msgid ""
"Encode a Unicode object using UTF-8 and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: c-api/unicode.rst:1017
msgid ""
"The function fails if the string contains surrogate code points (``U+D800`` "
"- ``U+DFFF``)."
msgstr ""

#: c-api/unicode.rst:1008
msgid ""
"Return a pointer to the UTF-8 encoding of the Unicode object, and store the "
"size of the encoded representation (in bytes) in *size*.  The *size* "
"argument can be ``NULL``; in this case no size will be stored.  The returned "
"buffer always has an extra null byte appended (not included in *size*), "
"regardless of whether there are any other null code points."
msgstr ""

#: c-api/unicode.rst:1014
msgid ""
"On error, set an exception, set *size* to ``-1`` (if it's not NULL) and "
"return ``NULL``."
msgstr ""

#: c-api/unicode.rst:1020
msgid ""
"This caches the UTF-8 representation of the string in the Unicode object, "
"and subsequent calls will return a pointer to the same buffer.  The caller "
"is not responsible for deallocating the buffer. The buffer is deallocated "
"and pointers to it become invalid when the Unicode object is garbage "
"collected."
msgstr ""

#: c-api/unicode.rst:1040
msgid "The return type is now ``const char *`` rather of ``char *``."
msgstr ""

#: c-api/unicode.rst:1030
msgid "This function is a part of the :ref:`limited API <limited-c-api>`."
msgstr ""

#: c-api/unicode.rst:1036
msgid "As :c:func:`PyUnicode_AsUTF8AndSize`, but does not store the size."
msgstr ""

#: c-api/unicode.rst:1045
msgid "UTF-32 Codecs"
msgstr ""

#: c-api/unicode.rst:1047
msgid "These are the UTF-32 codec APIs:"
msgstr ""

#: c-api/unicode.rst:1053
msgid ""
"Decode *size* bytes from a UTF-32 encoded buffer string and return the "
"corresponding Unicode object.  *errors* (if non-``NULL``) defines the error "
"handling. It defaults to \"strict\"."
msgstr ""

#: c-api/unicode.rst:1107
msgid ""
"If *byteorder* is non-``NULL``, the decoder starts decoding using the given "
"byte order::"
msgstr ""

#: c-api/unicode.rst:1110
msgid ""
"*byteorder == -1: little endian\n"
"*byteorder == 0:  native order\n"
"*byteorder == 1:  big endian"
msgstr ""

#: c-api/unicode.rst:1064
msgid ""
"If ``*byteorder`` is zero, and the first four bytes of the input data are a "
"byte order mark (BOM), the decoder switches to this byte order and the BOM "
"is not copied into the resulting Unicode string.  If ``*byteorder`` is "
"``-1`` or ``1``, any byte order mark is copied to the output."
msgstr ""

#: c-api/unicode.rst:1069
msgid ""
"After completion, *\\*byteorder* is set to the current byte order at the end "
"of input data."
msgstr ""

#: c-api/unicode.rst:1123
msgid "If *byteorder* is ``NULL``, the codec starts in native order mode."
msgstr ""

#: c-api/unicode.rst:1125
msgid "Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: c-api/unicode.rst:1080
msgid ""
"If *consumed* is ``NULL``, behave like :c:func:`PyUnicode_DecodeUTF32`. If "
"*consumed* is not ``NULL``, :c:func:`PyUnicode_DecodeUTF32Stateful` will not "
"treat trailing incomplete UTF-32 byte sequences (such as a number of bytes "
"not divisible by four) as an error. Those bytes will not be decoded and the "
"number of bytes that have been decoded will be stored in *consumed*."
msgstr ""

#: c-api/unicode.rst:1089
msgid ""
"Return a Python byte string using the UTF-32 encoding in native byte order. "
"The string always starts with a BOM mark.  Error handling is \"strict\". "
"Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: c-api/unicode.rst:1095
msgid "UTF-16 Codecs"
msgstr ""

#: c-api/unicode.rst:1097
msgid "These are the UTF-16 codec APIs:"
msgstr ""

#: c-api/unicode.rst:1103
msgid ""
"Decode *size* bytes from a UTF-16 encoded buffer string and return the "
"corresponding Unicode object.  *errors* (if non-``NULL``) defines the error "
"handling. It defaults to \"strict\"."
msgstr ""

#: c-api/unicode.rst:1114
msgid ""
"If ``*byteorder`` is zero, and the first two bytes of the input data are a "
"byte order mark (BOM), the decoder switches to this byte order and the BOM "
"is not copied into the resulting Unicode string.  If ``*byteorder`` is "
"``-1`` or ``1``, any byte order mark is copied to the output (where it will "
"result in either a ``\\ufeff`` or a ``\\ufffe`` character)."
msgstr ""

#: c-api/unicode.rst:1120
msgid ""
"After completion, ``*byteorder`` is set to the current byte order at the end "
"of input data."
msgstr ""

#: c-api/unicode.rst:1131
msgid ""
"If *consumed* is ``NULL``, behave like :c:func:`PyUnicode_DecodeUTF16`. If "
"*consumed* is not ``NULL``, :c:func:`PyUnicode_DecodeUTF16Stateful` will not "
"treat trailing incomplete UTF-16 byte sequences (such as an odd number of "
"bytes or a split surrogate pair) as an error. Those bytes will not be "
"decoded and the number of bytes that have been decoded will be stored in "
"*consumed*."
msgstr ""

#: c-api/unicode.rst:1140
msgid ""
"Return a Python byte string using the UTF-16 encoding in native byte order. "
"The string always starts with a BOM mark.  Error handling is \"strict\". "
"Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: c-api/unicode.rst:1146
msgid "UTF-7 Codecs"
msgstr ""

#: c-api/unicode.rst:1148
msgid "These are the UTF-7 codec APIs:"
msgstr ""

#: c-api/unicode.rst:1153
msgid ""
"Create a Unicode object by decoding *size* bytes of the UTF-7 encoded string "
"*str*.  Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: c-api/unicode.rst:1160
msgid ""
"If *consumed* is ``NULL``, behave like :c:func:`PyUnicode_DecodeUTF7`.  If "
"*consumed* is not ``NULL``, trailing incomplete UTF-7 base-64 sections will "
"not be treated as an error.  Those bytes will not be decoded and the number "
"of bytes that have been decoded will be stored in *consumed*."
msgstr ""

#: c-api/unicode.rst:1167
msgid "Unicode-Escape Codecs"
msgstr ""

#: c-api/unicode.rst:1169
msgid "These are the \"Unicode Escape\" codec APIs:"
msgstr ""

#: c-api/unicode.rst:1175
msgid ""
"Create a Unicode object by decoding *size* bytes of the Unicode-Escape "
"encoded string *str*.  Return ``NULL`` if an exception was raised by the "
"codec."
msgstr ""

#: c-api/unicode.rst:1181
msgid ""
"Encode a Unicode object using Unicode-Escape and return the result as a "
"bytes object.  Error handling is \"strict\".  Return ``NULL`` if an "
"exception was raised by the codec."
msgstr ""

#: c-api/unicode.rst:1187
msgid "Raw-Unicode-Escape Codecs"
msgstr ""

#: c-api/unicode.rst:1189
msgid "These are the \"Raw Unicode Escape\" codec APIs:"
msgstr ""

#: c-api/unicode.rst:1195
msgid ""
"Create a Unicode object by decoding *size* bytes of the Raw-Unicode-Escape "
"encoded string *str*.  Return ``NULL`` if an exception was raised by the "
"codec."
msgstr ""

#: c-api/unicode.rst:1201
msgid ""
"Encode a Unicode object using Raw-Unicode-Escape and return the result as a "
"bytes object.  Error handling is \"strict\".  Return ``NULL`` if an "
"exception was raised by the codec."
msgstr ""

#: c-api/unicode.rst:1207
msgid "Latin-1 Codecs"
msgstr ""

#: c-api/unicode.rst:1209
msgid ""
"These are the Latin-1 codec APIs: Latin-1 corresponds to the first 256 "
"Unicode ordinals and only these are accepted by the codecs during encoding."
msgstr ""

#: c-api/unicode.rst:1215
msgid ""
"Create a Unicode object by decoding *size* bytes of the Latin-1 encoded "
"string *str*.  Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: c-api/unicode.rst:1221
msgid ""
"Encode a Unicode object using Latin-1 and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: c-api/unicode.rst:1227
msgid "ASCII Codecs"
msgstr ""

#: c-api/unicode.rst:1229
msgid ""
"These are the ASCII codec APIs.  Only 7-bit ASCII data is accepted. All "
"other codes generate errors."
msgstr ""

#: c-api/unicode.rst:1235
msgid ""
"Create a Unicode object by decoding *size* bytes of the ASCII encoded string "
"*str*.  Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: c-api/unicode.rst:1241
msgid ""
"Encode a Unicode object using ASCII and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: c-api/unicode.rst:1247
msgid "Character Map Codecs"
msgstr ""

#: c-api/unicode.rst:1249
msgid ""
"This codec is special in that it can be used to implement many different "
"codecs (and this is in fact what was done to obtain most of the standard "
"codecs included in the :mod:`!encodings` package). The codec uses mappings "
"to encode and decode characters.  The mapping objects provided must support "
"the :meth:`~object.__getitem__` mapping interface; dictionaries and "
"sequences work well."
msgstr ""

#: c-api/unicode.rst:1255
msgid "These are the mapping codec APIs:"
msgstr ""

#: c-api/unicode.rst:1260
msgid ""
"Create a Unicode object by decoding *size* bytes of the encoded string *str* "
"using the given *mapping* object.  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: c-api/unicode.rst:1264
msgid ""
"If *mapping* is ``NULL``, Latin-1 decoding will be applied.  Else *mapping* "
"must map bytes ordinals (integers in the range from 0 to 255) to Unicode "
"strings, integers (which are then interpreted as Unicode ordinals) or "
"``None``.  Unmapped data bytes -- ones which cause a :exc:`LookupError`, as "
"well as ones which get mapped to ``None``, ``0xFFFE`` or ``'\\ufffe'``, are "
"treated as undefined mappings and cause an error."
msgstr ""

#: c-api/unicode.rst:1275
msgid ""
"Encode a Unicode object using the given *mapping* object and return the "
"result as a bytes object.  Error handling is \"strict\".  Return ``NULL`` if "
"an exception was raised by the codec."
msgstr ""

#: c-api/unicode.rst:1279
msgid ""
"The *mapping* object must map Unicode ordinal integers to bytes objects, "
"integers in the range from 0 to 255 or ``None``.  Unmapped character "
"ordinals (ones which cause a :exc:`LookupError`) as well as mapped to "
"``None`` are treated as \"undefined mapping\" and cause an error."
msgstr ""

#: c-api/unicode.rst:1285
msgid "The following codec API is special in that maps Unicode to Unicode."
msgstr ""

#: c-api/unicode.rst:1289
msgid ""
"Translate a string by applying a character mapping table to it and return "
"the resulting Unicode object. Return ``NULL`` if an exception was raised by "
"the codec."
msgstr ""

#: c-api/unicode.rst:1293
msgid ""
"The mapping table must map Unicode ordinal integers to Unicode ordinal "
"integers or ``None`` (causing deletion of the character)."
msgstr ""

#: c-api/unicode.rst:1296
msgid ""
"Mapping tables need only provide the :meth:`~object.__getitem__` interface; "
"dictionaries and sequences work well.  Unmapped character ordinals (ones "
"which cause a :exc:`LookupError`) are left untouched and are copied as-is."
msgstr ""

#: c-api/unicode.rst:1300
msgid ""
"*errors* has the usual meaning for codecs. It may be ``NULL`` which "
"indicates to use the default error handling."
msgstr ""

#: c-api/unicode.rst:1305
msgid "MBCS codecs for Windows"
msgstr ""

#: c-api/unicode.rst:1307
msgid ""
"These are the MBCS codec APIs. They are currently only available on Windows "
"and use the Win32 MBCS converters to implement the conversions.  Note that "
"MBCS (or DBCS) is a class of encodings, not just one.  The target encoding "
"is defined by the user settings on the machine running the codec."
msgstr ""

#: c-api/unicode.rst:1314
msgid ""
"Create a Unicode object by decoding *size* bytes of the MBCS encoded string "
"*str*. Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: c-api/unicode.rst:1321
msgid ""
"If *consumed* is ``NULL``, behave like :c:func:`PyUnicode_DecodeMBCS`. If "
"*consumed* is not ``NULL``, :c:func:`PyUnicode_DecodeMBCSStateful` will not "
"decode trailing lead byte and the number of bytes that have been decoded "
"will be stored in *consumed*."
msgstr ""

#: c-api/unicode.rst:1329
msgid ""
"Encode a Unicode object using MBCS and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: c-api/unicode.rst:1336
msgid ""
"Encode the Unicode object using the specified code page and return a Python "
"bytes object.  Return ``NULL`` if an exception was raised by the codec. Use :"
"c:macro:`!CP_ACP` code page to get the MBCS encoder."
msgstr ""

#: c-api/unicode.rst:1344
msgid "Methods & Slots"
msgstr ""

#: c-api/unicode.rst:1350
msgid "Methods and Slot Functions"
msgstr ""

#: c-api/unicode.rst:1352
msgid ""
"The following APIs are capable of handling Unicode objects and strings on "
"input (we refer to them as strings in the descriptions) and return Unicode "
"objects or integers as appropriate."
msgstr ""

#: c-api/unicode.rst:1356
msgid "They all return ``NULL`` or ``-1`` if an exception occurs."
msgstr ""

#: c-api/unicode.rst:1361
msgid "Concat two strings giving a new Unicode string."
msgstr ""

#: c-api/unicode.rst:1366
msgid ""
"Split a string giving a list of Unicode strings.  If *sep* is ``NULL``, "
"splitting will be done at all whitespace substrings.  Otherwise, splits "
"occur at the given separator.  At most *maxsplit* splits will be done.  If "
"negative, no limit is set.  Separators are not included in the resulting "
"list."
msgstr ""

#: c-api/unicode.rst:1374
msgid ""
"Split a Unicode string at line breaks, returning a list of Unicode strings. "
"CRLF is considered to be one line break.  If *keepends* is ``0``, the Line "
"break characters are not included in the resulting strings."
msgstr ""

#: c-api/unicode.rst:1381
msgid ""
"Join a sequence of strings using the given *separator* and return the "
"resulting Unicode string."
msgstr ""

#: c-api/unicode.rst:1388
msgid ""
"Return ``1`` if *substr* matches ``unicode[start:end]`` at the given tail "
"end (*direction* == ``-1`` means to do a prefix match, *direction* == ``1`` "
"a suffix match), ``0`` otherwise. Return ``-1`` if an error occurred."
msgstr ""

#: c-api/unicode.rst:1396
msgid ""
"Return the first position of *substr* in ``unicode[start:end]`` using the "
"given *direction* (*direction* == ``1`` means to do a forward search, "
"*direction* == ``-1`` a backward search).  The return value is the index of "
"the first match; a value of ``-1`` indicates that no match was found, and "
"``-2`` indicates that an error occurred and an exception has been set."
msgstr ""

#: c-api/unicode.rst:1406
msgid ""
"Return the first position of the character *ch* in ``unicode[start:end]`` "
"using the given *direction* (*direction* == ``1`` means to do a forward "
"search, *direction* == ``-1`` a backward search).  The return value is the "
"index of the first match; a value of ``-1`` indicates that no match was "
"found, and ``-2`` indicates that an error occurred and an exception has been "
"set."
msgstr ""

#: c-api/unicode.rst:1414
msgid ""
"*start* and *end* are now adjusted to behave like ``unicode[start:end]``."
msgstr ""

#: c-api/unicode.rst:1421
msgid ""
"Return the number of non-overlapping occurrences of *substr* in "
"``unicode[start:end]``.  Return ``-1`` if an error occurred."
msgstr ""

#: c-api/unicode.rst:1428
msgid ""
"Replace at most *maxcount* occurrences of *substr* in *unicode* with "
"*replstr* and return the resulting Unicode object. *maxcount* == ``-1`` "
"means replace all occurrences."
msgstr ""

#: c-api/unicode.rst:1435
msgid ""
"Compare two strings and return ``-1``, ``0``, ``1`` for less than, equal, "
"and greater than, respectively."
msgstr ""

#: c-api/unicode.rst:1438
msgid ""
"This function returns ``-1`` upon failure, so one should call :c:func:"
"`PyErr_Occurred` to check for errors."
msgstr ""

#: c-api/unicode.rst:1444
msgid ""
"Compare a Unicode object with a char buffer which is interpreted as being "
"UTF-8 or ASCII encoded and return true (``1``) if they are equal, or false "
"(``0``) otherwise. If the Unicode object contains surrogate code points "
"(``U+D800`` - ``U+DFFF``) or the C string is not valid UTF-8, false (``0``) "
"is returned."
msgstr ""

#: c-api/unicode.rst:1472
msgid "This function does not raise exceptions."
msgstr ""

#: c-api/unicode.rst:1458
msgid ""
"Similar to :c:func:`PyUnicode_EqualToUTF8AndSize`, but compute *string* "
"length using :c:func:`!strlen`. If the Unicode object contains null "
"characters, false (``0``) is returned."
msgstr ""

#: c-api/unicode.rst:1467
msgid ""
"Compare a Unicode object, *unicode*, with *string* and return ``-1``, ``0``, "
"``1`` for less than, equal, and greater than, respectively. It is best to "
"pass only ASCII-encoded strings, but the function interprets the input "
"string as ISO-8859-1 if it contains non-ASCII characters."
msgstr ""

#: c-api/unicode.rst:1477
msgid "Rich compare two Unicode strings and return one of the following:"
msgstr ""

#: c-api/unicode.rst:1479
msgid "``NULL`` in case an exception was raised"
msgstr ""

#: c-api/unicode.rst:1480
msgid ":c:data:`Py_True` or :c:data:`Py_False` for successful comparisons"
msgstr ""

#: c-api/unicode.rst:1481
msgid ":c:data:`Py_NotImplemented` in case the type combination is unknown"
msgstr ""

#: c-api/unicode.rst:1483
msgid ""
"Possible values for *op* are :c:macro:`Py_GT`, :c:macro:`Py_GE`, :c:macro:"
"`Py_EQ`, :c:macro:`Py_NE`, :c:macro:`Py_LT`, and :c:macro:`Py_LE`."
msgstr ""

#: c-api/unicode.rst:1489
msgid ""
"Return a new string object from *format* and *args*; this is analogous to "
"``format % args``."
msgstr ""

#: c-api/unicode.rst:1495
msgid ""
"Check whether *substr* is contained in *unicode* and return true or false "
"accordingly."
msgstr ""

#: c-api/unicode.rst:1498
msgid ""
"*substr* has to coerce to a one element Unicode string. ``-1`` is returned "
"if there was an error."
msgstr ""

#: c-api/unicode.rst:1504
msgid ""
"Intern the argument :c:expr:`*p_unicode` in place.  The argument must be the "
"address of a pointer variable pointing to a Python Unicode string object.  "
"If there is an existing interned string that is the same as :c:expr:"
"`*p_unicode`, it sets :c:expr:`*p_unicode` to it (releasing the reference to "
"the old string object and creating a new :term:`strong reference` to the "
"interned string object), otherwise it leaves :c:expr:`*p_unicode` alone and "
"interns it."
msgstr ""

#: c-api/unicode.rst:1511
msgid ""
"(Clarification: even though there is a lot of talk about references, think "
"of this function as reference-neutral. You must own the object you pass in; "
"after the call you no longer own the passed-in reference, but you newly own "
"the result.)"
msgstr ""

#: c-api/unicode.rst:1516
msgid ""
"This function never raises an exception. On error, it leaves its argument "
"unchanged without interning it."
msgstr ""

#: c-api/unicode.rst:1519
msgid ""
"Instances of subclasses of :py:class:`str` may not be interned, that is, :c:"
"expr:`PyUnicode_CheckExact(*p_unicode)` must be true. If it is not, then -- "
"as with any other error -- the argument is left unchanged."
msgstr ""

#: c-api/unicode.rst:1523
msgid ""
"Note that interned strings are not “immortal”. You must keep a reference to "
"the result to benefit from interning."
msgstr ""

#: c-api/unicode.rst:1529
msgid ""
"A combination of :c:func:`PyUnicode_FromString` and :c:func:"
"`PyUnicode_InternInPlace`, meant for statically allocated strings."
msgstr ""

#: c-api/unicode.rst:1532
msgid ""
"Return a new (\"owned\") reference to either a new Unicode string object "
"that has been interned, or an earlier interned string object with the same "
"value."
msgstr ""

#: c-api/unicode.rst:1536
msgid ""
"Python may keep a reference to the result, or make it :term:`immortal`, "
"preventing it from being garbage-collected promptly. For interning an "
"unbounded number of different strings, such as ones coming from user input, "
"prefer calling :c:func:`PyUnicode_FromString` and :c:func:"
"`PyUnicode_InternInPlace` directly."
msgstr ""

#: c-api/unicode.rst:1544
msgid "Strings interned this way are made :term:`immortal`."
msgstr ""

#~ msgid ""
#~ ":c:expr:`Py_UNICODE*` and UTF-8 representations are created on demand and "
#~ "cached in the Unicode object.  The :c:expr:`Py_UNICODE*` representation "
#~ "is deprecated and inefficient."
#~ msgstr ""
#~ "Des représentations :c:expr:`Py_UNICODE*` et UTF-8 sont créées à la "
#~ "demande et mises en cache dans l'objet Unicode.  La représentation :c:"
#~ "expr:`Py_UNICODE*` est dépréciée et inefficace."

#~ msgid ""
#~ "Due to the transition between the old APIs and the new APIs, Unicode "
#~ "objects can internally be in two states depending on how they were "
#~ "created:"
#~ msgstr ""
#~ "En raison de la transition des anciennes APIs vers les nouvelles APIs, "
#~ "les objets Unicode peuvent être dans deux états internes selon comment "
#~ "ils ont été créés :"

#~ msgid ""
#~ "\"canonical\" Unicode objects are all objects created by a non-deprecated "
#~ "Unicode API.  They use the most efficient representation allowed by the "
#~ "implementation."
#~ msgstr ""
#~ "Les objets Unicode « canoniques » sont tous les objets créés par une API "
#~ "Unicode non-dépréciée.  Ils utilisent la représentation la plus efficace "
#~ "permise par l'implémentation."

#~ msgid ""
#~ "\"legacy\" Unicode objects have been created through one of the "
#~ "deprecated APIs (typically :c:func:`PyUnicode_FromUnicode`) and only bear "
#~ "the :c:expr:`Py_UNICODE*` representation; you will have to call :c:func:"
#~ "`PyUnicode_READY` on them before calling any other API."
#~ msgstr ""
#~ "Les objets Unicode « historiques » ont été créés via une des APIs "
#~ "dépréciées (typiquement :c:func:`PyUnicode_FromUnicode`) et supportent "
#~ "uniquement la représentation :c:expr:`Py_UNICODE*`; vous devrez appeler :"
#~ "c:func:`PyUnicode_READY` sur eux avant d'appeler n'importe quelle autre "
#~ "API."

#~ msgid "Format Characters"
#~ msgstr "Caractères de format"

#~ msgid ":attr:`%%`"
#~ msgstr ":attr:`%%`"

#~ msgid ":attr:`%c`"
#~ msgstr ":attr:`%c`"

#~ msgid "int"
#~ msgstr "*int*"

#~ msgid ":attr:`%d`"
#~ msgstr ":attr:`%d`"

#~ msgid ":attr:`%u`"
#~ msgstr ":attr:`%u`"

#~ msgid "unsigned int"
#~ msgstr "``unsigned int``"

#~ msgid ":attr:`%ld`"
#~ msgstr ":attr:`%ld`"

#~ msgid ":attr:`%li`"
#~ msgstr ":attr:`%li`"

#~ msgid ":attr:`%lu`"
#~ msgstr ":attr:`%lu`"

#~ msgid "unsigned long"
#~ msgstr "``unsigned long``"

#~ msgid ":attr:`%lld`"
#~ msgstr ":attr:`%lld`"

#~ msgid ":attr:`%lli`"
#~ msgstr ":attr:`%lli`"

#~ msgid ":attr:`%llu`"
#~ msgstr ":attr:`%llu`"

#~ msgid "unsigned long long"
#~ msgstr "``unsigned long long``"

#~ msgid ":attr:`%zd`"
#~ msgstr ":attr:`%zd`"

#~ msgid ":attr:`%zi`"
#~ msgstr ":attr:`%zi`"

#~ msgid ":attr:`%zu`"
#~ msgstr ":attr:`%zu`"

#~ msgid ":attr:`%i`"
#~ msgstr ":attr:`%i`"

#~ msgid ":attr:`%x`"
#~ msgstr ":attr:`%x`"

#~ msgid ":attr:`%s`"
#~ msgstr ":attr:`%s`"

#~ msgid ":attr:`%p`"
#~ msgstr ":attr:`%p`"

#~ msgid ":attr:`%A`"
#~ msgstr ":attr:`%A`"

#~ msgid ":attr:`%U`"
#~ msgstr ":attr:`%U`"

#~ msgid ":attr:`%V`"
#~ msgstr ":attr:`%V`"

#~ msgid ":attr:`%S`"
#~ msgstr ":attr:`%S`"

#~ msgid ":attr:`%R`"
#~ msgstr ":attr:`%R`"
