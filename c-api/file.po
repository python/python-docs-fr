# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-17 16:05+0100\n"
"PO-Revision-Date: 2018-10-18 09:48+0200\n"
"Last-Translator: \n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 1.8.11\n"

#: c-api/file.rst:6
msgid "File Objects"
msgstr "Objets fichiers"

#: c-api/file.rst:10
#, fuzzy
msgid ""
"These APIs are a minimal emulation of the Python 2 C API for built-in file "
"objects, which used to rely on the buffered I/O (:c:type:`FILE*`) support "
"from the C standard library.  In Python 3, files and streams use the new :"
"mod:`io` module, which defines several layers over the low-level unbuffered "
"I/O of the operating system.  The functions described below are convenience "
"C wrappers over these new APIs, and meant mostly for internal error "
"reporting in the interpreter; third-party code is advised to access the :mod:"
"`io` APIs instead."
msgstr ""
"Ces API sont une émulation minimale de l'API C Python 2 pour les objets "
"fichier natifs, qui reposaient sur la gestion des entrées-sorties avec "
"tampon (:c:type:`FILE\\*`) de la bibliothèque standard C. En Python 3, les "
"fichiers et les flux utilisent le nouveau module :mod:`io`, qui définit "
"plusieurs couches au dessus des entrées/sorties bas niveau sans tampon du "
"système d'exploitation. Les fonctions définies ci-dessous, écrites en C, "
"encapsulent ces nouvelles APi pour les rendre plus faciles d'utilisation et "
"sont majoritairement pensées pour signaler des erreurs internes dans "
"l'interpréteur ; il est conseillé au code tiers d'utiliser les API de :mod:"
"`io` à la place."

#: c-api/file.rst:22
#, fuzzy
msgid ""
"Create a Python file object from the file descriptor of an already opened "
"file *fd*.  The arguments *name*, *encoding*, *errors* and *newline* can be "
"``NULL`` to use the defaults; *buffering* can be *-1* to use the default. "
"*name* is ignored and kept for backward compatibility. Return ``NULL`` on "
"failure. For a more comprehensive description of the arguments, please refer "
"to the :func:`io.open` function documentation."
msgstr ""
"Crée un objet fichier Python à partir du descripteur d'un fichier déjà "
"ouvert *fd*. Les arguments *name*, *encoding*, *errors* et *newline* peuvent "
"être *NULL* pour utiliser ceux par défaut ; *buffering* peut être *-1* pour "
"utiliser celui par défaut ; *name* est ignoré et gardé pour la rétro-"
"compatibilité. Renvoie *NULL* en cas d'échec. Pour une description plus "
"détaillée des arguments, merci de vous référer à la documentation de "
"fonction :func:`io.open`."

#: c-api/file.rst:31
msgid ""
"Since Python streams have their own buffering layer, mixing them with OS-"
"level file descriptors can produce various issues (such as unexpected "
"ordering of data)."
msgstr ""
"Étant donné que les flux de données Python possèdent leur propre couche de "
"tampon, les mélanger avec des descripteurs de fichiers du niveau du système "
"d'exploitation peut produire des erreurs (comme par exemple un ordre des "
"données inattendu)."

#: c-api/file.rst:35
msgid "Ignore *name* attribute."
msgstr "ignore l'attribut *name*"

#: c-api/file.rst:41
msgid ""
"Return the file descriptor associated with *p* as an :c:type:`int`.  If the "
"object is an integer, its value is returned.  If not, the object's :meth:"
"`~io.IOBase.fileno` method is called if it exists; the method must return an "
"integer, which is returned as the file descriptor value.  Sets an exception "
"and returns ``-1`` on failure."
msgstr ""
"Renvoie un descripteur de fichier associé avec *p* comme un :c:type:`int`. "
"Si l'objet est un entier, sa valeur est renvoyée. Sinon, la méthode :meth:"
"`~io.IOBase.fileno` de l'objet est appelée si elle existe; la méthode doit "
"renvoyer un entier, qui est renvoyé en tant que valeur du descripteur. "
"Affecte une exception et renvoie ``-1`` lors d'un échec."

#: c-api/file.rst:52
msgid ""
"Equivalent to ``p.readline([n])``, this function reads one line from the "
"object *p*.  *p* may be a file object or any object with a :meth:`~io.IOBase."
"readline` method.  If *n* is ``0``, exactly one line is read, regardless of "
"the length of the line.  If *n* is greater than ``0``, no more than *n* "
"bytes will be read from the file; a partial line can be returned.  In both "
"cases, an empty string is returned if the end of the file is reached "
"immediately.  If *n* is less than ``0``, however, one line is read "
"regardless of length, but :exc:`EOFError` is raised if the end of the file "
"is reached immediately."
msgstr ""
"Cette fonction, équivalente à ``p.readline([n])``, lit une ligne de l'objet "
"*p*. *p* peut être un objet fichier ou n'importe quel objet qui possède une "
"méthode :meth:`~io.IOBase.readline`. Si *n* vaut ``0``, une seule ligne est "
"lue, indépendamment de la taille de la ligne. Si *n* est plus grand que "
"``0``, un maximum de *n* octets seront lus en provenance du fichier ; une "
"ligne partielle peut être renvoyée. Dans les deux cas, une chaîne de "
"caractères vide est renvoyée si la fin du fichier est atteinte "
"immédiatement. Cependant, si *n* est plus petit que ``0``, une ligne est lue "
"indépendamment de sa taille, mais :exc:`EOFError` est levée si la fin du "
"fichier est atteinte immédiatement."

#: c-api/file.rst:65
msgid ""
"Overrides the normal behavior of :func:`io.open_code` to pass its parameter "
"through the provided handler."
msgstr ""

#: c-api/file.rst:68
msgid ""
"The handler is a function of type :c:type:`PyObject *(\\*)(PyObject *path, "
"void *userData)`, where *path* is guaranteed to be :c:type:`PyUnicodeObject`."
msgstr ""

#: c-api/file.rst:71
msgid ""
"The *userData* pointer is passed into the hook function. Since hook "
"functions may be called from different runtimes, this pointer should not "
"refer directly to Python state."
msgstr ""

#: c-api/file.rst:75
msgid ""
"As this hook is intentionally used during import, avoid importing new "
"modules during its execution unless they are known to be frozen or available "
"in ``sys.modules``."
msgstr ""

#: c-api/file.rst:79
msgid ""
"Once a hook has been set, it cannot be removed or replaced, and later calls "
"to :c:func:`PyFile_SetOpenCodeHook` will fail. On failure, the function "
"returns -1 and sets an exception if the interpreter has been initialized."
msgstr ""

#: c-api/file.rst:83
msgid "This function is safe to call before :c:func:`Py_Initialize`."
msgstr ""

#: c-api/file.rst:86
msgid ""
"Raises an :ref:`auditing event <auditing>` ``setopencodehook`` with no "
"arguments."
msgstr ""

#: c-api/file.rst:95
msgid ""
"Write object *obj* to file object *p*.  The only supported flag for *flags* "
"is :const:`Py_PRINT_RAW`; if given, the :func:`str` of the object is written "
"instead of the :func:`repr`.  Return ``0`` on success or ``-1`` on failure; "
"the appropriate exception will be set."
msgstr ""
"Écrit l'objet *obj* dans l'objet fichier *p*. La seule option gérée pour "
"*flags* est :const:`Py_PRINT_RAW` ; si défini, l'attribut :func:`str` de "
"l'objet est écrit à la place de l'attribut :func:`repr`. Retourne ``0`` en "
"cas de succès ou ``-1`` en cas échec ; l'exception appropriée sera levée."

#: c-api/file.rst:103
msgid ""
"Write string *s* to file object *p*.  Return ``0`` on success or ``-1`` on "
"failure; the appropriate exception will be set."
msgstr ""
"Écrit la chaîne de caractères *s* dans l'objet fichier *p*. Retourne ``0`` "
"en cas de succès ou ``-1`` en cas d'échec ; l'exception appropriée sera mise "
"en place."
