# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-24 09:01+0200\n"
"PO-Revision-Date: 2019-01-14 20:31+0100\n"
"Last-Translator: ANTOINE FOURES <afoures@student.42.fr>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.0.4\n"

#: c-api/complex.rst:6
msgid "Complex Number Objects"
msgstr "Objets représentant des nombres complexes"

#: c-api/complex.rst:10
msgid ""
"Python's complex number objects are implemented as two distinct types when "
"viewed from the C API:  one is the Python object exposed to Python programs, "
"and the other is a C structure which represents the actual complex number "
"value. The API provides functions for working with both."
msgstr ""
"Les nombres complexes Python sont implémentés comme deux types distincts, "
"lorsqu'ils sont vus de l'API C : l'un est l'objet Python tel qu'il est vu "
"par les programmes Python, et l'autre est une structure C qui représente la "
"valeur exacte du nombre complexe. L'API fournit des fonctions pour "
"travailler avec ces deux représentations."

#: c-api/complex.rst:17
msgid "Complex Numbers as C Structures"
msgstr "Nombres complexes en tant que structures C"

#: c-api/complex.rst:19
msgid ""
"Note that the functions which accept these structures as parameters and "
"return them as results do so *by value* rather than dereferencing them "
"through pointers.  This is consistent throughout the API."
msgstr ""
"Les fonctions qui acceptent ces structures comme paramètres et les renvoient "
"comme résultats le font en fonction de leur *valeur* au lieu de les dé-"
"référencer en utilisant des pointeurs. C'est constant dans toute l'API."

#: c-api/complex.rst:26
msgid ""
"The C structure which corresponds to the value portion of a Python complex "
"number object.  Most of the functions for dealing with complex number "
"objects use structures of this type as input or output values, as "
"appropriate.  It is defined as::"
msgstr ""
"Structure C représentant la valeur d'un nombre complexe Python. La majorité "
"des fonctions qui traitent des nombres complexes utilisent cette structure "
"en entrée ou en sortie, selon le cas. Elle est définie par ::"

#: c-api/complex.rst:39
msgid ""
"Return the sum of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr ""
"Renvoie la somme de deux nombres complexes, sous la forme d'un :c:type:"
"`Py_complex` en C."

#: c-api/complex.rst:45
msgid ""
"Return the difference between two complex numbers, using the C :c:type:"
"`Py_complex` representation."
msgstr ""
"Renvoie la différence de deux nombres complexes, sous la forme d'un :c:type:"
"`Py_complex` en C."

#: c-api/complex.rst:51
msgid ""
"Return the negation of the complex number *complex*, using the C :c:type:"
"`Py_complex` representation."
msgstr ""
"Renvoie l'opposé du nombre complexe *complex*, sous la forme d'un :c:type:"
"`Py_complex` en C."

#: c-api/complex.rst:57
msgid ""
"Return the product of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr ""
"Renvoie le produit de deux nombres complexes, sous la forme d'un :c:type:"
"`Py_complex` en C."

#: c-api/complex.rst:63
msgid ""
"Return the quotient of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr ""
"Renvoie le quotient de deux nombres complexes, sous la forme d'un :c:type:"
"`Py_complex` en C."

#: c-api/complex.rst:66
msgid ""
"If *divisor* is null, this method returns zero and sets :c:data:`errno` to :"
"c:data:`EDOM`."
msgstr ""
"Si *divisor* est nul, cette méthode renvoie zéro et assigne :c:data:`EDOM` "
"à :c:data:`errno`."

#: c-api/complex.rst:72
msgid ""
"Return the exponentiation of *num* by *exp*, using the C :c:type:"
"`Py_complex` representation."
msgstr ""
"Renvoie *num* à la puissance *exp*, sous la forme d'un :c:type:`Py_complex` "
"en C."

#: c-api/complex.rst:75
msgid ""
"If *num* is null and *exp* is not a positive real number, this method "
"returns zero and sets :c:data:`errno` to :c:data:`EDOM`."
msgstr ""
"Si *num* est nul et *exp* n'est pas un nombre réel positif, cette méthode "
"renvoie zéro et assigne :c:data:`EDOM` à :c:data:`errno`."

#: c-api/complex.rst:80
msgid "Complex Numbers as Python Objects"
msgstr "Nombres complexes en tant qu'objets Python"

#: c-api/complex.rst:85
msgid ""
"This subtype of :c:type:`PyObject` represents a Python complex number object."
msgstr ""
"Ce sous-type de l'objet :c:type:`PyObject` représente un nombre complexe en "
"Python."

#: c-api/complex.rst:90
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python complex number "
"type. It is the same object as :class:`complex` in the Python layer."
msgstr ""
"Cette instance de :c:type:`PyTypeObject` représente le type nombre complexe "
"Python. C'est le même objet que la classe :class:`complex` de la couche "
"Python."

#: c-api/complex.rst:96
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject` or a subtype of :"
"c:type:`PyComplexObject`."
msgstr ""
"Renvoie vrai si l'argument est de type :c:type:`PyComplexObject` ou un sous-"
"type de :c:type:`PyComplexObject`."

#: c-api/complex.rst:102
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject`, but not a "
"subtype of :c:type:`PyComplexObject`."
msgstr ""
"Renvoie vrai si l'argument est de type :c:type:`PyComplexObject`, mais pas "
"un sous-type de :c:type:`PyComplexObject`."

#: c-api/complex.rst:108
msgid ""
"Create a new Python complex number object from a C :c:type:`Py_complex` "
"value."
msgstr ""
"Crée un nouveau nombre complexe à partir de la valeur d'un :c:type:"
"`Py_complex` en C."

#: c-api/complex.rst:113
msgid "Return a new :c:type:`PyComplexObject` object from *real* and *imag*."
msgstr ""
"Renvoie un nouveau :c:type:`PyComplexObject` à partir de *real* et de *imag*."

#: c-api/complex.rst:118
msgid "Return the real part of *op* as a C :c:type:`double`."
msgstr ""
"Renvoie la partie réelle du nombre complexe *op* sous la forme d'un :c:type:"
"`double` en C."

#: c-api/complex.rst:123
msgid "Return the imaginary part of *op* as a C :c:type:`double`."
msgstr ""
"Renvoie la partie imaginaire du nombre complexe *op* sous la forme d'un :c:"
"type:`double` en C."

#: c-api/complex.rst:128
msgid "Return the :c:type:`Py_complex` value of the complex number *op*."
msgstr ""
"Renvoie la valeur du nombre complexe *op* sous la forme d'un :c:type:"
"`Py_complex` en C."

#: c-api/complex.rst:130
#, fuzzy
msgid ""
"If *op* is not a Python complex number object but has a :meth:`__complex__` "
"method, this method will first be called to convert *op* to a Python complex "
"number object.  If ``__complex__()`` is not defined then it falls back to :"
"meth:`__float__`.  If ``__float__()`` is not defined then it falls back to :"
"meth:`__index__`.  Upon failure, this method returns ``-1.0`` as a real "
"value."
msgstr ""
"Si *op* n'est pas un nombre complexe Python mais a une méthode :meth:"
"`__complex__`, cette méthode est d'abord appelée pour convertir *op* en "
"nombre complexe Python. En cas d'échec, cette méthode renvoie ``-1.0`` en "
"tant que nombre réel."

#: c-api/complex.rst:137
msgid "Use :meth:`__index__` if available."
msgstr ""
