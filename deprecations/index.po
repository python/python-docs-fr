# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-29 22:40+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: deprecations/index.rst:2
msgid "Deprecations"
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:2
#: deprecations/pending-removal-in-3.14.rst:2
msgid "Pending Removal in Python 3.14"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:4
#: deprecations/pending-removal-in-3.15.rst:4
msgid "The import system:"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:6
msgid ""
"Setting :attr:`~module.__loader__` on a module while failing to set :attr:"
"`__spec__.loader <importlib.machinery.ModuleSpec.loader>` is deprecated. In "
"Python 3.14, :attr:`!__loader__` will cease to be set or taken into "
"consideration by the import system or the standard library."
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:11
msgid ""
":mod:`argparse`: The *type*, *choices*, and *metavar* parameters of :class:`!"
"argparse.BooleanOptionalAction` are deprecated and will be removed in 3.14. "
"(Contributed by Nikita Sobolev in :gh:`92248`.)"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:16
msgid ""
":mod:`ast`: The following features have been deprecated in documentation "
"since Python 3.8, now cause a :exc:`DeprecationWarning` to be emitted at "
"runtime when they are accessed or used, and will be removed in Python 3.14:"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:20
msgid ":class:`!ast.Num`"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:21
msgid ":class:`!ast.Str`"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:22
msgid ":class:`!ast.Bytes`"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:23
msgid ":class:`!ast.NameConstant`"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:24
msgid ":class:`!ast.Ellipsis`"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:26
msgid ""
"Use :class:`ast.Constant` instead. (Contributed by Serhiy Storchaka in :gh:"
"`90953`.)"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:29
msgid ":mod:`asyncio`:"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:31
msgid ""
"The child watcher classes :class:`~asyncio.MultiLoopChildWatcher`, :class:"
"`~asyncio.FastChildWatcher`, :class:`~asyncio.AbstractChildWatcher` and :"
"class:`~asyncio.SafeChildWatcher` are deprecated and will be removed in "
"Python 3.14. (Contributed by Kumar Aditya in :gh:`94597`.)"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:37
msgid ""
":func:`asyncio.set_child_watcher`, :func:`asyncio.get_child_watcher`, :meth:"
"`asyncio.AbstractEventLoopPolicy.set_child_watcher` and :meth:`asyncio."
"AbstractEventLoopPolicy.get_child_watcher` are deprecated and will be "
"removed in Python 3.14. (Contributed by Kumar Aditya in :gh:`94597`.)"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:43
msgid ""
"The :meth:`~asyncio.get_event_loop` method of the default event loop policy "
"now emits a :exc:`DeprecationWarning` if there is no current event loop set "
"and it decides to create one. (Contributed by Serhiy Storchaka and Guido van "
"Rossum in :gh:`100160`.)"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:48
msgid ""
":mod:`collections.abc`: Deprecated :class:`~collections.abc.ByteString`. "
"Prefer :class:`!Sequence` or :class:`~collections.abc.Buffer`. For use in "
"typing, prefer a union, like ``bytes | bytearray``, or :class:`collections."
"abc.Buffer`. (Contributed by Shantanu Jain in :gh:`91896`.)"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:54
msgid ""
":mod:`email`: Deprecated the *isdst* parameter in :func:`email.utils."
"localtime`. (Contributed by Alan Williams in :gh:`72346`.)"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:57
msgid ":mod:`importlib.abc` deprecated classes:"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:59
msgid ":class:`!importlib.abc.ResourceReader`"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:60
msgid ":class:`!importlib.abc.Traversable`"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:61
msgid ":class:`!importlib.abc.TraversableResources`"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:63
msgid "Use :mod:`importlib.resources.abc` classes instead:"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:65
msgid ":class:`importlib.resources.abc.Traversable`"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:66
msgid ":class:`importlib.resources.abc.TraversableResources`"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:68
msgid "(Contributed by Jason R. Coombs and Hugo van Kemenade in :gh:`93963`.)"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:70
msgid ""
":mod:`itertools` had undocumented, inefficient, historically buggy, and "
"inconsistent support for copy, deepcopy, and pickle operations. This will be "
"removed in 3.14 for a significant reduction in code volume and maintenance "
"burden. (Contributed by Raymond Hettinger in :gh:`101588`.)"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:76
msgid ""
":mod:`multiprocessing`: The default start method will change to a safer one "
"on Linux, BSDs, and other non-macOS POSIX platforms where ``'fork'`` is "
"currently the default (:gh:`84559`). Adding a runtime warning about this was "
"deemed too disruptive as the majority of code is not expected to care. Use "
"the :func:`~multiprocessing.get_context` or :func:`~multiprocessing."
"set_start_method` APIs to explicitly specify when your code *requires* "
"``'fork'``.  See :ref:`multiprocessing-start-methods`."
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:84
msgid ""
":mod:`pathlib`: :meth:`~pathlib.PurePath.is_relative_to` and :meth:`~pathlib."
"PurePath.relative_to`: passing additional arguments is deprecated."
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:88
msgid ""
":mod:`pkgutil`: :func:`~pkgutil.find_loader` and :func:`~pkgutil.get_loader` "
"now raise :exc:`DeprecationWarning`; use :func:`importlib.util.find_spec` "
"instead. (Contributed by Nikita Sobolev in :gh:`97850`.)"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:93
msgid ":mod:`pty`:"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:95
msgid "``master_open()``: use :func:`pty.openpty`."
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:96
msgid "``slave_open()``: use :func:`pty.openpty`."
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:98
msgid ":mod:`sqlite3`:"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:100
msgid ":data:`~sqlite3.version` and :data:`~sqlite3.version_info`."
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:102
msgid ""
":meth:`~sqlite3.Cursor.execute` and :meth:`~sqlite3.Cursor.executemany` if :"
"ref:`named placeholders <sqlite3-placeholders>` are used and *parameters* is "
"a sequence instead of a :class:`dict`."
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:106
msgid ""
"date and datetime adapter, date and timestamp converter: see the :mod:"
"`sqlite3` documentation for suggested replacement recipes."
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:109
msgid ""
":class:`types.CodeType`: Accessing :attr:`~codeobject.co_lnotab` was "
"deprecated in :pep:`626` since 3.10 and was planned to be removed in 3.12, "
"but it only got a proper :exc:`DeprecationWarning` in 3.12. May be removed "
"in 3.14. (Contributed by Nikita Sobolev in :gh:`101866`.)"
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:116
msgid ""
":mod:`typing`: :class:`~typing.ByteString`, deprecated since Python 3.9, now "
"causes a :exc:`DeprecationWarning` to be emitted when it is used."
msgstr ""

#: deprecations/pending-removal-in-3.14.rst:119
msgid ""
":mod:`urllib`: :class:`!urllib.parse.Quoter` is deprecated: it was not "
"intended to be a public API. (Contributed by Gregory P. Smith in :gh:"
"`88168`.)"
msgstr ""

#: deprecations/c-api-pending-removal-in-3.15.rst:2
#: deprecations/pending-removal-in-3.15.rst:2
msgid "Pending Removal in Python 3.15"
msgstr ""

#: deprecations/pending-removal-in-3.15.rst:6
msgid ""
"Setting :attr:`~module.__cached__` on a module while failing to set :attr:"
"`__spec__.cached <importlib.machinery.ModuleSpec.cached>` is deprecated. In "
"Python 3.15, :attr:`!__cached__` will cease to be set or take into "
"consideration by the import system or standard library. (:gh:`97879`)"
msgstr ""

#: deprecations/pending-removal-in-3.15.rst:11
msgid ""
"Setting :attr:`~module.__package__` on a module while failing to set :attr:"
"`__spec__.parent <importlib.machinery.ModuleSpec.parent>` is deprecated. In "
"Python 3.15, :attr:`!__package__` will cease to be set or take into "
"consideration by the import system or standard library. (:gh:`97879`)"
msgstr ""

#: deprecations/pending-removal-in-3.15.rst:16
msgid ":mod:`ctypes`:"
msgstr ""

#: deprecations/pending-removal-in-3.15.rst:18
msgid ""
"The undocumented :func:`!ctypes.SetPointerType` function has been deprecated "
"since Python 3.13."
msgstr ""

#: deprecations/pending-removal-in-3.15.rst:21
msgid ":mod:`http.server`:"
msgstr ""

#: deprecations/pending-removal-in-3.15.rst:23
msgid ""
"The obsolete and rarely used :class:`~http.server.CGIHTTPRequestHandler` has "
"been deprecated since Python 3.13. No direct replacement exists. *Anything* "
"is better than CGI to interface a web server with a request handler."
msgstr ""

#: deprecations/pending-removal-in-3.15.rst:29
msgid ""
"The :option:`!--cgi` flag to the :program:`python -m http.server` command-"
"line interface has been deprecated since Python 3.13."
msgstr ""

#: deprecations/pending-removal-in-3.15.rst:32
msgid ":class:`locale`:"
msgstr ""

#: deprecations/pending-removal-in-3.15.rst:34
msgid ""
"The :func:`~locale.getdefaultlocale` function has been deprecated since "
"Python 3.11. Its removal was originally planned for Python 3.13 (:gh:"
"`90817`), but has been postponed to Python 3.15. Use :func:`~locale."
"getlocale`, :func:`~locale.setlocale`, and :func:`~locale.getencoding` "
"instead. (Contributed by Hugo van Kemenade in :gh:`111187`.)"
msgstr ""

#: deprecations/pending-removal-in-3.15.rst:42
msgid ":mod:`pathlib`:"
msgstr ""

#: deprecations/pending-removal-in-3.15.rst:44
msgid ""
":meth:`.PurePath.is_reserved` has been deprecated since Python 3.13. Use :"
"func:`os.path.isreserved` to detect reserved paths on Windows."
msgstr ""

#: deprecations/pending-removal-in-3.15.rst:48
msgid ":mod:`platform`:"
msgstr ""

#: deprecations/pending-removal-in-3.15.rst:50
msgid ""
":func:`~platform.java_ver` has been deprecated since Python 3.13. This "
"function is only useful for Jython support, has a confusing API, and is "
"largely untested."
msgstr ""

#: deprecations/pending-removal-in-3.15.rst:54
msgid ":mod:`threading`:"
msgstr ""

#: deprecations/pending-removal-in-3.15.rst:56
msgid ""
":func:`~threading.RLock` will take no arguments in Python 3.15. Passing any "
"arguments has been deprecated since Python 3.14, as the  Python version does "
"not permit any arguments, but the C version allows any number of positional "
"or keyword arguments, ignoring every argument."
msgstr ""

#: deprecations/pending-removal-in-3.15.rst:62
msgid ":mod:`typing`:"
msgstr ""

#: deprecations/pending-removal-in-3.15.rst:64
msgid ""
"The undocumented keyword argument syntax for creating :class:`~typing."
"NamedTuple` classes (e.g. ``Point = NamedTuple(\"Point\", x=int, y=int)``) "
"has been deprecated since Python 3.13. Use the class-based syntax or the "
"functional syntax instead."
msgstr ""

#: deprecations/pending-removal-in-3.15.rst:70
msgid ""
"The :func:`typing.no_type_check_decorator` decorator function has been "
"deprecated since Python 3.13. After eight years in the :mod:`typing` module, "
"it has yet to be supported by any major type checker."
msgstr ""

#: deprecations/pending-removal-in-3.15.rst:75
msgid ":mod:`wave`:"
msgstr ""

#: deprecations/pending-removal-in-3.15.rst:77
msgid ""
"The :meth:`~wave.Wave_read.getmark`, :meth:`!setmark`, and :meth:`~wave."
"Wave_read.getmarkers` methods of the :class:`~wave.Wave_read` and :class:"
"`~wave.Wave_write` classes have been deprecated since Python 3.13."
msgstr ""

#: deprecations/pending-removal-in-3.16.rst:2
msgid "Pending Removal in Python 3.16"
msgstr ""

#: deprecations/pending-removal-in-3.16.rst:4
#: deprecations/pending-removal-in-future.rst:12
msgid ":mod:`builtins`:"
msgstr ""

#: deprecations/pending-removal-in-3.16.rst:6
msgid ""
"Bitwise inversion on boolean types, ``~True`` or ``~False`` has been "
"deprecated since Python 3.12, as it produces surprising and unintuitive "
"results (``-2`` and ``-1``). Use ``not x`` instead for the logical negation "
"of a Boolean. In the rare case that you need the bitwise inversion of the "
"underlying integer, convert to ``int`` explicitly (``~int(x)``)."
msgstr ""

#: deprecations/pending-removal-in-3.16.rst:13
msgid ":mod:`array`:"
msgstr ""

#: deprecations/pending-removal-in-3.16.rst:15
msgid ""
"The ``'u'`` format code (:c:type:`wchar_t`) has been deprecated in "
"documentation since Python 3.3 and at runtime since Python 3.13. Use the "
"``'w'`` format code (:c:type:`Py_UCS4`) for Unicode characters instead."
msgstr ""

#: deprecations/pending-removal-in-3.16.rst:21
msgid ":mod:`shutil`:"
msgstr ""

#: deprecations/pending-removal-in-3.16.rst:23
msgid ""
"The :class:`!ExecError` exception has been deprecated since Python 3.14. It "
"has not been used by any function in :mod:`!shutil` since Python 3.4, and is "
"now an alias of :exc:`RuntimeError`."
msgstr ""

#: deprecations/pending-removal-in-3.16.rst:28
msgid ":mod:`symtable`:"
msgstr ""

#: deprecations/pending-removal-in-3.16.rst:30
msgid ""
"The :meth:`Class.get_methods <symtable.Class.get_methods>` method has been "
"deprecated since Python 3.14."
msgstr ""

#: deprecations/pending-removal-in-3.16.rst:33
msgid ":mod:`sys`:"
msgstr ""

#: deprecations/pending-removal-in-3.16.rst:35
msgid ""
"The :func:`~sys._enablelegacywindowsfsencoding` function has been deprecated "
"since Python 3.13. Use the :envvar:`PYTHONLEGACYWINDOWSFSENCODING` "
"environment variable instead."
msgstr ""

#: deprecations/pending-removal-in-3.16.rst:39
msgid ":mod:`tarfile`:"
msgstr ""

#: deprecations/pending-removal-in-3.16.rst:41
msgid ""
"The undocumented and unused :attr:`!TarFile.tarfile` attribute has been "
"deprecated since Python 3.13."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:2
#: deprecations/pending-removal-in-future.rst:2
msgid "Pending Removal in Future Versions"
msgstr ""

#: deprecations/pending-removal-in-future.rst:4
msgid ""
"The following APIs will be removed in the future, although there is "
"currently no date scheduled for their removal."
msgstr ""

#: deprecations/pending-removal-in-future.rst:7
msgid ""
":mod:`argparse`: Nesting argument groups and nesting mutually exclusive "
"groups are deprecated."
msgstr ""

#: deprecations/pending-removal-in-future.rst:10
msgid ":mod:`array`'s ``'u'`` format code (:gh:`57281`)"
msgstr ""

#: deprecations/pending-removal-in-future.rst:14
msgid "``bool(NotImplemented)``."
msgstr ""

#: deprecations/pending-removal-in-future.rst:15
msgid ""
"Generators: ``throw(type, exc, tb)`` and ``athrow(type, exc, tb)`` signature "
"is deprecated: use ``throw(exc)`` and ``athrow(exc)`` instead, the single "
"argument signature."
msgstr ""

#: deprecations/pending-removal-in-future.rst:18
msgid ""
"Currently Python accepts numeric literals immediately followed by keywords, "
"for example ``0in x``, ``1or x``, ``0if 1else 2``.  It allows confusing and "
"ambiguous expressions like ``[0x1for x in y]`` (which can be interpreted as "
"``[0x1 for x in y]`` or ``[0x1f or x in y]``).  A syntax warning is raised "
"if the numeric literal is immediately followed by one of keywords :keyword:"
"`and`, :keyword:`else`, :keyword:`for`, :keyword:`if`, :keyword:`in`, :"
"keyword:`is` and :keyword:`or`.  In a future release it will be changed to a "
"syntax error. (:gh:`87999`)"
msgstr ""

#: deprecations/pending-removal-in-future.rst:26
msgid ""
"Support for ``__index__()`` and ``__int__()`` method returning non-int type: "
"these methods will be required to return an instance of a strict subclass "
"of :class:`int`."
msgstr ""

#: deprecations/pending-removal-in-future.rst:29
msgid ""
"Support for ``__float__()`` method returning a strict subclass of :class:"
"`float`: these methods will be required to return an instance of :class:"
"`float`."
msgstr ""

#: deprecations/pending-removal-in-future.rst:32
msgid ""
"Support for ``__complex__()`` method returning a strict subclass of :class:"
"`complex`: these methods will be required to return an instance of :class:"
"`complex`."
msgstr ""

#: deprecations/pending-removal-in-future.rst:35
msgid "Delegation of ``int()`` to ``__trunc__()`` method."
msgstr ""

#: deprecations/pending-removal-in-future.rst:36
msgid ""
"Passing a complex number as the *real* or *imag* argument in the :func:"
"`complex` constructor is now deprecated; it should only be passed as a "
"single positional argument. (Contributed by Serhiy Storchaka in :gh:"
"`109218`.)"
msgstr ""

#: deprecations/pending-removal-in-future.rst:41
msgid ""
":mod:`calendar`: ``calendar.January`` and ``calendar.February`` constants "
"are deprecated and replaced by :data:`calendar.JANUARY` and :data:`calendar."
"FEBRUARY`. (Contributed by Prince Roshan in :gh:`103636`.)"
msgstr ""

#: deprecations/pending-removal-in-future.rst:46
msgid ""
":attr:`codeobject.co_lnotab`: use the :meth:`codeobject.co_lines` method "
"instead."
msgstr ""

#: deprecations/pending-removal-in-future.rst:49
msgid ":mod:`datetime`:"
msgstr ""

#: deprecations/pending-removal-in-future.rst:51
msgid ""
":meth:`~datetime.datetime.utcnow`: use ``datetime.datetime.now(tz=datetime."
"UTC)``."
msgstr ""

#: deprecations/pending-removal-in-future.rst:53
msgid ""
":meth:`~datetime.datetime.utcfromtimestamp`: use ``datetime.datetime."
"fromtimestamp(timestamp, tz=datetime.UTC)``."
msgstr ""

#: deprecations/pending-removal-in-future.rst:56
msgid ":mod:`gettext`: Plural value must be an integer."
msgstr ""

#: deprecations/pending-removal-in-future.rst:58
msgid ":mod:`importlib`:"
msgstr ""

#: deprecations/pending-removal-in-future.rst:60
msgid "``load_module()`` method: use ``exec_module()`` instead."
msgstr ""

#: deprecations/pending-removal-in-future.rst:61
msgid ""
":func:`~importlib.util.cache_from_source` *debug_override* parameter is "
"deprecated: use the *optimization* parameter instead."
msgstr ""

#: deprecations/pending-removal-in-future.rst:64
msgid ":mod:`importlib.metadata`:"
msgstr ""

#: deprecations/pending-removal-in-future.rst:66
msgid "``EntryPoints`` tuple interface."
msgstr ""

#: deprecations/pending-removal-in-future.rst:67
msgid "Implicit ``None`` on return values."
msgstr ""

#: deprecations/pending-removal-in-future.rst:69
msgid ""
":mod:`logging`: the ``warn()`` method has been deprecated since Python 3.3, "
"use :meth:`~logging.warning` instead."
msgstr ""

#: deprecations/pending-removal-in-future.rst:72
msgid ""
":mod:`mailbox`: Use of StringIO input and text mode is deprecated, use "
"BytesIO and binary mode instead."
msgstr ""

#: deprecations/pending-removal-in-future.rst:75
msgid ""
":mod:`os`: Calling :func:`os.register_at_fork` in multi-threaded process."
msgstr ""

#: deprecations/pending-removal-in-future.rst:77
msgid ""
":class:`!pydoc.ErrorDuringImport`: A tuple value for *exc_info* parameter is "
"deprecated, use an exception instance."
msgstr ""

#: deprecations/pending-removal-in-future.rst:80
msgid ""
":mod:`re`: More strict rules are now applied for numerical group references "
"and group names in regular expressions.  Only sequence of ASCII digits is "
"now accepted as a numerical reference.  The group name in bytes patterns and "
"replacement strings can now only contain ASCII letters and digits and "
"underscore. (Contributed by Serhiy Storchaka in :gh:`91760`.)"
msgstr ""

#: deprecations/pending-removal-in-future.rst:87
msgid ""
":mod:`!sre_compile`, :mod:`!sre_constants` and :mod:`!sre_parse` modules."
msgstr ""

#: deprecations/pending-removal-in-future.rst:89
msgid ""
":mod:`shutil`: :func:`~shutil.rmtree`'s *onerror* parameter is deprecated in "
"Python 3.12; use the *onexc* parameter instead."
msgstr ""

#: deprecations/pending-removal-in-future.rst:92
msgid ":mod:`ssl` options and protocols:"
msgstr ""

#: deprecations/pending-removal-in-future.rst:94
msgid ":class:`ssl.SSLContext` without protocol argument is deprecated."
msgstr ""

#: deprecations/pending-removal-in-future.rst:95
msgid ""
":class:`ssl.SSLContext`: :meth:`~ssl.SSLContext.set_npn_protocols` and :meth:"
"`!selected_npn_protocol` are deprecated: use ALPN instead."
msgstr ""

#: deprecations/pending-removal-in-future.rst:98
msgid "``ssl.OP_NO_SSL*`` options"
msgstr ""

#: deprecations/pending-removal-in-future.rst:99
msgid "``ssl.OP_NO_TLS*`` options"
msgstr ""

#: deprecations/pending-removal-in-future.rst:100
msgid "``ssl.PROTOCOL_SSLv3``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:101
msgid "``ssl.PROTOCOL_TLS``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:102
msgid "``ssl.PROTOCOL_TLSv1``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:103
msgid "``ssl.PROTOCOL_TLSv1_1``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:104
msgid "``ssl.PROTOCOL_TLSv1_2``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:105
msgid "``ssl.TLSVersion.SSLv3``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:106
msgid "``ssl.TLSVersion.TLSv1``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:107
msgid "``ssl.TLSVersion.TLSv1_1``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:109
msgid ""
":func:`sysconfig.is_python_build` *check_home* parameter is deprecated and "
"ignored."
msgstr ""

#: deprecations/pending-removal-in-future.rst:112
msgid ":mod:`threading` methods:"
msgstr ""

#: deprecations/pending-removal-in-future.rst:114
msgid ""
":meth:`!threading.Condition.notifyAll`: use :meth:`~threading.Condition."
"notify_all`."
msgstr ""

#: deprecations/pending-removal-in-future.rst:115
msgid ":meth:`!threading.Event.isSet`: use :meth:`~threading.Event.is_set`."
msgstr ""

#: deprecations/pending-removal-in-future.rst:116
msgid ""
":meth:`!threading.Thread.isDaemon`, :meth:`threading.Thread.setDaemon`: use :"
"attr:`threading.Thread.daemon` attribute."
msgstr ""

#: deprecations/pending-removal-in-future.rst:118
msgid ""
":meth:`!threading.Thread.getName`, :meth:`threading.Thread.setName`: use :"
"attr:`threading.Thread.name` attribute."
msgstr ""

#: deprecations/pending-removal-in-future.rst:120
msgid ":meth:`!threading.currentThread`: use :meth:`threading.current_thread`."
msgstr ""

#: deprecations/pending-removal-in-future.rst:121
msgid ":meth:`!threading.activeCount`: use :meth:`threading.active_count`."
msgstr ""

#: deprecations/pending-removal-in-future.rst:123
msgid ":class:`typing.Text` (:gh:`92332`)."
msgstr ""

#: deprecations/pending-removal-in-future.rst:125
msgid ""
":class:`unittest.IsolatedAsyncioTestCase`: it is deprecated to return a "
"value that is not ``None`` from a test case."
msgstr ""

#: deprecations/pending-removal-in-future.rst:128
msgid ""
":mod:`urllib.parse` deprecated functions: :func:`~urllib.parse.urlparse` "
"instead"
msgstr ""

#: deprecations/pending-removal-in-future.rst:130
msgid "``splitattr()``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:131
msgid "``splithost()``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:132
msgid "``splitnport()``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:133
msgid "``splitpasswd()``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:134
msgid "``splitport()``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:135
msgid "``splitquery()``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:136
msgid "``splittag()``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:137
msgid "``splittype()``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:138
msgid "``splituser()``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:139
msgid "``splitvalue()``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:140
msgid "``to_bytes()``"
msgstr ""

#: deprecations/pending-removal-in-future.rst:142
msgid ""
":mod:`urllib.request`: :class:`~urllib.request.URLopener` and :class:"
"`~urllib.request.FancyURLopener` style of invoking requests is deprecated. "
"Use newer :func:`~urllib.request.urlopen` functions and methods."
msgstr ""

#: deprecations/pending-removal-in-future.rst:146
msgid ""
":mod:`wsgiref`: ``SimpleHandler.stdout.write()`` should not do partial "
"writes."
msgstr ""

#: deprecations/pending-removal-in-future.rst:149
msgid ""
":mod:`xml.etree.ElementTree`: Testing the truth value of an :class:`~xml."
"etree.ElementTree.Element` is deprecated. In a future release it will always "
"return ``True``. Prefer explicit ``len(elem)`` or ``elem is not None`` tests "
"instead."
msgstr ""

#: deprecations/pending-removal-in-future.rst:154
msgid ""
":meth:`zipimport.zipimporter.load_module` is deprecated: use :meth:"
"`~zipimport.zipimporter.exec_module` instead."
msgstr ""

#: deprecations/index.rst:13
msgid "C API Deprecations"
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:4
msgid ""
"The ``ma_version_tag`` field in :c:type:`PyDictObject` for extension modules "
"(:pep:`699`; :gh:`101193`)."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:7
msgid ""
"Creating :c:data:`immutable types <Py_TPFLAGS_IMMUTABLETYPE>` with mutable "
"bases (:gh:`95388`)."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:10
msgid ""
"Functions to configure Python's initialization, deprecated in Python 3.11:"
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:12
msgid ":c:func:`!PySys_SetArgvEx()`: Set :c:member:`PyConfig.argv` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:14
msgid ":c:func:`!PySys_SetArgv()`: Set :c:member:`PyConfig.argv` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:16
msgid ""
":c:func:`!Py_SetProgramName()`: Set :c:member:`PyConfig.program_name` "
"instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:18
msgid ":c:func:`!Py_SetPythonHome()`: Set :c:member:`PyConfig.home` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:21
#: deprecations/c-api-pending-removal-in-3.14.rst:71
msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with :c:type:"
"`PyConfig` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:24
msgid "Global configuration variables:"
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:26
msgid ":c:var:`Py_DebugFlag`: Use :c:member:`PyConfig.parser_debug` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:28
msgid ":c:var:`Py_VerboseFlag`: Use :c:member:`PyConfig.verbose` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:30
msgid ":c:var:`Py_QuietFlag`: Use :c:member:`PyConfig.quiet` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:32
msgid ""
":c:var:`Py_InteractiveFlag`: Use :c:member:`PyConfig.interactive` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:34
msgid ":c:var:`Py_InspectFlag`: Use :c:member:`PyConfig.inspect` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:36
msgid ""
":c:var:`Py_OptimizeFlag`: Use :c:member:`PyConfig.optimization_level` "
"instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:38
msgid ":c:var:`Py_NoSiteFlag`: Use :c:member:`PyConfig.site_import` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:40
msgid ""
":c:var:`Py_BytesWarningFlag`: Use :c:member:`PyConfig.bytes_warning` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:42
msgid ""
":c:var:`Py_FrozenFlag`: Use :c:member:`PyConfig.pathconfig_warnings` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:44
msgid ""
":c:var:`Py_IgnoreEnvironmentFlag`: Use :c:member:`PyConfig.use_environment` "
"instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:46
msgid ""
":c:var:`Py_DontWriteBytecodeFlag`: Use :c:member:`PyConfig.write_bytecode` "
"instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:48
msgid ""
":c:var:`Py_NoUserSiteDirectory`: Use :c:member:`PyConfig."
"user_site_directory` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:50
msgid ""
":c:var:`Py_UnbufferedStdioFlag`: Use :c:member:`PyConfig.buffered_stdio` "
"instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:52
msgid ""
":c:var:`Py_HashRandomizationFlag`: Use :c:member:`PyConfig.use_hash_seed` "
"and :c:member:`PyConfig.hash_seed` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:55
msgid ":c:var:`Py_IsolatedFlag`: Use :c:member:`PyConfig.isolated` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:57
msgid ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: Use :c:member:`PyPreConfig."
"legacy_windows_fs_encoding` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:59
msgid ""
":c:var:`Py_LegacyWindowsStdioFlag`: Use :c:member:`PyConfig."
"legacy_windows_stdio` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:61
msgid ""
":c:var:`!Py_FileSystemDefaultEncoding`: Use :c:member:`PyConfig."
"filesystem_encoding` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:63
msgid ""
":c:var:`!Py_HasFileSystemDefaultEncoding`: Use :c:member:`PyConfig."
"filesystem_encoding` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:65
msgid ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: Use :c:member:`PyConfig."
"filesystem_errors` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.14.rst:67
msgid ""
":c:var:`!Py_UTF8Mode`: Use :c:member:`PyPreConfig.utf8_mode` instead. (see :"
"c:func:`Py_PreInitialize`)"
msgstr ""

#: deprecations/c-api-pending-removal-in-3.15.rst:4
msgid "The bundled copy of ``libmpdecimal``."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.15.rst:5
msgid ""
"The :c:func:`PyImport_ImportModuleNoBlock`: Use :c:func:"
"`PyImport_ImportModule` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.15.rst:7
msgid ""
":c:func:`PyWeakref_GetObject` and :c:func:`PyWeakref_GET_OBJECT`: Use :c:"
"func:`PyWeakref_GetRef` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.15.rst:9
msgid ""
":c:type:`Py_UNICODE` type and the :c:macro:`!Py_UNICODE_WIDE` macro: Use :c:"
"type:`wchar_t` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.15.rst:11
msgid "Python initialization functions:"
msgstr ""

#: deprecations/c-api-pending-removal-in-3.15.rst:13
msgid ""
":c:func:`PySys_ResetWarnOptions`: Clear :data:`sys.warnoptions` and :data:`!"
"warnings.filters` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.15.rst:15
msgid ""
":c:func:`Py_GetExecPrefix`: Get :data:`sys.base_exec_prefix` and :data:`sys."
"exec_prefix` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.15.rst:17
msgid ":c:func:`Py_GetPath`: Get :data:`sys.path` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.15.rst:19
msgid ""
":c:func:`Py_GetPrefix`: Get :data:`sys.base_prefix` and :data:`sys.prefix` "
"instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.15.rst:21
msgid ":c:func:`Py_GetProgramFullPath`: Get :data:`sys.executable` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.15.rst:23
msgid ":c:func:`Py_GetProgramName`: Get :data:`sys.executable` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-3.15.rst:25
msgid ""
":c:func:`Py_GetPythonHome`: Get :c:member:`PyConfig.home` or the :envvar:"
"`PYTHONHOME` environment variable instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:4
msgid ""
"The following APIs are deprecated and will be removed, although there is "
"currently no date scheduled for their removal."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:7
msgid ":c:macro:`Py_TPFLAGS_HAVE_FINALIZE`: Unneeded since Python 3.8."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:9
msgid ":c:func:`PyErr_Fetch`: Use :c:func:`PyErr_GetRaisedException` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:11
msgid ""
":c:func:`PyErr_NormalizeException`: Use :c:func:`PyErr_GetRaisedException` "
"instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:13
msgid ""
":c:func:`PyErr_Restore`: Use :c:func:`PyErr_SetRaisedException` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:15
msgid ""
":c:func:`PyModule_GetFilename`: Use :c:func:`PyModule_GetFilenameObject` "
"instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:17
msgid ":c:func:`PyOS_AfterFork`: Use :c:func:`PyOS_AfterFork_Child` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:19
msgid ""
":c:func:`PySlice_GetIndicesEx`: Use :c:func:`PySlice_Unpack` and :c:func:"
"`PySlice_AdjustIndices` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:21
msgid ""
":c:func:`!PyUnicode_AsDecodedObject`: Use :c:func:`PyCodec_Decode` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:23
msgid ""
":c:func:`!PyUnicode_AsDecodedUnicode`: Use :c:func:`PyCodec_Decode` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:25
msgid ""
":c:func:`!PyUnicode_AsEncodedObject`: Use :c:func:`PyCodec_Encode` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:27
msgid ""
":c:func:`!PyUnicode_AsEncodedUnicode`: Use :c:func:`PyCodec_Encode` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:29
msgid ":c:func:`PyUnicode_READY`: Unneeded since Python 3.12"
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:31
msgid ":c:func:`!PyErr_Display`: Use :c:func:`PyErr_DisplayException` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:33
msgid ""
":c:func:`!_PyErr_ChainExceptions`: Use :c:func:`!_PyErr_ChainExceptions1` "
"instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:35
msgid ""
":c:member:`!PyBytesObject.ob_shash` member: call :c:func:`PyObject_Hash` "
"instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:37
msgid ":c:member:`!PyDictObject.ma_version_tag` member."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:38
msgid "Thread Local Storage (TLS) API:"
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:40
msgid ""
":c:func:`PyThread_create_key`: Use :c:func:`PyThread_tss_alloc` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:42
msgid ":c:func:`PyThread_delete_key`: Use :c:func:`PyThread_tss_free` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:44
msgid ""
":c:func:`PyThread_set_key_value`: Use :c:func:`PyThread_tss_set` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:46
msgid ""
":c:func:`PyThread_get_key_value`: Use :c:func:`PyThread_tss_get` instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:48
msgid ""
":c:func:`PyThread_delete_key_value`: Use :c:func:`PyThread_tss_delete` "
"instead."
msgstr ""

#: deprecations/c-api-pending-removal-in-future.rst:50
msgid ":c:func:`PyThread_ReInitTLS`: Unneeded since Python 3.7."
msgstr ""
