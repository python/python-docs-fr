# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-12-01 07:43+0100\n"
"PO-Revision-Date: 2017-08-10 00:54+0200\n"
"Last-Translator: Julien Palard <julien@palard.fr>\n"
"Language-Team: \n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 1.8.11\n"

#: ../Doc/using/cmdline.rst:9
msgid "Command line and environment"
msgstr "Ligne de commande et environnement"

#: ../Doc/using/cmdline.rst:11
msgid ""
"The CPython interpreter scans the command line and the environment for "
"various settings."
msgstr ""
"L'interpréteur CPython analyse la ligne de commande et l'environnement à la "
"recherche de différents paramètres/"

#: ../Doc/using/cmdline.rst:16
msgid ""
"Other implementations' command line schemes may differ.  See :ref:"
"`implementations` for further resources."
msgstr ""
"Le format des lignes de commandes utilisées par d'autres implémentations "
"peut être différent. Voir :ref:`implementations` pour plus d'informations."

#: ../Doc/using/cmdline.rst:23
msgid "Command line"
msgstr "Ligne de commande"

#: ../Doc/using/cmdline.rst:25
msgid "When invoking Python, you may specify any of these options::"
msgstr ""
"Quand vous invoquez Python, vous pouvez spécifier n’importe laquelle de ces "
"options :"

#: ../Doc/using/cmdline.rst:29
msgid ""
"The most common use case is, of course, a simple invocation of a script::"
msgstr ""
"Le cas d'utilisation le plus courant est, bien entendu, la simple invocation "
"d'un script ::"

#: ../Doc/using/cmdline.rst:37
msgid "Interface options"
msgstr "Options de l'interface"

#: ../Doc/using/cmdline.rst:39
msgid ""
"The interpreter interface resembles that of the UNIX shell, but provides "
"some additional methods of invocation:"
msgstr ""
"L'interface de l’interpréteur ressemble à celle du shell UNIX, mais fournit "
"quelques méthodes d'invocation supplémentaires :"

#: ../Doc/using/cmdline.rst:42
msgid ""
"When called with standard input connected to a tty device, it prompts for "
"commands and executes them until an EOF (an end-of-file character, you can "
"produce that with :kbd:`Ctrl-D` on UNIX or :kbd:`Ctrl-Z, Enter` on Windows) "
"is read."
msgstr ""
"Quand l'interpréteur est appelé avec l'entrée standard connectée à un "
"périphérique tty, il lit les lignes de commande et les exécute jusqu'à ce "
"qu'un caractère EOF (un caractère fin de fichier, que vous pouvez produire "
"avec  :kbd:`Ctrl-D` sous UNIX ou :kbd:`Ctrl-Z, Enter` sous Windows) soit lu."

#: ../Doc/using/cmdline.rst:45
msgid ""
"When called with a file name argument or with a file as standard input, it "
"reads and executes a script from that file."
msgstr ""
"Quand l'interpréteur est appelé avec argument correspondant à un nom de "
"fichier ou avec un fichier comme entrée standard, il lit et exécute le "
"script contenu dans ce fichier."

#: ../Doc/using/cmdline.rst:47
msgid ""
"When called with a directory name argument, it reads and executes an "
"appropriately named script from that directory."
msgstr ""
"Quand l'interpréteur est appelé avec un argument correspondant à un "
"répertoire, il lit et exécute un script nommé d’une certaine façon depuis ce "
"répertoire."

#: ../Doc/using/cmdline.rst:49
msgid ""
"When called with ``-c command``, it executes the Python statement(s) given "
"as *command*.  Here *command* may contain multiple statements separated by "
"newlines. Leading whitespace is significant in Python statements!"
msgstr ""
"Quand l'interpréteur est appelé avec l'option ``-c commande``, il exécute la "
"ou les instructions Python données comme *commande*. Ici *commande* peut "
"contenir plusieurs instructions séparées par des fins de ligne. Les blancs "
"en début de ligne ne sont pas ignorés dans les instructions Python !"

#: ../Doc/using/cmdline.rst:52
msgid ""
"When called with ``-m module-name``, the given module is located on the "
"Python module path and executed as a script."
msgstr ""
"Quand l'interpréteur est appelé avec l'option ``-m nom-de-module``, le "
"module donné est recherché dans le chemin des modules Python et est exécuté "
"en tant que script."

#: ../Doc/using/cmdline.rst:55
msgid ""
"In non-interactive mode, the entire input is parsed before it is executed."
msgstr ""
"En mode non-interactif, toute l’entrée est analysée avant d’être exécutée. "

#: ../Doc/using/cmdline.rst:57
msgid ""
"An interface option terminates the list of options consumed by the "
"interpreter, all consecutive arguments will end up in :data:`sys.argv` -- "
"note that the first element, subscript zero (``sys.argv[0]``), is a string "
"reflecting the program's source."
msgstr ""
"Une option d'interface termine la listes des options consommées par "
"l'interpréteur ; tous les arguments échoueront dans :data:`sys.argv` — notez "
"que le premier élément, à l'indice zéro (``sys.argv|0]``), est une chaîne de "
"caractères indiquant la source du programme."

#: ../Doc/using/cmdline.rst:64
msgid ""
"Execute the Python code in *command*.  *command* can be one or more "
"statements separated by newlines, with significant leading whitespace as in "
"normal module code."
msgstr ""
"Exécute le code Python dans *command*. *command* peut être une ou plusieurs "
"instructions, séparées par des fins de ligne, dont les espaces en debut de "
"ligne sont significatifs, comme dans le code d’un module."

#: ../Doc/using/cmdline.rst:68
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be ``\"-c"
"\"`` and the current directory will be added to the start of :data:`sys."
"path` (allowing modules in that directory to be imported as top level "
"modules)."
msgstr ""
"Si cette option est donnée, le premier élément de :data:`sys.argv` sera ``\"-"
"c\"`` et le répertoire courant sera ajouté au début de :data:`sys.path` "
"(permettant aux modules de ce répertoire d'être importé comme des modules de "
"premier niveau)."

#: ../Doc/using/cmdline.rst:76
msgid ""
"Search :data:`sys.path` for the named module and execute its contents as "
"the :mod:`__main__` module."
msgstr ""
"Parcourir :data:`sys.path` à la recherche du module donné et exécuter son "
"contenu en tant que module :mod:`__main__`."

#: ../Doc/using/cmdline.rst:79
msgid ""
"Since the argument is a *module* name, you must not give a file extension "
"(``.py``).  The module name should be a valid absolute Python module name, "
"but the implementation may not always enforce this (e.g. it may allow you to "
"use a name that includes a hyphen)."
msgstr ""
"L'argument étant un nom de *module*, vous ne devez pas fournir d’extension "
"de fichier (``.py``). Le nom du module doit être un nom de module Python "
"valide, absolu, mais l'implémentation peut ne pas l'imposer (par exemple, "
"l'utilisation d'un trait d'union peut être autorisée)."

#: ../Doc/using/cmdline.rst:84
msgid ""
"Package names (including namespace packages) are also permitted. When a "
"package name is supplied instead of a normal module, the interpreter will "
"execute ``<pkg>.__main__`` as the main module. This behaviour is "
"deliberately similar to the handling of directories and zipfiles that are "
"passed to the interpreter as the script argument."
msgstr ""
"Les noms de paquets sont aussi autorisés (ainsi que les *namespace "
"packages*). Quand un nom de paquet est donné à la place d'un module "
"habituel, l'interpréteur exécutera ``<pkg>.__main__`` comme module "
"principal. Ce comportement est délibérement identique à un dossier on un "
"fichier zip donné à en argument à l'interpréteur comme script."

#: ../Doc/using/cmdline.rst:93
msgid ""
"This option cannot be used with built-in modules and extension modules "
"written in C, since they do not have Python module files. However, it can "
"still be used for precompiled modules, even if the original source file is "
"not available."
msgstr ""
"Cette option ne peut pas être utilisée avec les modules intégrés et les "
"modules d'extension écrits en C, étant donné qu'il ne possèdent pas de "
"fichiers modules en Python. Cependant, elle peut toujours être utilisées "
"pour les modules pré-complilés, même si le fichier source original n'est pas "
"disponible."

#: ../Doc/using/cmdline.rst:98
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be the "
"full path to the module file (while the module file is being located, the "
"first element will be set to ``\"-m\"``). As with the :option:`-c` option, "
"the current directory will be added to the start of :data:`sys.path`."
msgstr ""
"Si cette option est donnée, le premier élément de :data:`sys.argv` sera le "
"chemin complet d'accès au fichier du module (pendant que le fichier est "
"recherché, le premier élément sera mis à ``\"-m\"``). Comme avec l'option :"
"option:`-c`, le dossier courant sera ajouté au début de :data:`sys.path`."

#: ../Doc/using/cmdline.rst:103
msgid ""
"Many standard library modules contain code that is invoked on their "
"execution as a script.  An example is the :mod:`timeit` module::"
msgstr ""
"De nombreux modules de la bibliothèque standard contiennent du code qui est "
"invoqué quand ils sont exécutés comme scripts. Un exemple est le module :mod:"
"`timeit`\\ ::"

#: ../Doc/using/cmdline.rst:111
msgid ":func:`runpy.run_module`"
msgstr ""

#: ../Doc/using/cmdline.rst:111 ../Doc/using/cmdline.rst:153
msgid "Equivalent functionality directly available to Python code"
msgstr ""

#: ../Doc/using/cmdline.rst:113
msgid ":pep:`338` -- Executing modules as scripts"
msgstr ":pep:`338` --  Exécuter des modules en tant que scripts"

#: ../Doc/using/cmdline.rst:116
msgid "Supply the package name to run a ``__main__`` submodule."
msgstr ""

#: ../Doc/using/cmdline.rst:119
msgid "namespace packages are also supported"
msgstr ""

#: ../Doc/using/cmdline.rst:125
msgid ""
"Read commands from standard input (:data:`sys.stdin`).  If standard input is "
"a terminal, :option:`-i` is implied."
msgstr ""
"Lit les commandes depuis l'entrée standard (:data:`sys.stdin`). Si l'entrée "
"standard est un terminal, l':option:`-i` est activée implicitement."

#: ../Doc/using/cmdline.rst:128
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be ``\"-"
"\"`` and the current directory will be added to the start of :data:`sys."
"path`."
msgstr ""
"Si cette option est donnée, le premier élément de :data:`sys.argv` sera ``\"-"
"\"`` et le dossier courant sera ajouté au début de :data:`sys.path`."

#: ../Doc/using/cmdline.rst:135
msgid ""
"Execute the Python code contained in *script*, which must be a filesystem "
"path (absolute or relative) referring to either a Python file, a directory "
"containing a ``__main__.py`` file, or a zipfile containing a ``__main__.py`` "
"file."
msgstr ""
"Exécute le code Python contenu dans *script*, qui doit être un chemin "
"d'accès au fichier (absolu ou relatif), se référant à un fichier Python, à "
"un répertoire contenant un fichier ``__main__.py`` ou à un fichier zip "
"contenant un fichier ``__main__.py``."

#: ../Doc/using/cmdline.rst:140
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be the "
"script name as given on the command line."
msgstr ""
"Si cette option est donnée, le premier élément de :data:`sys.argv` sera le "
"nom du script comme donné sur la ligne de commande."

#: ../Doc/using/cmdline.rst:143
msgid ""
"If the script name refers directly to a Python file, the directory "
"containing that file is added to the start of :data:`sys.path`, and the file "
"is executed as the :mod:`__main__` module."
msgstr ""
"Si le nom du script se réfère directement à un fichier Python, le répertoire "
"contenant ce fichier est ajouté au début de :data:`sys.path`, et le fichier "
"est exécuté en tant que module :mod:`__main__`."

#: ../Doc/using/cmdline.rst:147
msgid ""
"If the script name refers to a directory or zipfile, the script name is "
"added to the start of :data:`sys.path` and the ``__main__.py`` file in that "
"location is executed as the :mod:`__main__` module."
msgstr ""
"Si le nom du script fait référence à un dossier ou à un fichier zip, le nom "
"du script est ajouté au début de :data:`sys.path` et le fichier ``__main__."
"py`` à cet endroit est exécuté en tant que module :mod:`__main__`."

#: ../Doc/using/cmdline.rst:152
msgid ":func:`runpy.run_path`"
msgstr ""

#: ../Doc/using/cmdline.rst:156
msgid ""
"If no interface option is given, :option:`-i` is implied, ``sys.argv[0]`` is "
"an empty string (``\"\"``) and the current directory will be added to the "
"start of :data:`sys.path`.  Also, tab-completion and history editing is "
"automatically enabled, if available on your platform (see :ref:`rlcompleter-"
"config`)."
msgstr ""
"Si aucune option d'interface n'est donnée, :option:`-i` est implicite, ``sys."
"argv[0]`` est une chaine vide (``\"\"``) et le dossier courant sera ajouté "
"au début de :data:`sys.path`. Aussi, la complétion des tabulations et "
"l'édition de l'historique seront automatiquement activés, s'ils sont "
"disponnibles sur votre système (voir :ref:`rlcompleter-config`)."

#: ../Doc/using/cmdline.rst:162
msgid ":ref:`tut-invoking`"
msgstr ""

#: ../Doc/using/cmdline.rst:164
msgid "Automatic enabling of tab-completion and history editing."
msgstr ""

#: ../Doc/using/cmdline.rst:169
msgid "Generic options"
msgstr "Options génériques"

#: ../Doc/using/cmdline.rst:175
msgid "Print a short description of all command line options."
msgstr ""
"Affiche une brève description de toutes les options de ligne de commande."

#: ../Doc/using/cmdline.rst:181
msgid "Print the Python version number and exit.  Example output could be::"
msgstr "Affiche seulement la version de Python. Par exemple : ::"

#: ../Doc/using/cmdline.rst:185
msgid "When given twice, print more information about the build, like::"
msgstr ""

#: ../Doc/using/cmdline.rst:190
msgid "The ``-VV`` option."
msgstr ""

#: ../Doc/using/cmdline.rst:196
msgid "Miscellaneous options"
msgstr "Options diverses"

#: ../Doc/using/cmdline.rst:200
msgid ""
"Issue a warning when comparing :class:`bytes` or :class:`bytearray` with :"
"class:`str` or :class:`bytes` with :class:`int`.  Issue an error when the "
"option is given twice (:option:`!-bb`)."
msgstr ""

#: ../Doc/using/cmdline.rst:204
msgid "Affects comparisons of :class:`bytes` with :class:`int`."
msgstr ""

#: ../Doc/using/cmdline.rst:209
msgid ""
"If given, Python won't try to write ``.pyc`` files on the import of source "
"modules.  See also :envvar:`PYTHONDONTWRITEBYTECODE`."
msgstr ""
"S'il est donné, Python ne tentera pas d'écrire de fichier ``.pyc``` ou ``."
"pyo`` à l'importation des modules source. Voir aussi :envvar:"
"`PYTHONDONTWRITEBYTECODE`."

#: ../Doc/using/cmdline.rst:215
msgid ""
"Turn on parser debugging output (for wizards only, depending on compilation "
"options).  See also :envvar:`PYTHONDEBUG`."
msgstr ""
"Activer la sortie de l'analyseur de débogage (pour les magiciens uniquement, "
"en fonction des options de compilation). Voir aussi :envvar:`PYTHONDEBUG`."

#: ../Doc/using/cmdline.rst:221
msgid ""
"Ignore all :envvar:`PYTHON*` environment variables, e.g. :envvar:"
"`PYTHONPATH` and :envvar:`PYTHONHOME`, that might be set."
msgstr ""
"Ignorer toutes les variables d'environnement :envvar:`PYTHON*`, par "
"exemple, :envvar:`PYTHONPATH` et :envvar:`PYTHONHOME`, qui pourraient être "
"définies."

#: ../Doc/using/cmdline.rst:227
msgid ""
"When a script is passed as first argument or the :option:`-c` option is "
"used, enter interactive mode after executing the script or the command, even "
"when :data:`sys.stdin` does not appear to be a terminal.  The :envvar:"
"`PYTHONSTARTUP` file is not read."
msgstr ""
"Quand un script est passé comme premier argument ou que l'option :option:`-"
"c` est utilisée, entrer en mode interactif après avoir exécuté le script ou "
"la commande, même lorsque :data:`sys.stdin` ne semble pas être un terminal. "
"Le fichier :envvar:`PYTHONSTARTUP` n'est pas lu."

#: ../Doc/using/cmdline.rst:232
msgid ""
"This can be useful to inspect global variables or a stack trace when a "
"script raises an exception.  See also :envvar:`PYTHONINSPECT`."
msgstr ""
"Cela peut être utile pour examiner les variables globales ou une trace de la "
"pile lorsque le script lève une exception. Voir aussi :envvar:"
"`PYTHONINSPECT`."

#: ../Doc/using/cmdline.rst:238
msgid ""
"Run Python in isolated mode. This also implies -E and -s. In isolated mode :"
"data:`sys.path` contains neither the script's directory nor the user's site-"
"packages directory. All :envvar:`PYTHON*` environment variables are ignored, "
"too. Further restrictions may be imposed to prevent the user from injecting "
"malicious code."
msgstr ""

#: ../Doc/using/cmdline.rst:249
msgid "Turn on basic optimizations.  See also :envvar:`PYTHONOPTIMIZE`."
msgstr ""

#: ../Doc/using/cmdline.rst:254
msgid "Discard docstrings in addition to the :option:`-O` optimizations."
msgstr ""
"Supprimer les docstrings en plus des optimisations réalisés par :option:`-O`."

#: ../Doc/using/cmdline.rst:259
msgid ""
"Don't display the copyright and version messages even in interactive mode."
msgstr ""

#: ../Doc/using/cmdline.rst:266
msgid ""
"Kept for compatibility.  On Python 3.3 and greater, hash randomization is "
"turned on by default."
msgstr ""

#: ../Doc/using/cmdline.rst:269
msgid ""
"On previous versions of Python, this option turns on hash randomization, so "
"that the :meth:`__hash__` values of str, bytes and datetime are \"salted\" "
"with an unpredictable random value.  Although they remain constant within an "
"individual Python process, they are not predictable between repeated "
"invocations of Python."
msgstr ""

#: ../Doc/using/cmdline.rst:275
msgid ""
"Hash randomization is intended to provide protection against a denial-of-"
"service caused by carefully-chosen inputs that exploit the worst case "
"performance of a dict construction, O(n^2) complexity.  See http://www.ocert."
"org/advisories/ocert-2011-003.html for details."
msgstr ""

#: ../Doc/using/cmdline.rst:280
msgid ""
":envvar:`PYTHONHASHSEED` allows you to set a fixed value for the hash seed "
"secret."
msgstr ""

#: ../Doc/using/cmdline.rst:288
msgid ""
"Don't add the :data:`user site-packages directory <site.USER_SITE>` to :data:"
"`sys.path`."
msgstr ""
"Ne pas ajouter le :data:`user site-packages directory <site.USER_SITE>` à :"
"data:`sys.path`."

#: ../Doc/using/cmdline.rst:293 ../Doc/using/cmdline.rst:582
#: ../Doc/using/cmdline.rst:594
msgid ":pep:`370` -- Per user site-packages directory"
msgstr ":pep:`370` -- Per user site-packages directory"

#: ../Doc/using/cmdline.rst:298
msgid ""
"Disable the import of the module :mod:`site` and the site-dependent "
"manipulations of :data:`sys.path` that it entails.  Also disable these "
"manipulations if :mod:`site` is explicitly imported later (call :func:`site."
"main` if you want them to be triggered)."
msgstr ""
"Désactiver l’importation du module :mod:`site` et les modifications locales "
"de :data:`sys.path` qu’il implique. Désactive aussi ces manipulations si :"
"mod:`site` est importé explicitement pluis tard (appellez :func:`site.main` "
"si vous voulez les déclencher)."

#: ../Doc/using/cmdline.rst:306
msgid ""
"Force the binary layer of the stdout and stderr streams (which is available "
"as their ``buffer`` attribute) to be unbuffered. The text I/O layer will "
"still be line-buffered if writing to the console, or block-buffered if "
"redirected to a non-interactive file."
msgstr ""
"Désactive les buffers de la couche binaire des flux stdout and stderr "
"(disponible comme leur attribut ``buffer``). La couche d’entrée-sortie sera "
"mise en buffer ligne par ligne lors de l'écriture sur la console, ou par "
"blocs si elle est redirigée sur un fichier non-interactif."

#: ../Doc/using/cmdline.rst:311
msgid "See also :envvar:`PYTHONUNBUFFERED`."
msgstr "Voir aussi :envvar:`PYTHONUNBUFFERED`."

#: ../Doc/using/cmdline.rst:316
msgid ""
"Print a message each time a module is initialized, showing the place "
"(filename or built-in module) from which it is loaded.  When given twice (:"
"option:`!-vv`), print a message for each file that is checked for when "
"searching for a module.  Also provides information on module cleanup at "
"exit. See also :envvar:`PYTHONVERBOSE`."
msgstr ""

#: ../Doc/using/cmdline.rst:326
msgid ""
"Warning control.  Python's warning machinery by default prints warning "
"messages to :data:`sys.stderr`.  A typical warning message has the following "
"form::"
msgstr ""

#: ../Doc/using/cmdline.rst:332
msgid ""
"By default, each warning is printed once for each source line where it "
"occurs.  This option controls how often warnings are printed."
msgstr ""
"Par défaut, chaque avertissement est affiché une fois pour chaque ligne de "
"source où il se trouve. Cette option définit à quelle fréquence afficher ces "
"avertissements."

#: ../Doc/using/cmdline.rst:335
msgid ""
"Multiple :option:`-W` options may be given; when a warning matches more than "
"one option, the action for the last matching option is performed.  Invalid :"
"option:`-W` options are ignored (though, a warning message is printed about "
"invalid options when the first warning is issued)."
msgstr ""

#: ../Doc/using/cmdline.rst:340
msgid ""
"Warnings can also be controlled from within a Python program using the :mod:"
"`warnings` module."
msgstr ""

#: ../Doc/using/cmdline.rst:343
msgid ""
"The simplest form of argument is one of the following action strings (or a "
"unique abbreviation):"
msgstr ""
"La forme la plus simple de l'argument est l'une des chaînes d'action "
"suivante (ou une abréviation unique) :"

#: ../Doc/using/cmdline.rst:346
msgid "``ignore``"
msgstr ""

#: ../Doc/using/cmdline.rst:347
msgid "Ignore all warnings."
msgstr "Ignorer tous les avertissements."

#: ../Doc/using/cmdline.rst:349
msgid "``default``"
msgstr ""

#: ../Doc/using/cmdline.rst:349
msgid ""
"Explicitly request the default behavior (printing each warning once per "
"source line)."
msgstr ""

#: ../Doc/using/cmdline.rst:353
msgid "``all``"
msgstr "``all``"

#: ../Doc/using/cmdline.rst:352
msgid ""
"Print a warning each time it occurs (this may generate many messages if a "
"warning is triggered repeatedly for the same source line, such as inside a "
"loop)."
msgstr ""
"Affiche un avertissement à chaque fois qu'il se produit (ce qui peut générer "
"beaucoup de messages si l'avertissement est déclenché à plusieurs reprises, "
"comme à l'intérieur d'une boucle)."

#: ../Doc/using/cmdline.rst:355
msgid "``module``"
msgstr "``module``"

#: ../Doc/using/cmdline.rst:356
msgid "Print each warning only the first time it occurs in each module."
msgstr ""
"Affiche chaque avertissement uniquement la première fois qu'il apparaît dans "
"chaque module."

#: ../Doc/using/cmdline.rst:357
msgid "``once``"
msgstr ""

#: ../Doc/using/cmdline.rst:358
msgid "Print each warning only the first time it occurs in the program."
msgstr ""
"Affiche chaque avertissement uniquement la première fois qu'il apparaît dans "
"le programme."

#: ../Doc/using/cmdline.rst:360
msgid "``error``"
msgstr ""

#: ../Doc/using/cmdline.rst:360
msgid "Raise an exception instead of printing a warning message."
msgstr "Déclenche une exception au lieu d'afficher un message d'avertissement."

#: ../Doc/using/cmdline.rst:362
msgid "The full form of argument is::"
msgstr "La forme complète de l'argument est : ::"

#: ../Doc/using/cmdline.rst:366
msgid ""
"Here, *action* is as explained above but only applies to messages that match "
"the remaining fields.  Empty fields match all values; trailing empty fields "
"may be omitted.  The *message* field matches the start of the warning "
"message printed; this match is case-insensitive.  The *category* field "
"matches the warning category.  This must be a class name; the match tests "
"whether the actual warning category of the message is a subclass of the "
"specified warning category.  The full class name must be given.  The "
"*module* field matches the (fully-qualified) module name; this match is case-"
"sensitive.  The *line* field matches the line number, where zero matches all "
"line numbers and is thus equivalent to an omitted line number."
msgstr ""
"Ici, *action* est tel qu'expliqué ci-dessus, mais s'applique uniquement aux "
"messages qui correspondent aux champs restants. Les champs vides "
"correspondent à toutes les valeurs ; les champs vides de fin peuvent être "
"omis. Le champ *message* correspond au début du message d'avertissement "
"affiché, cette expression est insensible à la casse. Le champ *category* "
"correspond à la catégorie d'avertissement. Ce nom doit être un nom complet "
"de classe ; La règle s'applique à tous les messages d'alertes construits "
"avec une classe héritante de celle spécifiée. Le nom de la classe complète "
"doit être donnée. Le champ *module* correspond au nom (pleinement qualifié) "
"du module, cette correspondance est sensible à la casse. Le champ *line* "
"correspond au numéro de ligne, où zéro correspond à n'importe quel numéro de "
"ligne et correspond donc à l'option par défaut."

#: ../Doc/using/cmdline.rst:378
msgid ":mod:`warnings` -- the warnings module"
msgstr ""

#: ../Doc/using/cmdline.rst:380
msgid ":pep:`230` -- Warning framework"
msgstr ":pep:`230` -- Gestion des alertes"

#: ../Doc/using/cmdline.rst:382
msgid ":envvar:`PYTHONWARNINGS`"
msgstr ""

#: ../Doc/using/cmdline.rst:387
msgid ""
"Skip the first line of the source, allowing use of non-Unix forms of ``#!"
"cmd``.  This is intended for a DOS specific hack only."
msgstr ""

#: ../Doc/using/cmdline.rst:393
msgid ""
"Reserved for various implementation-specific options.  CPython currently "
"defines the following possible values:"
msgstr ""

#: ../Doc/using/cmdline.rst:396
msgid "``-X faulthandler`` to enable :mod:`faulthandler`;"
msgstr ""

#: ../Doc/using/cmdline.rst:397
msgid ""
"``-X showrefcount`` to output the total reference count and number of used "
"memory blocks when the program finishes or after each statement in the "
"interactive interpreter. This only works on debug builds."
msgstr ""

#: ../Doc/using/cmdline.rst:400
msgid ""
"``-X tracemalloc`` to start tracing Python memory allocations using the :mod:"
"`tracemalloc` module. By default, only the most recent frame is stored in a "
"traceback of a trace. Use ``-X tracemalloc=NFRAME`` to start tracing with a "
"traceback limit of *NFRAME* frames. See the :func:`tracemalloc.start` for "
"more information."
msgstr ""

#: ../Doc/using/cmdline.rst:405
msgid ""
"``-X showalloccount`` to output the total count of allocated objects for "
"each type when the program finishes. This only works when Python was built "
"with ``COUNT_ALLOCS`` defined."
msgstr ""

#: ../Doc/using/cmdline.rst:409
msgid ""
"It also allows passing arbitrary values and retrieving them through the :"
"data:`sys._xoptions` dictionary."
msgstr ""

#: ../Doc/using/cmdline.rst:412
msgid "The :option:`-X` option was added."
msgstr ""

#: ../Doc/using/cmdline.rst:415
msgid "The ``-X faulthandler`` option."
msgstr ""

#: ../Doc/using/cmdline.rst:418
msgid "The ``-X showrefcount`` and ``-X tracemalloc`` options."
msgstr ""

#: ../Doc/using/cmdline.rst:421
msgid "The ``-X showalloccount`` option."
msgstr ""

#: ../Doc/using/cmdline.rst:426
msgid "Options you shouldn't use"
msgstr "Options que vous ne devriez pas utiliser"

#: ../Doc/using/cmdline.rst:430
msgid "Reserved for use by Jython_."
msgstr "Utilisation réservée à Jython_."

#: ../Doc/using/cmdline.rst:438
msgid "Environment variables"
msgstr "Variables d'environnement"

#: ../Doc/using/cmdline.rst:440
msgid ""
"These environment variables influence Python's behavior, they are processed "
"before the command-line switches other than -E or -I.  It is customary that "
"command-line switches override environmental variables where there is a "
"conflict."
msgstr ""

#: ../Doc/using/cmdline.rst:447
msgid ""
"Change the location of the standard Python libraries.  By default, the "
"libraries are searched in :file:`{prefix}/lib/python{version}` and :file:"
"`{exec_prefix}/lib/python{version}`, where :file:`{prefix}` and :file:"
"`{exec_prefix}` are installation-dependent directories, both defaulting to :"
"file:`/usr/local`."
msgstr ""

#: ../Doc/using/cmdline.rst:453
msgid ""
"When :envvar:`PYTHONHOME` is set to a single directory, its value replaces "
"both :file:`{prefix}` and :file:`{exec_prefix}`.  To specify different "
"values for these, set :envvar:`PYTHONHOME` to :file:`{prefix}:{exec_prefix}`."
msgstr ""

#: ../Doc/using/cmdline.rst:460
msgid ""
"Augment the default search path for module files.  The format is the same as "
"the shell's :envvar:`PATH`: one or more directory pathnames separated by :"
"data:`os.pathsep` (e.g. colons on Unix or semicolons on Windows). Non-"
"existent directories are silently ignored."
msgstr ""

#: ../Doc/using/cmdline.rst:465
msgid ""
"In addition to normal directories, individual :envvar:`PYTHONPATH` entries "
"may refer to zipfiles containing pure Python modules (in either source or "
"compiled form). Extension modules cannot be imported from zipfiles."
msgstr ""

#: ../Doc/using/cmdline.rst:469
msgid ""
"The default search path is installation dependent, but generally begins "
"with :file:`{prefix}/lib/python{version}` (see :envvar:`PYTHONHOME` above).  "
"It is *always* appended to :envvar:`PYTHONPATH`."
msgstr ""

#: ../Doc/using/cmdline.rst:473
msgid ""
"An additional directory will be inserted in the search path in front of :"
"envvar:`PYTHONPATH` as described above under :ref:`using-on-interface-"
"options`. The search path can be manipulated from within a Python program as "
"the variable :data:`sys.path`."
msgstr ""

#: ../Doc/using/cmdline.rst:481
msgid ""
"If this is the name of a readable file, the Python commands in that file are "
"executed before the first prompt is displayed in interactive mode.  The file "
"is executed in the same namespace where interactive commands are executed so "
"that objects defined or imported in it can be used without qualification in "
"the interactive session.  You can also change the prompts :data:`sys.ps1` "
"and :data:`sys.ps2` and the hook :data:`sys.__interactivehook__` in this "
"file."
msgstr ""

#: ../Doc/using/cmdline.rst:491
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-O` option.  If set to an integer, it is equivalent to specifying :"
"option:`-O` multiple times."
msgstr ""

#: ../Doc/using/cmdline.rst:498
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-d` option.  If set to an integer, it is equivalent to specifying :"
"option:`-d` multiple times."
msgstr ""

#: ../Doc/using/cmdline.rst:505
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-i` option."
msgstr ""

#: ../Doc/using/cmdline.rst:508
msgid ""
"This variable can also be modified by Python code using :data:`os.environ` "
"to force inspect mode on program termination."
msgstr ""

#: ../Doc/using/cmdline.rst:514
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-u` option."
msgstr ""

#: ../Doc/using/cmdline.rst:520
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-v` option.  If set to an integer, it is equivalent to specifying :"
"option:`-v` multiple times."
msgstr ""

#: ../Doc/using/cmdline.rst:527
msgid ""
"If this is set, Python ignores case in :keyword:`import` statements.  This "
"only works on Windows and OS X."
msgstr ""

#: ../Doc/using/cmdline.rst:533
msgid ""
"If this is set to a non-empty string, Python won't try to write ``.pyc`` "
"files on the import of source modules.  This is equivalent to specifying "
"the :option:`-B` option."
msgstr ""
"S'il est donné, et n'est pas une chaîne vide, Python ne tentera pas d'écrire "
"de fichier ``.pyc``` à l'importation des modules source. C'est équivalent à "
"donner l'option :option:`-B`."

#: ../Doc/using/cmdline.rst:540
msgid ""
"If this variable is not set or set to ``random``, a random value is used to "
"seed the hashes of str, bytes and datetime objects."
msgstr ""

#: ../Doc/using/cmdline.rst:543
msgid ""
"If :envvar:`PYTHONHASHSEED` is set to an integer value, it is used as a "
"fixed seed for generating the hash() of the types covered by the hash "
"randomization."
msgstr ""

#: ../Doc/using/cmdline.rst:547
msgid ""
"Its purpose is to allow repeatable hashing, such as for selftests for the "
"interpreter itself, or to allow a cluster of python processes to share hash "
"values."
msgstr ""

#: ../Doc/using/cmdline.rst:551
msgid ""
"The integer must be a decimal number in the range [0,4294967295].  "
"Specifying the value 0 will disable hash randomization."
msgstr ""

#: ../Doc/using/cmdline.rst:559
msgid ""
"If this is set before running the interpreter, it overrides the encoding "
"used for stdin/stdout/stderr, in the syntax ``encodingname:errorhandler``.  "
"Both the ``encodingname`` and the ``:errorhandler`` parts are optional and "
"have the same meaning as in :func:`str.encode`."
msgstr ""

#: ../Doc/using/cmdline.rst:564
msgid ""
"For stderr, the ``:errorhandler`` part is ignored; the handler will always "
"be ``'backslashreplace'``."
msgstr ""

#: ../Doc/using/cmdline.rst:567
msgid "The ``encodingname`` part is now optional."
msgstr ""

#: ../Doc/using/cmdline.rst:570
msgid ""
"On Windows, the encoding specified by this variable is ignored for "
"interactive console buffers unless :envvar:`PYTHONLEGACYWINDOWSSTDIO` is "
"also specified. Files and pipes redirected through the standard streams are "
"not affected."
msgstr ""

#: ../Doc/using/cmdline.rst:577
msgid ""
"If this is set, Python won't add the :data:`user site-packages directory "
"<site.USER_SITE>` to :data:`sys.path`."
msgstr ""

#: ../Doc/using/cmdline.rst:587
msgid ""
"Defines the :data:`user base directory <site.USER_BASE>`, which is used to "
"compute the path of the :data:`user site-packages directory <site."
"USER_SITE>` and :ref:`Distutils installation paths <inst-alt-install-user>` "
"for ``python setup.py install --user``."
msgstr ""

#: ../Doc/using/cmdline.rst:599
msgid ""
"If this environment variable is set, ``sys.argv[0]`` will be set to its "
"value instead of the value got through the C runtime.  Only works on Mac OS "
"X."
msgstr ""

#: ../Doc/using/cmdline.rst:605
msgid ""
"This is equivalent to the :option:`-W` option. If set to a comma separated "
"string, it is equivalent to specifying :option:`-W` multiple times."
msgstr ""

#: ../Doc/using/cmdline.rst:611
msgid ""
"If this environment variable is set to a non-empty string, :func:"
"`faulthandler.enable` is called at startup: install a handler for :const:"
"`SIGSEGV`, :const:`SIGFPE`, :const:`SIGABRT`, :const:`SIGBUS` and :const:"
"`SIGILL` signals to dump the Python traceback.  This is equivalent to :"
"option:`-X` ``faulthandler`` option."
msgstr ""

#: ../Doc/using/cmdline.rst:622
msgid ""
"If this environment variable is set to a non-empty string, start tracing "
"Python memory allocations using the :mod:`tracemalloc` module. The value of "
"the variable is the maximum number of frames stored in a traceback of a "
"trace. For example, ``PYTHONTRACEMALLOC=1`` stores only the most recent "
"frame. See the :func:`tracemalloc.start` for more information."
msgstr ""

#: ../Doc/using/cmdline.rst:633
msgid ""
"If this environment variable is set to a non-empty string, enable the :ref:"
"`debug mode <asyncio-debug-mode>` of the :mod:`asyncio` module."
msgstr ""

#: ../Doc/using/cmdline.rst:641
msgid "Set the Python memory allocators and/or install debug hooks."
msgstr ""

#: ../Doc/using/cmdline.rst:643
msgid "Set the family of memory allocators used by Python:"
msgstr ""

#: ../Doc/using/cmdline.rst:645
msgid ""
"``malloc``: use the :c:func:`malloc` function of the C library for all "
"domains (:c:data:`PYMEM_DOMAIN_RAW`, :c:data:`PYMEM_DOMAIN_MEM`, :c:data:"
"`PYMEM_DOMAIN_OBJ`)."
msgstr ""

#: ../Doc/using/cmdline.rst:648
msgid ""
"``pymalloc``: use the :ref:`pymalloc allocator <pymalloc>` for :c:data:"
"`PYMEM_DOMAIN_MEM` and :c:data:`PYMEM_DOMAIN_OBJ` domains and use the :c:"
"func:`malloc` function for the :c:data:`PYMEM_DOMAIN_RAW` domain."
msgstr ""

#: ../Doc/using/cmdline.rst:652
msgid "Install debug hooks:"
msgstr ""

#: ../Doc/using/cmdline.rst:654
msgid "``debug``: install debug hooks on top of the default memory allocator"
msgstr ""

#: ../Doc/using/cmdline.rst:655
msgid "``malloc_debug``: same as ``malloc`` but also install debug hooks"
msgstr ""

#: ../Doc/using/cmdline.rst:656
msgid "``pymalloc_debug``: same as ``pymalloc`` but also install debug hooks"
msgstr ""

#: ../Doc/using/cmdline.rst:658
msgid ""
"When Python is compiled in release mode, the default is ``pymalloc``. When "
"compiled in debug mode, the default is ``pymalloc_debug`` and the debug "
"hooks are used automatically."
msgstr ""

#: ../Doc/using/cmdline.rst:662
msgid ""
"If Python is configured without ``pymalloc`` support, ``pymalloc`` and "
"``pymalloc_debug`` are not available, the default is ``malloc`` in release "
"mode and ``malloc_debug`` in debug mode."
msgstr ""

#: ../Doc/using/cmdline.rst:666
msgid ""
"See the :c:func:`PyMem_SetupDebugHooks` function for debug hooks on Python "
"memory allocators."
msgstr ""

#: ../Doc/using/cmdline.rst:674
msgid ""
"If set to a non-empty string, Python will print statistics of the :ref:"
"`pymalloc memory allocator <pymalloc>` every time a new pymalloc object "
"arena is created, and on shutdown."
msgstr ""

#: ../Doc/using/cmdline.rst:678
msgid ""
"This variable is ignored if the :envvar:`PYTHONMALLOC` environment variable "
"is used to force the :c:func:`malloc` allocator of the C library, or if "
"Python is configured without ``pymalloc`` support."
msgstr ""

#: ../Doc/using/cmdline.rst:682
msgid ""
"This variable can now also be used on Python compiled in release mode. It "
"now has no effect if set to an empty string."
msgstr ""

#: ../Doc/using/cmdline.rst:689
msgid ""
"If set to a non-empty string, the default filesystem encoding and errors "
"mode will revert to their pre-3.6 values of 'mbcs' and 'replace', "
"respectively. Otherwise, the new defaults 'utf-8' and 'surrogatepass' are "
"used."
msgstr ""

#: ../Doc/using/cmdline.rst:693
msgid ""
"This may also be enabled at runtime with :func:`sys."
"_enablelegacywindowsfsencoding()`."
msgstr ""

#: ../Doc/using/cmdline.rst:696 ../Doc/using/cmdline.rst:710
msgid "Availability: Windows"
msgstr ""

#: ../Doc/using/cmdline.rst:698
msgid "See :pep:`529` for more details."
msgstr ""

#: ../Doc/using/cmdline.rst:703
msgid ""
"If set to a non-empty string, does not use the new console reader and "
"writer. This means that Unicode characters will be encoded according to the "
"active console code page, rather than using utf-8."
msgstr ""

#: ../Doc/using/cmdline.rst:707
msgid ""
"This variable is ignored if the standard streams are redirected (to files or "
"pipes) rather than referring to console buffers."
msgstr ""

#: ../Doc/using/cmdline.rst:715
msgid "Debug-mode variables"
msgstr ""

#: ../Doc/using/cmdline.rst:717
msgid ""
"Setting these variables only has an effect in a debug build of Python, that "
"is, if Python was configured with the ``--with-pydebug`` build option."
msgstr ""

#: ../Doc/using/cmdline.rst:722
msgid "If set, Python will print threading debug info."
msgstr ""

#: ../Doc/using/cmdline.rst:727
msgid ""
"If set, Python will dump objects and reference counts still alive after "
"shutting down the interpreter."
msgstr ""

#~ msgid "The line numbers in error messages will be off by one."
#~ msgstr ""
#~ "Les numéros de ligne dans les messages d'erreur seront décalés de un."

#, fuzzy
#~ msgid "all"
#~ msgstr "``all``"
