# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-08-03 17:52+0200\n"
"PO-Revision-Date: 2018-06-10 15:28+0200\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/using/windows.rst:7
msgid "Using Python on Windows"
msgstr "Utiliser Python sur Windows"

#: ../Doc/using/windows.rst:12
msgid ""
"This document aims to give an overview of Windows-specific behaviour you "
"should know about when using Python on Microsoft Windows."
msgstr ""

#: ../Doc/using/windows.rst:16
msgid "Installing Python"
msgstr "Installer Python"

#: ../Doc/using/windows.rst:18
msgid ""
"Unlike most Unix systems and services, Windows does not include a system "
"supported installation of Python. To make Python available, the CPython team "
"has compiled Windows installers (MSI packages) with every `release <https://"
"www.python.org/download/releases/>`_ for many years. These installers are "
"primarily intended to add a per-user installation of Python, with the core "
"interpreter and library being used by a single user. The installer is also "
"able to install for all users of a single machine, and a separate ZIP file "
"is available for application-local distributions."
msgstr ""

#: ../Doc/using/windows.rst:28
msgid "Supported Versions"
msgstr "Versions supportées"

#: ../Doc/using/windows.rst:30
msgid ""
"As specified in :pep:`11`, a Python release only supports a Windows platform "
"while Microsoft considers the platform under extended support. This means "
"that Python |version| supports Windows Vista and newer. If you require "
"Windows XP support then please install Python 3.4."
msgstr ""

#: ../Doc/using/windows.rst:36
msgid "Installation Steps"
msgstr "Étapes d'installation"

#: ../Doc/using/windows.rst:38
msgid ""
"Four Python |version| installers are available for download - two each for "
"the 32-bit and 64-bit versions of the interpreter. The *web installer* is a "
"small initial download, and it will automatically download the required "
"components as necessary. The *offline installer* includes the components "
"necessary for a default installation and only requires an internet "
"connection for optional features. See :ref:`install-layout-option` for other "
"ways to avoid downloading during installation."
msgstr ""

#: ../Doc/using/windows.rst:46
msgid "After starting the installer, one of two options may be selected:"
msgstr ""

#: ../Doc/using/windows.rst:50
msgid "If you select \"Install Now\":"
msgstr ""

#: ../Doc/using/windows.rst:52
msgid ""
"You will *not* need to be an administrator (unless a system update for the C "
"Runtime Library is required or you install the :ref:`launcher` for all users)"
msgstr ""

#: ../Doc/using/windows.rst:55
msgid "Python will be installed into your user directory"
msgstr "Python sera installé dans votre répertoire utilisateur"

#: ../Doc/using/windows.rst:56
msgid ""
"The :ref:`launcher` will be installed according to the option at the bottom "
"of the first page"
msgstr ""

#: ../Doc/using/windows.rst:58
msgid "The standard library, test suite, launcher and pip will be installed"
msgstr ""

#: ../Doc/using/windows.rst:59
msgid "If selected, the install directory will be added to your :envvar:`PATH`"
msgstr ""

#: ../Doc/using/windows.rst:60
msgid "Shortcuts will only be visible for the current user"
msgstr ""

#: ../Doc/using/windows.rst:62
msgid ""
"Selecting \"Customize installation\" will allow you to select the features "
"to install, the installation location and other options or post-install "
"actions. To install debugging symbols or binaries, you will need to use this "
"option."
msgstr ""

#: ../Doc/using/windows.rst:66
msgid ""
"To perform an all-users installation, you should select \"Customize "
"installation\". In this case:"
msgstr ""

#: ../Doc/using/windows.rst:69
msgid "You may be required to provide administrative credentials or approval"
msgstr ""

#: ../Doc/using/windows.rst:70
msgid "Python will be installed into the Program Files directory"
msgstr ""

#: ../Doc/using/windows.rst:71
msgid "The :ref:`launcher` will be installed into the Windows directory"
msgstr ""

#: ../Doc/using/windows.rst:72
msgid "Optional features may be selected during installation"
msgstr ""

#: ../Doc/using/windows.rst:73
msgid "The standard library can be pre-compiled to bytecode"
msgstr ""

#: ../Doc/using/windows.rst:74
msgid ""
"If selected, the install directory will be added to the system :envvar:`PATH`"
msgstr ""

#: ../Doc/using/windows.rst:75
msgid "Shortcuts are available for all users"
msgstr ""

#: ../Doc/using/windows.rst:80
msgid "Removing the MAX_PATH Limitation"
msgstr ""

#: ../Doc/using/windows.rst:82
msgid ""
"Windows historically has limited path lengths to 260 characters. This meant "
"that paths longer than this would not resolve and errors would result."
msgstr ""

#: ../Doc/using/windows.rst:85
msgid ""
"In the latest versions of Windows, this limitation can be expanded to "
"approximately 32,000 characters. Your administrator will need to activate "
"the \"Enable Win32 long paths\" group policy, or set the registry value "
"``HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control"
"\\FileSystem@LongPathsEnabled`` to ``1``."
msgstr ""

#: ../Doc/using/windows.rst:91
msgid ""
"This allows the :func:`open` function, the :mod:`os` module and most other "
"path functionality to accept and return paths longer than 260 characters "
"when using strings. (Use of bytes as paths is deprecated on Windows, and "
"this feature is not available when using bytes.)"
msgstr ""

#: ../Doc/using/windows.rst:96
msgid "After changing the above option, no further configuration is required."
msgstr ""

#: ../Doc/using/windows.rst:100
msgid "Support for long paths was enabled in Python."
msgstr ""

#: ../Doc/using/windows.rst:105
msgid "Installing Without UI"
msgstr ""

#: ../Doc/using/windows.rst:107
msgid ""
"All of the options available in the installer UI can also be specified from "
"the command line, allowing scripted installers to replicate an installation "
"on many machines without user interaction.  These options may also be set "
"without suppressing the UI in order to change some of the defaults."
msgstr ""

#: ../Doc/using/windows.rst:112
msgid ""
"To completely hide the installer UI and install Python silently, pass the ``/"
"quiet`` option. To skip past the user interaction but still display progress "
"and errors, pass the ``/passive`` option. The ``/uninstall`` option may be "
"passed to immediately begin removing Python - no prompt will be displayed."
msgstr ""

#: ../Doc/using/windows.rst:118
msgid ""
"All other options are passed as ``name=value``, where the value is usually "
"``0`` to disable a feature, ``1`` to enable a feature, or a path. The full "
"list of available options is shown below."
msgstr ""

#: ../Doc/using/windows.rst:123
msgid "Name"
msgstr "Nom"

#: ../Doc/using/windows.rst:123
msgid "Description"
msgstr "Description"

#: ../Doc/using/windows.rst:123
msgid "Default"
msgstr ""

#: ../Doc/using/windows.rst:125
msgid "InstallAllUsers"
msgstr ""

#: ../Doc/using/windows.rst:125
msgid "Perform a system-wide installation."
msgstr ""

#: ../Doc/using/windows.rst:125 ../Doc/using/windows.rst:146
#: ../Doc/using/windows.rst:149 ../Doc/using/windows.rst:158
#: ../Doc/using/windows.rst:176 ../Doc/using/windows.rst:184
#: ../Doc/using/windows.rst:187
msgid "0"
msgstr "0"

#: ../Doc/using/windows.rst:127
msgid "TargetDir"
msgstr ""

#: ../Doc/using/windows.rst:127
msgid "The installation directory"
msgstr ""

#: ../Doc/using/windows.rst:127
msgid "Selected based on InstallAllUsers"
msgstr ""

#: ../Doc/using/windows.rst:130
msgid "DefaultAllUsersTargetDir"
msgstr ""

#: ../Doc/using/windows.rst:130
msgid "The default installation directory for all-user installs"
msgstr ""

#: ../Doc/using/windows.rst:130
msgid ""
":file:`%ProgramFiles%\\\\\\ Python X.Y` or :file:`\\ %ProgramFiles(x86)%\\\\"
"\\ Python X.Y`"
msgstr ""

#: ../Doc/using/windows.rst:135
msgid "DefaultJustForMeTargetDir"
msgstr ""

#: ../Doc/using/windows.rst:135
msgid "The default install directory for just-for-me installs"
msgstr ""

#: ../Doc/using/windows.rst:135
msgid ""
":file:`%LocalAppData%\\\\\\ Programs\\\\PythonXY` or :file:`%LocalAppData%\\"
"\\\\ Programs\\\\PythonXY-32`"
msgstr ""

#: ../Doc/using/windows.rst:140
msgid "DefaultCustomTargetDir"
msgstr ""

#: ../Doc/using/windows.rst:140
msgid "The default custom install directory displayed in the UI"
msgstr ""

#: ../Doc/using/windows.rst:140 ../Doc/using/windows.rst:189
msgid "(empty)"
msgstr ""

#: ../Doc/using/windows.rst:143
msgid "AssociateFiles"
msgstr ""

#: ../Doc/using/windows.rst:143
msgid "Create file associations if the launcher is also installed."
msgstr ""

#: ../Doc/using/windows.rst:143 ../Doc/using/windows.rst:153
#: ../Doc/using/windows.rst:156 ../Doc/using/windows.rst:160
#: ../Doc/using/windows.rst:163 ../Doc/using/windows.rst:166
#: ../Doc/using/windows.rst:168 ../Doc/using/windows.rst:171
#: ../Doc/using/windows.rst:174 ../Doc/using/windows.rst:178
#: ../Doc/using/windows.rst:180 ../Doc/using/windows.rst:182
msgid "1"
msgstr "1"

#: ../Doc/using/windows.rst:146
msgid "CompileAll"
msgstr ""

#: ../Doc/using/windows.rst:146
msgid "Compile all ``.py`` files to ``.pyc``."
msgstr ""

#: ../Doc/using/windows.rst:149
msgid "PrependPath"
msgstr ""

#: ../Doc/using/windows.rst:149
msgid ""
"Add install and Scripts directories to :envvar:`PATH` and ``.PY`` to :envvar:"
"`PATHEXT`"
msgstr ""

#: ../Doc/using/windows.rst:153
msgid "Shortcuts"
msgstr ""

#: ../Doc/using/windows.rst:153
msgid ""
"Create shortcuts for the interpreter, documentation and IDLE if installed."
msgstr ""

#: ../Doc/using/windows.rst:156
msgid "Include_doc"
msgstr ""

#: ../Doc/using/windows.rst:156
msgid "Install Python manual"
msgstr ""

#: ../Doc/using/windows.rst:158
msgid "Include_debug"
msgstr ""

#: ../Doc/using/windows.rst:158
msgid "Install debug binaries"
msgstr ""

#: ../Doc/using/windows.rst:160
msgid "Include_dev"
msgstr ""

#: ../Doc/using/windows.rst:160
msgid "Install developer headers and libraries"
msgstr ""

#: ../Doc/using/windows.rst:163
msgid "Include_exe"
msgstr ""

#: ../Doc/using/windows.rst:163
msgid "Install :file:`python.exe` and related files"
msgstr ""

#: ../Doc/using/windows.rst:166
msgid "Include_launcher"
msgstr ""

#: ../Doc/using/windows.rst:166
msgid "Install :ref:`launcher`."
msgstr ""

#: ../Doc/using/windows.rst:168
msgid "InstallLauncherAllUsers"
msgstr ""

#: ../Doc/using/windows.rst:168
msgid "Installs :ref:`launcher` for all users."
msgstr ""

#: ../Doc/using/windows.rst:171
msgid "Include_lib"
msgstr ""

#: ../Doc/using/windows.rst:171
msgid "Install standard library and extension modules"
msgstr ""

#: ../Doc/using/windows.rst:174
msgid "Include_pip"
msgstr ""

#: ../Doc/using/windows.rst:174
msgid "Install bundled pip and setuptools"
msgstr ""

#: ../Doc/using/windows.rst:176
msgid "Include_symbols"
msgstr ""

#: ../Doc/using/windows.rst:176
msgid "Install debugging symbols (`*`.pdb)"
msgstr ""

#: ../Doc/using/windows.rst:178
msgid "Include_tcltk"
msgstr ""

#: ../Doc/using/windows.rst:178
msgid "Install Tcl/Tk support and IDLE"
msgstr ""

#: ../Doc/using/windows.rst:180
msgid "Include_test"
msgstr ""

#: ../Doc/using/windows.rst:180
msgid "Install standard library test suite"
msgstr ""

#: ../Doc/using/windows.rst:182
msgid "Include_tools"
msgstr ""

#: ../Doc/using/windows.rst:182
msgid "Install utility scripts"
msgstr ""

#: ../Doc/using/windows.rst:184
msgid "LauncherOnly"
msgstr ""

#: ../Doc/using/windows.rst:184
msgid "Only installs the launcher. This will override most other options."
msgstr ""

#: ../Doc/using/windows.rst:187
msgid "SimpleInstall"
msgstr ""

#: ../Doc/using/windows.rst:187
msgid "Disable most install UI"
msgstr ""

#: ../Doc/using/windows.rst:189
msgid "SimpleInstallDescription"
msgstr ""

#: ../Doc/using/windows.rst:189
msgid "A custom message to display when the simplified install UI is used."
msgstr ""

#: ../Doc/using/windows.rst:193
msgid ""
"For example, to silently install a default, system-wide Python installation, "
"you could use the following command (from an elevated command prompt)::"
msgstr ""

#: ../Doc/using/windows.rst:198
msgid ""
"To allow users to easily install a personal copy of Python without the test "
"suite, you could provide a shortcut with the following command. This will "
"display a simplified initial page and disallow customization::"
msgstr ""

#: ../Doc/using/windows.rst:205
msgid ""
"(Note that omitting the launcher also omits file associations, and is only "
"recommended for per-user installs when there is also a system-wide "
"installation that included the launcher.)"
msgstr ""

#: ../Doc/using/windows.rst:209
msgid ""
"The options listed above can also be provided in a file named ``unattend."
"xml`` alongside the executable. This file specifies a list of options and "
"values. When a value is provided as an attribute, it will be converted to a "
"number if possible. Values provided as element text are always left as "
"strings. This example file sets the same options as the previous example:"
msgstr ""

#: ../Doc/using/windows.rst:228
msgid "Installing Without Downloading"
msgstr ""

#: ../Doc/using/windows.rst:230
msgid ""
"As some features of Python are not included in the initial installer "
"download, selecting those features may require an internet connection.  To "
"avoid this need, all possible components may be downloaded on-demand to "
"create a complete *layout* that will no longer require an internet "
"connection regardless of the selected features. Note that this download may "
"be bigger than required, but where a large number of installations are going "
"to be performed it is very useful to have a locally cached copy."
msgstr ""

#: ../Doc/using/windows.rst:238
msgid ""
"Execute the following command from Command Prompt to download all possible "
"required files.  Remember to substitute ``python-3.6.0.exe`` for the actual "
"name of your installer, and to create layouts in their own directories to "
"avoid collisions between files with the same name."
msgstr ""

#: ../Doc/using/windows.rst:247
msgid ""
"You may also specify the ``/quiet`` option to hide the progress display."
msgstr ""

#: ../Doc/using/windows.rst:250
msgid "Modifying an install"
msgstr ""

#: ../Doc/using/windows.rst:252
msgid ""
"Once Python has been installed, you can add or remove features through the "
"Programs and Features tool that is part of Windows. Select the Python entry "
"and choose \"Uninstall/Change\" to open the installer in maintenance mode."
msgstr ""

#: ../Doc/using/windows.rst:256
msgid ""
"\"Modify\" allows you to add or remove features by modifying the checkboxes "
"- unchanged checkboxes will not install or remove anything. Some options "
"cannot be changed in this mode, such as the install directory; to modify "
"these, you will need to remove and then reinstall Python completely."
msgstr ""

#: ../Doc/using/windows.rst:261
msgid ""
"\"Repair\" will verify all the files that should be installed using the "
"current settings and replace any that have been removed or modified."
msgstr ""

#: ../Doc/using/windows.rst:264
msgid ""
"\"Uninstall\" will remove Python entirely, with the exception of the :ref:"
"`launcher`, which has its own entry in Programs and Features."
msgstr ""

#: ../Doc/using/windows.rst:268
msgid "Other Platforms"
msgstr ""

#: ../Doc/using/windows.rst:270
msgid ""
"With ongoing development of Python, some platforms that used to be supported "
"earlier are no longer supported (due to the lack of users or developers). "
"Check :pep:`11` for details on all unsupported platforms."
msgstr ""

#: ../Doc/using/windows.rst:274
msgid "`Windows CE <http://pythonce.sourceforge.net/>`_ is still supported."
msgstr ""

#: ../Doc/using/windows.rst:275
msgid ""
"The `Cygwin <https://cygwin.com/>`_ installer offers to install the Python "
"interpreter as well (cf. `Cygwin package source <ftp://ftp.uni-erlangen.de/"
"pub/pc/gnuwin32/cygwin/mirrors/cygnus/ release/python>`_, `Maintainer "
"releases <http://www.tishler.net/jason/software/python/>`_)"
msgstr ""

#: ../Doc/using/windows.rst:281
msgid ""
"See `Python for Windows <https://www.python.org/downloads/windows/>`_ for "
"detailed information about platforms with pre-compiled installers."
msgstr ""

#: ../Doc/using/windows.rst:288
msgid ""
"`Python on XP <http://dooling.com/index.php/2006/03/14/python-on-xp-7-"
"minutes-to-hello-world/>`_"
msgstr ""

#: ../Doc/using/windows.rst:287
msgid "\"7 Minutes to \"Hello World!\"\" by Richard Dooling, 2006"
msgstr ""

#: ../Doc/using/windows.rst:294
msgid ""
"`Installing on Windows <http://www.diveintopython.net/installing_python/"
"windows.html>`_"
msgstr ""

#: ../Doc/using/windows.rst:291
msgid ""
"in \"`Dive into Python: Python from novice to pro <http://www.diveintopython."
"net/>`_\" by Mark Pilgrim, 2004, ISBN 1-59059-356-1"
msgstr ""

#: ../Doc/using/windows.rst:298
msgid ""
"`For Windows users <https://python.swaroopch.com/installation."
"html#installation-on-windows>`_"
msgstr ""

#: ../Doc/using/windows.rst:297
msgid ""
"in \"Installing Python\" in \"`A Byte of Python <https://python.swaroopch."
"com/>`_\" by Swaroop C H, 2003"
msgstr ""

#: ../Doc/using/windows.rst:303
msgid "Alternative bundles"
msgstr ""

#: ../Doc/using/windows.rst:305
msgid ""
"Besides the standard CPython distribution, there are modified packages "
"including additional functionality.  The following is a list of popular "
"versions and their key features:"
msgstr ""

#: ../Doc/using/windows.rst:310
msgid "`ActivePython <https://www.activestate.com/activepython/>`_"
msgstr ""

#: ../Doc/using/windows.rst:310
msgid "Installer with multi-platform compatibility, documentation, PyWin32"
msgstr ""

#: ../Doc/using/windows.rst:314
msgid "`Anaconda <https://www.anaconda.com/download/>`_"
msgstr ""

#: ../Doc/using/windows.rst:313
msgid ""
"Popular scientific modules (such as numpy, scipy and pandas) and the "
"``conda`` package manager."
msgstr ""

#: ../Doc/using/windows.rst:318
msgid "`Canopy <https://www.enthought.com/product/canopy/>`_"
msgstr ""

#: ../Doc/using/windows.rst:317
msgid ""
"A \"comprehensive Python analysis environment\" with editors and other "
"development tools."
msgstr ""

#: ../Doc/using/windows.rst:322
msgid "`WinPython <https://winpython.github.io/>`_"
msgstr ""

#: ../Doc/using/windows.rst:321
msgid ""
"Windows-specific distribution with prebuilt scientific packages and tools "
"for building packages."
msgstr ""

#: ../Doc/using/windows.rst:324
msgid ""
"Note that these packages may not include the latest versions of Python or "
"other libraries, and are not maintained or supported by the core Python team."
msgstr ""

#: ../Doc/using/windows.rst:330
msgid "Configuring Python"
msgstr ""

#: ../Doc/using/windows.rst:332
msgid ""
"To run Python conveniently from a command prompt, you might consider "
"changing some default environment variables in Windows.  While the installer "
"provides an option to configure the PATH and PATHEXT variables for you, this "
"is only reliable for a single, system-wide installation.  If you regularly "
"use multiple versions of Python, consider using the :ref:`launcher`."
msgstr ""

#: ../Doc/using/windows.rst:342
msgid "Excursus: Setting environment variables"
msgstr ""

#: ../Doc/using/windows.rst:344
msgid ""
"Windows allows environment variables to be configured permanently at both "
"the User level and the System level, or temporarily in a command prompt."
msgstr ""

#: ../Doc/using/windows.rst:347
msgid ""
"To temporarily set environment variables, open Command Prompt and use the :"
"command:`set` command:"
msgstr ""

#: ../Doc/using/windows.rst:356
msgid ""
"These changes will apply to any further commands executed in that console, "
"and will be inherited by any applications started from the console."
msgstr ""

#: ../Doc/using/windows.rst:359
msgid ""
"Including the variable name within percent signs will expand to the existing "
"value, allowing you to add your new value at either the start or the end. "
"Modifying :envvar:`PATH` by adding the directory containing :program:`python."
"exe` to the start is a common way to ensure the correct version of Python is "
"launched."
msgstr ""

#: ../Doc/using/windows.rst:365
msgid ""
"To permanently modify the default environment variables, click Start and "
"search for 'edit environment variables', or open System properties, :"
"guilabel:`Advanced system settings` and click the :guilabel:`Environment "
"Variables` button. In this dialog, you can add or modify User and System "
"variables. To change System variables, you need non-restricted access to "
"your machine (i.e. Administrator rights)."
msgstr ""

#: ../Doc/using/windows.rst:374
msgid ""
"Windows will concatenate User variables *after* System variables, which may "
"cause unexpected results when modifying :envvar:`PATH`."
msgstr ""

#: ../Doc/using/windows.rst:377
msgid ""
"The :envvar:`PYTHONPATH` variable is used by all versions of Python 2 and "
"Python 3, so you should not permanently configure this variable unless it "
"only includes code that is compatible with all of your installed Python "
"versions."
msgstr ""

#: ../Doc/using/windows.rst:385
msgid "https://www.microsoft.com/en-us/wdsi/help/folder-variables"
msgstr ""

#: ../Doc/using/windows.rst:385
msgid "Environment variables in Windows NT"
msgstr ""

#: ../Doc/using/windows.rst:388
msgid "https://technet.microsoft.com/en-us/library/cc754250.aspx"
msgstr ""

#: ../Doc/using/windows.rst:388
msgid "The SET command, for temporarily modifying environment variables"
msgstr ""

#: ../Doc/using/windows.rst:391
msgid "https://technet.microsoft.com/en-us/library/cc755104.aspx"
msgstr ""

#: ../Doc/using/windows.rst:391
msgid "The SETX command, for permanently modifying environment variables"
msgstr ""

#: ../Doc/using/windows.rst:394
msgid ""
"https://support.microsoft.com/en-us/help/310519/how-to-manage-environment-"
"variables-in-windows-xp"
msgstr ""

#: ../Doc/using/windows.rst:394
msgid "How To Manage Environment Variables in Windows XP"
msgstr "Comment gérer les variables d'environnement sous Windows XP"

#: ../Doc/using/windows.rst:396
msgid "https://www.chem.gla.ac.uk/~louis/software/faq/q1.html"
msgstr ""

#: ../Doc/using/windows.rst:397
msgid "Setting Environment variables, Louis J. Farrugia"
msgstr "Définir les variables d'environnement, Louis J. Farrugia"

#: ../Doc/using/windows.rst:402
msgid "Finding the Python executable"
msgstr "Trouver l'exécutable Python"

#: ../Doc/using/windows.rst:406
msgid ""
"Besides using the automatically created start menu entry for the Python "
"interpreter, you might want to start Python in the command prompt. The "
"installer has an option to set that up for you."
msgstr ""

#: ../Doc/using/windows.rst:410
msgid ""
"On the first page of the installer, an option labelled \"Add Python to PATH"
"\" may be selected to have the installer add the install location into the :"
"envvar:`PATH`.  The location of the :file:`Scripts\\\\` folder is also "
"added. This allows you to type :command:`python` to run the interpreter, "
"and :command:`pip` for the package installer. Thus, you can also execute "
"your scripts with command line options, see :ref:`using-on-cmdline` "
"documentation."
msgstr ""

#: ../Doc/using/windows.rst:417
msgid ""
"If you don't enable this option at install time, you can always re-run the "
"installer, select Modify, and enable it.  Alternatively, you can manually "
"modify the :envvar:`PATH` using the directions in :ref:`setting-envvars`.  "
"You need to set your :envvar:`PATH` environment variable to include the "
"directory of your Python installation, delimited by a semicolon from other "
"entries.  An example variable could look like this (assuming the first two "
"entries already existed)::"
msgstr ""

#: ../Doc/using/windows.rst:430
msgid "Python Launcher for Windows"
msgstr ""

#: ../Doc/using/windows.rst:434
msgid ""
"The Python launcher for Windows is a utility which aids in locating and "
"executing of different Python versions.  It allows scripts (or the command-"
"line) to indicate a preference for a specific Python version, and will "
"locate and execute that version."
msgstr ""

#: ../Doc/using/windows.rst:439
msgid ""
"Unlike the :envvar:`PATH` variable, the launcher will correctly select the "
"most appropriate version of Python. It will prefer per-user installations "
"over system-wide ones, and orders by language version rather than using the "
"most recently installed version."
msgstr ""

#: ../Doc/using/windows.rst:445
msgid "Getting started"
msgstr ""

#: ../Doc/using/windows.rst:448
msgid "From the command-line"
msgstr "Depuis la ligne de commande"

#: ../Doc/using/windows.rst:452
msgid ""
"System-wide installations of Python 3.3 and later will put the launcher on "
"your :envvar:`PATH`. The launcher is compatible with all available versions "
"of Python, so it does not matter which version is installed. To check that "
"the launcher is available, execute the following command in Command Prompt:"
msgstr ""

#: ../Doc/using/windows.rst:461
msgid ""
"You should find that the latest version of Python you have installed is "
"started - it can be exited as normal, and any additional command-line "
"arguments specified will be sent directly to Python."
msgstr ""

#: ../Doc/using/windows.rst:465
msgid ""
"If you have multiple versions of Python installed (e.g., 2.7 and |version|) "
"you will have noticed that Python |version| was started - to launch Python "
"2.7, try the command:"
msgstr ""

#: ../Doc/using/windows.rst:473
msgid ""
"If you want the latest version of Python 2.x you have installed, try the "
"command:"
msgstr ""

#: ../Doc/using/windows.rst:480
msgid "You should find the latest version of Python 2.x starts."
msgstr ""

#: ../Doc/using/windows.rst:482
msgid "If you see the following error, you do not have the launcher installed:"
msgstr ""

#: ../Doc/using/windows.rst:489
msgid ""
"Per-user installations of Python do not add the launcher to :envvar:`PATH` "
"unless the option was selected on installation."
msgstr ""

#: ../Doc/using/windows.rst:493
msgid "Virtual environments"
msgstr ""

#: ../Doc/using/windows.rst:497
msgid ""
"If the launcher is run with no explicit Python version specification, and a "
"virtual environment (created with the standard library :mod:`venv` module or "
"the external ``virtualenv`` tool) active, the launcher will run the virtual "
"environment's interpreter rather than the global one.  To run the global "
"interpreter, either deactivate the virtual environment, or explicitly "
"specify the global Python version."
msgstr ""

#: ../Doc/using/windows.rst:505
msgid "From a script"
msgstr ""

#: ../Doc/using/windows.rst:507
msgid ""
"Let's create a test Python script - create a file called ``hello.py`` with "
"the following contents"
msgstr ""

#: ../Doc/using/windows.rst:516
msgid "From the directory in which hello.py lives, execute the command:"
msgstr ""

#: ../Doc/using/windows.rst:522
msgid ""
"You should notice the version number of your latest Python 2.x installation "
"is printed.  Now try changing the first line to be:"
msgstr ""

#: ../Doc/using/windows.rst:529
msgid ""
"Re-executing the command should now print the latest Python 3.x information. "
"As with the above command-line examples, you can specify a more explicit "
"version qualifier.  Assuming you have Python 2.6 installed, try changing the "
"first line to ``#! python2.6`` and you should find the 2.6 version "
"information printed."
msgstr ""

#: ../Doc/using/windows.rst:535
msgid ""
"Note that unlike interactive use, a bare \"python\" will use the latest "
"version of Python 2.x that you have installed.  This is for backward "
"compatibility and for compatibility with Unix, where the command ``python`` "
"typically refers to Python 2."
msgstr ""

#: ../Doc/using/windows.rst:541
msgid "From file associations"
msgstr ""

#: ../Doc/using/windows.rst:543
msgid ""
"The launcher should have been associated with Python files (i.e. ``.py``, ``."
"pyw``, ``.pyc`` files) when it was installed.  This means that when you "
"double-click on one of these files from Windows explorer the launcher will "
"be used, and therefore you can use the same facilities described above to "
"have the script specify the version which should be used."
msgstr ""

#: ../Doc/using/windows.rst:549
msgid ""
"The key benefit of this is that a single launcher can support multiple "
"Python versions at the same time depending on the contents of the first line."
msgstr ""

#: ../Doc/using/windows.rst:553
msgid "Shebang Lines"
msgstr ""

#: ../Doc/using/windows.rst:555
msgid ""
"If the first line of a script file starts with ``#!``, it is known as a "
"\"shebang\" line.  Linux and other Unix like operating systems have native "
"support for such lines and they are commonly used on such systems to "
"indicate how a script should be executed.  This launcher allows the same "
"facilities to be used with Python scripts on Windows and the examples above "
"demonstrate their use."
msgstr ""

#: ../Doc/using/windows.rst:562
msgid ""
"To allow shebang lines in Python scripts to be portable between Unix and "
"Windows, this launcher supports a number of 'virtual' commands to specify "
"which interpreter to use.  The supported virtual commands are:"
msgstr ""

#: ../Doc/using/windows.rst:566
msgid "``/usr/bin/env python``"
msgstr ""

#: ../Doc/using/windows.rst:567
msgid "``/usr/bin/python``"
msgstr ""

#: ../Doc/using/windows.rst:568
msgid "``/usr/local/bin/python``"
msgstr ""

#: ../Doc/using/windows.rst:569
msgid "``python``"
msgstr ""

#: ../Doc/using/windows.rst:571
msgid "For example, if the first line of your script starts with"
msgstr ""

#: ../Doc/using/windows.rst:577
msgid ""
"The default Python will be located and used.  As many Python scripts written "
"to work on Unix will already have this line, you should find these scripts "
"can be used by the launcher without modification.  If you are writing a new "
"script on Windows which you hope will be useful on Unix, you should use one "
"of the shebang lines starting with ``/usr``."
msgstr ""

#: ../Doc/using/windows.rst:583
msgid ""
"Any of the above virtual commands can be suffixed with an explicit version "
"(either just the major version, or the major and minor version) - for "
"example ``/usr/bin/python2.7`` - which will cause that specific version to "
"be located and used."
msgstr ""

#: ../Doc/using/windows.rst:588
msgid ""
"The ``/usr/bin/env`` form of shebang line has one further special property. "
"Before looking for installed Python interpreters, this form will search the "
"executable :envvar:`PATH` for a Python executable. This corresponds to the "
"behaviour of the Unix ``env`` program, which performs a :envvar:`PATH` "
"search."
msgstr ""

#: ../Doc/using/windows.rst:594
msgid "Arguments in shebang lines"
msgstr ""

#: ../Doc/using/windows.rst:596
msgid ""
"The shebang lines can also specify additional options to be passed to the "
"Python interpreter.  For example, if you have a shebang line:"
msgstr ""

#: ../Doc/using/windows.rst:603
msgid "Then Python will be started with the ``-v`` option"
msgstr ""

#: ../Doc/using/windows.rst:606
msgid "Customization"
msgstr ""

#: ../Doc/using/windows.rst:609
msgid "Customization via INI files"
msgstr ""

#: ../Doc/using/windows.rst:611
msgid ""
"Two .ini files will be searched by the launcher - ``py.ini`` in the current "
"user's \"application data\" directory (i.e. the directory returned by "
"calling the Windows function ``SHGetFolderPath`` with "
"``CSIDL_LOCAL_APPDATA``) and ``py.ini`` in the same directory as the "
"launcher. The same .ini files are used for both the 'console' version of the "
"launcher (i.e. py.exe) and for the 'windows' version (i.e. pyw.exe)"
msgstr ""

#: ../Doc/using/windows.rst:618
msgid ""
"Customization specified in the \"application directory\" will have "
"precedence over the one next to the executable, so a user, who may not have "
"write access to the .ini file next to the launcher, can override commands in "
"that global .ini file)"
msgstr ""

#: ../Doc/using/windows.rst:623
msgid "Customizing default Python versions"
msgstr ""

#: ../Doc/using/windows.rst:625
msgid ""
"In some cases, a version qualifier can be included in a command to dictate "
"which version of Python will be used by the command. A version qualifier "
"starts with a major version number and can optionally be followed by a "
"period ('.') and a minor version specifier. If the minor qualifier is "
"specified, it may optionally be followed by \"-32\" to indicate the 32-bit "
"implementation of that version be used."
msgstr ""

#: ../Doc/using/windows.rst:632
msgid ""
"For example, a shebang line of ``#!python`` has no version qualifier, while "
"``#!python3`` has a version qualifier which specifies only a major version."
msgstr ""

#: ../Doc/using/windows.rst:635
msgid ""
"If no version qualifiers are found in a command, the environment variable "
"``PY_PYTHON`` can be set to specify the default version qualifier - the "
"default value is \"2\". Note this value could specify just a major version "
"(e.g. \"2\") or a major.minor qualifier (e.g. \"2.6\"), or even major."
"minor-32."
msgstr ""

#: ../Doc/using/windows.rst:640
msgid ""
"If no minor version qualifiers are found, the environment variable "
"``PY_PYTHON{major}`` (where ``{major}`` is the current major version "
"qualifier as determined above) can be set to specify the full version. If no "
"such option is found, the launcher will enumerate the installed Python "
"versions and use the latest minor release found for the major version, which "
"is likely, although not guaranteed, to be the most recently installed "
"version in that family."
msgstr ""

#: ../Doc/using/windows.rst:648
msgid ""
"On 64-bit Windows with both 32-bit and 64-bit implementations of the same "
"(major.minor) Python version installed, the 64-bit version will always be "
"preferred. This will be true for both 32-bit and 64-bit implementations of "
"the launcher - a 32-bit launcher will prefer to execute a 64-bit Python "
"installation of the specified version if available. This is so the behavior "
"of the launcher can be predicted knowing only what versions are installed on "
"the PC and without regard to the order in which they were installed (i.e., "
"without knowing whether a 32 or 64-bit version of Python and corresponding "
"launcher was installed last). As noted above, an optional \"-32\" suffix can "
"be used on a version specifier to change this behaviour."
msgstr ""

#: ../Doc/using/windows.rst:659
msgid "Examples:"
msgstr "Exemples : ::"

#: ../Doc/using/windows.rst:661
msgid ""
"If no relevant options are set, the commands ``python`` and ``python2`` will "
"use the latest Python 2.x version installed and the command ``python3`` will "
"use the latest Python 3.x installed."
msgstr ""

#: ../Doc/using/windows.rst:665
msgid ""
"The commands ``python3.1`` and ``python2.7`` will not consult any options at "
"all as the versions are fully specified."
msgstr ""

#: ../Doc/using/windows.rst:668
msgid ""
"If ``PY_PYTHON=3``, the commands ``python`` and ``python3`` will both use "
"the latest installed Python 3 version."
msgstr ""

#: ../Doc/using/windows.rst:671
msgid ""
"If ``PY_PYTHON=3.1-32``, the command ``python`` will use the 32-bit "
"implementation of 3.1 whereas the command ``python3`` will use the latest "
"installed Python (PY_PYTHON was not considered at all as a major version was "
"specified.)"
msgstr ""

#: ../Doc/using/windows.rst:676
msgid ""
"If ``PY_PYTHON=3`` and ``PY_PYTHON3=3.1``, the commands ``python`` and "
"``python3`` will both use specifically 3.1"
msgstr ""

#: ../Doc/using/windows.rst:679
msgid ""
"In addition to environment variables, the same settings can be configured in "
"the .INI file used by the launcher.  The section in the INI file is called "
"``[defaults]`` and the key name will be the same as the environment "
"variables without the leading ``PY_`` prefix (and note that the key names in "
"the INI file are case insensitive.)  The contents of an environment variable "
"will override things specified in the INI file."
msgstr ""

#: ../Doc/using/windows.rst:686
msgid "For example:"
msgstr "Par exemple ::"

#: ../Doc/using/windows.rst:688
msgid "Setting ``PY_PYTHON=3.1`` is equivalent to the INI file containing:"
msgstr ""

#: ../Doc/using/windows.rst:695
msgid ""
"Setting ``PY_PYTHON=3`` and ``PY_PYTHON3=3.1`` is equivalent to the INI file "
"containing:"
msgstr ""

#: ../Doc/using/windows.rst:705
msgid "Diagnostics"
msgstr ""

#: ../Doc/using/windows.rst:707
msgid ""
"If an environment variable ``PYLAUNCH_DEBUG`` is set (to any value), the "
"launcher will print diagnostic information to stderr (i.e. to the console). "
"While this information manages to be simultaneously verbose *and* terse, it "
"should allow you to see what versions of Python were located, why a "
"particular version was chosen and the exact command-line used to execute the "
"target Python."
msgstr ""

#: ../Doc/using/windows.rst:719
msgid "Finding modules"
msgstr ""

#: ../Doc/using/windows.rst:721
msgid ""
"Python usually stores its library (and thereby your site-packages folder) in "
"the installation directory.  So, if you had installed Python to :file:`C:\\"
"\\Python\\\\`, the default library would reside in :file:`C:\\\\Python\\\\Lib"
"\\\\` and third-party modules should be stored in :file:`C:\\\\Python\\\\Lib"
"\\\\site-packages\\\\`."
msgstr ""

#: ../Doc/using/windows.rst:727
msgid ""
"To completely override :data:`sys.path`, create a ``._pth`` file with the "
"same name as the DLL (``python37._pth``) or the executable (``python._pth``) "
"and specify one line for each path to add to :data:`sys.path`. The file "
"based on the DLL name overrides the one based on the executable, which "
"allows paths to be restricted for any program loading the runtime if desired."
msgstr ""

#: ../Doc/using/windows.rst:733
msgid ""
"When the file exists, all registry and environment variables are ignored, "
"isolated mode is enabled, and :mod:`site` is not imported unless one line in "
"the file specifies ``import site``. Blank paths and lines starting with "
"``#`` are ignored. Each path may be absolute or relative to the location of "
"the file. Import statements other than to ``site`` are not permitted, and "
"arbitrary code cannot be specified."
msgstr ""

#: ../Doc/using/windows.rst:740
msgid ""
"Note that ``.pth`` files (without leading underscore) will be processed "
"normally by the :mod:`site` module when ``import site`` has been specified."
msgstr ""

#: ../Doc/using/windows.rst:743
msgid ""
"When no ``._pth`` file is found, this is how :data:`sys.path` is populated "
"on Windows:"
msgstr ""

#: ../Doc/using/windows.rst:746
msgid ""
"An empty entry is added at the start, which corresponds to the current "
"directory."
msgstr ""

#: ../Doc/using/windows.rst:749
msgid ""
"If the environment variable :envvar:`PYTHONPATH` exists, as described in :"
"ref:`using-on-envvars`, its entries are added next.  Note that on Windows, "
"paths in this variable must be separated by semicolons, to distinguish them "
"from the colon used in drive identifiers (``C:\\`` etc.)."
msgstr ""

#: ../Doc/using/windows.rst:754
msgid ""
"Additional \"application paths\" can be added in the registry as subkeys of :"
"samp:`\\\\SOFTWARE\\\\Python\\\\PythonCore\\\\{version}\\\\PythonPath` under "
"both the ``HKEY_CURRENT_USER`` and ``HKEY_LOCAL_MACHINE`` hives.  Subkeys "
"which have semicolon-delimited path strings as their default value will "
"cause each path to be added to :data:`sys.path`.  (Note that all known "
"installers only use HKLM, so HKCU is typically empty.)"
msgstr ""

#: ../Doc/using/windows.rst:761
msgid ""
"If the environment variable :envvar:`PYTHONHOME` is set, it is assumed as "
"\"Python Home\".  Otherwise, the path of the main Python executable is used "
"to locate a \"landmark file\" (either ``Lib\\os.py`` or ``pythonXY.zip``) to "
"deduce the \"Python Home\".  If a Python home is found, the relevant sub-"
"directories added to :data:`sys.path` (``Lib``, ``plat-win``, etc) are based "
"on that folder.  Otherwise, the core Python path is constructed from the "
"PythonPath stored in the registry."
msgstr ""

#: ../Doc/using/windows.rst:769
msgid ""
"If the Python Home cannot be located, no :envvar:`PYTHONPATH` is specified "
"in the environment, and no registry entries can be found, a default path "
"with relative entries is used (e.g. ``.\\Lib;.\\plat-win``, etc)."
msgstr ""

#: ../Doc/using/windows.rst:773
msgid ""
"If a ``pyvenv.cfg`` file is found alongside the main executable or in the "
"directory one level above the executable, the following variations apply:"
msgstr ""

#: ../Doc/using/windows.rst:776
msgid ""
"If ``home`` is an absolute path and :envvar:`PYTHONHOME` is not set, this "
"path is used instead of the path to the main executable when deducing the "
"home location."
msgstr ""

#: ../Doc/using/windows.rst:780
msgid "The end result of all this is:"
msgstr ""

#: ../Doc/using/windows.rst:782
msgid ""
"When running :file:`python.exe`, or any other .exe in the main Python "
"directory (either an installed version, or directly from the PCbuild "
"directory), the core path is deduced, and the core paths in the registry are "
"ignored.  Other \"application paths\" in the registry are always read."
msgstr ""

#: ../Doc/using/windows.rst:787
msgid ""
"When Python is hosted in another .exe (different directory, embedded via "
"COM, etc), the \"Python Home\" will not be deduced, so the core path from "
"the registry is used.  Other \"application paths\" in the registry are "
"always read."
msgstr ""

#: ../Doc/using/windows.rst:791
msgid ""
"If Python can't find its home and there are no registry value (frozen .exe, "
"some very strange installation setup) you get a path with some default, but "
"relative, paths."
msgstr ""

#: ../Doc/using/windows.rst:795
msgid ""
"For those who want to bundle Python into their application or distribution, "
"the following advice will prevent conflicts with other installations:"
msgstr ""

#: ../Doc/using/windows.rst:798
msgid ""
"Include a ``._pth`` file alongside your executable containing the "
"directories to include. This will ignore paths listed in the registry and "
"environment variables, and also ignore :mod:`site` unless ``import site`` is "
"listed."
msgstr ""

#: ../Doc/using/windows.rst:803
msgid ""
"If you are loading :file:`python3.dll` or :file:`python37.dll` in your own "
"executable, explicitly call :c:func:`Py_SetPath` or (at least) :c:func:"
"`Py_SetProgramName` before :c:func:`Py_Initialize`."
msgstr ""

#: ../Doc/using/windows.rst:807
msgid ""
"Clear and/or overwrite :envvar:`PYTHONPATH` and set :envvar:`PYTHONHOME` "
"before launching :file:`python.exe` from your application."
msgstr ""

#: ../Doc/using/windows.rst:810
msgid ""
"If you cannot use the previous suggestions (for example, you are a "
"distribution that allows people to run :file:`python.exe` directly), ensure "
"that the landmark file (:file:`Lib\\\\os.py`) exists in your install "
"directory. (Note that it will not be detected inside a ZIP file, but a "
"correctly named ZIP file will be detected instead.)"
msgstr ""

#: ../Doc/using/windows.rst:816
msgid ""
"These will ensure that the files in a system-wide installation will not take "
"precedence over the copy of the standard library bundled with your "
"application. Otherwise, your users may experience problems using your "
"application. Note that the first suggestion is the best, as the others may "
"still be susceptible to non-standard paths in the registry and user site-"
"packages."
msgstr ""

#: ../Doc/using/windows.rst:825
msgid ""
"Adds ``._pth`` file support and removes ``applocal`` option from ``pyvenv."
"cfg``."
msgstr ""

#: ../Doc/using/windows.rst:827
msgid ""
"Adds ``pythonXX.zip`` as a potential landmark when directly adjacent to the "
"executable."
msgstr ""

#: ../Doc/using/windows.rst:833
msgid ""
"Modules specified in the registry under ``Modules`` (not ``PythonPath``) may "
"be imported by :class:`importlib.machinery.WindowsRegistryFinder`. This "
"finder is enabled on Windows in 3.6.0 and earlier, but may need to be "
"explicitly added to :attr:`sys.meta_path` in the future."
msgstr ""

#: ../Doc/using/windows.rst:839
msgid "Additional modules"
msgstr ""

#: ../Doc/using/windows.rst:841
msgid ""
"Even though Python aims to be portable among all platforms, there are "
"features that are unique to Windows.  A couple of modules, both in the "
"standard library and external, and snippets exist to use these features."
msgstr ""

#: ../Doc/using/windows.rst:845
msgid ""
"The Windows-specific standard modules are documented in :ref:`mswin-specific-"
"services`."
msgstr ""

#: ../Doc/using/windows.rst:849
msgid "PyWin32"
msgstr "PyWin32"

#: ../Doc/using/windows.rst:851
msgid ""
"The `PyWin32 <https://pypi.org/project/pywin32>`_ module by Mark Hammond is "
"a collection of modules for advanced Windows-specific support.  This "
"includes utilities for:"
msgstr ""
"Le module `PyWin32 <https://pypi.org/project/pywin32>`_ de Mark Hammond est "
"une collection de modules pour un support avancé spécifique à Windows.  Cela "
"inclut les services pour :"

#: ../Doc/using/windows.rst:855
msgid "`Component Object Model <https://www.microsoft.com/com/>`_ (COM)"
msgstr "`Component Object Model <http://www.microsoft.com/com/>`_ (COM)"

#: ../Doc/using/windows.rst:856
msgid "Win32 API calls"
msgstr "Appels à l'API Win32"

#: ../Doc/using/windows.rst:857
msgid "Registry"
msgstr "Registre"

#: ../Doc/using/windows.rst:858
msgid "Event log"
msgstr "journal d'événement"

#: ../Doc/using/windows.rst:859
msgid ""
"`Microsoft Foundation Classes <https://msdn.microsoft.com/en-us/library/"
"fe1cf721%28VS.80%29.aspx>`_ (MFC) user interfaces"
msgstr ""
"`Microsoft Foundation Classes <http://msdn.microsoft.com/en-us/library/"
"fe1cf721%28VS.80%29.aspx>`_ (MFC) interfaces utilisateur"

#: ../Doc/using/windows.rst:862
msgid ""
"`PythonWin <https://web.archive.org/web/20060524042422/ https://www.python."
"org/windows/pythonwin/>`_ is a sample MFC application shipped with PyWin32.  "
"It is an embeddable IDE with a built-in debugger."
msgstr ""
"`PythonWin <http://web.archive.org/web/20060524042422/ http://www.python.org/"
"windows/pythonwin/>`_ est une exemple d'application MFC livrée avec PyWin32. "
"Il s'agit d'un IDE embarqué avec débogueur intégré."

#: ../Doc/using/windows.rst:869
msgid ""
"`Win32 How Do I...? <http://timgolden.me.uk/python/win32_how_do_i.html>`_"
msgstr ""

#: ../Doc/using/windows.rst:869
msgid "by Tim Golden"
msgstr "par Tim Golden"

#: ../Doc/using/windows.rst:871
msgid "`Python and COM <http://www.boddie.org.uk/python/COM.html>`_"
msgstr ""

#: ../Doc/using/windows.rst:872
msgid "by David and Paul Boddie"
msgstr "par David et Paul Boddie"

#: ../Doc/using/windows.rst:876
msgid "cx_Freeze"
msgstr ""

#: ../Doc/using/windows.rst:878
msgid ""
"`cx_Freeze <https://anthony-tuininga.github.io/cx_Freeze/>`_ is a :mod:"
"`distutils` extension (see :ref:`extending-distutils`) which wraps Python "
"scripts into executable Windows programs (:file:`{*}.exe` files).  When you "
"have done this, you can distribute your application without requiring your "
"users to install Python."
msgstr ""

#: ../Doc/using/windows.rst:886
msgid "WConio"
msgstr "WConio"

#: ../Doc/using/windows.rst:888
msgid ""
"Since Python's advanced terminal handling layer, :mod:`curses`, is "
"restricted to Unix-like systems, there is a library exclusive to Windows as "
"well: Windows Console I/O for Python."
msgstr ""

#: ../Doc/using/windows.rst:892
msgid ""
"`WConio <http://newcenturycomputers.net/projects/wconio.html>`_ is a wrapper "
"for Turbo-C's :file:`CONIO.H`, used to create text user interfaces."
msgstr ""

#: ../Doc/using/windows.rst:898
msgid "Compiling Python on Windows"
msgstr "Compiler Python sous Windows"

#: ../Doc/using/windows.rst:900
msgid ""
"If you want to compile CPython yourself, first thing you should do is get "
"the `source <https://www.python.org/downloads/source/>`_. You can download "
"either the latest release's source or just grab a fresh `checkout <https://"
"devguide.python.org/setup/#getting-the-source-code>`_."
msgstr ""

#: ../Doc/using/windows.rst:905
msgid ""
"The source tree contains a build solution and project files for Microsoft "
"Visual Studio 2015, which is the compiler used to build the official Python "
"releases. These files are in the :file:`PCbuild` directory."
msgstr ""

#: ../Doc/using/windows.rst:909
msgid ""
"Check :file:`PCbuild/readme.txt` for general information on the build "
"process."
msgstr ""
"Consultez :file:`PC/readme.txt` pour des informations générales sur le "
"processus de construction."

#: ../Doc/using/windows.rst:912
msgid "For extension modules, consult :ref:`building-on-windows`."
msgstr ""

#: ../Doc/using/windows.rst:919
msgid ""
"`Python + Windows + distutils + SWIG + gcc MinGW <http://sebsauvage.net/"
"python/mingw.html>`_"
msgstr ""

#: ../Doc/using/windows.rst:917
msgid ""
"or \"Creating Python extensions in C/C++ with SWIG and compiling them with "
"MinGW gcc under Windows\" or \"Installing Python extension with distutils "
"and without Microsoft Visual C++\" by Sébastien Sauvage, 2003"
msgstr ""

#: ../Doc/using/windows.rst:921
msgid ""
"`MingW -- Python extensions <http://oldwiki.mingw.org/index.php/Python"
"%20extensions>`_"
msgstr ""

#: ../Doc/using/windows.rst:922
msgid "by Trent Apted et al, 2007"
msgstr "par Trent Apted et al, 2007"

#: ../Doc/using/windows.rst:926
msgid "Embedded Distribution"
msgstr ""

#: ../Doc/using/windows.rst:930
msgid ""
"The embedded distribution is a ZIP file containing a minimal Python "
"environment. It is intended for acting as part of another application, "
"rather than being directly accessed by end-users."
msgstr ""

#: ../Doc/using/windows.rst:934
msgid ""
"When extracted, the embedded distribution is (almost) fully isolated from "
"the user's system, including environment variables, system registry "
"settings, and installed packages. The standard library is included as pre-"
"compiled and optimized ``.pyc`` files in a ZIP, and ``python3.dll``, "
"``python37.dll``, ``python.exe`` and ``pythonw.exe`` are all provided. Tcl/"
"tk (including all dependants, such as Idle), pip and the Python "
"documentation are not included."
msgstr ""

#: ../Doc/using/windows.rst:943
msgid ""
"The embedded distribution does not include the `Microsoft C Runtime <https://"
"www.microsoft.com/en-us/download/details.aspx?id=48145>`_ and it is the "
"responsibility of the application installer to provide this. The runtime may "
"have already been installed on a user's system previously or automatically "
"via Windows Update, and can be detected by finding ``ucrtbase.dll`` in the "
"system directory."
msgstr ""

#: ../Doc/using/windows.rst:950
msgid ""
"Third-party packages should be installed by the application installer "
"alongside the embedded distribution. Using pip to manage dependencies as for "
"a regular Python installation is not supported with this distribution, "
"though with some care it may be possible to include and use pip for "
"automatic updates. In general, third-party packages should be treated as "
"part of the application (\"vendoring\") so that the developer can ensure "
"compatibility with newer versions before providing updates to users."
msgstr ""

#: ../Doc/using/windows.rst:958
msgid ""
"The two recommended use cases for this distribution are described below."
msgstr ""

#: ../Doc/using/windows.rst:961
msgid "Python Application"
msgstr ""

#: ../Doc/using/windows.rst:963
msgid ""
"An application written in Python does not necessarily require users to be "
"aware of that fact. The embedded distribution may be used in this case to "
"include a private version of Python in an install package. Depending on how "
"transparent it should be (or conversely, how professional it should appear), "
"there are two options."
msgstr ""

#: ../Doc/using/windows.rst:969
msgid ""
"Using a specialized executable as a launcher requires some coding, but "
"provides the most transparent experience for users. With a customized "
"launcher, there are no obvious indications that the program is running on "
"Python: icons can be customized, company and version information can be "
"specified, and file associations behave properly. In most cases, a custom "
"launcher should simply be able to call ``Py_Main`` with a hard-coded command "
"line."
msgstr ""

#: ../Doc/using/windows.rst:976
msgid ""
"The simpler approach is to provide a batch file or generated shortcut that "
"directly calls the ``python.exe`` or ``pythonw.exe`` with the required "
"command-line arguments. In this case, the application will appear to be "
"Python and not its actual name, and users may have trouble distinguishing it "
"from other running Python processes or file associations."
msgstr ""

#: ../Doc/using/windows.rst:982
msgid ""
"With the latter approach, packages should be installed as directories "
"alongside the Python executable to ensure they are available on the path. "
"With the specialized launcher, packages can be located in other locations as "
"there is an opportunity to specify the search path before launching the "
"application."
msgstr ""

#: ../Doc/using/windows.rst:988
msgid "Embedding Python"
msgstr ""

#: ../Doc/using/windows.rst:990
msgid ""
"Applications written in native code often require some form of scripting "
"language, and the embedded Python distribution can be used for this purpose. "
"In general, the majority of the application is in native code, and some part "
"will either invoke ``python.exe`` or directly use ``python3.dll``. For "
"either case, extracting the embedded distribution to a subdirectory of the "
"application installation is sufficient to provide a loadable Python "
"interpreter."
msgstr ""

#: ../Doc/using/windows.rst:997
msgid ""
"As with the application use, packages can be installed to any location as "
"there is an opportunity to specify search paths before initializing the "
"interpreter. Otherwise, there is no fundamental differences between using "
"the embedded distribution and a regular installation."
msgstr ""

#: ../Doc/using/windows.rst:1003
msgid "Other resources"
msgstr "Autres ressources"

#: ../Doc/using/windows.rst:1010
msgid ""
"`Python Programming On Win32 <http://shop.oreilly.com/product/9781565926219."
"do>`_"
msgstr ""

#: ../Doc/using/windows.rst:1008
msgid ""
"\"Help for Windows Programmers\" by Mark Hammond and Andy Robinson, O'Reilly "
"Media, 2000, ISBN 1-56592-621-8"
msgstr ""
"\"Help for Windows Programmers\" de Mark Hammond et Andy Robinson, O'Reilly "
"Media, 2000, ISBN 1-56592-621-8"

#: ../Doc/using/windows.rst:1013
msgid ""
"`A Python for Windows Tutorial <http://www.imladris.com/Scripts/"
"PythonForWindows.html>`_"
msgstr ""

#: ../Doc/using/windows.rst:1013
msgid "by Amanda Birmingham, 2004"
msgstr "par Amanda Birmingham, 2004"

#: ../Doc/using/windows.rst:1015
msgid ":pep:`397` - Python launcher for Windows"
msgstr ""

#: ../Doc/using/windows.rst:1016
msgid ""
"The proposal for the launcher to be included in the Python distribution."
msgstr ""

#, fuzzy
#~ msgid "Installing on Windows"
#~ msgstr "Installer Python"

#, fuzzy
#~ msgid "WinPython"
#~ msgstr "Installer Python"

#, fuzzy
#~ msgid "MingW -- Python extensions"
#~ msgstr "Utiliser Python sur Windows"

#, fuzzy
#~ msgid "A Python for Windows Tutorial"
#~ msgstr "Utiliser Python sur Windows"
