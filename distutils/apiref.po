# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-28 15:29+0200\n"
"PO-Revision-Date: 2018-10-04 16:28+0200\n"
"Last-Translator: Julien Palard <julien@palard.fr>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 1.8.11\n"

#: ../Doc/distutils/apiref.rst:5
msgid "API Reference"
msgstr "Référence de l'API"

#: ../Doc/distutils/apiref.rst:9
msgid ":mod:`distutils.core` --- Core Distutils functionality"
msgstr ""

#: ../Doc/distutils/apiref.rst:15
msgid ""
"The :mod:`distutils.core` module is the only module that needs to be "
"installed to use the Distutils. It provides the :func:`setup` (which is "
"called from the setup script). Indirectly provides the  :class:`distutils."
"dist.Distribution` and :class:`distutils.cmd.Command` class."
msgstr ""
"Le module :mod:`distutils.core` est le seul module qui a besoin d'être "
"installé pour utiliser Distutils. Il fournit le :func:`setup` (qui est "
"appelé par le script *setup.py*). Il fournit indirectement les classes :"
"class:`distutils.dist.Distribution` et :class:`distutils.cmd.Command`."

#: ../Doc/distutils/apiref.rst:23
msgid ""
"The basic do-everything function that does most everything you could ever "
"ask for from a Distutils method."
msgstr ""
"La fonction de base à tout faire qui fait presque tout ce dont vous pourriez "
"attendre d'une méthode Distutils."

#: ../Doc/distutils/apiref.rst:26
msgid ""
"The setup function takes a large number of arguments. These are laid out in "
"the following table."
msgstr ""
"La fonction ``setup`` prend un grand nombre d'arguments. Ils sont présentés "
"dans le tableau suivant."

#: ../Doc/distutils/apiref.rst:32 ../Doc/distutils/apiref.rst:175
msgid "argument name"
msgstr "nom de l'argument"

#: ../Doc/distutils/apiref.rst:32 ../Doc/distutils/apiref.rst:133
#: ../Doc/distutils/apiref.rst:175
msgid "value"
msgstr "valeur"

#: ../Doc/distutils/apiref.rst:32 ../Doc/distutils/apiref.rst:175
msgid "type"
msgstr "type"

#: ../Doc/distutils/apiref.rst:34 ../Doc/distutils/apiref.rst:177
msgid "*name*"
msgstr "*name*"

#: ../Doc/distutils/apiref.rst:34
msgid "The name of the package"
msgstr "Le nom du paquet"

#: ../Doc/distutils/apiref.rst:34 ../Doc/distutils/apiref.rst:36
#: ../Doc/distutils/apiref.rst:40 ../Doc/distutils/apiref.rst:43
#: ../Doc/distutils/apiref.rst:46 ../Doc/distutils/apiref.rst:48
#: ../Doc/distutils/apiref.rst:51 ../Doc/distutils/apiref.rst:58
#: ../Doc/distutils/apiref.rst:62 ../Doc/distutils/apiref.rst:65
#: ../Doc/distutils/apiref.rst:86 ../Doc/distutils/apiref.rst:96
#: ../Doc/distutils/apiref.rst:177 ../Doc/distutils/apiref.rst:267
msgid "a string"
msgstr "une chaîne de caractères"

#: ../Doc/distutils/apiref.rst:36
msgid "*version*"
msgstr "*version*"

#: ../Doc/distutils/apiref.rst:36
msgid "The version number of the package; see :mod:`distutils.version`"
msgstr "Le numéro de version du paquet, voir :mod:`distutils.version`"

#: ../Doc/distutils/apiref.rst:40
msgid "*description*"
msgstr "*description*"

#: ../Doc/distutils/apiref.rst:40
msgid "A single line describing the package"
msgstr "Une ligne unique décrivant le paquet"

#: ../Doc/distutils/apiref.rst:43
msgid "*long_description*"
msgstr "*long_description*"

#: ../Doc/distutils/apiref.rst:43
msgid "Longer description of the package"
msgstr "Une description plus longue du paquet"

#: ../Doc/distutils/apiref.rst:46
msgid "*author*"
msgstr "*author*"

#: ../Doc/distutils/apiref.rst:46
msgid "The name of the package author"
msgstr "Le nom de l'auteur du paquet"

#: ../Doc/distutils/apiref.rst:48
msgid "*author_email*"
msgstr "*author_email*"

#: ../Doc/distutils/apiref.rst:48
msgid "The email address of the package author"
msgstr "L'adresse e-mail de l'auteur du paquet"

#: ../Doc/distutils/apiref.rst:51
msgid "*maintainer*"
msgstr "*maintainer*"

#: ../Doc/distutils/apiref.rst:51
msgid ""
"The name of the current maintainer, if different from the author. Note that "
"if the maintainer is provided, distutils will use it as the author in :file:"
"`PKG-INFO`"
msgstr ""

#: ../Doc/distutils/apiref.rst:58
msgid "*maintainer_email*"
msgstr "*maintainer_email*"

#: ../Doc/distutils/apiref.rst:58
msgid ""
"The email address of the current maintainer, if different from the author"
msgstr "Le courriel de l'actuel mainteneur, si différent de l'auteur"

#: ../Doc/distutils/apiref.rst:62
msgid "*url*"
msgstr "*url*"

#: ../Doc/distutils/apiref.rst:62
msgid "A URL for the package (homepage)"
msgstr "Une URL pour le paquet (page d'accueil)"

#: ../Doc/distutils/apiref.rst:65
msgid "*download_url*"
msgstr "*download_url*"

#: ../Doc/distutils/apiref.rst:65
msgid "A URL to download the package"
msgstr "Une URL pour télécharger le paquet"

#: ../Doc/distutils/apiref.rst:67
msgid "*packages*"
msgstr "*packages*"

#: ../Doc/distutils/apiref.rst:67
msgid "A list of Python packages that distutils will manipulate"
msgstr "Une liste des paquets Python que *distutils* va manipuler"

#: ../Doc/distutils/apiref.rst:67 ../Doc/distutils/apiref.rst:70
#: ../Doc/distutils/apiref.rst:73 ../Doc/distutils/apiref.rst:90
#: ../Doc/distutils/apiref.rst:183 ../Doc/distutils/apiref.rst:196
#: ../Doc/distutils/apiref.rst:212 ../Doc/distutils/apiref.rst:215
#: ../Doc/distutils/apiref.rst:219 ../Doc/distutils/apiref.rst:223
#: ../Doc/distutils/apiref.rst:229 ../Doc/distutils/apiref.rst:236
#: ../Doc/distutils/apiref.rst:247 ../Doc/distutils/apiref.rst:256
#: ../Doc/distutils/apiref.rst:264
msgid "a list of strings"
msgstr "une liste de chaînes de caractères"

#: ../Doc/distutils/apiref.rst:70
msgid "*py_modules*"
msgstr "*py_modules*"

#: ../Doc/distutils/apiref.rst:70
msgid "A list of Python modules that distutils will manipulate"
msgstr "Une liste de modules Python que *distutils* va manipuler"

#: ../Doc/distutils/apiref.rst:73
msgid "*scripts*"
msgstr "*scripts*"

#: ../Doc/distutils/apiref.rst:73
msgid "A list of standalone script files to be built and installed"
msgstr "Une liste de scripts autonomes à construire et à installer"

#: ../Doc/distutils/apiref.rst:77
msgid "*ext_modules*"
msgstr "*ext_modules*"

#: ../Doc/distutils/apiref.rst:77
msgid "A list of Python extensions to be built"
msgstr "Une liste des extensions Python à construire"

#: ../Doc/distutils/apiref.rst:77
msgid "a list of instances of :class:`distutils.core.Extension`"
msgstr "une liste d'instances de :class:`distutils.core.Extension`"

#: ../Doc/distutils/apiref.rst:80
msgid "*classifiers*"
msgstr "*classifiers*"

#: ../Doc/distutils/apiref.rst:80
msgid "A list of categories for the package"
msgstr "Une liste de catégories pour le paquet"

#: ../Doc/distutils/apiref.rst:80
msgid ""
"a list of strings; valid classifiers are listed on `PyPI <https://pypi.org/"
"classifiers>`_."
msgstr ""
"une liste des chaînes de caractères, les classificateurs valides sont listés "
"sur `PyPI <https://pypi.org/pypi?:action=list_classifiers>`_."

#: ../Doc/distutils/apiref.rst:83
msgid "*distclass*"
msgstr "*distclass*"

#: ../Doc/distutils/apiref.rst:83
msgid "the :class:`Distribution` class to use"
msgstr "la classe :class:`Distribution` à utiliser"

#: ../Doc/distutils/apiref.rst:83
msgid "a subclass of :class:`distutils.core.Distribution`"
msgstr "une sous classe de :class:`distutils.core.Distribution`"

#: ../Doc/distutils/apiref.rst:86
msgid "*script_name*"
msgstr "*script_name*"

#: ../Doc/distutils/apiref.rst:86
msgid "The name of the setup.py script - defaults to ``sys.argv[0]``"
msgstr ""

#: ../Doc/distutils/apiref.rst:90
msgid "*script_args*"
msgstr "*script_args*"

#: ../Doc/distutils/apiref.rst:90
msgid "Arguments to supply to the setup script"
msgstr "Arguments à fournir au script d'installation"

#: ../Doc/distutils/apiref.rst:93
msgid "*options*"
msgstr "*options*"

#: ../Doc/distutils/apiref.rst:93
msgid "default options for the setup script"
msgstr "options par défaut pour le script d'installation"

#: ../Doc/distutils/apiref.rst:93 ../Doc/distutils/apiref.rst:103
#: ../Doc/distutils/apiref.rst:109
msgid "a dictionary"
msgstr "un dictionnaire"

#: ../Doc/distutils/apiref.rst:96
msgid "*license*"
msgstr "*license*"

#: ../Doc/distutils/apiref.rst:96
msgid "The license for the package"
msgstr "La licence pour le paquet"

#: ../Doc/distutils/apiref.rst:98
msgid "*keywords*"
msgstr "*keywords*"

#: ../Doc/distutils/apiref.rst:98
msgid "Descriptive meta-data, see :pep:`314`"
msgstr "Méta-données descriptives, voir :pep:`314`"

#: ../Doc/distutils/apiref.rst:98 ../Doc/distutils/apiref.rst:101
msgid "a list of strings or a comma-separated string"
msgstr ""

#: ../Doc/distutils/apiref.rst:101
msgid "*platforms*"
msgstr "*platforms*"

#: ../Doc/distutils/apiref.rst:103
msgid "*cmdclass*"
msgstr "*cmdclass*"

#: ../Doc/distutils/apiref.rst:103
msgid "A mapping of command names to :class:`Command` subclasses"
msgstr ""
"Un dictionnaire des noms de commandes et des sous-classes :class:`Command`"

#: ../Doc/distutils/apiref.rst:106
msgid "*data_files*"
msgstr "*data_files*"

#: ../Doc/distutils/apiref.rst:106
msgid "A list of data files to install"
msgstr "Une liste de fichiers de données à installer"

#: ../Doc/distutils/apiref.rst:106
msgid "a list"
msgstr "une liste"

#: ../Doc/distutils/apiref.rst:109
msgid "*package_dir*"
msgstr "*package_dir*"

#: ../Doc/distutils/apiref.rst:109
msgid "A mapping of package to directory names"
msgstr "Un dictionnaire des paquets et des noms de dossiers"

#: ../Doc/distutils/apiref.rst:117
msgid ""
"Run a setup script in a somewhat controlled environment, and return  the :"
"class:`distutils.dist.Distribution` instance that drives things.   This is "
"useful if you need to find out the distribution meta-data  (passed as "
"keyword args from *script* to :func:`setup`), or  the contents of the config "
"files or command-line."
msgstr ""

#: ../Doc/distutils/apiref.rst:123
msgid ""
"*script_name* is a file that will be read and run with :func:`exec`.  ``sys."
"argv[0]`` will be replaced with *script* for the duration of the call.  "
"*script_args* is a list of strings; if supplied, ``sys.argv[1:]`` will be "
"replaced by *script_args* for the duration  of the call."
msgstr ""
"*script_name* est un fichier qui sera lu et exécuté avec :func:`exec`. ``sys."
"argv[0]`` sera remplacé par *script* par la durée de l'appel. *script_args* "
"est une liste de chaînes de caractères; si fourni, ``sys.argv[1:]`` sera "
"remplacé par *script_args* pour la durée de l'appel."

#: ../Doc/distutils/apiref.rst:128
msgid ""
"*stop_after* tells :func:`setup` when to stop processing; possible  values:"
msgstr "*stop_after* dit à :func:`setup` quand s'arrêter; valeurs possibles:"

#: ../Doc/distutils/apiref.rst:133 ../Doc/distutils/apiref.rst:546
#: ../Doc/distutils/apiref.rst:1567
msgid "description"
msgstr "description"

#: ../Doc/distutils/apiref.rst:135
msgid "*init*"
msgstr "*init*"

#: ../Doc/distutils/apiref.rst:135
msgid ""
"Stop after the :class:`Distribution` instance has been created  and "
"populated with the keyword arguments to :func:`setup`"
msgstr ""
"S'arrête une fois que l'instance :class:`Distribution` a été créée et "
"renseignée avec les arguments-clés de :func:`setup`"

#: ../Doc/distutils/apiref.rst:139
msgid "*config*"
msgstr "*config*"

#: ../Doc/distutils/apiref.rst:139
msgid ""
"Stop after config files have been parsed (and their data stored in the :"
"class:`Distribution` instance)"
msgstr ""
"S'arrête une fois que les fichiers de configuration ont été parcouru (et que "
"leurs données ont été stockées dans l'instance :class:`Distribution`)"

#: ../Doc/distutils/apiref.rst:143
msgid "*commandline*"
msgstr "*commandline*"

#: ../Doc/distutils/apiref.rst:143
msgid ""
"Stop after the command-line (``sys.argv[1:]`` or  *script_args*) have been "
"parsed (and the data stored in the :class:`Distribution` instance.)"
msgstr ""
"S'arrête une fois que la ligne de commande (``sys.argv[1:]`` ou "
"*script_args*) a été parcouru (et les données stockées dans l'instance :"
"class:`Distribution`)"

#: ../Doc/distutils/apiref.rst:148
msgid "*run*"
msgstr "*run*"

#: ../Doc/distutils/apiref.rst:148
msgid ""
"Stop after all commands have been run (the same as  if :func:`setup` had "
"been called in the usual way). This is the default value."
msgstr ""
"S'arrête une fois que toutes les commandes ont été exécutées (comme si :func:"
"`setup` fût appelé de la manière habituelle). Ceci est la valeur par défaut."

#: ../Doc/distutils/apiref.rst:154
msgid ""
"In addition, the :mod:`distutils.core` module exposed a number of  classes "
"that live elsewhere."
msgstr ""
"De plus, le module :mod:`distutils.core` a exposé un nombre de classe qui "
"existent ailleurs."

#: ../Doc/distutils/apiref.rst:157
msgid ":class:`~distutils.extension.Extension` from :mod:`distutils.extension`"
msgstr ""
":class:`~distutils.extension.Extension` du module :mod:`distutils.extension`"

#: ../Doc/distutils/apiref.rst:159
msgid ":class:`~distutils.cmd.Command` from :mod:`distutils.cmd`"
msgstr ":class:`~distutils.cmd.Command` du module :mod:`distutils.cmd`"

#: ../Doc/distutils/apiref.rst:161
msgid ":class:`~distutils.dist.Distribution` from :mod:`distutils.dist`"
msgstr ":class:`~distutils.dist.Distribution` du module :mod:`distutils.dist`"

#: ../Doc/distutils/apiref.rst:163
msgid ""
"A short description of each of these follows, but see the relevant module "
"for the full reference."
msgstr ""
"Une courte description de chacune d'elle suit, mais consultez le module "
"concerné pour une référence complète."

#: ../Doc/distutils/apiref.rst:169
msgid ""
"The Extension class describes a single C or C++ extension module in a setup "
"script. It accepts the following keyword arguments in its constructor:"
msgstr ""
"La classe *Extension* décrit un seul module d'extension C ou C++ dans un "
"script d'installation. Elle accepte dans son constructeur les arguments "
"nommés suivants:"

#: ../Doc/distutils/apiref.rst:177
msgid ""
"the full name of the extension, including any packages --- ie. *not* a "
"filename or pathname, but Python dotted name"
msgstr ""
"le nom complet de l'extension, incluant n'importe quel paquet --- c-à-d "
"*pas* un nom de fichier ou de chemin mais un nom Python séparé par des points"

#: ../Doc/distutils/apiref.rst:183
msgid "*sources*"
msgstr "*sources*"

#: ../Doc/distutils/apiref.rst:183
msgid ""
"list of source filenames, relative to the distribution root (where the setup "
"script lives), in Unix form (slash- separated) for portability. Source files "
"may be C, C++, SWIG (.i), platform-specific resource files, or whatever else "
"is recognized by the :command:`build_ext` command as source for a Python "
"extension."
msgstr ""
"listes des noms de fichier des sources, relatifs à la racine de la "
"distribution (où est placé le script *setup.py*), dans un format Unix "
"(séparé par des slashs) dans un souci de portabilité. Les fichiers de code "
"source peuvent être du C, C++, SWIG (*.i*), des fichiers de ressources "
"spécifiques à la plateforme ou tout autre reconnu par la commande :command:"
"`build_ext` comme source d'une extension Python."

#: ../Doc/distutils/apiref.rst:196
msgid "*include_dirs*"
msgstr ""

#: ../Doc/distutils/apiref.rst:196
msgid ""
"list of directories to search for C/C++ header files (in Unix form for "
"portability)"
msgstr ""
"liste des répertoires où chercher les fichiers d'entêtes C/C++ (en format "
"Unix dans un souci de portabilité)"

#: ../Doc/distutils/apiref.rst:200
msgid "*define_macros*"
msgstr "*define_macros*"

#: ../Doc/distutils/apiref.rst:200
msgid ""
"list of macros to define; each macro is defined using a 2-tuple ``(name, "
"value)``, where *value* is either the string to define it to or ``None`` to "
"define it without a particular value (equivalent of ``#define FOO`` in "
"source or :option:`!-DFOO` on Unix C compiler command line)"
msgstr ""
"liste de macros à définir ; chaque macro est définie à l'aide d'un tuple de "
"deux valeurs ``(name, value)``, où *value* correspond soit à la chaîne sur "
"laquelle la macro doit être définie, soit à ``None`` pour définir la macro "
"sur aucune valeur particulière (équivalent à ``#define FOO`` dans la source "
"ou à :option:`!-DFOO` dans la ligne de commande du compilateur C Unix."

#: ../Doc/distutils/apiref.rst:200
msgid "a list of tuples"
msgstr "une liste de tuples"

#: ../Doc/distutils/apiref.rst:212
msgid "*undef_macros*"
msgstr "*undef_macros*"

#: ../Doc/distutils/apiref.rst:212
msgid "list of macros to undefine explicitly"
msgstr ""

#: ../Doc/distutils/apiref.rst:215
msgid "*library_dirs*"
msgstr ""

#: ../Doc/distutils/apiref.rst:215
msgid "list of directories to search for C/C++ libraries at link time"
msgstr ""

#: ../Doc/distutils/apiref.rst:219
msgid "*libraries*"
msgstr ""

#: ../Doc/distutils/apiref.rst:219
msgid "list of library names (not filenames or paths) to link against"
msgstr ""

#: ../Doc/distutils/apiref.rst:223
msgid "*runtime_library_dirs*"
msgstr ""

#: ../Doc/distutils/apiref.rst:223
msgid ""
"list of directories to search for C/C++ libraries at run time (for shared "
"extensions, this is when the extension is loaded)"
msgstr ""

#: ../Doc/distutils/apiref.rst:229
msgid "*extra_objects*"
msgstr ""

#: ../Doc/distutils/apiref.rst:229
msgid ""
"list of extra files to link with (eg. object files not implied by 'sources', "
"static library that must be explicitly specified, binary resource files, "
"etc.)"
msgstr ""

#: ../Doc/distutils/apiref.rst:236
msgid "*extra_compile_args*"
msgstr ""

#: ../Doc/distutils/apiref.rst:236
msgid ""
"any extra platform- and compiler-specific information to use when compiling "
"the source files in 'sources'. For platforms and compilers where a command "
"line makes sense, this is typically a list of command-line arguments, but "
"for other platforms it could be anything."
msgstr ""

#: ../Doc/distutils/apiref.rst:247
msgid "*extra_link_args*"
msgstr ""

#: ../Doc/distutils/apiref.rst:247
msgid ""
"any extra platform- and compiler-specific information to use when linking "
"object files together to create the extension (or to create a new static "
"Python interpreter). Similar interpretation as for 'extra_compile_args'."
msgstr ""

#: ../Doc/distutils/apiref.rst:256
msgid "*export_symbols*"
msgstr ""

#: ../Doc/distutils/apiref.rst:256
msgid ""
"list of symbols to be exported from a shared extension. Not used on all "
"platforms, and not generally necessary for Python extensions, which "
"typically export exactly one symbol: ``init`` + extension_name."
msgstr ""

#: ../Doc/distutils/apiref.rst:264
msgid "*depends*"
msgstr ""

#: ../Doc/distutils/apiref.rst:264
msgid "list of files that the extension depends on"
msgstr "liste des fichiers dont dépend l'extension"

#: ../Doc/distutils/apiref.rst:267
msgid "*language*"
msgstr ""

#: ../Doc/distutils/apiref.rst:267
msgid ""
"extension language (i.e. ``'c'``, ``'c++'``, ``'objc'``). Will be detected "
"from the source extensions if not provided."
msgstr ""
"langage de l'extension (par exemple ``'c'``, ``'c++'``, ``'objc'``). Il sera "
"détecté selon l'extension de la source s'il n'est pas précisé."

#: ../Doc/distutils/apiref.rst:273
msgid "*optional*"
msgstr "*optionnel*"

#: ../Doc/distutils/apiref.rst:273
msgid ""
"specifies that a build failure in the extension should not abort the build "
"process, but simply skip the extension."
msgstr ""

#: ../Doc/distutils/apiref.rst:273
msgid "a boolean"
msgstr ""

#: ../Doc/distutils/apiref.rst:282
msgid ""
"A :class:`Distribution` describes how to build, install and package up a "
"Python software package."
msgstr ""

#: ../Doc/distutils/apiref.rst:285
msgid ""
"See the :func:`setup` function for a list of keyword arguments accepted  by "
"the Distribution constructor. :func:`setup` creates a Distribution instance."
msgstr ""

#: ../Doc/distutils/apiref.rst:288
msgid ""
":class:`~distutils.core.Distribution` now warns if ``classifiers``, "
"``keywords`` and ``platforms`` fields are not specified as a list or a "
"string."
msgstr ""

#: ../Doc/distutils/apiref.rst:295
msgid ""
"A :class:`Command` class (or rather, an instance of one of its subclasses) "
"implement a single distutils command."
msgstr ""

#: ../Doc/distutils/apiref.rst:300
msgid ":mod:`distutils.ccompiler` --- CCompiler base class"
msgstr ""

#: ../Doc/distutils/apiref.rst:306
msgid ""
"This module provides the abstract base class for the :class:`CCompiler` "
"classes.  A :class:`CCompiler` instance can be used for all the compile  and "
"link steps needed to build a single project. Methods are provided to  set "
"options for the compiler --- macro definitions, include directories,  link "
"path, libraries and the like."
msgstr ""

#: ../Doc/distutils/apiref.rst:312
msgid "This module provides the following functions."
msgstr "Ce module fournit les fonctions suivantes."

#: ../Doc/distutils/apiref.rst:317
msgid ""
"Generate linker options for searching library directories and linking with "
"specific libraries.  *libraries* and *library_dirs* are, respectively, lists "
"of library names (not filenames!) and search directories.  Returns a list of "
"command-line options suitable for use with some compiler (depending on the "
"two format strings passed in)."
msgstr ""

#: ../Doc/distutils/apiref.rst:326
msgid ""
"Generate C pre-processor options (:option:`!-D`, :option:`!-U`, :option:`!-"
"I`) as used by at least two types of compilers: the typical Unix compiler "
"and Visual C++. *macros* is the usual thing, a list of 1- or 2-tuples, where "
"``(name,)`` means undefine (:option:`!-U`) macro *name*, and ``(name, "
"value)`` means define (:option:`!-D`) macro *name* to *value*.  "
"*include_dirs* is just a list of directory names to be added to the header "
"file search path (:option:`!-I`). Returns a list of command-line options "
"suitable for either Unix compilers or Visual C++."
msgstr ""

#: ../Doc/distutils/apiref.rst:338
msgid "Determine the default compiler to use for the given platform."
msgstr ""
"Détermine le compilateur par défaut a utiliser par une plateforme donnée."

#: ../Doc/distutils/apiref.rst:340
msgid ""
"*osname* should be one of the standard Python OS names (i.e. the ones "
"returned by ``os.name``) and *platform* the common value returned by ``sys."
"platform`` for the platform in question."
msgstr ""

#: ../Doc/distutils/apiref.rst:344
msgid ""
"The default values are ``os.name`` and ``sys.platform`` in case the "
"parameters are not given."
msgstr ""
"Les valeurs par défaut sont ``os.name`` et ``sys.platform`` si les "
"paramètres ne sont pas fournis."

#: ../Doc/distutils/apiref.rst:350
msgid ""
"Factory function to generate an instance of some CCompiler subclass for the "
"supplied platform/compiler combination. *plat* defaults to ``os.name`` (eg. "
"``'posix'``, ``'nt'``), and *compiler*  defaults to the default compiler for "
"that platform. Currently only ``'posix'`` and ``'nt'`` are supported, and "
"the default compilers are \"traditional Unix interface\" (:class:"
"`UnixCCompiler` class) and Visual C++ (:class:`MSVCCompiler` class).  Note "
"that it's perfectly possible to ask for a Unix compiler object under "
"Windows, and a Microsoft compiler object under Unix---if you supply a value "
"for *compiler*, *plat* is ignored."
msgstr ""

#: ../Doc/distutils/apiref.rst:366
msgid ""
"Print list of available compilers (used by the :option:`!--help-compiler` "
"options to :command:`build`, :command:`build_ext`, :command:`build_clib`)."
msgstr ""

#: ../Doc/distutils/apiref.rst:372
msgid ""
"The abstract base class :class:`CCompiler` defines the interface that  must "
"be implemented by real compiler classes.  The class also has  some utility "
"methods used by several compiler classes."
msgstr ""

#: ../Doc/distutils/apiref.rst:376
msgid ""
"The basic idea behind a compiler abstraction class is that each instance can "
"be used for all the compile/link steps in building a single project.  Thus, "
"attributes common to all of those compile and link steps --- include "
"directories, macros to define, libraries to link against, etc. --- are "
"attributes of the compiler instance.  To allow for variability in how "
"individual files are treated, most of those attributes may be varied on a "
"per-compilation or per-link basis."
msgstr ""

#: ../Doc/distutils/apiref.rst:384
msgid ""
"The constructor for each subclass creates an instance of the Compiler "
"object. Flags are *verbose* (show verbose output), *dry_run* (don't actually "
"execute the steps) and *force* (rebuild everything, regardless of "
"dependencies). All of these flags default to ``0`` (off). Note that you "
"probably don't want to instantiate :class:`CCompiler` or one of its "
"subclasses directly - use the :func:`distutils.CCompiler.new_compiler` "
"factory function instead."
msgstr ""

#: ../Doc/distutils/apiref.rst:391
msgid ""
"The following methods allow you to manually alter compiler options for  the "
"instance of the Compiler class."
msgstr ""

#: ../Doc/distutils/apiref.rst:397
msgid ""
"Add *dir* to the list of directories that will be searched for header files. "
"The compiler is instructed to search directories in the order in which they "
"are supplied by successive calls to :meth:`add_include_dir`."
msgstr ""

#: ../Doc/distutils/apiref.rst:404
msgid ""
"Set the list of directories that will be searched to *dirs* (a list of "
"strings). Overrides any preceding calls to :meth:`add_include_dir`; "
"subsequent calls to :meth:`add_include_dir` add to the list passed to :meth:"
"`set_include_dirs`. This does not affect any list of standard include "
"directories that the compiler may search by default."
msgstr ""

#: ../Doc/distutils/apiref.rst:413
msgid ""
"Add *libname* to the list of libraries that will be included in all links "
"driven by this compiler object.  Note that *libname* should \\*not\\* be the "
"name of a file containing a library, but the name of the library itself: the "
"actual filename will be inferred by the linker, the compiler, or the "
"compiler class (depending on the platform)."
msgstr ""

#: ../Doc/distutils/apiref.rst:419
msgid ""
"The linker will be instructed to link against libraries in the order they "
"were supplied to :meth:`add_library` and/or :meth:`set_libraries`.  It is "
"perfectly valid to duplicate library names; the linker will be instructed to "
"link against libraries as many times as they are mentioned."
msgstr ""

#: ../Doc/distutils/apiref.rst:427
msgid ""
"Set the list of libraries to be included in all links driven by this "
"compiler object to *libnames* (a list of strings).  This does not affect any "
"standard system libraries that the linker may include by default."
msgstr ""

#: ../Doc/distutils/apiref.rst:434
msgid ""
"Add *dir* to the list of directories that will be searched for libraries "
"specified to :meth:`add_library` and :meth:`set_libraries`.  The linker will "
"be instructed to search for libraries in the order they are supplied to :"
"meth:`add_library_dir` and/or :meth:`set_library_dirs`."
msgstr ""

#: ../Doc/distutils/apiref.rst:442
msgid ""
"Set the list of library search directories to *dirs* (a list of strings).  "
"This does not affect any standard library search path that the linker may "
"search by default."
msgstr ""

#: ../Doc/distutils/apiref.rst:449
msgid ""
"Add *dir* to the list of directories that will be searched for shared "
"libraries at runtime."
msgstr ""

#: ../Doc/distutils/apiref.rst:455
msgid ""
"Set the list of directories to search for shared libraries at runtime to "
"*dirs* (a list of strings).  This does not affect any standard search path "
"that the runtime linker may search by default."
msgstr ""

#: ../Doc/distutils/apiref.rst:462
msgid ""
"Define a preprocessor macro for all compilations driven by this compiler "
"object. The optional parameter *value* should be a string; if it is not "
"supplied, then the macro will be defined without an explicit value and the "
"exact outcome depends on the compiler used."
msgstr ""

#: ../Doc/distutils/apiref.rst:472
msgid ""
"Undefine a preprocessor macro for all compilations driven by this compiler "
"object.  If the same macro is defined by :meth:`define_macro` and undefined "
"by :meth:`undefine_macro` the last call takes precedence (including multiple "
"redefinitions or undefinitions).  If the macro is redefined/undefined on a "
"per-compilation basis (ie. in the call to :meth:`compile`), then that takes "
"precedence."
msgstr ""

#: ../Doc/distutils/apiref.rst:482
msgid ""
"Add *object* to the list of object files (or analogues, such as explicitly "
"named library files or the output of \"resource compilers\") to be included "
"in every link driven by this compiler object."
msgstr ""

#: ../Doc/distutils/apiref.rst:489
msgid ""
"Set the list of object files (or analogues) to be included in every link to "
"*objects*.  This does not affect any standard object files that the linker "
"may include by default (such as system libraries)."
msgstr ""

#: ../Doc/distutils/apiref.rst:493
msgid ""
"The following methods implement methods for autodetection of compiler  "
"options, providing some functionality similar to GNU :program:`autoconf`."
msgstr ""

#: ../Doc/distutils/apiref.rst:499
msgid ""
"Detect the language of a given file, or list of files. Uses the  instance "
"attributes :attr:`language_map` (a dictionary), and  :attr:`language_order` "
"(a list) to do the job."
msgstr ""

#: ../Doc/distutils/apiref.rst:506
msgid ""
"Search the specified list of directories for a static or shared library file "
"*lib* and return the full path to that file.  If *debug* is true, look for a "
"debugging version (if that makes sense on the current platform).  Return "
"``None`` if *lib* wasn't found in any of the specified directories."
msgstr ""

#: ../Doc/distutils/apiref.rst:514
msgid ""
"Return a boolean indicating whether *funcname* is supported on the current "
"platform.  The optional arguments can be used to augment the compilation "
"environment by providing additional include files and paths and libraries "
"and paths."
msgstr ""

#: ../Doc/distutils/apiref.rst:522
msgid ""
"Return the compiler option to add *dir* to the list of directories searched "
"for libraries."
msgstr ""

#: ../Doc/distutils/apiref.rst:528
msgid ""
"Return the compiler option to add *lib* to the list of libraries linked into "
"the shared library or executable."
msgstr ""

#: ../Doc/distutils/apiref.rst:534
msgid ""
"Return the compiler option to add *dir* to the list of directories searched "
"for runtime libraries."
msgstr ""

#: ../Doc/distutils/apiref.rst:540
msgid ""
"Define the executables (and options for them) that will be run to perform "
"the various stages of compilation.  The exact set of executables that may be "
"specified here depends on the compiler class (via the 'executables' class "
"attribute), but most will have:"
msgstr ""

#: ../Doc/distutils/apiref.rst:546
msgid "attribute"
msgstr "attribut"

#: ../Doc/distutils/apiref.rst:548
msgid "*compiler*"
msgstr ""

#: ../Doc/distutils/apiref.rst:548
msgid "the C/C++ compiler"
msgstr ""

#: ../Doc/distutils/apiref.rst:550
msgid "*linker_so*"
msgstr ""

#: ../Doc/distutils/apiref.rst:550
msgid "linker used to create shared objects and libraries"
msgstr ""

#: ../Doc/distutils/apiref.rst:553
msgid "*linker_exe*"
msgstr ""

#: ../Doc/distutils/apiref.rst:553
msgid "linker used to create binary executables"
msgstr ""

#: ../Doc/distutils/apiref.rst:555
msgid "*archiver*"
msgstr ""

#: ../Doc/distutils/apiref.rst:555
msgid "static library creator"
msgstr ""

#: ../Doc/distutils/apiref.rst:558
msgid ""
"On platforms with a command-line (Unix, DOS/Windows), each of these is a "
"string that will be split into executable name and (optional) list of "
"arguments. (Splitting the string is done similarly to how Unix shells "
"operate: words are delimited by spaces, but quotes and backslashes can "
"override this.  See :func:`distutils.util.split_quoted`.)"
msgstr ""
"Sur les plates-formes disposant d'un outil de ligne de commande (Unix, DOS/"
"Windows), chacun de ces éléments est une chaîne qui sera fractionnée en un "
"nom exécutable et, éventuellement, une liste d'arguments. Le fractionnement "
"de la chaîne est réalisée selon la même procédure que celle appliquée par "
"les *shells* Unix : les mots sont délimités par des espaces, mais les "
"guillemets et les antislashs permettent de les ignorer. Voir :func:"
"`distutils.util.split_quoted`."

#: ../Doc/distutils/apiref.rst:564
msgid "The following methods invoke stages in the build process."
msgstr ""
"Les méthodes suivantes permettent d'exécuter des étapes lors de processus de "
"construction."

#: ../Doc/distutils/apiref.rst:569
msgid ""
"Compile one or more source files. Generates object files (e.g.  transforms "
"a :file:`.c` file to a :file:`.o` file.)"
msgstr ""
"Compile un ou plusieurs fichiers source. Génère des fichiers objets (par "
"exemple, transforme un fichier :file:`.c` en fichier :file:`.o`)."

#: ../Doc/distutils/apiref.rst:572
msgid ""
"*sources* must be a list of filenames, most likely C/C++ files, but in "
"reality anything that can be handled by a particular compiler and compiler "
"class (eg. :class:`MSVCCompiler` can handle resource files in *sources*).  "
"Return a list of object filenames, one per source filename in *sources*.  "
"Depending on the implementation, not all source files will necessarily be "
"compiled, but all corresponding object filenames will be returned."
msgstr ""
"*sources* doit être une liste de noms de fichiers, généralement des fichiers "
"C/C++, mais elle pourrait contenir n'importe quel fichier géré par un "
"compilateur et une classe de compilateur (par exemple, :class:`MSVCCompiler` "
"peut gérer les fichiers de ressources dans *sources*). Renvoie une liste de "
"noms de fichiers objet : un objet par nom de fichier dans *sources*. Selon "
"les cas, tous les fichiers source ne seront pas forcément compilés, mais "
"tous les noms de fichiers objet correspondants seront renvoyés."

#: ../Doc/distutils/apiref.rst:579
msgid ""
"If *output_dir* is given, object files will be put under it, while retaining "
"their original path component.  That is, :file:`foo/bar.c` normally compiles "
"to :file:`foo/bar.o` (for a Unix implementation); if *output_dir* is "
"*build*, then it would compile to :file:`build/foo/bar.o`."
msgstr ""

#: ../Doc/distutils/apiref.rst:584
msgid ""
"*macros*, if given, must be a list of macro definitions.  A macro definition "
"is either a ``(name, value)`` 2-tuple or a ``(name,)`` 1-tuple. The former "
"defines a macro; if the value is ``None``, the macro is defined without an "
"explicit value.  The 1-tuple case undefines a macro.  Later definitions/"
"redefinitions/undefinitions take precedence."
msgstr ""

#: ../Doc/distutils/apiref.rst:590
msgid ""
"*include_dirs*, if given, must be a list of strings, the directories to add "
"to the default include file search path for this compilation only."
msgstr ""

#: ../Doc/distutils/apiref.rst:593
msgid ""
"*debug* is a boolean; if true, the compiler will be instructed to output "
"debug symbols in (or alongside) the object file(s)."
msgstr ""

#: ../Doc/distutils/apiref.rst:596
msgid ""
"*extra_preargs* and *extra_postargs* are implementation-dependent. On "
"platforms that have the notion of a command-line (e.g. Unix, DOS/Windows), "
"they are most likely lists of strings: extra command-line arguments to "
"prepend/append to the compiler command line.  On other platforms, consult "
"the implementation class documentation.  In any event, they are intended as "
"an escape hatch for those occasions when the abstract compiler framework "
"doesn't cut the mustard."
msgstr ""

#: ../Doc/distutils/apiref.rst:603
msgid ""
"*depends*, if given, is a list of filenames that all targets depend on.  If "
"a source file is older than any file in depends, then the source file will "
"be recompiled.  This supports dependency tracking, but only at a coarse "
"granularity."
msgstr ""

#: ../Doc/distutils/apiref.rst:608
msgid "Raises :exc:`CompileError` on failure."
msgstr ""

#: ../Doc/distutils/apiref.rst:613
msgid ""
"Link a bunch of stuff together to create a static library file. The \"bunch "
"of stuff\" consists of the list of object files supplied as *objects*, the "
"extra object files supplied to :meth:`add_link_object` and/or :meth:"
"`set_link_objects`, the libraries supplied to :meth:`add_library` and/or :"
"meth:`set_libraries`, and the libraries supplied as *libraries* (if any)."
msgstr ""

#: ../Doc/distutils/apiref.rst:619
msgid ""
"*output_libname* should be a library name, not a filename; the filename will "
"be inferred from the library name.  *output_dir* is the directory where the "
"library file will be put."
msgstr ""

#: ../Doc/distutils/apiref.rst:625
msgid ""
"*debug* is a boolean; if true, debugging information will be included in the "
"library (note that on most platforms, it is the compile step where this "
"matters: the *debug* flag is included here just for consistency)."
msgstr ""

#: ../Doc/distutils/apiref.rst:629 ../Doc/distutils/apiref.rst:671
msgid ""
"*target_lang* is the target language for which the given objects are being "
"compiled. This allows specific linkage time treatment of certain languages."
msgstr ""

#: ../Doc/distutils/apiref.rst:632
msgid "Raises :exc:`LibError` on failure."
msgstr ""

#: ../Doc/distutils/apiref.rst:637
msgid ""
"Link a bunch of stuff together to create an executable or shared library "
"file."
msgstr ""

#: ../Doc/distutils/apiref.rst:639
msgid ""
"The \"bunch of stuff\" consists of the list of object files supplied as "
"*objects*. *output_filename* should be a filename.  If *output_dir* is "
"supplied, *output_filename* is relative to it (i.e. *output_filename* can "
"provide directory components if needed)."
msgstr ""

#: ../Doc/distutils/apiref.rst:644
msgid ""
"*libraries* is a list of libraries to link against.  These are library "
"names, not filenames, since they're translated into filenames in a platform-"
"specific way (eg. *foo* becomes :file:`libfoo.a` on Unix and :file:`foo.lib` "
"on DOS/Windows).  However, they can include a directory component, which "
"means the linker will look in that specific directory rather than searching "
"all the normal locations."
msgstr ""

#: ../Doc/distutils/apiref.rst:651
msgid ""
"*library_dirs*, if supplied, should be a list of directories to search for "
"libraries that were specified as bare library names (ie. no directory "
"component).  These are on top of the system default and those supplied to :"
"meth:`add_library_dir` and/or :meth:`set_library_dirs`.  "
"*runtime_library_dirs* is a list of directories that will be embedded into "
"the shared library and used to search for other shared libraries that \\*it"
"\\* depends on at run-time.  (This may only be relevant on Unix.)"
msgstr ""

#: ../Doc/distutils/apiref.rst:659
msgid ""
"*export_symbols* is a list of symbols that the shared library will export. "
"(This appears to be relevant only on Windows.)"
msgstr ""

#: ../Doc/distutils/apiref.rst:662
msgid ""
"*debug* is as for :meth:`compile` and :meth:`create_static_lib`,  with the "
"slight distinction that it actually matters on most platforms (as opposed "
"to :meth:`create_static_lib`, which includes a *debug* flag mostly for "
"form's sake)."
msgstr ""

#: ../Doc/distutils/apiref.rst:667
msgid ""
"*extra_preargs* and *extra_postargs* are as for :meth:`compile`  (except of "
"course that they supply command-line arguments for the particular linker "
"being used)."
msgstr ""

#: ../Doc/distutils/apiref.rst:674
msgid "Raises :exc:`LinkError` on failure."
msgstr ""

#: ../Doc/distutils/apiref.rst:679
msgid ""
"Link an executable.  *output_progname* is the name of the file executable, "
"while *objects* are a list of object filenames to link in. Other arguments  "
"are as for the :meth:`link` method."
msgstr ""

#: ../Doc/distutils/apiref.rst:686
msgid ""
"Link a shared library. *output_libname* is the name of the output  library, "
"while *objects* is a list of object filenames to link in.  Other arguments "
"are as for the :meth:`link` method."
msgstr ""

#: ../Doc/distutils/apiref.rst:693
msgid ""
"Link a shared object. *output_filename* is the name of the shared object "
"that will be created, while *objects* is a list of object filenames  to link "
"in. Other arguments are as for the :meth:`link` method."
msgstr ""

#: ../Doc/distutils/apiref.rst:700
msgid ""
"Preprocess a single C/C++ source file, named in *source*. Output will be "
"written to file named *output_file*, or *stdout* if *output_file* not "
"supplied. *macros* is a list of macro definitions as for :meth:`compile`, "
"which will augment the macros set with :meth:`define_macro` and :meth:"
"`undefine_macro`. *include_dirs* is a list of directory names that will be "
"added to the  default list, in the same way as :meth:`add_include_dir`."
msgstr ""

#: ../Doc/distutils/apiref.rst:707
msgid "Raises :exc:`PreprocessError` on failure."
msgstr ""

#: ../Doc/distutils/apiref.rst:709
msgid ""
"The following utility methods are defined by the :class:`CCompiler` class, "
"for use by the various concrete subclasses."
msgstr ""

#: ../Doc/distutils/apiref.rst:715
msgid ""
"Returns the filename of the executable for the given *basename*.  Typically "
"for non-Windows platforms this is the same as the basename,  while Windows "
"will get a :file:`.exe` added."
msgstr ""

#: ../Doc/distutils/apiref.rst:722
msgid ""
"Returns the filename for the given library name on the current platform. On "
"Unix a library with *lib_type* of ``'static'`` will typically  be of the "
"form :file:`liblibname.a`, while a *lib_type* of ``'dynamic'``  will be of "
"the form :file:`liblibname.so`."
msgstr ""

#: ../Doc/distutils/apiref.rst:730
msgid ""
"Returns the name of the object files for the given source files. "
"*source_filenames* should be a list of filenames."
msgstr ""

#: ../Doc/distutils/apiref.rst:736
msgid ""
"Returns the name of a shared object file for the given file name *basename*."
msgstr ""

#: ../Doc/distutils/apiref.rst:741
msgid ""
"Invokes :func:`distutils.util.execute`. This method invokes a  Python "
"function *func* with the given arguments *args*, after  logging and taking "
"into account the *dry_run* flag."
msgstr ""

#: ../Doc/distutils/apiref.rst:748
msgid ""
"Invokes :func:`distutils.util.spawn`. This invokes an external  process to "
"run the given command."
msgstr ""

#: ../Doc/distutils/apiref.rst:754
msgid ""
"Invokes :func:`distutils.dir_util.mkpath`. This creates a directory  and any "
"missing ancestor directories."
msgstr ""

#: ../Doc/distutils/apiref.rst:760
msgid "Invokes :meth:`distutils.file_util.move_file`. Renames *src* to  *dst*."
msgstr ""

#: ../Doc/distutils/apiref.rst:765
msgid "Write a message using :func:`distutils.log.debug`."
msgstr ""

#: ../Doc/distutils/apiref.rst:770
msgid "Write a warning message *msg* to standard error."
msgstr ""

#: ../Doc/distutils/apiref.rst:775
msgid ""
"If the *debug* flag is set on this :class:`CCompiler` instance, print  *msg* "
"to standard output, otherwise do nothing."
msgstr ""

#: ../Doc/distutils/apiref.rst:787
msgid ":mod:`distutils.unixccompiler` --- Unix C Compiler"
msgstr ""

#: ../Doc/distutils/apiref.rst:793
msgid ""
"This module provides the :class:`UnixCCompiler` class, a subclass of :class:"
"`CCompiler` that handles the typical Unix-style command-line  C compiler:"
msgstr ""

#: ../Doc/distutils/apiref.rst:796
msgid "macros defined with :option:`!-Dname[=value]`"
msgstr ""

#: ../Doc/distutils/apiref.rst:798
msgid "macros undefined with :option:`!-Uname`"
msgstr ""

#: ../Doc/distutils/apiref.rst:800
msgid "include search directories specified with :option:`!-Idir`"
msgstr ""

#: ../Doc/distutils/apiref.rst:802
msgid "libraries specified with :option:`!-llib`"
msgstr ""

#: ../Doc/distutils/apiref.rst:804
msgid "library search directories specified with :option:`!-Ldir`"
msgstr ""

#: ../Doc/distutils/apiref.rst:806
msgid ""
"compile handled by :program:`cc` (or similar) executable with :option:`!-c` "
"option: compiles :file:`.c` to :file:`.o`"
msgstr ""

#: ../Doc/distutils/apiref.rst:809
msgid ""
"link static library handled by :program:`ar` command (possibly with :program:"
"`ranlib`)"
msgstr ""

#: ../Doc/distutils/apiref.rst:812
msgid "link shared library handled by :program:`cc` :option:`!-shared`"
msgstr ""

#: ../Doc/distutils/apiref.rst:816
msgid ":mod:`distutils.msvccompiler` --- Microsoft Compiler"
msgstr ""

#: ../Doc/distutils/apiref.rst:823
msgid ""
"This module provides :class:`MSVCCompiler`, an implementation of the "
"abstract :class:`CCompiler` class for Microsoft Visual Studio. Typically, "
"extension modules need to be compiled with the same compiler that was used "
"to compile Python. For Python 2.3 and earlier, the compiler was Visual "
"Studio 6. For Python 2.4 and 2.5, the compiler is Visual Studio .NET 2003."
msgstr ""

#: ../Doc/distutils/apiref.rst:829
msgid ""
":class:`MSVCCompiler` will normally choose the right compiler, linker etc. "
"on its own. To override this choice, the environment variables "
"*DISTUTILS_USE_SDK* and *MSSdk* must be both set. *MSSdk* indicates that the "
"current environment has been setup by the SDK's ``SetEnv.Cmd`` script, or "
"that the environment variables had been registered when the SDK was "
"installed; *DISTUTILS_USE_SDK* indicates that the distutils user has made an "
"explicit choice to override the compiler selection by :class:`MSVCCompiler`."
msgstr ""

#: ../Doc/distutils/apiref.rst:839
msgid ":mod:`distutils.bcppcompiler` --- Borland Compiler"
msgstr ""

#: ../Doc/distutils/apiref.rst:844
msgid ""
"This module provides :class:`BorlandCCompiler`, a subclass of the abstract :"
"class:`CCompiler` class for the Borland C++ compiler."
msgstr ""

#: ../Doc/distutils/apiref.rst:849
msgid ":mod:`distutils.cygwincompiler` --- Cygwin Compiler"
msgstr ""

#: ../Doc/distutils/apiref.rst:854
msgid ""
"This module provides the :class:`CygwinCCompiler` class, a subclass of :"
"class:`UnixCCompiler` that handles the Cygwin port of the GNU C compiler to "
"Windows.  It also contains the Mingw32CCompiler class which handles the "
"mingw32 port of GCC (same as cygwin in no-cygwin mode)."
msgstr ""

#: ../Doc/distutils/apiref.rst:861
msgid ":mod:`distutils.archive_util` ---  Archiving utilities"
msgstr ""

#: ../Doc/distutils/apiref.rst:867
msgid ""
"This module provides a few functions for creating archive files, such as "
"tarballs or zipfiles."
msgstr ""

#: ../Doc/distutils/apiref.rst:873
msgid ""
"Create an archive file (eg. ``zip`` or ``tar``).  *base_name*  is the name "
"of the file to create, minus any format-specific extension;  *format* is the "
"archive format: one of ``zip``, ``tar``, ``gztar``, ``bztar``, ``xztar``, or "
"``ztar``. *root_dir* is a directory that will be the root directory of the "
"archive; ie. we typically ``chdir`` into *root_dir* before  creating the "
"archive.  *base_dir* is the directory where we start  archiving from; ie. "
"*base_dir* will be the common prefix of all files and directories in the "
"archive.  *root_dir* and *base_dir* both default to the current directory. "
"Returns the name of the archive file."
msgstr ""

#: ../Doc/distutils/apiref.rst:883
msgid "Added support for the ``xztar`` format."
msgstr "Ajout du support des fichiers ``xztar``."

#: ../Doc/distutils/apiref.rst:889
msgid ""
"'Create an (optional compressed) archive as a tar file from all files in and "
"under *base_dir*. *compress* must be ``'gzip'`` (the default), ``'bzip2'``, "
"``'xz'``, ``'compress'``, or ``None``.  For the ``'compress'`` method the "
"compression utility named by :program:`compress` must be on the default "
"program search path, so this is probably Unix-specific.  The output tar file "
"will be named :file:`base_dir.tar`, possibly plus the appropriate "
"compression extension (``.gz``, ``.bz2``, ``.xz`` or ``.Z``).  Return the "
"output filename."
msgstr ""

#: ../Doc/distutils/apiref.rst:898
msgid "Added support for the ``xz`` compression."
msgstr ""

#: ../Doc/distutils/apiref.rst:904
msgid ""
"Create a zip file from all files in and under *base_dir*.  The output zip "
"file will be named *base_name* + :file:`.zip`.  Uses either the  :mod:"
"`zipfile` Python module (if available) or the InfoZIP :file:`zip`  utility "
"(if installed and found on the default search path).  If neither  tool is "
"available, raises :exc:`DistutilsExecError`.   Returns the name of the "
"output zip file."
msgstr ""

#: ../Doc/distutils/apiref.rst:912
msgid ":mod:`distutils.dep_util` --- Dependency checking"
msgstr ""

#: ../Doc/distutils/apiref.rst:918
msgid ""
"This module provides functions for performing simple, timestamp-based "
"dependency of files and groups of files; also, functions based entirely  on "
"such timestamp dependency analysis."
msgstr ""

#: ../Doc/distutils/apiref.rst:925
msgid ""
"Return true if *source* exists and is more recently modified than *target*, "
"or if *source* exists and *target* doesn't. Return false if both exist and "
"*target* is the same age or newer  than *source*. Raise :exc:"
"`DistutilsFileError` if *source* does not exist."
msgstr ""

#: ../Doc/distutils/apiref.rst:933
msgid ""
"Walk two filename lists in parallel, testing if each source is newer than "
"its corresponding target.  Return a pair of lists (*sources*, *targets*) "
"where source is newer than target, according to the semantics of :func:"
"`newer`."
msgstr ""

#: ../Doc/distutils/apiref.rst:942
msgid ""
"Return true if *target* is out-of-date with respect to any file listed in "
"*sources*  In other words, if *target* exists and is newer than every file "
"in *sources*, return false; otherwise return true. *missing* controls what "
"we do when a source file is missing; the default (``'error'``) is to blow up "
"with an :exc:`OSError` from  inside :func:`os.stat`; if it is ``'ignore'``, "
"we silently drop any missing source files; if it is ``'newer'``, any missing "
"source files make us assume that *target* is out-of-date (this is handy in "
"\"dry-run\" mode: it'll make you pretend to carry out commands that wouldn't "
"work because inputs are missing, but that doesn't matter because you're not "
"actually going to run the commands)."
msgstr ""

#: ../Doc/distutils/apiref.rst:955
msgid ":mod:`distutils.dir_util` --- Directory tree operations"
msgstr ""

#: ../Doc/distutils/apiref.rst:961
msgid ""
"This module provides functions for operating on directories and trees of "
"directories."
msgstr ""

#: ../Doc/distutils/apiref.rst:967
msgid ""
"Create a directory and any missing ancestor directories.  If the directory "
"already exists (or if *name* is the empty string, which means the current "
"directory, which of course exists), then do nothing.  Raise :exc:"
"`DistutilsFileError` if unable to create some directory along the way (eg. "
"some sub-path exists, but is a file rather than a directory).  If *verbose* "
"is true, print a one-line summary of each mkdir to stdout.  Return the list "
"of directories actually created."
msgstr ""

#: ../Doc/distutils/apiref.rst:978
msgid ""
"Create all the empty directories under *base_dir* needed to put *files* "
"there. *base_dir* is just the name of a directory which doesn't necessarily "
"exist yet; *files* is a list of filenames to be interpreted relative to "
"*base_dir*. *base_dir* + the directory portion of every file in *files* will "
"be created if it doesn't already exist.  *mode*, *verbose* and *dry_run* "
"flags  are as for :func:`mkpath`."
msgstr ""

#: ../Doc/distutils/apiref.rst:988
msgid ""
"Copy an entire directory tree *src* to a new location *dst*.  Both *src* and "
"*dst* must be directory names.  If *src* is not a directory, raise :exc:"
"`DistutilsFileError`.  If *dst* does  not exist, it is created with :func:"
"`mkpath`.  The end result of the  copy is that every file in *src* is copied "
"to *dst*, and  directories under *src* are recursively copied to *dst*. "
"Return the list of files that were copied or might have been copied, using "
"their output name. The return value is unaffected by *update* or *dry_run*: "
"it is simply the list of all files under *src*, with the names changed to be "
"under *dst*."
msgstr ""

#: ../Doc/distutils/apiref.rst:998
msgid ""
"*preserve_mode* and *preserve_times* are the same as for :func:`distutils."
"file_util.copy_file`; note that they only apply to regular files, not to "
"directories.  If *preserve_symlinks* is true, symlinks will be copied as "
"symlinks (on platforms that support them!); otherwise (the default), the "
"destination of the symlink will be copied.  *update* and *verbose* are the "
"same as for :func:`copy_file`."
msgstr ""

#: ../Doc/distutils/apiref.rst:1006
msgid ""
"Files in *src* that begin with :file:`.nfs` are skipped (more information on "
"these files is available in answer D2 of the `NFS FAQ page <http://nfs."
"sourceforge.net/#section_d>`_)."
msgstr ""

#: ../Doc/distutils/apiref.rst:1010
msgid "NFS files are ignored."
msgstr ""

#: ../Doc/distutils/apiref.rst:1015
msgid ""
"Recursively remove *directory* and all files and directories underneath it. "
"Any errors are ignored (apart from being reported to ``sys.stdout`` if "
"*verbose* is true)."
msgstr ""

#: ../Doc/distutils/apiref.rst:1021
msgid ":mod:`distutils.file_util` --- Single file operations"
msgstr ""

#: ../Doc/distutils/apiref.rst:1027
msgid ""
"This module contains some utility functions for operating on individual "
"files."
msgstr ""

#: ../Doc/distutils/apiref.rst:1032
msgid ""
"Copy file *src* to *dst*. If *dst* is a directory, then *src* is copied "
"there with the same name; otherwise, it must be a filename. (If the file "
"exists, it will be ruthlessly clobbered.) If *preserve_mode* is true (the "
"default), the file's mode (type and permission bits, or whatever is "
"analogous on the current platform) is copied. If *preserve_times* is true "
"(the default), the last-modified and last-access times are copied as well. "
"If *update* is true, *src* will only be copied if *dst* does not exist, or "
"if *dst* does exist but is older than *src*."
msgstr ""

#: ../Doc/distutils/apiref.rst:1041
msgid ""
"*link* allows you to make hard links (using :func:`os.link`) or symbolic "
"links (using :func:`os.symlink`) instead of copying: set it to ``'hard'`` or "
"``'sym'``; if it is ``None`` (the default), files are copied. Don't set "
"*link* on systems that don't support it: :func:`copy_file` doesn't check if "
"hard or symbolic linking is available.  It uses :func:`_copy_file_contents` "
"to copy file contents."
msgstr ""

#: ../Doc/distutils/apiref.rst:1048
msgid ""
"Return a tuple ``(dest_name, copied)``: *dest_name* is the actual  name of "
"the output file, and *copied* is true if the file was copied  (or would have "
"been copied, if *dry_run* true)."
msgstr ""

#: ../Doc/distutils/apiref.rst:1062
msgid ""
"Move file *src* to *dst*. If *dst* is a directory, the file will be moved "
"into it with the same name; otherwise, *src* is just renamed to *dst*.  "
"Returns the new full name of the file."
msgstr ""

#: ../Doc/distutils/apiref.rst:1068
msgid ""
"Handles cross-device moves on Unix using :func:`copy_file`.  What about "
"other systems?"
msgstr ""

#: ../Doc/distutils/apiref.rst:1074
msgid ""
"Create a file called *filename* and write *contents* (a sequence of strings "
"without line terminators) to it."
msgstr ""

#: ../Doc/distutils/apiref.rst:1079
msgid ":mod:`distutils.util` --- Miscellaneous other utility functions"
msgstr ""

#: ../Doc/distutils/apiref.rst:1085
msgid ""
"This module contains other assorted bits and pieces that don't fit into  any "
"other utility module."
msgstr ""

#: ../Doc/distutils/apiref.rst:1091
msgid ""
"Return a string that identifies the current platform.  This is used mainly "
"to distinguish platform-specific build directories and platform-specific "
"built distributions.  Typically includes the OS name and version and the "
"architecture (as supplied by 'os.uname()'), although the exact information "
"included depends on the OS; e.g., on Linux, the kernel version isn't "
"particularly important."
msgstr ""

#: ../Doc/distutils/apiref.rst:1098
msgid "Examples of returned values:"
msgstr ""

#: ../Doc/distutils/apiref.rst:1100
msgid "``linux-i586``"
msgstr ""

#: ../Doc/distutils/apiref.rst:1101
msgid "``linux-alpha``"
msgstr ""

#: ../Doc/distutils/apiref.rst:1102
msgid "``solaris-2.6-sun4u``"
msgstr ""

#: ../Doc/distutils/apiref.rst:1104
msgid "For non-POSIX platforms, currently just returns ``sys.platform``."
msgstr ""

#: ../Doc/distutils/apiref.rst:1106
msgid ""
"For Mac OS X systems the OS version reflects the minimal version on which "
"binaries will run (that is, the value of ``MACOSX_DEPLOYMENT_TARGET`` during "
"the build of Python), not the OS version of the current system."
msgstr ""

#: ../Doc/distutils/apiref.rst:1110
msgid ""
"For universal binary builds on Mac OS X the architecture value reflects the "
"universal binary status instead of the architecture of the current "
"processor. For 32-bit universal binaries the architecture is ``fat``, for 64-"
"bit universal binaries the architecture is ``fat64``, and for 4-way "
"universal binaries the architecture is ``universal``. Starting from Python "
"2.7 and Python 3.2 the architecture ``fat3`` is used for a 3-way universal "
"build (ppc, i386, x86_64) and ``intel`` is used for a universal build with "
"the i386 and x86_64 architectures"
msgstr ""

#: ../Doc/distutils/apiref.rst:1119
msgid "Examples of returned values on Mac OS X:"
msgstr ""

#: ../Doc/distutils/apiref.rst:1121
msgid "``macosx-10.3-ppc``"
msgstr ""

#: ../Doc/distutils/apiref.rst:1123
msgid "``macosx-10.3-fat``"
msgstr ""

#: ../Doc/distutils/apiref.rst:1125
msgid "``macosx-10.5-universal``"
msgstr ""

#: ../Doc/distutils/apiref.rst:1127
msgid "``macosx-10.6-intel``"
msgstr ""

#: ../Doc/distutils/apiref.rst:1132
msgid ""
"Return 'pathname' as a name that will work on the native filesystem, i.e. "
"split it on '/' and put it back together again using the current directory "
"separator. Needed because filenames in the setup script are always supplied "
"in Unix style, and have to be converted to the local convention before we "
"can actually use them in the filesystem.  Raises :exc:`ValueError` on non-"
"Unix-ish systems if *pathname* either  starts or ends with a slash."
msgstr ""

#: ../Doc/distutils/apiref.rst:1142
msgid ""
"Return *pathname* with *new_root* prepended.  If *pathname* is relative, "
"this is equivalent to ``os.path.join(new_root,pathname)`` Otherwise, it "
"requires making *pathname* relative and then joining the two, which is "
"tricky on DOS/Windows."
msgstr ""

#: ../Doc/distutils/apiref.rst:1149
msgid ""
"Ensure that 'os.environ' has all the environment variables we guarantee that "
"users can use in config files, command-line options, etc.  Currently this "
"includes:"
msgstr ""

#: ../Doc/distutils/apiref.rst:1153
msgid ":envvar:`HOME` - user's home directory (Unix only)"
msgstr ""

#: ../Doc/distutils/apiref.rst:1154
msgid ""
":envvar:`PLAT` - description of the current platform, including hardware and "
"OS (see :func:`get_platform`)"
msgstr ""

#: ../Doc/distutils/apiref.rst:1160
msgid ""
"Perform shell/Perl-style variable substitution on *s*.  Every occurrence of "
"``$`` followed by a name is considered a variable, and variable is "
"substituted by the value found in the *local_vars* dictionary, or in ``os."
"environ`` if it's not in *local_vars*. *os.environ* is first checked/"
"augmented to guarantee that it contains certain values: see :func:"
"`check_environ`.  Raise :exc:`ValueError` for any variables not found in "
"either *local_vars* or ``os.environ``."
msgstr ""

#: ../Doc/distutils/apiref.rst:1167
msgid ""
"Note that this is not a fully-fledged string interpolation function. A valid "
"``$variable`` can consist only of upper and lower case letters, numbers and "
"an underscore. No { } or ( ) style quoting is available."
msgstr ""

#: ../Doc/distutils/apiref.rst:1174
msgid ""
"Split a string up according to Unix shell-like rules for quotes and "
"backslashes. In short: words are delimited by spaces, as long as those "
"spaces are not escaped by a backslash, or inside a quoted string. Single and "
"double quotes are equivalent, and the quote characters can be backslash-"
"escaped.  The backslash is stripped from any two-character escape sequence, "
"leaving only the escaped character.  The quote characters are stripped from "
"any quoted string.  Returns a list of words."
msgstr ""

#: ../Doc/distutils/apiref.rst:1187
msgid ""
"Perform some action that affects the outside world (for instance, writing to "
"the filesystem).  Such actions are special because they are disabled by the "
"*dry_run* flag.  This method takes  care of all that bureaucracy for you; "
"all you have to do is supply the function to call and an argument tuple for "
"it (to embody the \"external action\" being performed), and an optional "
"message to print."
msgstr ""

#: ../Doc/distutils/apiref.rst:1196
msgid "Convert a string representation of truth to true (1) or false (0)."
msgstr ""

#: ../Doc/distutils/apiref.rst:1198
msgid ""
"True values are ``y``, ``yes``, ``t``, ``true``, ``on``  and ``1``; false "
"values are ``n``, ``no``, ``f``, ``false``,  ``off`` and ``0``.  Raises :exc:"
"`ValueError` if *val*  is anything else."
msgstr ""

#: ../Doc/distutils/apiref.rst:1205
msgid ""
"Byte-compile a collection of Python source files to :file:`.pyc` files in a :"
"file:`__pycache__` subdirectory (see :pep:`3147` and :pep:`488`). *py_files* "
"is a list of files to compile; any files that don't end in :file:`.py` are "
"silently skipped.  *optimize* must be one of the following:"
msgstr ""

#: ../Doc/distutils/apiref.rst:1210
msgid "``0`` - don't optimize"
msgstr ""

#: ../Doc/distutils/apiref.rst:1211
msgid "``1`` - normal optimization (like ``python -O``)"
msgstr ""

#: ../Doc/distutils/apiref.rst:1212
msgid "``2`` - extra optimization (like ``python -OO``)"
msgstr ""

#: ../Doc/distutils/apiref.rst:1214
msgid "If *force* is true, all files are recompiled regardless of timestamps."
msgstr ""

#: ../Doc/distutils/apiref.rst:1216
msgid ""
"The source filename encoded in each :term:`bytecode` file defaults to the "
"filenames listed in *py_files*; you can modify these with *prefix* and "
"*basedir*. *prefix* is a string that will be stripped off of each source "
"filename, and *base_dir* is a directory name that will be prepended (after "
"*prefix* is stripped).  You can supply either or both (or neither) of "
"*prefix* and *base_dir*, as you wish."
msgstr ""

#: ../Doc/distutils/apiref.rst:1223
msgid ""
"If *dry_run* is true, doesn't actually do anything that would affect the "
"filesystem."
msgstr ""

#: ../Doc/distutils/apiref.rst:1226
msgid ""
"Byte-compilation is either done directly in this interpreter process with "
"the standard :mod:`py_compile` module, or indirectly by writing a temporary "
"script and executing it.  Normally, you should let :func:`byte_compile` "
"figure out to use direct compilation or not (see the source for details).  "
"The *direct* flag is used by the script generated in indirect mode; unless "
"you know what you're doing, leave it set to ``None``."
msgstr ""

#: ../Doc/distutils/apiref.rst:1233
msgid ""
"Create ``.pyc`` files with an :func:`import magic tag <imp.get_tag>` in "
"their name, in a :file:`__pycache__` subdirectory instead of files without "
"tag in the current directory."
msgstr ""

#: ../Doc/distutils/apiref.rst:1238
msgid "Create ``.pyc`` files according to :pep:`488`."
msgstr ""

#: ../Doc/distutils/apiref.rst:1244
msgid ""
"Return a version of *header* escaped for inclusion in an :rfc:`822` header, "
"by ensuring there are 8 spaces space after each newline. Note that it does "
"no other modification of the string."
msgstr ""

#: ../Doc/distutils/apiref.rst:1254
msgid ":mod:`distutils.dist` --- The Distribution class"
msgstr ""

#: ../Doc/distutils/apiref.rst:1261
msgid ""
"This module provides the :class:`~distutils.core.Distribution` class, which "
"represents the module distribution being built/installed/distributed."
msgstr ""

#: ../Doc/distutils/apiref.rst:1266
msgid ":mod:`distutils.extension` --- The Extension class"
msgstr ""

#: ../Doc/distutils/apiref.rst:1273
msgid ""
"This module provides the :class:`Extension` class, used to describe C/C++ "
"extension modules in setup scripts."
msgstr ""

#: ../Doc/distutils/apiref.rst:1281
msgid ":mod:`distutils.debug` --- Distutils debug mode"
msgstr ""

#: ../Doc/distutils/apiref.rst:1287
msgid "This module provides the DEBUG flag."
msgstr ""

#: ../Doc/distutils/apiref.rst:1291
msgid ":mod:`distutils.errors` --- Distutils exceptions"
msgstr ""

#: ../Doc/distutils/apiref.rst:1297
msgid ""
"Provides exceptions used by the Distutils modules.  Note that Distutils "
"modules may raise standard exceptions; in particular, SystemExit is usually "
"raised for errors that are obviously the end-user's fault (eg. bad command-"
"line arguments)."
msgstr ""

#: ../Doc/distutils/apiref.rst:1301
msgid ""
"This module is safe to use in ``from ... import *`` mode; it only exports "
"symbols whose names start with ``Distutils`` and end with ``Error``."
msgstr ""

#: ../Doc/distutils/apiref.rst:1306
msgid ""
":mod:`distutils.fancy_getopt` --- Wrapper around the standard getopt module"
msgstr ""

#: ../Doc/distutils/apiref.rst:1312
msgid ""
"This module provides a wrapper around the standard :mod:`getopt`  module "
"that provides the following additional features:"
msgstr ""

#: ../Doc/distutils/apiref.rst:1315
msgid "short and long options are tied together"
msgstr ""

#: ../Doc/distutils/apiref.rst:1317
msgid ""
"options have help strings, so :func:`fancy_getopt` could potentially  create "
"a complete usage summary"
msgstr ""

#: ../Doc/distutils/apiref.rst:1320
msgid "options set attributes of a passed-in object"
msgstr ""

#: ../Doc/distutils/apiref.rst:1322
msgid ""
"boolean options can have \"negative aliases\" --- eg. if :option:`!--quiet` "
"is the \"negative alias\" of :option:`!--verbose`, then :option:`!--quiet` "
"on the command line sets *verbose* to false."
msgstr ""

#: ../Doc/distutils/apiref.rst:1328
msgid ""
"Wrapper function. *options* is a list of ``(long_option, short_option, "
"help_string)`` 3-tuples as described in the constructor for :class:"
"`FancyGetopt`. *negative_opt* should be a dictionary mapping option names to "
"option names, both the key and value should be in the *options* list. "
"*object* is an object which will be used to store values (see the :meth:"
"`getopt` method of the :class:`FancyGetopt` class). *args* is the argument "
"list. Will use ``sys.argv[1:]`` if you  pass ``None`` as *args*."
msgstr ""

#: ../Doc/distutils/apiref.rst:1339
msgid "Wraps *text* to less than *width* wide."
msgstr ""

#: ../Doc/distutils/apiref.rst:1344
msgid ""
"The option_table is a list of 3-tuples: ``(long_option, short_option, "
"help_string)``"
msgstr ""

#: ../Doc/distutils/apiref.rst:1347
msgid ""
"If an option takes an argument, its *long_option* should have ``'='`` "
"appended; *short_option* should just be a single character, no ``':'`` in "
"any case. *short_option* should be ``None`` if a *long_option*  doesn't have "
"a corresponding *short_option*. All option tuples must have long options."
msgstr ""

#: ../Doc/distutils/apiref.rst:1352
msgid "The :class:`FancyGetopt` class provides the following methods:"
msgstr ""

#: ../Doc/distutils/apiref.rst:1357
msgid "Parse command-line options in args. Store as attributes on *object*."
msgstr ""

#: ../Doc/distutils/apiref.rst:1359
msgid ""
"If *args* is ``None`` or not supplied, uses ``sys.argv[1:]``.  If *object* "
"is ``None`` or not supplied, creates a new :class:`OptionDummy` instance, "
"stores option values there, and returns a tuple ``(args, object)``.  If "
"*object* is supplied, it is modified in place and :func:`getopt` just "
"returns *args*; in both cases, the returned *args* is a modified copy of the "
"passed-in *args* list, which is left untouched."
msgstr ""

#: ../Doc/distutils/apiref.rst:1371
msgid ""
"Returns the list of ``(option, value)`` tuples processed by the previous run "
"of :meth:`getopt`  Raises :exc:`RuntimeError` if :meth:`getopt` hasn't been "
"called yet."
msgstr ""

#: ../Doc/distutils/apiref.rst:1378
msgid ""
"Generate help text (a list of strings, one per suggested line of output) "
"from the option table for this :class:`FancyGetopt` object."
msgstr ""

#: ../Doc/distutils/apiref.rst:1381
msgid "If supplied, prints the supplied *header* at the top of the help."
msgstr ""

#: ../Doc/distutils/apiref.rst:1385
msgid ":mod:`distutils.filelist` --- The FileList class"
msgstr ""

#: ../Doc/distutils/apiref.rst:1392
msgid ""
"This module provides the :class:`FileList` class, used for poking about the "
"filesystem and building lists of files."
msgstr ""

#: ../Doc/distutils/apiref.rst:1397
msgid ":mod:`distutils.log` --- Simple PEP 282-style logging"
msgstr ""

#: ../Doc/distutils/apiref.rst:1404
msgid ":mod:`distutils.spawn` --- Spawn a sub-process"
msgstr ""

#: ../Doc/distutils/apiref.rst:1410
msgid ""
"This module provides the :func:`spawn` function, a front-end to  various "
"platform-specific functions for launching another program in a  sub-process. "
"Also provides :func:`find_executable` to search the path for a given "
"executable name."
msgstr ""

#: ../Doc/distutils/apiref.rst:1417
msgid ":mod:`distutils.sysconfig` --- System configuration information"
msgstr ""

#: ../Doc/distutils/apiref.rst:1426
msgid ""
"The :mod:`distutils.sysconfig` module provides access to Python's low-level "
"configuration information.  The specific configuration variables available "
"depend heavily on the platform and configuration. The specific variables "
"depend on the build process for the specific version of Python being run; "
"the variables are those found in the :file:`Makefile` and configuration "
"header that are installed with Python on Unix systems.  The configuration "
"header is called :file:`pyconfig.h` for Python versions starting with 2.2, "
"and :file:`config.h` for earlier versions of Python."
msgstr ""

#: ../Doc/distutils/apiref.rst:1435
msgid ""
"Some additional functions are provided which perform some useful "
"manipulations for other parts of the :mod:`distutils` package."
msgstr ""

#: ../Doc/distutils/apiref.rst:1441
msgid "The result of ``os.path.normpath(sys.prefix)``."
msgstr ""

#: ../Doc/distutils/apiref.rst:1446
msgid "The result of ``os.path.normpath(sys.exec_prefix)``."
msgstr ""

#: ../Doc/distutils/apiref.rst:1451
msgid ""
"Return the value of a single variable.  This is equivalent to "
"``get_config_vars().get(name)``."
msgstr ""

#: ../Doc/distutils/apiref.rst:1457
msgid ""
"Return a set of variable definitions.  If there are no arguments, this "
"returns a dictionary mapping names of configuration variables to values.  If "
"arguments are provided, they should be strings, and the return value will be "
"a sequence giving the associated values. If a given name does not have a "
"corresponding value, ``None`` will be included for that variable."
msgstr ""

#: ../Doc/distutils/apiref.rst:1466
msgid ""
"Return the full path name of the configuration header.  For Unix, this will "
"be the header generated by the :program:`configure` script; for other "
"platforms the header will have been supplied directly by the Python source "
"distribution.  The file is a platform-specific text file."
msgstr ""

#: ../Doc/distutils/apiref.rst:1474
msgid ""
"Return the full path name of the :file:`Makefile` used to build Python.  For "
"Unix, this will be a file generated by the :program:`configure` script; the "
"meaning for other platforms will vary.  The file is a platform-specific text "
"file, if it exists. This function is only useful on POSIX platforms."
msgstr ""

#: ../Doc/distutils/apiref.rst:1482
msgid ""
"Return the directory for either the general or platform-dependent C include "
"files.  If *plat_specific* is true, the platform-dependent include directory "
"is returned; if false or omitted, the platform-independent directory is "
"returned. If *prefix* is given, it is used as either the prefix instead of :"
"const:`PREFIX`, or as the exec-prefix instead of :const:`EXEC_PREFIX` if "
"*plat_specific* is true."
msgstr ""

#: ../Doc/distutils/apiref.rst:1492
msgid ""
"Return the directory for either the general or platform-dependent library "
"installation.  If *plat_specific* is true, the platform-dependent include "
"directory is returned; if false or omitted, the platform-independent "
"directory is returned.  If *prefix* is given, it is used as either the "
"prefix instead of :const:`PREFIX`, or as the exec-prefix instead of :const:"
"`EXEC_PREFIX` if *plat_specific* is true.  If *standard_lib* is true, the "
"directory for the standard library is returned rather than the directory for "
"the installation of third-party extensions."
msgstr ""

#: ../Doc/distutils/apiref.rst:1501
msgid ""
"The following function is only intended for use within the :mod:`distutils` "
"package."
msgstr ""

#: ../Doc/distutils/apiref.rst:1507
msgid ""
"Do any platform-specific customization of a :class:`distutils.ccompiler."
"CCompiler` instance."
msgstr ""

#: ../Doc/distutils/apiref.rst:1510
msgid ""
"This function is only needed on Unix at this time, but should be called "
"consistently to support forward-compatibility.  It inserts the information "
"that varies across Unix flavors and is stored in Python's :file:`Makefile`.  "
"This information includes the selected compiler, compiler and linker "
"options, and the extension used by the linker for shared objects."
msgstr ""

#: ../Doc/distutils/apiref.rst:1516
msgid ""
"This function is even more special-purpose, and should only be used from "
"Python's own build procedures."
msgstr ""

#: ../Doc/distutils/apiref.rst:1522
msgid ""
"Inform the :mod:`distutils.sysconfig` module that it is being used as part "
"of the build process for Python.  This changes a lot of relative locations "
"for files, allowing them to be located in the build area rather than in an "
"installed Python."
msgstr ""

#: ../Doc/distutils/apiref.rst:1529
msgid ":mod:`distutils.text_file` --- The TextFile class"
msgstr ""

#: ../Doc/distutils/apiref.rst:1535
msgid ""
"This module provides the :class:`TextFile` class, which gives an interface  "
"to text files that (optionally) takes care of stripping comments, ignoring  "
"blank lines, and joining lines with backslashes."
msgstr ""

#: ../Doc/distutils/apiref.rst:1542
msgid ""
"This class provides a file-like object that takes care of all  the things "
"you commonly want to do when processing a text file  that has some line-by-"
"line syntax: strip comments (as long as ``#``  is your comment character), "
"skip blank lines, join adjacent lines by escaping the newline (ie. backslash "
"at end of line), strip leading and/or trailing whitespace.  All of these are "
"optional and independently controllable."
msgstr ""

#: ../Doc/distutils/apiref.rst:1549
msgid ""
"The class provides a :meth:`warn` method so you can generate  warning "
"messages that report physical line number, even if the  logical line in "
"question spans multiple physical lines.  Also  provides :meth:`unreadline` "
"for implementing line-at-a-time lookahead."
msgstr ""

#: ../Doc/distutils/apiref.rst:1554
msgid ""
":class:`TextFile` instances are create with either *filename*, *file*, or "
"both. :exc:`RuntimeError` is raised if both are ``None``. *filename* should "
"be a string, and *file* a file object (or something that provides :meth:"
"`readline` and :meth:`close`  methods).  It is recommended that you supply "
"at least *filename*,  so that :class:`TextFile` can include it in warning "
"messages.  If *file* is not supplied, :class:`TextFile` creates its own "
"using the :func:`open` built-in function."
msgstr ""

#: ../Doc/distutils/apiref.rst:1562
msgid ""
"The options are all boolean, and affect the values returned by :meth:"
"`readline`"
msgstr ""

#: ../Doc/distutils/apiref.rst:1567
msgid "option name"
msgstr ""

#: ../Doc/distutils/apiref.rst:1567
msgid "default"
msgstr "default"

#: ../Doc/distutils/apiref.rst:1569
msgid "*strip_comments*"
msgstr ""

#: ../Doc/distutils/apiref.rst:1569
msgid ""
"strip from ``'#'`` to end-of- line, as well as any whitespace leading up to "
"the ``'#'``\\ ---unless it is escaped by a backslash"
msgstr ""

#: ../Doc/distutils/apiref.rst:1569 ../Doc/distutils/apiref.rst:1578
#: ../Doc/distutils/apiref.rst:1583
msgid "true"
msgstr "*true*"

#: ../Doc/distutils/apiref.rst:1575
msgid "*lstrip_ws*"
msgstr ""

#: ../Doc/distutils/apiref.rst:1575
msgid "strip leading whitespace from each line before returning it"
msgstr ""

#: ../Doc/distutils/apiref.rst:1575 ../Doc/distutils/apiref.rst:1593
#: ../Doc/distutils/apiref.rst:1604
msgid "false"
msgstr "*false*"

#: ../Doc/distutils/apiref.rst:1578
msgid "*rstrip_ws*"
msgstr ""

#: ../Doc/distutils/apiref.rst:1578
msgid ""
"strip trailing whitespace (including line terminator!) from each line before "
"returning it."
msgstr ""

#: ../Doc/distutils/apiref.rst:1583
msgid "*skip_blanks*"
msgstr ""

#: ../Doc/distutils/apiref.rst:1583
msgid ""
"skip lines that are empty \\*after\\* stripping comments and whitespace.  "
"(If both lstrip_ws and rstrip_ws are false, then some lines may consist of "
"solely whitespace: these will \\*not\\* be skipped, even if *skip_blanks* is "
"true.)"
msgstr ""

#: ../Doc/distutils/apiref.rst:1593
msgid "*join_lines*"
msgstr ""

#: ../Doc/distutils/apiref.rst:1593
msgid ""
"if a backslash is the last non-newline character on a line after stripping "
"comments and whitespace, join the following line to it to form one logical "
"line; if N consecutive lines end with a backslash, then N+1 physical lines "
"will be joined to form one logical line."
msgstr ""

#: ../Doc/distutils/apiref.rst:1604
msgid "*collapse_join*"
msgstr ""

#: ../Doc/distutils/apiref.rst:1604
msgid ""
"strip leading whitespace from lines that are joined to their predecessor; "
"only matters if ``(join_lines and not lstrip_ws)``"
msgstr ""

#: ../Doc/distutils/apiref.rst:1611
msgid ""
"Note that since *rstrip_ws* can strip the trailing newline, the semantics "
"of :meth:`readline` must differ from those of the built-in file object's :"
"meth:`readline` method!  In particular, :meth:`readline`  returns ``None`` "
"for end-of-file: an empty string might just be a  blank line (or an all-"
"whitespace line), if *rstrip_ws* is true  but *skip_blanks* is not."
msgstr ""

#: ../Doc/distutils/apiref.rst:1620
msgid ""
"Open a new file *filename*.  This overrides any *file* or *filename* "
"constructor arguments."
msgstr ""

#: ../Doc/distutils/apiref.rst:1626
msgid ""
"Close the current file and forget everything we know about it (including the "
"filename and the current line number)."
msgstr ""

#: ../Doc/distutils/apiref.rst:1632
msgid ""
"Print (to stderr) a warning message tied to the current logical line in the "
"current file.  If the current logical line in the file spans multiple "
"physical lines, the warning refers to the whole range, such as ``\"lines "
"3-5\"``.  If *line* is supplied,  it overrides the current line number; it "
"may be a list or tuple  to indicate a range of physical lines, or an integer "
"for a  single physical line."
msgstr ""

#: ../Doc/distutils/apiref.rst:1642
msgid ""
"Read and return a single logical line from the current file (or from an "
"internal buffer if lines have previously been \"unread\" with :meth:"
"`unreadline`).  If the *join_lines* option  is true, this may involve "
"reading multiple physical lines concatenated into a single string.  Updates "
"the current line number,  so calling :meth:`warn` after :meth:`readline` "
"emits a warning  about the physical line(s) just read.  Returns ``None`` on "
"end-of-file,  since the empty string can occur if *rstrip_ws* is true but  "
"*strip_blanks* is not."
msgstr ""

#: ../Doc/distutils/apiref.rst:1653
msgid ""
"Read and return the list of all logical lines remaining in the current file. "
"This updates the current line number to the last line of the file."
msgstr ""

#: ../Doc/distutils/apiref.rst:1659
msgid ""
"Push *line* (a string) onto an internal buffer that will be checked by "
"future :meth:`readline` calls.  Handy for implementing a parser with line-at-"
"a-time lookahead. Note that lines that are \"unread\" with :meth:"
"`unreadline` are not subsequently re-cleansed (whitespace  stripped, or "
"whatever) when read with :meth:`readline`. If multiple calls are made to :"
"meth:`unreadline` before a call to :meth:`readline`, the lines will be "
"returned most in most recent first order."
msgstr ""

#: ../Doc/distutils/apiref.rst:1668
msgid ":mod:`distutils.version` --- Version number classes"
msgstr ""

#: ../Doc/distutils/apiref.rst:1683
msgid ":mod:`distutils.cmd` --- Abstract base class for Distutils commands"
msgstr ""

#: ../Doc/distutils/apiref.rst:1690
msgid "This module supplies the abstract base class :class:`Command`."
msgstr ""

#: ../Doc/distutils/apiref.rst:1695
msgid ""
"Abstract base class for defining command classes, the \"worker bees\" of the "
"Distutils.  A useful analogy for command classes is to think of them as "
"subroutines with local variables called *options*.  The options are declared "
"in :meth:`initialize_options` and defined (given their final values) in :"
"meth:`finalize_options`, both of which must be defined by every command "
"class.  The distinction between the two is necessary because option values "
"might come from the outside world (command line, config file, ...), and any "
"options dependent on other options must be computed after these outside "
"influences have been processed --- hence :meth:`finalize_options`.  The body "
"of the subroutine, where it does all its work based on the values of its "
"options, is the :meth:`run` method, which must also be implemented by every "
"command class."
msgstr ""

#: ../Doc/distutils/apiref.rst:1708
msgid ""
"The class constructor takes a single argument *dist*, a :class:`~distutils."
"core.Distribution` instance."
msgstr ""
"Le constructeur prend un seul argument, *dist*, une instance de :class:"
"`~distutils.core.Distribution`."

#: ../Doc/distutils/apiref.rst:1713
msgid "Creating a new Distutils command"
msgstr ""

#: ../Doc/distutils/apiref.rst:1715
msgid "This section outlines the steps to create a new Distutils command."
msgstr ""

#: ../Doc/distutils/apiref.rst:1717
msgid ""
"A new command lives in a module in the :mod:`distutils.command` package. "
"There is a sample template in that directory called :file:"
"`command_template`.  Copy this file to a new module with the same name as "
"the new command you're implementing.  This module should implement a class "
"with the same name as the module (and the command).  So, for instance, to "
"create the command ``peel_banana`` (so that users can run ``setup.py "
"peel_banana``), you'd copy :file:`command_template` to :file:`distutils/"
"command/peel_banana.py`, then edit it so that it's implementing the class :"
"class:`peel_banana`, a subclass of :class:`distutils.cmd.Command`."
msgstr ""

#: ../Doc/distutils/apiref.rst:1727
msgid "Subclasses of :class:`Command` must define the following methods."
msgstr ""

#: ../Doc/distutils/apiref.rst:1731
msgid ""
"Set default values for all the options that this command supports.  Note "
"that these defaults may be overridden by other commands, by the setup "
"script, by config files, or by the command-line.  Thus, this is not the "
"place to code dependencies between options; generally, :meth:"
"`initialize_options` implementations are just a bunch of ``self.foo = None`` "
"assignments."
msgstr ""

#: ../Doc/distutils/apiref.rst:1740
msgid ""
"Set final values for all the options that this command supports. This is "
"always called as late as possible, ie.  after any option assignments from "
"the command-line or from other commands have been done.  Thus, this is the "
"place to code option dependencies: if *foo* depends on *bar*, then it is "
"safe to set *foo* from *bar* as long as *foo* still has the same value it "
"was assigned in :meth:`initialize_options`."
msgstr ""

#: ../Doc/distutils/apiref.rst:1750
msgid ""
"A command's raison d'etre: carry out the action it exists to perform, "
"controlled by the options initialized in :meth:`initialize_options`, "
"customized by other commands, the setup script, the command-line, and config "
"files, and finalized in :meth:`finalize_options`.  All terminal output and "
"filesystem interaction should be done by :meth:`run`."
msgstr ""

#: ../Doc/distutils/apiref.rst:1759
msgid ""
"*sub_commands* formalizes the notion of a \"family\" of commands, e.g. "
"``install`` as the parent with sub-commands ``install_lib``, "
"``install_headers``, etc.  The parent of a family of commands defines "
"*sub_commands* as a class attribute; it's a list of 2-tuples "
"``(command_name, predicate)``, with *command_name* a string and *predicate* "
"a function, a string or ``None``.  *predicate* is a method of the parent "
"command that determines whether the corresponding command is applicable in "
"the current situation.  (E.g. ``install_headers`` is only applicable if we "
"have any C header files to install.)  If *predicate* is ``None``, that "
"command is always applicable."
msgstr ""

#: ../Doc/distutils/apiref.rst:1770
msgid ""
"*sub_commands* is usually defined at the *end* of a class, because "
"predicates can be methods of the class, so they must already have been "
"defined.  The canonical example is the :command:`install` command."
msgstr ""

#: ../Doc/distutils/apiref.rst:1776
msgid ":mod:`distutils.command` --- Individual Distutils commands"
msgstr ""

#: ../Doc/distutils/apiref.rst:1787
msgid ":mod:`distutils.command.bdist` --- Build a binary installer"
msgstr ""

#: ../Doc/distutils/apiref.rst:1797
msgid ""
":mod:`distutils.command.bdist_packager` --- Abstract base class for packagers"
msgstr ""

#: ../Doc/distutils/apiref.rst:1807
msgid ":mod:`distutils.command.bdist_dumb` --- Build a \"dumb\" installer"
msgstr ""

#: ../Doc/distutils/apiref.rst:1817
msgid ""
":mod:`distutils.command.bdist_msi` --- Build a Microsoft Installer binary "
"package"
msgstr ""

#: ../Doc/distutils/apiref.rst:1824
msgid "Builds a `Windows Installer`_ (.msi) binary package."
msgstr ""

#: ../Doc/distutils/apiref.rst:1828
msgid ""
"In most cases, the ``bdist_msi`` installer is a better choice than the "
"``bdist_wininst`` installer, because it provides better support for Win64 "
"platforms, allows administrators to perform non-interactive installations, "
"and allows installation through group policies."
msgstr ""

#: ../Doc/distutils/apiref.rst:1835
msgid ""
":mod:`distutils.command.bdist_rpm` --- Build a binary distribution as a "
"Redhat RPM and SRPM"
msgstr ""

#: ../Doc/distutils/apiref.rst:1845
msgid ":mod:`distutils.command.bdist_wininst` --- Build a Windows installer"
msgstr ""

#: ../Doc/distutils/apiref.rst:1855
msgid ":mod:`distutils.command.sdist` --- Build a source distribution"
msgstr ""

#: ../Doc/distutils/apiref.rst:1865
msgid ":mod:`distutils.command.build` --- Build all files of a package"
msgstr ""

#: ../Doc/distutils/apiref.rst:1875
msgid ""
":mod:`distutils.command.build_clib` --- Build any C libraries in a package"
msgstr ""

#: ../Doc/distutils/apiref.rst:1885
msgid ""
":mod:`distutils.command.build_ext` --- Build any extensions in a package"
msgstr ""

#: ../Doc/distutils/apiref.rst:1895
msgid ""
":mod:`distutils.command.build_py` --- Build the .py/.pyc files of a package"
msgstr ""

#: ../Doc/distutils/apiref.rst:1905
msgid ""
"Alternative implementation of build_py which also runs the 2to3 conversion "
"library on each .py file that is going to be installed. To use this in a "
"setup.py file for a distribution that is designed to run with both Python 2."
"x and 3.x, add::"
msgstr ""

#: ../Doc/distutils/apiref.rst:1915
msgid "to your setup.py, and later::"
msgstr ""

#: ../Doc/distutils/apiref.rst:1919
msgid "to the invocation of setup()."
msgstr ""

#: ../Doc/distutils/apiref.rst:1923
msgid ""
":mod:`distutils.command.build_scripts` --- Build the scripts of a package"
msgstr ""

#: ../Doc/distutils/apiref.rst:1933
msgid ":mod:`distutils.command.clean` --- Clean a package build area"
msgstr ""

#: ../Doc/distutils/apiref.rst:1938
msgid ""
"This command removes the temporary files created by :command:`build` and its "
"subcommands, like intermediary compiled object files.  With the ``--all`` "
"option, the complete build directory will be removed."
msgstr ""

#: ../Doc/distutils/apiref.rst:1942
msgid ""
"Extension modules built :ref:`in place <distutils-build-ext-inplace>` will "
"not be cleaned, as they are not in the build directory."
msgstr ""

#: ../Doc/distutils/apiref.rst:1947
msgid ":mod:`distutils.command.config` --- Perform package configuration"
msgstr ""

#: ../Doc/distutils/apiref.rst:1957
msgid ":mod:`distutils.command.install` --- Install a package"
msgstr ""

#: ../Doc/distutils/apiref.rst:1967
msgid ""
":mod:`distutils.command.install_data` --- Install data files from a package"
msgstr ""

#: ../Doc/distutils/apiref.rst:1977
msgid ""
":mod:`distutils.command.install_headers` --- Install C/C++ header files from "
"a package"
msgstr ""

#: ../Doc/distutils/apiref.rst:1987
msgid ""
":mod:`distutils.command.install_lib` --- Install library files from a package"
msgstr ""

#: ../Doc/distutils/apiref.rst:1997
msgid ""
":mod:`distutils.command.install_scripts` --- Install script files from a "
"package"
msgstr ""

#: ../Doc/distutils/apiref.rst:2007
msgid ""
":mod:`distutils.command.register` --- Register a module with the Python "
"Package Index"
msgstr ""

#: ../Doc/distutils/apiref.rst:2013
msgid ""
"The ``register`` command registers the package with the Python Package  "
"Index. This is described in more detail in :pep:`301`."
msgstr ""

#: ../Doc/distutils/apiref.rst:2020
msgid ":mod:`distutils.command.check` --- Check the meta-data of a package"
msgstr ""

#: ../Doc/distutils/apiref.rst:2026
msgid ""
"The ``check`` command performs some tests on the meta-data of a package. For "
"example, it verifies that all required meta-data are provided as the "
"arguments passed to the :func:`setup` function."
msgstr ""
