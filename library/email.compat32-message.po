# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-01 00:16+0100\n"
"PO-Revision-Date: 2023-08-28 00:13+0200\n"
"Last-Translator: Christophe Nanteuil <christophe.nanteuil@gmail.com>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.4.2\n"

#: library/email.compat32-message.rst:4
msgid ""
":mod:`email.message.Message`: Representing an email message using the :data:"
"`~email.policy.compat32` API"
msgstr ""
":mod:`email.message.Message` : représentation d'un message électronique à "
"l'aide de l'API :data:`~email.policy.compat32`"

#: library/email.compat32-message.rst:13
msgid ""
"The :class:`Message` class is very similar to the :class:`~email.message."
"EmailMessage` class, without the methods added by that class, and with the "
"default behavior of certain other methods being slightly different.  We also "
"document here some methods that, while supported by the :class:`~email."
"message.EmailMessage` class, are not recommended unless you are dealing with "
"legacy code."
msgstr ""
"La classe :class:`Message` est très similaire à la classe :class:`~email."
"message.EmailMessage`, sans les méthodes ajoutées par cette classe et avec "
"le comportement par défaut légèrement différent pour certaines autres "
"méthodes. Nous documentons également ici certaines méthodes qui, bien que "
"prises en charge par la classe :class:`~email.message.EmailMessage`, ne sont "
"pas recommandées, sauf si vous avez affaire à du code hérité."

#: library/email.compat32-message.rst:20
msgid "The philosophy and structure of the two classes is otherwise the same."
msgstr ""
"La philosophie et la structure des deux classes sont par ailleurs les mêmes."

#: library/email.compat32-message.rst:22
msgid ""
"This document describes the behavior under the default (for :class:"
"`Message`) policy :attr:`~email.policy.Compat32`.  If you are going to use "
"another policy, you should be using the :class:`~email.message.EmailMessage` "
"class instead."
msgstr ""
"Ce document décrit le comportement avec les règles par défaut (pour :class:"
"`Message`) :attr:`~email.policy.Compat32`. Si vous envisagez d'utiliser "
"d'autres règles, vous devriez plutôt utiliser la classe :class:`~email."
"message.EmailMessage`."

#: library/email.compat32-message.rst:26
msgid ""
"An email message consists of *headers* and a *payload*.  Headers must be :"
"rfc:`5322` style names and values, where the field name and value are "
"separated by a colon.  The colon is not part of either the field name or the "
"field value.  The payload may be a simple text message, or a binary object, "
"or a structured sequence of sub-messages each with their own set of headers "
"and their own payload.  The latter type of payload is indicated by the "
"message having a MIME type such as :mimetype:`multipart/\\*` or :mimetype:"
"`message/rfc822`."
msgstr ""
"Un message électronique se compose d'*en-têtes* et d'une *charge utile*. Les "
"en-têtes doivent être des noms et des valeurs de style :rfc:`5322`, où le "
"nom et la valeur du champ sont séparés par deux-points. Les deux-points ne "
"font partie ni du nom du champ ni de la valeur du champ. La charge utile "
"peut être un simple message texte, ou un objet binaire, ou une séquence "
"structurée de sous-messages chacun avec son propre ensemble d'en-têtes et sa "
"propre charge utile. Ce dernier type de charge utile est indiqué par le "
"message ayant un type MIME tel que :mimetype:`multipart/\\*` ou :mimetype:"
"`message/rfc822`."

#: library/email.compat32-message.rst:35
msgid ""
"The conceptual model provided by a :class:`Message` object is that of an "
"ordered dictionary of headers with additional methods for accessing both "
"specialized information from the headers, for accessing the payload, for "
"generating a serialized version of the message, and for recursively walking "
"over the object tree.  Note that duplicate headers are supported but special "
"methods must be used to access them."
msgstr ""
"Le modèle conceptuel fourni par un objet :class:`Message` est celui d'un "
"dictionnaire ordonné d'en-têtes avec des méthodes supplémentaires pour "
"accéder à la fois aux informations spécialisées des en-têtes, pour accéder à "
"la charge utile, pour générer une version sérialisée du message et pour "
"parcourir récursivement l'arbre d'objets. Notez que les en-têtes en double "
"sont pris en charge mais que des méthodes spéciales doivent être utilisées "
"pour y accéder."

#: library/email.compat32-message.rst:42
msgid ""
"The :class:`Message` pseudo-dictionary is indexed by the header names, which "
"must be ASCII values.  The values of the dictionary are strings that are "
"supposed to contain only ASCII characters; there is some special handling "
"for non-ASCII input, but it doesn't always produce the correct results.  "
"Headers are stored and returned in case-preserving form, but field names are "
"matched case-insensitively.  There may also be a single envelope header, "
"also known as the *Unix-From* header or the ``From_`` header.  The *payload* "
"is either a string or bytes, in the case of simple message objects, or a "
"list of :class:`Message` objects, for MIME container documents (e.g. :"
"mimetype:`multipart/\\*` and :mimetype:`message/rfc822`)."
msgstr ""
"Le pseudo-dictionnaire :class:`Message` est indicé par les noms d'en-tête, "
"qui doivent être des valeurs ASCII. Les valeurs du dictionnaire sont des "
"chaînes censées contenir uniquement des caractères ASCII ; il existe une "
"gestion spéciale pour les entrées non ASCII, mais cela ne produit pas "
"toujours les résultats corrects. Les en-têtes sont stockés et renvoyés sous "
"une forme respectant la casse, mais les noms de champ sont mis en "
"correspondance sans tenir compte de la casse. Il peut également y avoir un "
"seul en-tête d'enveloppe, également appelé en-tête *Unix-From* ou en-tête "
"``From_``. La *charge utile* est soit une chaîne ou des octets, dans le cas "
"d'objets message simples, soit une liste d'objets :class:`Message`, pour les "
"documents conteneurs MIME (par exemple :mimetype:`multipart/\\*` et :"
"mimetype:`message/rfc822`)."

#: library/email.compat32-message.rst:53
msgid "Here are the methods of the :class:`Message` class:"
msgstr "Voici les méthodes de la classe :class:`Message` :"

#: library/email.compat32-message.rst:58
msgid ""
"If *policy* is specified (it must be an instance of a :mod:`~email.policy` "
"class) use the rules it specifies to update and serialize the representation "
"of the message.  If *policy* is not set, use the :class:`compat32 <email."
"policy.Compat32>` policy, which maintains backward compatibility with the "
"Python 3.2 version of the email package.  For more information see the :mod:"
"`~email.policy` documentation."
msgstr ""
"Si *policy* est spécifié (il doit s'agir d'une instance d'une classe :mod:"
"`~email.policy`), utilise les règles spécifiées pour mettre à jour et "
"sérialiser la représentation du message. Si *policy* n'est pas défini, "
"utilise les règles :class:`compat32 <email.policy.Compat32>`, qui maintient "
"la rétrocompatibilité avec la version Python 3.2 du paquet de messagerie. "
"Pour plus d'informations, consultez la documentation :mod:`~email.policy`."

# suit un :
#: library/email.compat32-message.rst:65
msgid "The *policy* keyword argument was added."
msgstr "l'argument nommé *policy* a été ajouté."

#: library/email.compat32-message.rst:70
msgid ""
"Return the entire message flattened as a string.  When optional *unixfrom* "
"is true, the envelope header is included in the returned string. *unixfrom* "
"defaults to ``False``.  For backward compatibility reasons, *maxheaderlen* "
"defaults to ``0``, so if you want a different value you must override it "
"explicitly (the value specified for *max_line_length* in the policy will be "
"ignored by this method).  The *policy* argument may be used to override the "
"default policy obtained from the message instance. This can be used to "
"control some of the formatting produced by the method, since the specified "
"*policy* will be passed to the ``Generator``."
msgstr ""
"Renvoie le message entier aplati sous forme de chaîne. Lorsque l'option "
"*unixfrom* est vraie, l'en-tête de l'enveloppe est inclus dans la chaîne "
"renvoyée. *unixfrom* par défaut est ``False``. Pour des raisons de "
"compatibilité descendante, *maxheaderlen* est par défaut à ``0``, donc si "
"vous voulez une valeur différente, vous devez la remplacer explicitement (la "
"valeur spécifiée pour *max_line_length* dans la politique sera ignorée par "
"cette méthode). L'argument *policy* peut être utilisé pour remplacer les "
"règles par défaut obtenues à partir de l'instance de message. Cela peut être "
"utilisé pour contrôler une partie du formatage produit par la méthode, "
"puisque la *policy* spécifiée est transmise au ``Generator``."

#: library/email.compat32-message.rst:80 library/email.compat32-message.rst:122
msgid ""
"Flattening the message may trigger changes to the :class:`Message` if "
"defaults need to be filled in to complete the transformation to a string "
"(for example, MIME boundaries may be generated or modified)."
msgstr ""
"L'aplatissement du message peut déclencher des changements dans :class:"
"`Message` si les valeurs par défaut doivent être renseignées pour terminer "
"la transformation en chaîne (par exemple, les limites MIME peuvent être "
"générées ou modifiées)."

#: library/email.compat32-message.rst:84
msgid ""
"Note that this method is provided as a convenience and may not always format "
"the message the way you want.  For example, by default it does not do the "
"mangling of lines that begin with ``From`` that is required by the Unix mbox "
"format.  For more flexibility, instantiate a :class:`~email.generator."
"Generator` instance and use its :meth:`~email.generator.Generator.flatten` "
"method directly.  For example::"
msgstr ""
"Notez que cette méthode est fournie à titre de commodité et peut ne pas "
"toujours formater le message comme vous le souhaitez. Par exemple, par "
"défaut, elle ne reformate pas les lignes qui commencent par ``From`` qui est "
"requis par le format *mbox* Unix. Pour plus de flexibilité, instanciez une "
"instance :class:`~email.generator.Generator` et utilisez sa méthode :meth:"
"`~email.generator.Generator.flatten` directement. Par exemple ::"

#: library/email.compat32-message.rst:98
msgid ""
"If the message object contains binary data that is not encoded according to "
"RFC standards, the non-compliant data will be replaced by unicode \"unknown "
"character\" code points.  (See also :meth:`.as_bytes` and :class:`~email."
"generator.BytesGenerator`.)"
msgstr ""
"Si l'objet message contient des données binaires qui ne sont pas encodées "
"selon les normes RFC, les données non conformes seront remplacées par des "
"points de code Unicode « caractère inconnu » (voir aussi :meth:`.as_bytes` "
"et :class:`~email.generator.BytesGenerator`)."

#: library/email.compat32-message.rst:103
msgid "the *policy* keyword argument was added."
msgstr "l'argument nommé *policy* a été ajouté."

#: library/email.compat32-message.rst:108
#, fuzzy
msgid ""
"Equivalent to :meth:`.as_string`.  Allows ``str(msg)`` to produce a string "
"containing the formatted message."
msgstr ""
"Équivalent à :meth:`.as_string()`. Permet à ``str(msg)`` de produire une "
"chaîne contenant le message formaté."

#: library/email.compat32-message.rst:114
msgid ""
"Return the entire message flattened as a bytes object.  When optional "
"*unixfrom* is true, the envelope header is included in the returned string.  "
"*unixfrom* defaults to ``False``.  The *policy* argument may be used to "
"override the default policy obtained from the message instance. This can be "
"used to control some of the formatting produced by the method, since the "
"specified *policy* will be passed to the ``BytesGenerator``."
msgstr ""
"Renvoie le message entier aplati en tant qu'objet bytes. Lorsque l'option "
"*unixfrom* est vraie, l'en-tête de l'enveloppe est inclus dans la chaîne "
"renvoyée. *unixfrom* par défaut est ``False``. L'argument *policy* peut être "
"utilisé pour remplacer les règles par défaut obtenues à partir de l'instance "
"de message. Cela peut être utilisé pour contrôler une partie du formatage "
"produit par la méthode, puisque la *policy* spécifiée est passée au "
"``BytesGenerator``."

#: library/email.compat32-message.rst:126
msgid ""
"Note that this method is provided as a convenience and may not always format "
"the message the way you want.  For example, by default it does not do the "
"mangling of lines that begin with ``From`` that is required by the Unix mbox "
"format.  For more flexibility, instantiate a :class:`~email.generator."
"BytesGenerator` instance and use its :meth:`~email.generator.BytesGenerator."
"flatten` method directly. For example::"
msgstr ""
"Notez que cette méthode est fournie à titre de commodité et peut ne pas "
"toujours formater le message comme vous le souhaitez. Par exemple, par "
"défaut, elle ne reformate pas les lignes qui commencent par ``From`` qui est "
"requis par le format *mbox* Unix. Pour plus de flexibilité, instanciez une "
"instance :class:`~email.generator.BytesGenerator` et utilisez sa méthode :"
"meth:`~email.generator.BytesGenerator.flatten` directement. Par exemple ::"

#: library/email.compat32-message.rst:146
#, fuzzy
msgid ""
"Equivalent to :meth:`.as_bytes`.  Allows ``bytes(msg)`` to produce a bytes "
"object containing the formatted message."
msgstr ""
"Équivalent à :meth:`.as_bytes()`. Permet à ``bytes(msg)`` de produire un "
"objet bytes contenant le message formaté."

#: library/email.compat32-message.rst:154
msgid ""
"Return ``True`` if the message's payload is a list of sub-\\ :class:"
"`Message` objects, otherwise return ``False``.  When :meth:`is_multipart` "
"returns ``False``, the payload should be a string object (which might be a "
"CTE encoded binary payload).  (Note that :meth:`is_multipart` returning "
"``True`` does not necessarily mean that \"msg.get_content_maintype() == "
"'multipart'\" will return the ``True``. For example, ``is_multipart`` will "
"return ``True`` when the :class:`Message` is of type ``message/rfc822``.)"
msgstr ""
"Renvoie ``True`` si la charge utile du message est une liste d'objets sous-"
"\\ :class:`Message`, sinon renvoie ``False``. Lorsque :meth:`is_multipart` "
"renvoie ``False``, la charge utile doit être un objet chaîne (qui peut être "
"une charge utile binaire encodée CTE). (Notez que :meth:`is_multipart` "
"renvoyant ``True`` ne signifie pas nécessairement que ``msg."
"get_content_maintype() == 'multipart'`` renvoie ``True``. Par exemple, "
"``is_multipart`` renvoie ``True`` lorsque le :class:`Message` est de type "
"``message/rfc822``.)"

#: library/email.compat32-message.rst:166
msgid ""
"Set the message's envelope header to *unixfrom*, which should be a string."
msgstr ""
"Définit l'en-tête de l'enveloppe du message sur *unixfrom*, qui doit être "
"une chaîne."

#: library/email.compat32-message.rst:171
msgid ""
"Return the message's envelope header.  Defaults to ``None`` if the envelope "
"header was never set."
msgstr ""
"Renvoie l'en-tête de l'enveloppe du message. La valeur par défaut est "
"``None`` si l'en-tête de l'enveloppe n'a jamais été défini."

#: library/email.compat32-message.rst:177
msgid ""
"Add the given *payload* to the current payload, which must be ``None`` or a "
"list of :class:`Message` objects before the call. After the call, the "
"payload will always be a list of :class:`Message` objects.  If you want to "
"set the payload to a scalar object (e.g. a string), use :meth:`set_payload` "
"instead."
msgstr ""
"Ajoute le *payload* donné à la charge utile actuelle, qui doit être ``None`` "
"ou une liste d'objets :class:`Message` avant l'appel. Après l'appel, la "
"charge utile sera toujours une liste d'objets :class:`Message`. Si vous "
"souhaitez définir la charge utile sur un objet scalaire (par exemple, une "
"chaîne), utilisez :meth:`set_payload` à la place."

#: library/email.compat32-message.rst:183
msgid ""
"This is a legacy method.  On the :class:`~email.emailmessage.EmailMessage` "
"class its functionality is replaced by :meth:`~email.message.EmailMessage."
"set_content` and the related ``make`` and ``add`` methods."
msgstr ""
"Il s'agit d'une ancienne méthode. Dans la classe :class:`~email.emailmessage."
"EmailMessage` sa fonctionnalité est remplacée par :meth:`~email.message."
"EmailMessage.set_content` et les méthodes associées ``make`` et ``add``."

#: library/email.compat32-message.rst:191
msgid ""
"Return the current payload, which will be a list of :class:`Message` objects "
"when :meth:`is_multipart` is ``True``, or a string when :meth:`is_multipart` "
"is ``False``.  If the payload is a list and you mutate the list object, you "
"modify the message's payload in place."
msgstr ""
"Renvoie la charge utile actuelle, qui est une liste d'objets :class:"
"`Message` lorsque :meth:`is_multipart` est ``True``, ou une chaîne lorsque :"
"meth:`is_multipart` est ``False``. Si la charge utile est une liste et que "
"vous modifiez l'objet liste, vous modifiez la charge utile du message « sur "
"place »."

#: library/email.compat32-message.rst:196
msgid ""
"With optional argument *i*, :meth:`get_payload` will return the *i*-th "
"element of the payload, counting from zero, if :meth:`is_multipart` is "
"``True``.  An :exc:`IndexError` will be raised if *i* is less than 0 or "
"greater than or equal to the number of items in the payload.  If the payload "
"is a string (i.e.  :meth:`is_multipart` is ``False``) and *i* is given, a :"
"exc:`TypeError` is raised."
msgstr ""
"Avec l'argument optionnel *i*, :meth:`get_payload` renvoie le *i*:sup:`ème` "
"élément de la charge utile, en partant de zéro, si :meth:`is_multipart` vaut "
"``True``. Une :exc:`IndexError` est levée si *i* est inférieur à 0 ou "
"supérieur ou égal au nombre d'éléments dans la charge utile. Si la charge "
"utile est une chaîne (c'est-à-dire que :meth:`is_multipart` est ``False``) "
"et que *i* est donné, une :exc:`TypeError` est levée."

#: library/email.compat32-message.rst:203
msgid ""
"Optional *decode* is a flag indicating whether the payload should be decoded "
"or not, according to the :mailheader:`Content-Transfer-Encoding` header. "
"When ``True`` and the message is not a multipart, the payload will be "
"decoded if this header's value is ``quoted-printable`` or ``base64``. If "
"some other encoding is used, or :mailheader:`Content-Transfer-Encoding` "
"header is missing, the payload is returned as-is (undecoded).  In all cases "
"the returned value is binary data.  If the message is a multipart and the "
"*decode* flag is ``True``, then ``None`` is returned.  If the payload is "
"base64 and it was not perfectly formed (missing padding, characters outside "
"the base64 alphabet), then an appropriate defect will be added to the "
"message's defect property (:class:`~email.errors.InvalidBase64PaddingDefect` "
"or :class:`~email.errors.InvalidBase64CharactersDefect`, respectively)."
msgstr ""
"*decode* est un indicateur facultatif indiquant si la charge utile doit être "
"décodée ou non, selon l'en-tête :mailheader:`Content-Transfer-Encoding`. "
"Lorsqu'il vaut ``True`` et que le message n'est pas en plusieurs parties, la "
"charge utile est décodée si la valeur de cet en-tête est ``quoted-"
"printable`` ou ``base64``. Si un autre encodage est utilisé, ou si l'en-"
"tête :mailheader:`Content-Transfer-Encoding` est manquant, la charge utile "
"est renvoyée telle quelle (non décodée). Dans tous les cas, la valeur "
"renvoyée est une donnée binaire. Si le message est en plusieurs parties et "
"que l'indicateur *decode* est ``True``, alors ``None`` est renvoyé. Si la "
"charge utile est en base64 et qu'elle n'a pas été parfaitement formée "
"(remplissage manquant, caractères en dehors de l'alphabet base64), alors un "
"défaut approprié est ajouté à la propriété de défaut du message (:class:"
"`~email.errors.InvalidBase64PaddingDefect` ou :class:`~email.errors."
"InvalidBase64CharactersDefect`, respectivement)."

#: library/email.compat32-message.rst:217
msgid ""
"When *decode* is ``False`` (the default) the body is returned as a string "
"without decoding the :mailheader:`Content-Transfer-Encoding`.  However, for "
"a :mailheader:`Content-Transfer-Encoding` of 8bit, an attempt is made to "
"decode the original bytes using the ``charset`` specified by the :mailheader:"
"`Content-Type` header, using the ``replace`` error handler. If no "
"``charset`` is specified, or if the ``charset`` given is not recognized by "
"the email package, the body is decoded using the default ASCII charset."
msgstr ""
"Lorsque *decode* est ``False`` (valeur par défaut), le corps est renvoyé "
"sous forme de chaîne sans décoder le :mailheader:`Content-Transfer-"
"Encoding`. Cependant, pour un :mailheader:`Content-Transfer-Encoding` de 8 "
"bits, une tentative est faite pour décoder les octets d'origine en utilisant "
"le ``charset`` spécifié par l'en-tête :mailheader:`Content-Type`, en "
"utilisant le gestionnaire d'erreurs ``replace``. Si aucun ``charset`` n'est "
"spécifié, ou si le ``charset`` donné n'est pas reconnu par le paquet de "
"messagerie, le corps est décodé en utilisant le jeu de caractères ASCII par "
"défaut."

#: library/email.compat32-message.rst:226
msgid ""
"This is a legacy method.  On the :class:`~email.emailmessage.EmailMessage` "
"class its functionality is replaced by :meth:`~email.message.EmailMessage."
"get_content` and :meth:`~email.message.EmailMessage.iter_parts`."
msgstr ""
"Il s'agit d'une ancienne méthode. Dans la classe :class:`~email.emailmessage."
"EmailMessage` sa fonctionnalité est remplacée par :meth:`~email.message."
"EmailMessage.get_content` et :meth:`~email.message.EmailMessage.iter_parts`."

#: library/email.compat32-message.rst:234
msgid ""
"Set the entire message object's payload to *payload*.  It is the client's "
"responsibility to ensure the payload invariants.  Optional *charset* sets "
"the message's default character set; see :meth:`set_charset` for details."
msgstr ""
"Définit la charge utile de l'objet message entier à *payload*. Il est de la "
"responsabilité du client de s'assurer des invariants de la charge utile. Le "
"*charset* facultatif définit le jeu de caractères par défaut du message ; "
"voir :meth:`set_charset` pour plus de détails."

#: library/email.compat32-message.rst:238
msgid ""
"This is a legacy method.  On the :class:`~email.emailmessage.EmailMessage` "
"class its functionality is replaced by :meth:`~email.message.EmailMessage."
"set_content`."
msgstr ""
"Il s'agit d'une ancienne méthode. Dans la classe :class:`~email.emailmessage."
"EmailMessage` sa fonctionnalité est remplacée par :meth:`~email.message."
"EmailMessage.set_content`."

#: library/email.compat32-message.rst:245
msgid ""
"Set the character set of the payload to *charset*, which can either be a :"
"class:`~email.charset.Charset` instance (see :mod:`email.charset`), a string "
"naming a character set, or ``None``.  If it is a string, it will be "
"converted to a :class:`~email.charset.Charset` instance.  If *charset* is "
"``None``, the ``charset`` parameter will be removed from the :mailheader:"
"`Content-Type` header (the message will not be otherwise modified).  "
"Anything else will generate a :exc:`TypeError`."
msgstr ""
"Définit le jeu de caractères de la charge utile à *charset*, qui peut être "
"soit une instance de :class:`~email.charset.Charset` (voir :mod:`email."
"charset`), une chaîne nommant un jeu de caractères ou ``None``. S'il s'agit "
"d'une chaîne, elle est convertie en une instance :class:`~email.charset."
"Charset`. Si *charset* est ``None``, le paramètre ``charset`` est supprimé "
"de l'en-tête :mailheader:`Content-Type` (le message n'est pas modifié "
"autrement). Tout le reste lève une :exc:`TypeError`."

#: library/email.compat32-message.rst:253
msgid ""
"If there is no existing :mailheader:`MIME-Version` header one will be "
"added.  If there is no existing :mailheader:`Content-Type` header, one will "
"be added with a value of :mimetype:`text/plain`.  Whether the :mailheader:"
"`Content-Type` header already exists or not, its ``charset`` parameter will "
"be set to *charset.output_charset*.   If *charset.input_charset* and "
"*charset.output_charset* differ, the payload will be re-encoded to the "
"*output_charset*.  If there is no existing :mailheader:`Content-Transfer-"
"Encoding` header, then the payload will be transfer-encoded, if needed, "
"using the specified :class:`~email.charset.Charset`, and a header with the "
"appropriate value will be added.  If a :mailheader:`Content-Transfer-"
"Encoding` header already exists, the payload is assumed to already be "
"correctly encoded using that :mailheader:`Content-Transfer-Encoding` and is "
"not modified."
msgstr ""
"S'il n'y a pas d'en-tête :mailheader:`MIME-Version` existant, un en-tête est "
"ajouté. S'il n'y a pas d'en-tête :mailheader:`Content-Type`, un en-tête est "
"ajouté avec une valeur de :mimetype:`text/plain`. Que l'en-tête :mailheader:"
"`Content-Type` existe déjà ou non, son paramètre ``charset`` est défini sur "
"*charset.output_charset*. Si *charset.input_charset* et *charset."
"output_charset* diffèrent, la charge utile est ré-encodée dans le "
"*output_charset*. S'il n'y a pas d'en-tête :mailheader:`Content-Transfer-"
"Encoding` existant, alors la charge utile est encodée par transfert, si "
"nécessaire, en utilisant le :class:`~email.charset.Charset` spécifié et un "
"en-tête avec cette valeur est ajouté. Si un en-tête :mailheader:`Content-"
"Transfer-Encoding` existe déjà, la charge utile est supposée être déjà "
"correctement encodée à l'aide de cet en-tête :mailheader:`Content-Transfer-"
"Encoding` et n'est pas modifiée."

#: library/email.compat32-message.rst:267
msgid ""
"This is a legacy method.  On the :class:`~email.emailmessage.EmailMessage` "
"class its functionality is replaced by the *charset* parameter of the :meth:"
"`email.emailmessage.EmailMessage.set_content` method."
msgstr ""
"Il s'agit d'une ancienne méthode. Dans la classe :class:`~email.emailmessage."
"EmailMessage` sa fonctionnalité est remplacée par le paramètre *charset* de "
"la méthode :meth:`email.emailmessage.EmailMessage.set_content`."

#: library/email.compat32-message.rst:275
msgid ""
"Return the :class:`~email.charset.Charset` instance associated with the "
"message's payload."
msgstr ""
"Renvoie l'instance :class:`~email.charset.Charset` associée à la charge "
"utile du message."

#: library/email.compat32-message.rst:278
msgid ""
"This is a legacy method.  On the :class:`~email.emailmessage.EmailMessage` "
"class it always returns ``None``."
msgstr ""
"Il s'agit d'une ancienne méthode. Dans la classe :class:`~email.emailmessage."
"EmailMessage`, elle renvoie toujours ``None``."

#: library/email.compat32-message.rst:283
msgid ""
"The following methods implement a mapping-like interface for accessing the "
"message's :rfc:`2822` headers.  Note that there are some semantic "
"differences between these methods and a normal mapping (i.e. dictionary) "
"interface.  For example, in a dictionary there are no duplicate keys, but "
"here there may be duplicate message headers.  Also, in dictionaries there is "
"no guaranteed order to the keys returned by :meth:`keys`, but in a :class:"
"`Message` object, headers are always returned in the order they appeared in "
"the original message, or were added to the message later.  Any header "
"deleted and then re-added are always appended to the end of the header list."
msgstr ""
"Les méthodes suivantes implémentent une interface de type correspondance "
"pour accéder aux en-têtes :rfc:`2822` du message. Notez qu'il existe des "
"différences sémantiques entre ces méthodes et une interface de "
"correspondance normale (c'est-à-dire un dictionnaire). Par exemple, dans un "
"dictionnaire, il n'y a pas de clés en double, mais ici, il peut y avoir des "
"en-têtes de message en double. De plus, dans les dictionnaires, il n'y a pas "
"d'ordre garanti pour les clés renvoyées par :meth:`keys`, mais dans un "
"objet :class:`Message`, les en-têtes sont toujours renvoyés dans l'ordre "
"dans lequel ils sont apparus dans le message d'origine, ou ont été ajoutés "
"au message plus tard. Tout en-tête supprimé puis rajouté est toujours ajouté "
"à la fin de la liste des en-têtes."

#: library/email.compat32-message.rst:293
msgid ""
"These semantic differences are intentional and are biased toward maximal "
"convenience."
msgstr ""
"Ces différences sémantiques sont intentionnelles et visent une commodité "
"maximale."

#: library/email.compat32-message.rst:296
msgid ""
"Note that in all cases, any envelope header present in the message is not "
"included in the mapping interface."
msgstr ""
"Notez que dans tous les cas, tout en-tête d'enveloppe présent dans le "
"message n'est pas inclus dans l'interface de correspondance."

#: library/email.compat32-message.rst:299
msgid ""
"In a model generated from bytes, any header values that (in contravention of "
"the RFCs) contain non-ASCII bytes will, when retrieved through this "
"interface, be represented as :class:`~email.header.Header` objects with a "
"charset of ``unknown-8bit``."
msgstr ""
"Dans un modèle généré à partir d'octets, toutes les valeurs d'en-tête qui "
"(en violation des RFC) contiennent des octets non-ASCII sont, lorsqu'elles "
"sont récupérées via cette interface, représentées comme des objets :class:"
"`~email.header.Header` avec un *charset* à ``unknown-8bit``."

#: library/email.compat32-message.rst:307
msgid "Return the total number of headers, including duplicates."
msgstr "Renvoie le nombre total d'en-têtes, y compris les doublons."

#: library/email.compat32-message.rst:312
msgid ""
"Return ``True`` if the message object has a field named *name*. Matching is "
"done case-insensitively and *name* should not include the trailing colon. "
"Used for the ``in`` operator, e.g.::"
msgstr ""
"Renvoie ``True`` si l'objet message a un champ nommé *name*. La "
"correspondance est insensible à la casse et *name* ne doit pas inclure les "
"deux-points à la fin. Utilisé pour l'opérateur ``in``, par exemple ::"

#: library/email.compat32-message.rst:322
msgid ""
"Return the value of the named header field.  *name* should not include the "
"colon field separator.  If the header is missing, ``None`` is returned; a :"
"exc:`KeyError` is never raised."
msgstr ""
"Renvoie la valeur du champ d'en-tête désigné. *name* ne doit pas inclure le "
"séparateur de champ deux-points. Si l'en-tête est manquant, ``None`` est "
"renvoyé ; :exc:`KeyError` n'est jamais levée."

#: library/email.compat32-message.rst:326
msgid ""
"Note that if the named field appears more than once in the message's "
"headers, exactly which of those field values will be returned is undefined.  "
"Use the :meth:`get_all` method to get the values of all the extant named "
"headers."
msgstr ""
"Notez que si le champ désigné apparaît plus d'une fois dans les en-têtes du "
"message, la valeur exacte renvoyée n'est pas définie. Utilisez la méthode :"
"meth:`get_all` pour obtenir les valeurs de tous les en-têtes existants."

#: library/email.compat32-message.rst:334
msgid ""
"Add a header to the message with field name *name* and value *val*.  The "
"field is appended to the end of the message's existing fields."
msgstr ""
"Ajoute un en-tête au message avec le nom de champ *name* et la valeur *val*. "
"Le champ est ajouté à la fin des champs existants du message."

#: library/email.compat32-message.rst:337
msgid ""
"Note that this does *not* overwrite or delete any existing header with the "
"same name.  If you want to ensure that the new header is the only one "
"present in the message with field name *name*, delete the field first, e.g.::"
msgstr ""
"Notez que cela n'écrase *pas* ou ne supprime aucun en-tête existant portant "
"le même nom. Si vous voulez vous assurer que le nouvel en-tête est le seul "
"présent dans le message avec le nom de champ *name*, supprimez d'abord le "
"champ, par exemple ::"

#: library/email.compat32-message.rst:347
msgid ""
"Delete all occurrences of the field with name *name* from the message's "
"headers.  No exception is raised if the named field isn't present in the "
"headers."
msgstr ""
"Supprime toutes les occurrences du champ portant le nom *name* des en-têtes "
"du message. Aucune exception n'est levée si le champ désigné n'est pas "
"présent dans les en-têtes."

#: library/email.compat32-message.rst:354
msgid "Return a list of all the message's header field names."
msgstr "Renvoie une liste de tous les noms de champs d'en-tête du message."

#: library/email.compat32-message.rst:359
msgid "Return a list of all the message's field values."
msgstr "Renvoie une liste de toutes les valeurs de champ du message."

#: library/email.compat32-message.rst:364
msgid ""
"Return a list of 2-tuples containing all the message's field headers and "
"values."
msgstr ""
"Renvoie une liste de couples contenant tous les en-têtes et valeurs de "
"champs associées du message."

#: library/email.compat32-message.rst:370
#, fuzzy
msgid ""
"Return the value of the named header field.  This is identical to :meth:"
"`~object.__getitem__` except that optional *failobj* is returned if the "
"named header is missing (defaults to ``None``)."
msgstr ""
"Renvoie la valeur du champ d'en-tête désigné. C'est identique à :meth:"
"`__getitem__` sauf que *failobj* est renvoyé si l'en-tête désigné est "
"manquant (facultatif, par défaut à ``None``)."

#: library/email.compat32-message.rst:374
msgid "Here are some additional useful methods:"
msgstr "Voici quelques méthodes supplémentaires utiles :"

#: library/email.compat32-message.rst:379
msgid ""
"Return a list of all the values for the field named *name*. If there are no "
"such named headers in the message, *failobj* is returned (defaults to "
"``None``)."
msgstr ""
"Renvoie la liste de toutes les valeurs du champ nommé *name*. S'il n'y a pas "
"d'en-têtes de ce nom dans le message, *failobj* est renvoyé (la valeur par "
"défaut est ``None``)."

#: library/email.compat32-message.rst:386
msgid ""
"Extended header setting.  This method is similar to :meth:`__setitem__` "
"except that additional header parameters can be provided as keyword "
"arguments.  *_name* is the header field to add and *_value* is the *primary* "
"value for the header."
msgstr ""
"Définition de paramètres d'en-têtes étendus. Cette méthode est similaire à :"
"meth:`__setitem__` sauf que des paramètres d'en-tête supplémentaires peuvent "
"être fournis en tant qu'arguments nommés. *_name* est le champ d'en-tête à "
"ajouter et *_value* est la valeur *primaire* de l'en-tête."

#: library/email.compat32-message.rst:391
msgid ""
"For each item in the keyword argument dictionary *_params*, the key is taken "
"as the parameter name, with underscores converted to dashes (since dashes "
"are illegal in Python identifiers).  Normally, the parameter will be added "
"as ``key=\"value\"`` unless the value is ``None``, in which case only the "
"key will be added.  If the value contains non-ASCII characters, it can be "
"specified as a three tuple in the format ``(CHARSET, LANGUAGE, VALUE)``, "
"where ``CHARSET`` is a string naming the charset to be used to encode the "
"value, ``LANGUAGE`` can usually be set to ``None`` or the empty string (see :"
"rfc:`2231` for other possibilities), and ``VALUE`` is the string value "
"containing non-ASCII code points.  If a three tuple is not passed and the "
"value contains non-ASCII characters, it is automatically encoded in :rfc:"
"`2231` format using a ``CHARSET`` of ``utf-8`` and a ``LANGUAGE`` of "
"``None``."
msgstr ""
"Pour chaque élément du dictionnaire d'arguments nommés *_params*, la clé est "
"prise comme nom de paramètre, avec des traits de soulignement convertis en "
"tirets (puisque les tirets sont illégaux dans les identifiants Python). "
"Normalement, le paramètre est ajouté en tant que ``key=\"value\"`` sauf si "
"la valeur est ``None``, auquel cas seule la clé est ajoutée. Si la valeur "
"contient des caractères non-ASCII, elle peut être spécifiée sous la forme "
"d'un triplet au format ``(CHARSET, LANGUAGE, VALUE)``, où ``CHARSET`` est "
"une chaîne nommant le jeu de caractères à utiliser pour coder la valeur, "
"``LANGUAGE`` peut généralement être défini sur ``None`` ou la chaîne vide "
"(voir la :rfc:`2231` pour d'autres possibilités), et ``VALUE`` est la valeur "
"de chaîne contenant des points de code non-ASCII. Si un triplet n'est pas "
"passé et que la valeur contient des caractères non-ASCII, elle est "
"automatiquement encodée au format :rfc:`2231` en utilisant un ``CHARSET`` à "
"``utf-8`` et un ``LANGUAGE`` à ``None``."

#: library/email.compat32-message.rst:405
msgid "Here's an example::"
msgstr "Voici un exemple ::"

#: library/email.compat32-message.rst:409
msgid "This will add a header that looks like ::"
msgstr "Cela ajoute un en-tête qui ressemble à ::"

#: library/email.compat32-message.rst:413
msgid "An example with non-ASCII characters::"
msgstr "Un exemple avec des caractères non-ASCII ::"

#: library/email.compat32-message.rst:418
msgid "Which produces ::"
msgstr "qui produit ::"

#: library/email.compat32-message.rst:425
msgid ""
"Replace a header.  Replace the first header found in the message that "
"matches *_name*, retaining header order and field name case.  If no matching "
"header was found, a :exc:`KeyError` is raised."
msgstr ""
"Remplace un en-tête. Remplace le premier en-tête trouvé dans le message qui "
"correspond à *_name*, en conservant l'ordre des en-têtes et la casse des "
"noms de champs. Si aucun en-tête correspondant n'a été trouvé, une :exc:"
"`KeyError` est levée."

#: library/email.compat32-message.rst:432
msgid ""
"Return the message's content type.  The returned string is coerced to lower "
"case of the form :mimetype:`maintype/subtype`.  If there was no :mailheader:"
"`Content-Type` header in the message the default type as given by :meth:"
"`get_default_type` will be returned.  Since according to :rfc:`2045`, "
"messages always have a default type, :meth:`get_content_type` will always "
"return a value."
msgstr ""
"Renvoie le type de contenu du message. La chaîne renvoyée est convertie en "
"minuscules sous la forme :mimetype:`maintype/subtype`. S'il n'y avait pas "
"d'en-tête :mailheader:`Content-Type` dans le message, le type par défaut tel "
"qu'indiqué par :meth:`get_default_type` est renvoyé. Puisque selon la :rfc:"
"`2045`, les messages ont toujours un type par défaut, :meth:"
"`get_content_type` renvoie toujours une valeur."

#: library/email.compat32-message.rst:439
msgid ""
":rfc:`2045` defines a message's default type to be :mimetype:`text/plain` "
"unless it appears inside a :mimetype:`multipart/digest` container, in which "
"case it would be :mimetype:`message/rfc822`.  If the :mailheader:`Content-"
"Type` header has an invalid type specification, :rfc:`2045` mandates that "
"the default type be :mimetype:`text/plain`."
msgstr ""
"La :rfc:`2045` définit le type par défaut d'un message comme étant :mimetype:"
"`text/plain` sauf s'il apparaît dans un conteneur :mimetype:`multipart/"
"digest`, auquel cas ce serait :mimetype:`message/rfc822`. Si l'en-tête :"
"mailheader:`Content-Type` a une spécification de type invalide, la :rfc:"
"`2045` exige que le type par défaut soit :mimetype:`text/plain`."

#: library/email.compat32-message.rst:448
msgid ""
"Return the message's main content type.  This is the :mimetype:`maintype` "
"part of the string returned by :meth:`get_content_type`."
msgstr ""
"Renvoie le type de contenu principal du message. C'est la partie :mimetype:"
"`maintype` de la chaîne renvoyée par :meth:`get_content_type`."

#: library/email.compat32-message.rst:454
msgid ""
"Return the message's sub-content type.  This is the :mimetype:`subtype` part "
"of the string returned by :meth:`get_content_type`."
msgstr ""
"Renvoie le type de sous-contenu du message. C'est la partie :mimetype:"
"`subtype` de la chaîne renvoyée par :meth:`get_content_type`."

#: library/email.compat32-message.rst:460
msgid ""
"Return the default content type.  Most messages have a default content type "
"of :mimetype:`text/plain`, except for messages that are subparts of :"
"mimetype:`multipart/digest` containers.  Such subparts have a default "
"content type of :mimetype:`message/rfc822`."
msgstr ""
"Renvoie le type de contenu par défaut. La plupart des messages ont un type "
"de contenu par défaut de :mimetype:`text/plain`, à l'exception des messages "
"qui sont des sous-parties des conteneurs :mimetype:`multipart/digest`. Ces "
"sous-parties ont un type de contenu par défaut de :mimetype:`message/rfc822`."

#: library/email.compat32-message.rst:468
msgid ""
"Set the default content type.  *ctype* should either be :mimetype:`text/"
"plain` or :mimetype:`message/rfc822`, although this is not enforced.  The "
"default content type is not stored in the :mailheader:`Content-Type` header."
msgstr ""
"Définit le type de contenu par défaut. *ctype* doit être :mimetype:`text/"
"plain` ou :mimetype:`message/rfc822`, bien que cela ne soit pas appliqué. Le "
"type de contenu par défaut n'est pas stocké dans l'en-tête :mailheader:"
"`Content-Type`."

#: library/email.compat32-message.rst:476
msgid ""
"Return the message's :mailheader:`Content-Type` parameters, as a list. The "
"elements of the returned list are 2-tuples of key/value pairs, as split on "
"the ``'='`` sign.  The left hand side of the ``'='`` is the key, while the "
"right hand side is the value.  If there is no ``'='`` sign in the parameter "
"the value is the empty string, otherwise the value is as described in :meth:"
"`get_param` and is unquoted if optional *unquote* is ``True`` (the default)."
msgstr ""
"Renvoie les paramètres :mailheader:`Content-Type` du message, sous forme de "
"liste. Les éléments de la liste renvoyée sont des couples clé-valeur, ayant "
"été séparés sur le signe ``'='``. Le côté gauche du ``'='`` est la clé, "
"tandis que le côté droit est la valeur. S'il n'y a pas de signe ``'='`` dans "
"le paramètre, la valeur est la chaîne vide, sinon la valeur est telle que "
"décrite dans :meth:`get_param` et n'est pas entre guillemets si l'option "
"*unquote* est ``True`` (la valeur par défaut)."

#: library/email.compat32-message.rst:484
msgid ""
"Optional *failobj* is the object to return if there is no :mailheader:"
"`Content-Type` header.  Optional *header* is the header to search instead "
"of :mailheader:`Content-Type`."
msgstr ""
"*failobj* (facultatif) est l'objet à renvoyer s'il n'y a pas d'en-tête :"
"mailheader:`Content-Type`. *header* (facultatif) est l'en-tête à rechercher "
"au lieu de :mailheader:`Content-Type`."

#: library/email.compat32-message.rst:488
#: library/email.compat32-message.rst:526
msgid ""
"This is a legacy method.  On the :class:`~email.emailmessage.EmailMessage` "
"class its functionality is replaced by the *params* property of the "
"individual header objects returned by the header access methods."
msgstr ""
"Il s'agit d'une ancienne méthode. Dans la classe :class:`~email.emailmessage."
"EmailMessage`, sa fonctionnalité est remplacée par la propriété *params* des "
"objets d'en-tête individuels renvoyés par les méthodes d'accès aux en-têtes."

#: library/email.compat32-message.rst:496
msgid ""
"Return the value of the :mailheader:`Content-Type` header's parameter "
"*param* as a string.  If the message has no :mailheader:`Content-Type` "
"header or if there is no such parameter, then *failobj* is returned "
"(defaults to ``None``)."
msgstr ""
"Renvoie la valeur du paramètre *param* de l'en-tête :mailheader:`Content-"
"Type` sous forme de chaîne. Si le message n'a pas d'en-tête :mailheader:"
"`Content-Type` ou s'il n'y a pas un tel paramètre, alors *failobj* est "
"renvoyé (par défaut à ``None``)."

#: library/email.compat32-message.rst:501
msgid ""
"Optional *header* if given, specifies the message header to use instead of :"
"mailheader:`Content-Type`."
msgstr ""
"*header* s'il est fourni, spécifie l'en-tête de message à utiliser à la "
"place de :mailheader:`Content-Type`."

#: library/email.compat32-message.rst:504
msgid ""
"Parameter keys are always compared case insensitively.  The return value can "
"either be a string, or a 3-tuple if the parameter was :rfc:`2231` encoded.  "
"When it's a 3-tuple, the elements of the value are of the form ``(CHARSET, "
"LANGUAGE, VALUE)``.  Note that both ``CHARSET`` and ``LANGUAGE`` can be "
"``None``, in which case you should consider ``VALUE`` to be encoded in the "
"``us-ascii`` charset.  You can usually ignore ``LANGUAGE``."
msgstr ""
"Les clés en paramètre sont toujours comparées sans tenir compte de la casse. "
"La valeur de retour peut être soit une chaîne, soit un triplet si le "
"paramètre a été encodé selon la :rfc:`2231`. Lorsqu'il s'agit d'un triplet, "
"les éléments de la valeur sont de la forme ``(CHARSET, LANGUAGE, VALUE)``. "
"Notez que ``CHARSET`` et ``LANGUAGE`` peuvent être ``None``, vous devriez "
"alors considérer que ``VALUE`` est encodé dans le jeu de caractères ``us-"
"ascii``. Vous pouvez généralement ignorer ``LANGUAGE``."

#: library/email.compat32-message.rst:512
msgid ""
"If your application doesn't care whether the parameter was encoded as in :"
"rfc:`2231`, you can collapse the parameter value by calling :func:`email."
"utils.collapse_rfc2231_value`, passing in the return value from :meth:"
"`get_param`.  This will return a suitably decoded Unicode string when the "
"value is a tuple, or the original string unquoted if it isn't.  For example::"
msgstr ""
"Si votre application ne se soucie pas de savoir si le paramètre a été encodé "
"conformément à la :rfc:`2231`, vous pouvez réduire la valeur du paramètre en "
"appelant :func:`email.utils.collapse_rfc2231_value`, en transmettant la "
"valeur de retour de :meth:`get_param`. Cela renverra une chaîne Unicode "
"convenablement décodée lorsque la valeur est un *n*-uplet, ou la chaîne "
"d'origine sans guillemets si ce n'est pas le cas. Par exemple ::"

#: library/email.compat32-message.rst:522
msgid ""
"In any case, the parameter value (either the returned string, or the "
"``VALUE`` item in the 3-tuple) is always unquoted, unless *unquote* is set "
"to ``False``."
msgstr ""
"Dans tous les cas, la valeur du paramètre (soit la chaîne renvoyée, soit "
"l'élément ``VALUE`` dans le triplet) est toujours sans guillemets, sauf si "
"*unquote* est défini sur ``False``."

#: library/email.compat32-message.rst:535
msgid ""
"Set a parameter in the :mailheader:`Content-Type` header.  If the parameter "
"already exists in the header, its value will be replaced with *value*.  If "
"the :mailheader:`Content-Type` header as not yet been defined for this "
"message, it will be set to :mimetype:`text/plain` and the new parameter "
"value will be appended as per :rfc:`2045`."
msgstr ""
"Définit un paramètre dans l'en-tête :mailheader:`Content-Type`. Si le "
"paramètre existe déjà dans l'en-tête, sa valeur est remplacée par *value*. "
"Si l'en-tête :mailheader:`Content-Type` n'a pas encore été défini pour ce "
"message, il est défini à :mimetype:`text/plain` et la nouvelle valeur du "
"paramètre est ajoutée conformément à la :rfc:`2045`."

#: library/email.compat32-message.rst:541
msgid ""
"Optional *header* specifies an alternative header to :mailheader:`Content-"
"Type`, and all parameters will be quoted as necessary unless optional "
"*requote* is ``False`` (the default is ``True``)."
msgstr ""
"L'option *header* spécifie un en-tête alternatif à :mailheader:`Content-"
"Type`, et tous les paramètres seront entre guillemets si nécessaire sauf si "
"l'option *requote* est ``False`` (la valeur par défaut est ``True``)."

#: library/email.compat32-message.rst:545
msgid ""
"If optional *charset* is specified, the parameter will be encoded according "
"to :rfc:`2231`. Optional *language* specifies the RFC 2231 language, "
"defaulting to the empty string.  Both *charset* and *language* should be "
"strings."
msgstr ""
"Si *charset* est spécifié, le paramètre est encodé selon la :rfc:`2231`. "
"*language* (facultatif) spécifie la langue RFC 2231, par défaut c'est la "
"chaîne vide. *charset* et *language* doivent être des chaînes."

#: library/email.compat32-message.rst:550
msgid ""
"If *replace* is ``False`` (the default) the header is moved to the end of "
"the list of headers.  If *replace* is ``True``, the header will be updated "
"in place."
msgstr ""
"Si *replace* est ``False`` (valeur par défaut), l'en-tête est déplacé à la "
"fin de la liste des en-têtes. Si *replace* est ``True``, l'en-tête est mis à "
"jour « sur place »."

# suit un :
#: library/email.compat32-message.rst:554
msgid "``replace`` keyword was added."
msgstr "l'argument nommé ``replace`` a été ajouté."

#: library/email.compat32-message.rst:559
msgid ""
"Remove the given parameter completely from the :mailheader:`Content-Type` "
"header.  The header will be re-written in place without the parameter or its "
"value.  All values will be quoted as necessary unless *requote* is ``False`` "
"(the default is ``True``).  Optional *header* specifies an alternative to :"
"mailheader:`Content-Type`."
msgstr ""
"Supprime complètement le paramètre donné de l'en-tête :mailheader:`Content-"
"Type`. L'en-tête est réécrit « sur place » sans le paramètre ou sa valeur. "
"Toutes les valeurs seront entre guillemets si nécessaire sauf si *requote* "
"est ``False`` (la valeur par défaut est ``True``). L'option *header* "
"spécifie une alternative à :mailheader:`Content-Type`."

#: library/email.compat32-message.rst:568
msgid ""
"Set the main type and subtype for the :mailheader:`Content-Type` header. "
"*type* must be a string in the form :mimetype:`maintype/subtype`, otherwise "
"a :exc:`ValueError` is raised."
msgstr ""
"Définit le type principal et le sous-type de l'en-tête :mailheader:`Content-"
"Type`. *type* doit être une chaîne sous la forme :mimetype:`maintype/"
"subtype`, sinon une :exc:`ValueError` est levée."

#: library/email.compat32-message.rst:572
msgid ""
"This method replaces the :mailheader:`Content-Type` header, keeping all the "
"parameters in place.  If *requote* is ``False``, this leaves the existing "
"header's quoting as is, otherwise the parameters will be quoted (the "
"default)."
msgstr ""
"Cette méthode remplace l'en-tête :mailheader:`Content-Type`, en gardant tous "
"les paramètres en place. Si *requote* est ``False``, cela laisse les "
"guillemets de l'en-tête existant tels quels, sinon les paramètres sont mis "
"entre guillemets (par défaut)."

#: library/email.compat32-message.rst:577
msgid ""
"An alternative header can be specified in the *header* argument. When the :"
"mailheader:`Content-Type` header is set a :mailheader:`MIME-Version` header "
"is also added."
msgstr ""
"Un en-tête alternatif peut être spécifié dans l'argument *header*. Lorsque "
"l'en-tête :mailheader:`Content-Type` est défini, un en-tête :mailheader:"
"`MIME-Version` est également ajouté."

#: library/email.compat32-message.rst:581
msgid ""
"This is a legacy method.  On the :class:`~email.emailmessage.EmailMessage` "
"class its functionality is replaced by the ``make_`` and ``add_`` methods."
msgstr ""
"Il s'agit d'une ancienne méthode. Dans la classe :class:`~email.emailmessage."
"EmailMessage` sa fonctionnalité est remplacée par les méthodes ``make_`` et "
"``add_``."

#: library/email.compat32-message.rst:588
msgid ""
"Return the value of the ``filename`` parameter of the :mailheader:`Content-"
"Disposition` header of the message.  If the header does not have a "
"``filename`` parameter, this method falls back to looking for the ``name`` "
"parameter on the :mailheader:`Content-Type` header.  If neither is found, or "
"the header is missing, then *failobj* is returned. The returned string will "
"always be unquoted as per :func:`email.utils.unquote`."
msgstr ""
"Renvoie la valeur du paramètre ``filename`` de l'en-tête :mailheader:"
"`Content-Disposition` du message. Si l'en-tête n'a pas de paramètre "
"``filename``, cette méthode revient à rechercher le paramètre ``name`` dans "
"l'en-tête :mailheader:`Content-Type`. Si aucun n'est trouvé, ou si l'en-tête "
"est manquant, alors *failobj* est renvoyé. La chaîne renvoyée est toujours "
"sans guillemets comme indiqué par :func:`email.utils.unquote`."

#: library/email.compat32-message.rst:599
msgid ""
"Return the value of the ``boundary`` parameter of the :mailheader:`Content-"
"Type` header of the message, or *failobj* if either the header is missing, "
"or has no ``boundary`` parameter.  The returned string will always be "
"unquoted as per :func:`email.utils.unquote`."
msgstr ""
"Renvoie la valeur du paramètre ``boundary`` de l'en-tête :mailheader:"
"`Content-Type` du message, ou *failobj* si l'en-tête est manquant ou n'a pas "
"de paramètre ``boundary``. La chaîne renvoyée est toujours sans guillemets "
"comme indiqué par :func:`email.utils.unquote`."

#: library/email.compat32-message.rst:607
msgid ""
"Set the ``boundary`` parameter of the :mailheader:`Content-Type` header to "
"*boundary*.  :meth:`set_boundary` will always quote *boundary* if "
"necessary.  A :exc:`~email.errors.HeaderParseError` is raised if the message "
"object has no :mailheader:`Content-Type` header."
msgstr ""
"Définit le paramètre ``boundary`` de l'en-tête :mailheader:`Content-Type` "
"sur *boundary*. :meth:`set_boundary` met toujours *boundary* entre "
"guillemets si nécessaire. Une :exc:`~email.errors.HeaderParseError` est "
"levée si l'objet message n'a pas d'en-tête :mailheader:`Content-Type`."

#: library/email.compat32-message.rst:612
msgid ""
"Note that using this method is subtly different than deleting the old :"
"mailheader:`Content-Type` header and adding a new one with the new boundary "
"via :meth:`add_header`, because :meth:`set_boundary` preserves the order of "
"the :mailheader:`Content-Type` header in the list of headers. However, it "
"does *not* preserve any continuation lines which may have been present in "
"the original :mailheader:`Content-Type` header."
msgstr ""
"Notez que l'utilisation de cette méthode est légèrement différente de la "
"suppression de l'ancien en-tête :mailheader:`Content-Type` et de l'ajout "
"d'un nouveau avec la nouvelle limite via :meth:`add_header`, car :meth:"
"`set_boundary` préserve l'ordre des en-têtes :mailheader:`Content-Type` dans "
"la liste des en-têtes. Cependant, elle ne conserve *pas* les lignes de "
"continuation qui auraient pu être présentes dans l'en-tête original :"
"mailheader:`Content-Type`."

#: library/email.compat32-message.rst:622
msgid ""
"Return the ``charset`` parameter of the :mailheader:`Content-Type` header, "
"coerced to lower case.  If there is no :mailheader:`Content-Type` header, or "
"if that header has no ``charset`` parameter, *failobj* is returned."
msgstr ""
"Renvoie le paramètre ``charset`` de l'en-tête :mailheader:`Content-Type`, "
"mis en minuscules. S'il n'y a pas d'en-tête :mailheader:`Content-Type`, ou "
"si cet en-tête n'a pas de paramètre ``charset``, *failobj* est renvoyé."

#: library/email.compat32-message.rst:626
msgid ""
"Note that this method differs from :meth:`get_charset` which returns the :"
"class:`~email.charset.Charset` instance for the default encoding of the "
"message body."
msgstr ""
"Notez que cette méthode diffère de :meth:`get_charset` qui renvoie "
"l'instance :class:`~email.charset.Charset` avec l'encodage par défaut du "
"corps du message."

#: library/email.compat32-message.rst:632
msgid ""
"Return a list containing the character set names in the message.  If the "
"message is a :mimetype:`multipart`, then the list will contain one element "
"for each subpart in the payload, otherwise, it will be a list of length 1."
msgstr ""
"Renvoie une liste contenant les noms des jeux de caractères dans le message. "
"Si le message est un :mimetype:`multipart`, alors la liste contient un "
"élément pour chaque sous-partie dans la charge utile, sinon, c'est une liste "
"de longueur 1."

#: library/email.compat32-message.rst:636
msgid ""
"Each item in the list will be a string which is the value of the ``charset`` "
"parameter in the :mailheader:`Content-Type` header for the represented "
"subpart.  However, if the subpart has no :mailheader:`Content-Type` header, "
"no ``charset`` parameter, or is not of the :mimetype:`text` main MIME type, "
"then that item in the returned list will be *failobj*."
msgstr ""
"Chaque élément de la liste est une chaîne qui est la valeur du paramètre "
"``charset`` dans l'en-tête :mailheader:`Content-Type` pour la sous-partie "
"représentée. Cependant, si la sous-partie n'a pas d'en-tête :mailheader:"
"`Content-Type`, pas de paramètre ``charset``, ou n'est pas du type MIME "
"principal :mimetype:`text`, alors cet élément dans la liste renvoyée est "
"*failobj*."

#: library/email.compat32-message.rst:646
msgid ""
"Return the lowercased value (without parameters) of the message's :"
"mailheader:`Content-Disposition` header if it has one, or ``None``.  The "
"possible values for this method are *inline*, *attachment* or ``None`` if "
"the message follows :rfc:`2183`."
msgstr ""
"Renvoie la valeur en minuscules (sans paramètres) de l'en-tête :mailheader:"
"`Content-Disposition` du message s'il en a un, ou ``None``. Les valeurs "
"possibles pour cette méthode sont *inline*, *attachment* ou ``None`` si le "
"message suit la :rfc:`2183`."

#: library/email.compat32-message.rst:655
msgid ""
"The :meth:`walk` method is an all-purpose generator which can be used to "
"iterate over all the parts and subparts of a message object tree, in depth-"
"first traversal order.  You will typically use :meth:`walk` as the iterator "
"in a ``for`` loop; each iteration returns the next subpart."
msgstr ""
"La méthode :meth:`walk` est un générateur polyvalent qui peut être utilisé "
"pour itérer sur toutes les parties et sous-parties d'une arborescence "
"d'objets de message, dans l'ordre de parcours en profondeur d'abord. Vous "
"utiliserez généralement :meth:`walk` comme itérateur dans une boucle "
"``for`` ; chaque itération renvoie la sous-partie suivante."

#: library/email.compat32-message.rst:660
msgid ""
"Here's an example that prints the MIME type of every part of a multipart "
"message structure:"
msgstr ""
"Voici un exemple qui imprime le type MIME de chaque partie d'une structure "
"de message en plusieurs parties :"

#: library/email.compat32-message.rst:686
msgid ""
"``walk`` iterates over the subparts of any part where :meth:`is_multipart` "
"returns ``True``, even though ``msg.get_content_maintype() == 'multipart'`` "
"may return ``False``.  We can see this in our example by making use of the "
"``_structure`` debug helper function:"
msgstr ""
"``walk`` itère sur les sous-parties de toute partie où :meth:`is_multipart` "
"renvoie ``True``, même si ``msg.get_content_maintype() == 'multipart'`` peut "
"renvoyer ``False``. Nous pouvons le voir dans notre exemple en utilisant la "
"fonction d'aide au débogage ``_structure`` :"

#: library/email.compat32-message.rst:713
msgid ""
"Here the ``message`` parts are not ``multiparts``, but they do contain "
"subparts. ``is_multipart()`` returns ``True`` and ``walk`` descends into the "
"subparts."
msgstr ""
"Ici, les parties ``message`` ne sont pas des ``multiparts``, mais elles "
"contiennent des sous-parties. ``is_multipart()`` renvoie ``True`` et "
"``walk`` descend dans les sous-parties."

#: library/email.compat32-message.rst:718
msgid ""
":class:`Message` objects can also optionally contain two instance "
"attributes, which can be used when generating the plain text of a MIME "
"message."
msgstr ""
"Les objets :class:`Message` peuvent aussi éventuellement contenir deux "
"attributs d'instance, qui peuvent être utilisés lors de la génération du "
"texte brut d'un message MIME."

#: library/email.compat32-message.rst:724
msgid ""
"The format of a MIME document allows for some text between the blank line "
"following the headers, and the first multipart boundary string. Normally, "
"this text is never visible in a MIME-aware mail reader because it falls "
"outside the standard MIME armor.  However, when viewing the raw text of the "
"message, or when viewing the message in a non-MIME aware reader, this text "
"can become visible."
msgstr ""
"Le format d'un document MIME permet d'insérer du texte entre la ligne vide "
"suivant les en-têtes et la première chaîne de délimitation en plusieurs "
"parties. Normalement, ce texte n'est jamais visible dans un lecteur de "
"courrier compatible MIME car il ne fait pas partie du cadre MIME standard. "
"Toutefois, lors de l'affichage du texte brut du message ou lors de "
"l'affichage du message dans un lecteur non compatible MIME, ce texte peut "
"devenir visible."

#: library/email.compat32-message.rst:731
msgid ""
"The *preamble* attribute contains this leading extra-armor text for MIME "
"documents.  When the :class:`~email.parser.Parser` discovers some text after "
"the headers but before the first boundary string, it assigns this text to "
"the message's *preamble* attribute.  When the :class:`~email.generator."
"Generator` is writing out the plain text representation of a MIME message, "
"and it finds the message has a *preamble* attribute, it will write this text "
"in the area between the headers and the first boundary.  See :mod:`email."
"parser` and :mod:`email.generator` for details."
msgstr ""
"L'attribut *preamble* contient ce texte hors-cadre de tête pour les "
"documents MIME. Lorsque :class:`~email.parser.Parser` découvre du texte "
"après les en-têtes mais avant la première chaîne de délimitation, il "
"attribue ce texte à l'attribut *preamble* du message. Lorsque :class:`~email."
"generator.Generator` écrit la représentation en texte brut d'un message "
"MIME, et qu'il trouve que le message a un attribut *preamble*, il écrit ce "
"texte dans la zone entre les en-têtes et la première frontière. Voir :mod:"
"`email.parser` et :mod:`email.generator` pour plus de détails."

#: library/email.compat32-message.rst:741
msgid ""
"Note that if the message object has no preamble, the *preamble* attribute "
"will be ``None``."
msgstr ""
"Notez que si l'objet message n'a pas de préambule, l'attribut *preamble* est "
"``None``."

#: library/email.compat32-message.rst:747
msgid ""
"The *epilogue* attribute acts the same way as the *preamble* attribute, "
"except that it contains text that appears between the last boundary and the "
"end of the message."
msgstr ""
"L'attribut *epilogue* agit de la même manière que l'attribut *preamble*, "
"sauf qu'il contient du texte qui apparaît entre la dernière limite et la fin "
"du message."

#: library/email.compat32-message.rst:751
msgid ""
"You do not need to set the epilogue to the empty string in order for the :"
"class:`~email.generator.Generator` to print a newline at the end of the file."
msgstr ""
"Vous n'avez pas besoin de définir l'épilogue sur la chaîne vide pour que :"
"class:`~email.generator.Generator` imprime une nouvelle ligne à la fin du "
"fichier."

#: library/email.compat32-message.rst:758
msgid ""
"The *defects* attribute contains a list of all the problems found when "
"parsing this message.  See :mod:`email.errors` for a detailed description of "
"the possible parsing defects."
msgstr ""
"L'attribut *defects* contient une liste de tous les problèmes rencontrés "
"lors de l'analyse de ce message. Voir :mod:`email.errors` pour une "
"description détaillée des défauts d'analyse possibles."
