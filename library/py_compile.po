# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-19 22:36+0200\n"
"PO-Revision-Date: 2021-05-04 00:17+0200\n"
"Last-Translator: Jean Abou Samra <jean@abou-samra>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.4.1\n"

#: library/py_compile.rst:2
msgid ":mod:`py_compile` --- Compile Python source files"
msgstr ":mod:`py_compile` — Compilation de sources Python"

#: library/py_compile.rst:10
msgid "**Source code:** :source:`Lib/py_compile.py`"
msgstr "**Code source :** :source:`Lib/py_compile.py`"

#: library/py_compile.rst:16
msgid ""
"The :mod:`py_compile` module provides a function to generate a byte-code "
"file from a source file, and another function used when the module source "
"file is invoked as a script."
msgstr ""
"Le module :mod:`py_compile` définit une fonction principale qui génère un "
"fichier de code intermédiaire à partir d'un fichier source. Il exporte "
"également la fonction qu'il exécute quand il est lancé en tant que script."

#: library/py_compile.rst:20
msgid ""
"Though not often needed, this function can be useful when installing modules "
"for shared use, especially if some of the users may not have permission to "
"write the byte-code cache files in the directory containing the source code."
msgstr ""
"Bien que ce module ne soit pas d'usage fréquent, il peut servir lors de "
"l'installation de bibliothèques partagées, notamment dans le cas où tous les "
"utilisateurs n'ont pas les privilèges d'écriture dans l'emplacement "
"d'installation."

#: library/py_compile.rst:27
msgid ""
"Exception raised when an error occurs while attempting to compile the file."
msgstr "Exception levée quand une erreur se produit à la compilation."

#: library/py_compile.rst:32
msgid ""
"Compile a source file to byte-code and write out the byte-code cache file. "
"The source code is loaded from the file named *file*.  The byte-code is "
"written to *cfile*, which defaults to the :pep:`3147`/:pep:`488` path, "
"ending in ``.pyc``. For example, if *file* is ``/foo/bar/baz.py`` *cfile* "
"will default to ``/foo/bar/__pycache__/baz.cpython-32.pyc`` for Python 3.2.  "
"If *dfile* is specified, it is used as the name of the source file in error "
"messages instead of *file*.  If *doraise* is true, a :exc:`PyCompileError` "
"is raised when an error is encountered while compiling *file*. If *doraise* "
"is false (the default), an error string is written to ``sys.stderr``, but no "
"exception is raised.  This function returns the path to byte-compiled file, "
"i.e. whatever *cfile* value was used."
msgstr ""
"Compile un fichier source en un fichier de code intermédiaire, mis en cache. "
"Le code source est lu dans le fichier *file*. Par défaut, le code "
"intermédiaire est écrit dans l'emplacement prescrit par la :pep:`3147`, avec "
"l'extension ``.pyc``. Par exemple, si *file* est ``/ga/bu/zo/meu.py``, le "
"code intermédiaire ira dans ``/ga/bu/zo/__pycache__/meu.cpython-32.pyc`` "
"(pour l'interpréteur Python 3.2). La destination peut être modifiée à l'aide "
"du paramètre *cfile*. Si *dfile* est fourni, il est utilisé comme nom du "
"fichier source dans les messages d'erreur à la place de *file*. Si *doraise* "
"est vrai, une exception de type :exc:`PyCompileError` est levée dans le cas "
"où la compilation de la source produit une erreur. Sinon (comportement par "
"défaut), l'erreur est affichée dans ``sys.stderr``, mais l'exécution se "
"poursuit normalement. Cette fonction renvoie le chemin du fichier de code "
"intermédiaire, c'est-à-dire l'emplacement choisi automatiquement, ou bien "
"*cfile* s'il est précisé."

#: library/py_compile.rst:45
msgid ""
"The *doraise* and *quiet* arguments determine how errors are handled while "
"compiling file. If *quiet* is 0 or 1, and *doraise* is false, the default "
"behaviour is enabled: an error string is written to ``sys.stderr``, and the "
"function returns ``None`` instead of a path. If *doraise* is true, a :exc:"
"`PyCompileError` is raised instead. However if *quiet* is 2, no message is "
"written, and *doraise* has no effect."
msgstr ""
"Plus précisément, ce sont les arguments *doraise* et *quiet* qui déterminent "
"la stratégie de gestion des erreurs. En effet, si *quiet* vaut 0 ou 1, et "
"*doraise* est faux, le comportement par défaut s'applique : un message "
"d'erreur est affiché dans ``sys.stderr``, et la fonction renvoie ``None`` au "
"lieu d'un chemin. Au contraire, si *doraise* est vrai, une exception :exc:"
"`PyCompileError` est levée, sauf si *quiet* vaut 2. Dans ce dernier cas, "
"aucun message n'est émis, et *doraise* reste sans effet."

#: library/py_compile.rst:52
msgid ""
"If the path that *cfile* becomes (either explicitly specified or computed) "
"is a symlink or non-regular file, :exc:`FileExistsError` will be raised. "
"This is to act as a warning that import will turn those paths into regular "
"files if it is allowed to write byte-compiled files to those paths. This is "
"a side-effect of import using file renaming to place the final byte-compiled "
"file into place to prevent concurrent file writing issues."
msgstr ""
"Si le chemin de destination, explicité par *cfile* ou choisi "
"automatiquement, est un lien symbolique, ou n'est pas un véritable fichier, "
"une exception de type :exc:`FileExistsError` est levée. Ceci, dans le but de "
"vous avertir que le système d'importation changera ces chemins en fichiers "
"s'il est autorisé à y écrire des fichiers de code intermédiaire. En effet, "
"les importations passent par un renommage final du fichier de code "
"intermédiaire vers sa destination, afin d'éviter les problèmes liés à "
"l'écriture simultanée d'un même fichier par plusieurs processus."

#: library/py_compile.rst:59
msgid ""
"*optimize* controls the optimization level and is passed to the built-in :"
"func:`compile` function.  The default of ``-1`` selects the optimization "
"level of the current interpreter."
msgstr ""
"*optimize* règle le niveau d'optimisation. Ce paramètre est passé "
"directement à la fonction native :func:`compile`. Avec la valeur par défaut "
"de ``-1``, le code intermédiaire hérite du niveau d'optimisation de "
"l'interpréteur courant."

#: library/py_compile.rst:63
msgid ""
"*invalidation_mode* should be a member of the :class:`PycInvalidationMode` "
"enum and controls how the generated bytecode cache is invalidated at "
"runtime.  The default is :attr:`PycInvalidationMode.CHECKED_HASH` if the :"
"envvar:`SOURCE_DATE_EPOCH` environment variable is set, otherwise the "
"default is :attr:`PycInvalidationMode.TIMESTAMP`."
msgstr ""
"*invalidation_mode* précise la manière dont le code intermédiaire produit "
"est invalidé à son exécution. Il doit être un membre de l'énumération :class:"
"`PycInvalidationMode`. La valeur par défaut est :attr:`PycInvalidationMode."
"TIMESTAMP`. Elle passe toutefois à :attr:`PycInvalidationMode.CHECKED_HASH` "
"si la variable d'environnement :envvar:`SOURCE_DATE_EPOCH` est définie."

#: library/py_compile.rst:69
msgid ""
"Changed default value of *cfile* to be :PEP:`3147`-compliant.  Previous "
"default was *file* + ``'c'`` (``'o'`` if optimization was enabled). Also "
"added the *optimize* parameter."
msgstr ""
"la méthode de choix de destination a changé au profit de celle décrite dans "
"la :pep:`3147`. Auparavant, le nom du fichier de code intermédiaire était "
"*file* + ``'c'`` (ou ``'o'`` lorsque les optimisations étaient actives). Le "
"paramètre *optimize* a été ajouté."

#: library/py_compile.rst:74
msgid ""
"Changed code to use :mod:`importlib` for the byte-code cache file writing. "
"This means file creation/writing semantics now match what :mod:`importlib` "
"does, e.g. permissions, write-and-move semantics, etc. Also added the caveat "
"that :exc:`FileExistsError` is raised if *cfile* is a symlink or non-regular "
"file."
msgstr ""
"le code a été modifié pour faire appel à :mod:`importlib` dans les "
"opérations d'écriture du code intermédiaire. Ce module se comporte donc "
"exactement comme :mod:`importlib` en ce qui concerne, par exemple, les "
"permissions, ou le renommage final qui garantit une opération atomique. :exc:"
"`FileExistsError` est désormais levée si la destination est un lien "
"symbolique ou n'est pas un véritable fichier."

#: library/py_compile.rst:81
msgid ""
"The *invalidation_mode* parameter was added as specified in :pep:`552`. If "
"the :envvar:`SOURCE_DATE_EPOCH` environment variable is set, "
"*invalidation_mode* will be forced to :attr:`PycInvalidationMode."
"CHECKED_HASH`."
msgstr ""
"le paramètre *invalidation_mode* a été ajouté comme requis par la :pep:"
"`552`. Si la variable d'environnement :envvar:`SOURCE_DATE_EPOCH` est "
"définie, *invalidation_mode* est ignoré, et :attr:`PycInvalidationMode."
"CHECKED_HASH` s'applique dans tous les cas."

#: library/py_compile.rst:87
msgid ""
"The :envvar:`SOURCE_DATE_EPOCH` environment variable no longer overrides the "
"value of the *invalidation_mode* argument, and determines its default value "
"instead."
msgstr ""
"La variable d'environnement :envvar:`SOURCE_DATE_EPOCH` n'a plus préséance "
"sur le paramètre *invalidation_mode*, mais détermine seulement le "
"comportement par défaut lorsque ce paramètre n'est pas passé."

#: library/py_compile.rst:92
msgid "The *quiet* parameter was added."
msgstr "ajout du paramètre *quiet*."

#: library/py_compile.rst:98
msgid ""
"A enumeration of possible methods the interpreter can use to determine "
"whether a bytecode file is up to date with a source file. The ``.pyc`` file "
"indicates the desired invalidation mode in its header. See :ref:`pyc-"
"invalidation` for more information on how Python invalidates ``.pyc`` files "
"at runtime."
msgstr ""
"Énumération des méthodes que l'interpréteur est susceptible d'appliquer afin "
"de déterminer si un fichier de code intermédiaire est périmé par rapport à "
"sa source. Les fichiers ``.pyc`` portent le mode d'invalidation désiré dans "
"leur en-tête. Veuillez-vous référer à :ref:`pyc-invalidation` pour plus "
"d'informations sur la manière dont Python invalide les fichiers ``.pyc`` à "
"l'exécution."

#: library/py_compile.rst:108
msgid ""
"The ``.pyc`` file includes the timestamp and size of the source file, which "
"Python will compare against the metadata of the source file at runtime to "
"determine if the ``.pyc`` file needs to be regenerated."
msgstr ""
"Le fichier ``.pyc`` contient l'horodatage et la taille de la source. "
"L'interpréteur inspecte les métadonnées du fichier source au moment de "
"l'exécution, et régénère le fichier ``.pyc`` si elles ont changé."

#: library/py_compile.rst:114
msgid ""
"The ``.pyc`` file includes a hash of the source file content, which Python "
"will compare against the source at runtime to determine if the ``.pyc`` file "
"needs to be regenerated."
msgstr ""
"Le fichier ``.pyc`` porte une empreinte du code source. À l'exécution, elle "
"est recalculée à partir de la source éventuellement modifiée, et le fichier "
"``.pyc`` est régénéré si les deux empreintes sont différentes."

#: library/py_compile.rst:120
msgid ""
"Like :attr:`CHECKED_HASH`, the ``.pyc`` file includes a hash of the source "
"file content. However, Python will at runtime assume the ``.pyc`` file is up "
"to date and not validate the ``.pyc`` against the source file at all."
msgstr ""
"Le principe est le même que :attr:`CHECKED_HASH`, mais à l'exécution, "
"l'interpréteur considère systématiquement que le fichier ``.pyc`` est à "
"jour, sans regarder la source."

#: library/py_compile.rst:124
msgid ""
"This option is useful when the ``.pycs`` are kept up to date by some system "
"external to Python like a build system."
msgstr ""
"Cette option est utile lorsque les fichiers ``.pyc`` sont maintenus par un "
"outil externe, comme un système d'intégration."

#: library/py_compile.rst:130
msgid ""
"Compile several source files.  The files named in *args* (or on the command "
"line, if *args* is ``None``) are compiled and the resulting byte-code is "
"cached in the normal manner.  This function does not search a directory "
"structure to locate source files; it only compiles files named explicitly. "
"If ``'-'`` is the only parameter in args, the list of files is taken from "
"standard input."
msgstr ""
"Compile et met en cache tous les fichiers de la séquence *args*, ou ceux "
"passés comme arguments en ligne de commande si *args* est ``None``. Cette "
"fonction n'effectue aucune recherche des fichiers sources dans des dossiers. "
"Elle compile simplement les fichiers nommés un par un. Si ``'-'`` est le "
"seul paramètre dans *args*, la liste des fichiers est lue sur l'entrée "
"standard."

#: library/py_compile.rst:137
msgid "Added support for ``'-'``."
msgstr "prise en charge de ``'-'``."

#: library/py_compile.rst:140
msgid ""
"When this module is run as a script, the :func:`main` is used to compile all "
"the files named on the command line.  The exit status is nonzero if one of "
"the files could not be compiled."
msgstr ""
"Lorsque ce module est exécuté en tant que script, la fonction :func:`main` "
"compile tous les fichiers passés comme arguments sur la ligne de commande. "
"Le code de retour vaut zéro si tous ont été compilés sans erreur."

#: library/py_compile.rst:147
msgid "Module :mod:`compileall`"
msgstr "Module :mod:`compileall`"

#: library/py_compile.rst:148
msgid "Utilities to compile all Python source files in a directory tree."
msgstr ""
"Utilitaires pour compiler des fichiers source Python dans une arborescence"
