# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-24 09:01+0200\n"
"PO-Revision-Date: 2019-06-10 15:50+0200\n"
"Last-Translator: Julien Palard <julien@palard.fr>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.0.2\n"

#: library/asyncio-eventloop.rst:6
msgid "Event Loop"
msgstr "Boucle d'évènements"

#: library/asyncio-eventloop.rst:8
msgid ""
"**Source code:** :source:`Lib/asyncio/events.py`, :source:`Lib/asyncio/"
"base_events.py`"
msgstr ""

#: library/asyncio-eventloop.rst:14
msgid "Preface"
msgstr ""

#: library/asyncio-eventloop.rst:15
msgid ""
"The event loop is the core of every asyncio application. Event loops run "
"asynchronous tasks and callbacks, perform network IO operations, and run "
"subprocesses."
msgstr ""

#: library/asyncio-eventloop.rst:19
msgid ""
"Application developers should typically use the high-level asyncio "
"functions, such as :func:`asyncio.run`, and should rarely need to reference "
"the loop object or call its methods.  This section is intended mostly for "
"authors of lower-level code, libraries, and frameworks, who need finer "
"control over the event loop behavior."
msgstr ""

#: library/asyncio-eventloop.rst:26
msgid "Obtaining the Event Loop"
msgstr "Obtenir une boucle d'évènements"

#: library/asyncio-eventloop.rst:27
msgid ""
"The following low-level functions can be used to get, set, or create an "
"event loop:"
msgstr ""

#: library/asyncio-eventloop.rst:32
msgid "Return the running event loop in the current OS thread."
msgstr ""

#: library/asyncio-eventloop.rst:34
msgid ""
"If there is no running event loop a :exc:`RuntimeError` is raised. This "
"function can only be called from a coroutine or a callback."
msgstr ""

#: library/asyncio-eventloop.rst:41
#, fuzzy
msgid "Get the current event loop."
msgstr "Arrête l'exécution de la boucle d'évènements."

#: library/asyncio-eventloop.rst:43
msgid ""
"If there is no current event loop set in the current OS thread, the OS "
"thread is main, and :func:`set_event_loop` has not yet been called, asyncio "
"will create a new event loop and set it as the current one."
msgstr ""

#: library/asyncio-eventloop.rst:48
msgid ""
"Because this function has rather complex behavior (especially when custom "
"event loop policies are in use), using the :func:`get_running_loop` function "
"is preferred to :func:`get_event_loop` in coroutines and callbacks."
msgstr ""

#: library/asyncio-eventloop.rst:53
msgid ""
"Consider also using the :func:`asyncio.run` function instead of using lower "
"level functions to manually create and close an event loop."
msgstr ""

#: library/asyncio-eventloop.rst:58
msgid "Set *loop* as a current event loop for the current OS thread."
msgstr ""

#: library/asyncio-eventloop.rst:62
msgid "Create a new event loop object."
msgstr ""

#: library/asyncio-eventloop.rst:64
msgid ""
"Note that the behaviour of :func:`get_event_loop`, :func:`set_event_loop`, "
"and :func:`new_event_loop` functions can be altered by :ref:`setting a "
"custom event loop policy <asyncio-policies>`."
msgstr ""

#: library/asyncio-eventloop.rst:70
msgid "Contents"
msgstr "Sommaire"

#: library/asyncio-eventloop.rst:71
msgid "This documentation page contains the following sections:"
msgstr ""

#: library/asyncio-eventloop.rst:73
msgid ""
"The `Event Loop Methods`_ section is the reference documentation of the "
"event loop APIs;"
msgstr ""

#: library/asyncio-eventloop.rst:76
msgid ""
"The `Callback Handles`_ section documents the :class:`Handle` and :class:"
"`TimerHandle` instances which are returned from scheduling methods such as :"
"meth:`loop.call_soon` and :meth:`loop.call_later`;"
msgstr ""

#: library/asyncio-eventloop.rst:80
msgid ""
"The `Server Objects`_ section documents types returned from event loop "
"methods like :meth:`loop.create_server`;"
msgstr ""

#: library/asyncio-eventloop.rst:83
msgid ""
"The `Event Loop Implementations`_ section documents the :class:"
"`SelectorEventLoop` and :class:`ProactorEventLoop` classes;"
msgstr ""

#: library/asyncio-eventloop.rst:86
msgid ""
"The `Examples`_ section showcases how to work with some event loop APIs."
msgstr ""

#: library/asyncio-eventloop.rst:93
msgid "Event Loop Methods"
msgstr "Méthodes de la boucle d'évènements"

#: library/asyncio-eventloop.rst:95
msgid "Event loops have **low-level** APIs for the following:"
msgstr ""

#: library/asyncio-eventloop.rst:103
msgid "Running and stopping the loop"
msgstr "Démarrer et arrêter une boucle d'évènements"

#: library/asyncio-eventloop.rst:107
msgid "Run until the *future* (an instance of :class:`Future`) has completed."
msgstr ""
"Lance la boucle jusqu'à ce que *future* (une instance de :class:`Future`) "
"soit terminée."

#: library/asyncio-eventloop.rst:110
msgid ""
"If the argument is a :ref:`coroutine object <coroutine>` it is implicitly "
"scheduled to run as a :class:`asyncio.Task`."
msgstr ""

#: library/asyncio-eventloop.rst:113
msgid "Return the Future's result or raise its exception."
msgstr ""

#: library/asyncio-eventloop.rst:117
msgid "Run the event loop until :meth:`stop` is called."
msgstr ""

#: library/asyncio-eventloop.rst:119
msgid ""
"If :meth:`stop` is called before :meth:`run_forever()` is called, the loop "
"will poll the I/O selector once with a timeout of zero, run all callbacks "
"scheduled in response to I/O events (and those that were already scheduled), "
"and then exit."
msgstr ""

#: library/asyncio-eventloop.rst:124
msgid ""
"If :meth:`stop` is called while :meth:`run_forever` is running, the loop "
"will run the current batch of callbacks and then exit. Note that new "
"callbacks scheduled by callbacks will not run in this case; instead, they "
"will run the next time :meth:`run_forever` or :meth:`run_until_complete` is "
"called."
msgstr ""

#: library/asyncio-eventloop.rst:132
msgid "Stop the event loop."
msgstr "Arrête l'exécution de la boucle d'évènements."

#: library/asyncio-eventloop.rst:136
msgid "Return ``True`` if the event loop is currently running."
msgstr "Renvoie ``True`` si la boucle d'évènements est démarrée."

#: library/asyncio-eventloop.rst:140
msgid "Return ``True`` if the event loop was closed."
msgstr "Renvoie ``True`` si la boucle d'évènements est arrêtée."

#: library/asyncio-eventloop.rst:144
msgid "Close the event loop."
msgstr "Arrête la boucle d'évènements."

#: library/asyncio-eventloop.rst:146
msgid ""
"The loop must not be running when this function is called. Any pending "
"callbacks will be discarded."
msgstr ""

#: library/asyncio-eventloop.rst:149
msgid ""
"This method clears all queues and shuts down the executor, but does not wait "
"for the executor to finish."
msgstr ""

#: library/asyncio-eventloop.rst:152
msgid ""
"This method is idempotent and irreversible.  No other methods should be "
"called after the event loop is closed."
msgstr ""

#: library/asyncio-eventloop.rst:157
msgid ""
"Schedule all currently open :term:`asynchronous generator` objects to close "
"with an :meth:`~agen.aclose()` call.  After calling this method, the event "
"loop will issue a warning if a new asynchronous generator is iterated. This "
"should be used to reliably finalize all scheduled asynchronous generators."
msgstr ""

#: library/asyncio-eventloop.rst:163 library/asyncio-eventloop.rst:183
msgid ""
"Note that there is no need to call this function when :func:`asyncio.run` is "
"used."
msgstr ""

#: library/asyncio-eventloop.rst:166 library/asyncio-eventloop.rst:1074
#: library/asyncio-eventloop.rst:1456
msgid "Example::"
msgstr "Exemple ::"

#: library/asyncio-eventloop.rst:178
msgid ""
"Schedule the closure of the default executor and wait for it to join all of "
"the threads in the :class:`ThreadPoolExecutor`. After calling this method, "
"a :exc:`RuntimeError` will be raised if :meth:`loop.run_in_executor` is "
"called while using the default executor."
msgstr ""

#: library/asyncio-eventloop.rst:190
msgid "Scheduling callbacks"
msgstr ""

#: library/asyncio-eventloop.rst:194
msgid ""
"Schedule the *callback* :term:`callback` to be called with *args* arguments "
"at the next iteration of the event loop."
msgstr ""

#: library/asyncio-eventloop.rst:197
msgid ""
"Callbacks are called in the order in which they are registered. Each "
"callback will be called exactly once."
msgstr ""

#: library/asyncio-eventloop.rst:200 library/asyncio-eventloop.rst:263
msgid ""
"An optional keyword-only *context* argument allows specifying a custom :"
"class:`contextvars.Context` for the *callback* to run in. The current "
"context is used when no *context* is provided."
msgstr ""

#: library/asyncio-eventloop.rst:204
msgid ""
"An instance of :class:`asyncio.Handle` is returned, which can be used later "
"to cancel the callback."
msgstr ""

#: library/asyncio-eventloop.rst:207
msgid "This method is not thread-safe."
msgstr ""

#: library/asyncio-eventloop.rst:211
msgid ""
"A thread-safe variant of :meth:`call_soon`.  Must be used to schedule "
"callbacks *from another thread*."
msgstr ""

#: library/asyncio-eventloop.rst:214
msgid ""
"See the :ref:`concurrency and multithreading <asyncio-multithreading>` "
"section of the documentation."
msgstr ""
"Voir la section :ref:`exécution concurrente et multi-fils d'exécution "
"<asyncio-multithreading>` de la documentation."

#: library/asyncio-eventloop.rst:217 library/asyncio-eventloop.rst:267
#: library/asyncio-eventloop.rst:287
msgid ""
"The *context* keyword-only parameter was added. See :pep:`567` for more "
"details."
msgstr ""

#: library/asyncio-eventloop.rst:225
msgid ""
"Most :mod:`asyncio` scheduling functions don't allow passing keyword "
"arguments.  To do that, use :func:`functools.partial`::"
msgstr ""

#: library/asyncio-eventloop.rst:232
msgid ""
"Using partial objects is usually more convenient than using lambdas, as "
"asyncio can render partial objects better in debug and error messages."
msgstr ""

#: library/asyncio-eventloop.rst:240
msgid "Scheduling delayed callbacks"
msgstr ""

#: library/asyncio-eventloop.rst:242
msgid ""
"Event loop provides mechanisms to schedule callback functions to be called "
"at some point in the future.  Event loop uses monotonic clocks to track time."
msgstr ""

#: library/asyncio-eventloop.rst:249
msgid ""
"Schedule *callback* to be called after the given *delay* number of seconds "
"(can be either an int or a float)."
msgstr ""

#: library/asyncio-eventloop.rst:252 library/asyncio-eventloop.rst:284
msgid ""
"An instance of :class:`asyncio.TimerHandle` is returned which can be used to "
"cancel the callback."
msgstr ""

#: library/asyncio-eventloop.rst:255
msgid ""
"*callback* will be called exactly once.  If two callbacks are scheduled for "
"exactly the same time, the order in which they are called is undefined."
msgstr ""

#: library/asyncio-eventloop.rst:259
msgid ""
"The optional positional *args* will be passed to the callback when it is "
"called. If you want the callback to be called with keyword arguments use :"
"func:`functools.partial`."
msgstr ""

#: library/asyncio-eventloop.rst:271
msgid ""
"In Python 3.7 and earlier with the default event loop implementation, the "
"*delay* could not exceed one day. This has been fixed in Python 3.8."
msgstr ""

#: library/asyncio-eventloop.rst:278
msgid ""
"Schedule *callback* to be called at the given absolute timestamp *when* (an "
"int or a float), using the same time reference as :meth:`loop.time`."
msgstr ""

#: library/asyncio-eventloop.rst:282
msgid "This method's behavior is the same as :meth:`call_later`."
msgstr ""

#: library/asyncio-eventloop.rst:291
msgid ""
"In Python 3.7 and earlier with the default event loop implementation, the "
"difference between *when* and the current time could not exceed one day.  "
"This has been fixed in Python 3.8."
msgstr ""

#: library/asyncio-eventloop.rst:298
msgid ""
"Return the current time, as a :class:`float` value, according to the event "
"loop's internal monotonic clock."
msgstr ""

#: library/asyncio-eventloop.rst:302
msgid ""
"In Python 3.7 and earlier timeouts (relative *delay* or absolute *when*) "
"should not exceed one day.  This has been fixed in Python 3.8."
msgstr ""

#: library/asyncio-eventloop.rst:308
msgid "The :func:`asyncio.sleep` function."
msgstr "La fonction :func:`asyncio.sleep`."

#: library/asyncio-eventloop.rst:312
msgid "Creating Futures and Tasks"
msgstr ""

#: library/asyncio-eventloop.rst:316
msgid "Create an :class:`asyncio.Future` object attached to the event loop."
msgstr ""

#: library/asyncio-eventloop.rst:318
msgid ""
"This is the preferred way to create Futures in asyncio. This lets third-"
"party event loops provide alternative implementations of the Future object "
"(with better performance or instrumentation)."
msgstr ""

#: library/asyncio-eventloop.rst:326
msgid ""
"Schedule the execution of a :ref:`coroutine`. Return a :class:`Task` object."
msgstr ""

#: library/asyncio-eventloop.rst:329
msgid ""
"Third-party event loops can use their own subclass of :class:`Task` for "
"interoperability. In this case, the result type is a subclass of :class:"
"`Task`."
msgstr ""

#: library/asyncio-eventloop.rst:333
msgid ""
"If the *name* argument is provided and not ``None``, it is set as the name "
"of the task using :meth:`Task.set_name`."
msgstr ""

#: library/asyncio-eventloop.rst:336
msgid "Added the ``name`` parameter."
msgstr ""

#: library/asyncio-eventloop.rst:341
msgid "Set a task factory that will be used by :meth:`loop.create_task`."
msgstr ""

#: library/asyncio-eventloop.rst:344
msgid ""
"If *factory* is ``None`` the default task factory will be set. Otherwise, "
"*factory* must be a *callable* with the signature matching ``(loop, coro)``, "
"where *loop* is a reference to the active event loop, and *coro* is a "
"coroutine object.  The callable must return a :class:`asyncio.Future`-"
"compatible object."
msgstr ""

#: library/asyncio-eventloop.rst:352
msgid "Return a task factory or ``None`` if the default one is in use."
msgstr ""

#: library/asyncio-eventloop.rst:356
msgid "Opening network connections"
msgstr "Créer des connexions"

#: library/asyncio-eventloop.rst:365
msgid ""
"Open a streaming transport connection to a given address specified by *host* "
"and *port*."
msgstr ""

#: library/asyncio-eventloop.rst:368
msgid ""
"The socket family can be either :py:data:`~socket.AF_INET` or :py:data:"
"`~socket.AF_INET6` depending on *host* (or the *family* argument, if "
"provided)."
msgstr ""

#: library/asyncio-eventloop.rst:372
msgid "The socket type will be :py:data:`~socket.SOCK_STREAM`."
msgstr ""

#: library/asyncio-eventloop.rst:374 library/asyncio-eventloop.rst:990
#: library/asyncio-eventloop.rst:1006
msgid ""
"*protocol_factory* must be a callable returning an :ref:`asyncio protocol "
"<asyncio-protocol>` implementation."
msgstr ""

#: library/asyncio-eventloop.rst:377
msgid ""
"This method will try to establish the connection in the background. When "
"successful, it returns a ``(transport, protocol)`` pair."
msgstr ""

#: library/asyncio-eventloop.rst:380
msgid "The chronological synopsis of the underlying operation is as follows:"
msgstr ""

#: library/asyncio-eventloop.rst:382
msgid ""
"The connection is established and a :ref:`transport <asyncio-transport>` is "
"created for it."
msgstr ""

#: library/asyncio-eventloop.rst:385
msgid ""
"*protocol_factory* is called without arguments and is expected to return a :"
"ref:`protocol <asyncio-protocol>` instance."
msgstr ""

#: library/asyncio-eventloop.rst:388
msgid ""
"The protocol instance is coupled with the transport by calling its :meth:"
"`~BaseProtocol.connection_made` method."
msgstr ""

#: library/asyncio-eventloop.rst:391
msgid "A ``(transport, protocol)`` tuple is returned on success."
msgstr ""

#: library/asyncio-eventloop.rst:393
msgid ""
"The created transport is an implementation-dependent bidirectional stream."
msgstr ""

#: library/asyncio-eventloop.rst:396 library/asyncio-eventloop.rst:518
msgid "Other arguments:"
msgstr ""

#: library/asyncio-eventloop.rst:398
msgid ""
"*ssl*: if given and not false, a SSL/TLS transport is created (by default a "
"plain TCP transport is created).  If *ssl* is a :class:`ssl.SSLContext` "
"object, this context is used to create the transport; if *ssl* is :const:"
"`True`, a default context returned from :func:`ssl.create_default_context` "
"is used."
msgstr ""

#: library/asyncio-eventloop.rst:404
msgid ":ref:`SSL/TLS security considerations <ssl-security>`"
msgstr ""

#: library/asyncio-eventloop.rst:406
msgid ""
"*server_hostname* sets or overrides the hostname that the target server's "
"certificate will be matched against.  Should only be passed if *ssl* is not "
"``None``.  By default the value of the *host* argument is used.  If *host* "
"is empty, there is no default and you must pass a value for "
"*server_hostname*.  If *server_hostname* is an empty string, hostname "
"matching is disabled (which is a serious security risk, allowing for "
"potential man-in-the-middle attacks)."
msgstr ""

#: library/asyncio-eventloop.rst:414
msgid ""
"*family*, *proto*, *flags* are the optional address family, protocol and "
"flags to be passed through to getaddrinfo() for *host* resolution. If given, "
"these should all be integers from the corresponding :mod:`socket` module "
"constants."
msgstr ""

#: library/asyncio-eventloop.rst:419
msgid ""
"*happy_eyeballs_delay*, if given, enables Happy Eyeballs for this "
"connection. It should be a floating-point number representing the amount of "
"time in seconds to wait for a connection attempt to complete, before "
"starting the next attempt in parallel. This is the \"Connection Attempt Delay"
"\" as defined in :rfc:`8305`. A sensible default value recommended by the "
"RFC is ``0.25`` (250 milliseconds)."
msgstr ""

#: library/asyncio-eventloop.rst:427
msgid ""
"*interleave* controls address reordering when a host name resolves to "
"multiple IP addresses. If ``0`` or unspecified, no reordering is done, and "
"addresses are tried in the order returned by :meth:`getaddrinfo`. If a "
"positive integer is specified, the addresses are interleaved by address "
"family, and the given integer is interpreted as \"First Address Family Count"
"\" as defined in :rfc:`8305`. The default is ``0`` if *happy_eyeballs_delay* "
"is not specified, and ``1`` if it is."
msgstr ""

#: library/asyncio-eventloop.rst:436
msgid ""
"*sock*, if given, should be an existing, already connected :class:`socket."
"socket` object to be used by the transport. If *sock* is given, none of "
"*host*, *port*, *family*, *proto*, *flags*, *happy_eyeballs_delay*, "
"*interleave* and *local_addr* should be specified."
msgstr ""

#: library/asyncio-eventloop.rst:442
msgid ""
"*local_addr*, if given, is a ``(local_host, local_port)`` tuple used to bind "
"the socket to locally.  The *local_host* and *local_port* are looked up "
"using ``getaddrinfo()``, similarly to *host* and *port*."
msgstr ""

#: library/asyncio-eventloop.rst:446 library/asyncio-eventloop.rst:799
msgid ""
"*ssl_handshake_timeout* is (for a TLS connection) the time in seconds to "
"wait for the TLS handshake to complete before aborting the connection. "
"``60.0`` seconds if ``None`` (default)."
msgstr ""

#: library/asyncio-eventloop.rst:452
msgid "Added the *happy_eyeballs_delay* and *interleave* parameters."
msgstr ""

#: library/asyncio-eventloop.rst:454
msgid ""
"Happy Eyeballs Algorithm: Success with Dual-Stack Hosts. When a server's "
"IPv4 path and protocol are working, but the server's IPv6 path and protocol "
"are not working, a dual-stack client application experiences significant "
"connection delay compared to an IPv4-only client.  This is undesirable "
"because it causes the dual- stack client to have a worse user experience.  "
"This document specifies requirements for algorithms that reduce this user-"
"visible delay and provides an algorithm."
msgstr ""

#: library/asyncio-eventloop.rst:463
msgid "For more information: https://tools.ietf.org/html/rfc6555"
msgstr ""

#: library/asyncio-eventloop.rst:467 library/asyncio-eventloop.rst:584
#: library/asyncio-eventloop.rst:737
msgid "The *ssl_handshake_timeout* parameter."
msgstr ""

#: library/asyncio-eventloop.rst:471 library/asyncio-eventloop.rst:667
msgid ""
"The socket option :py:data:`~socket.TCP_NODELAY` is set by default for all "
"TCP connections."
msgstr ""

#: library/asyncio-eventloop.rst:476 library/asyncio-eventloop.rst:672
msgid "Added support for SSL/TLS in :class:`ProactorEventLoop`."
msgstr ""

#: library/asyncio-eventloop.rst:480
msgid ""
"The :func:`open_connection` function is a high-level alternative API.  It "
"returns a pair of (:class:`StreamReader`, :class:`StreamWriter`) that can be "
"used directly in async/await code."
msgstr ""

#: library/asyncio-eventloop.rst:491
msgid ""
"The parameter *reuse_address* is no longer supported, as using :py:data:"
"`~sockets.SO_REUSEADDR` poses a significant security concern for UDP. "
"Explicitly passing ``reuse_address=True`` will raise an exception."
msgstr ""

#: library/asyncio-eventloop.rst:495
msgid ""
"When multiple processes with differing UIDs assign sockets to an identical "
"UDP socket address with ``SO_REUSEADDR``, incoming packets can become "
"randomly distributed among the sockets."
msgstr ""

#: library/asyncio-eventloop.rst:499
msgid ""
"For supported platforms, *reuse_port* can be used as a replacement for "
"similar functionality. With *reuse_port*, :py:data:`~sockets.SO_REUSEPORT` "
"is used instead, which specifically prevents processes with differing UIDs "
"from assigning sockets to the same socket address."
msgstr ""

#: library/asyncio-eventloop.rst:505
msgid "Create a datagram connection."
msgstr "Créer une connexion par datagramme"

#: library/asyncio-eventloop.rst:507
msgid ""
"The socket family can be either :py:data:`~socket.AF_INET`, :py:data:"
"`~socket.AF_INET6`, or :py:data:`~socket.AF_UNIX`, depending on *host* (or "
"the *family* argument, if provided)."
msgstr ""

#: library/asyncio-eventloop.rst:511
msgid "The socket type will be :py:data:`~socket.SOCK_DGRAM`."
msgstr ""

#: library/asyncio-eventloop.rst:513 library/asyncio-eventloop.rst:609
#: library/asyncio-eventloop.rst:720
msgid ""
"*protocol_factory* must be a callable returning a :ref:`protocol <asyncio-"
"protocol>` implementation."
msgstr ""

#: library/asyncio-eventloop.rst:516 library/asyncio-eventloop.rst:570
msgid "A tuple of ``(transport, protocol)`` is returned on success."
msgstr ""

#: library/asyncio-eventloop.rst:520
msgid ""
"*local_addr*, if given, is a ``(local_host, local_port)`` tuple used to bind "
"the socket to locally.  The *local_host* and *local_port* are looked up "
"using :meth:`getaddrinfo`."
msgstr ""

#: library/asyncio-eventloop.rst:524
msgid ""
"*remote_addr*, if given, is a ``(remote_host, remote_port)`` tuple used to "
"connect the socket to a remote address.  The *remote_host* and *remote_port* "
"are looked up using :meth:`getaddrinfo`."
msgstr ""

#: library/asyncio-eventloop.rst:528
msgid ""
"*family*, *proto*, *flags* are the optional address family, protocol and "
"flags to be passed through to :meth:`getaddrinfo` for *host* resolution. If "
"given, these should all be integers from the corresponding :mod:`socket` "
"module constants."
msgstr ""

#: library/asyncio-eventloop.rst:533
msgid ""
"*reuse_port* tells the kernel to allow this endpoint to be bound to the same "
"port as other existing endpoints are bound to, so long as they all set this "
"flag when being created. This option is not supported on Windows and some "
"Unixes. If the :py:data:`~socket.SO_REUSEPORT` constant is not defined then "
"this capability is unsupported."
msgstr ""

#: library/asyncio-eventloop.rst:539
msgid ""
"*allow_broadcast* tells the kernel to allow this endpoint to send messages "
"to the broadcast address."
msgstr ""

#: library/asyncio-eventloop.rst:542
msgid ""
"*sock* can optionally be specified in order to use a preexisting, already "
"connected, :class:`socket.socket` object to be used by the transport. If "
"specified, *local_addr* and *remote_addr* should be omitted (must be :const:"
"`None`)."
msgstr ""

#: library/asyncio-eventloop.rst:547
msgid ""
"See :ref:`UDP echo client protocol <asyncio-udp-echo-client-protocol>` and :"
"ref:`UDP echo server protocol <asyncio-udp-echo-server-protocol>` examples."
msgstr ""

#: library/asyncio-eventloop.rst:550
msgid ""
"The *family*, *proto*, *flags*, *reuse_address*, *reuse_port, "
"*allow_broadcast*, and *sock* parameters were added."
msgstr ""

#: library/asyncio-eventloop.rst:554
msgid ""
"The *reuse_address* parameter is no longer supported due to security "
"concerns."
msgstr ""

#: library/asyncio-eventloop.rst:558
msgid "Added support for Windows."
msgstr "Prise en charge sur Windows."

#: library/asyncio-eventloop.rst:565
msgid "Create a Unix connection."
msgstr "Créer une connexion Unix"

#: library/asyncio-eventloop.rst:567
msgid ""
"The socket family will be :py:data:`~socket.AF_UNIX`; socket type will be :"
"py:data:`~socket.SOCK_STREAM`."
msgstr ""

#: library/asyncio-eventloop.rst:572
msgid ""
"*path* is the name of a Unix domain socket and is required, unless a *sock* "
"parameter is specified.  Abstract Unix sockets, :class:`str`, :class:"
"`bytes`, and :class:`~pathlib.Path` paths are supported."
msgstr ""

#: library/asyncio-eventloop.rst:577
msgid ""
"See the documentation of the :meth:`loop.create_connection` method for "
"information about arguments to this method."
msgstr ""

#: library/asyncio-eventloop.rst:581 library/asyncio-eventloop.rst:701
#: library/asyncio-eventloop.rst:1057
msgid ":ref:`Availability <availability>`: Unix."
msgstr ":ref:`Disponibilité <availability>` : Unix."

#: library/asyncio-eventloop.rst:588
msgid "The *path* parameter can now be a :term:`path-like object`."
msgstr ""

#: library/asyncio-eventloop.rst:592
msgid "Creating network servers"
msgstr "Créer des serveurs"

#: library/asyncio-eventloop.rst:602
msgid ""
"Create a TCP server (socket type :data:`~socket.SOCK_STREAM`) listening on "
"*port* of the *host* address."
msgstr ""

#: library/asyncio-eventloop.rst:605
msgid "Returns a :class:`Server` object."
msgstr ""

#: library/asyncio-eventloop.rst:607
#, fuzzy
msgid "Arguments:"
msgstr "Arguments"

#: library/asyncio-eventloop.rst:612
msgid ""
"The *host* parameter can be set to several types which determine where the "
"server would be listening:"
msgstr ""

#: library/asyncio-eventloop.rst:615
msgid ""
"If *host* is a string, the TCP server is bound to a single network interface "
"specified by *host*."
msgstr ""

#: library/asyncio-eventloop.rst:618
msgid ""
"If *host* is a sequence of strings, the TCP server is bound to all network "
"interfaces specified by the sequence."
msgstr ""

#: library/asyncio-eventloop.rst:621
msgid ""
"If *host* is an empty string or ``None``, all interfaces are assumed and a "
"list of multiple sockets will be returned (most likely one for IPv4 and "
"another one for IPv6)."
msgstr ""

#: library/asyncio-eventloop.rst:625
msgid ""
"*family* can be set to either :data:`socket.AF_INET` or :data:`~socket."
"AF_INET6` to force the socket to use IPv4 or IPv6. If not set, the *family* "
"will be determined from host name (defaults to :data:`~socket.AF_UNSPEC`)."
msgstr ""

#: library/asyncio-eventloop.rst:630
msgid "*flags* is a bitmask for :meth:`getaddrinfo`."
msgstr "*flags* est un masque de bits pour :meth:`getaddrinfo`."

#: library/asyncio-eventloop.rst:632
msgid ""
"*sock* can optionally be specified in order to use a preexisting socket "
"object. If specified, *host* and *port* must not be specified."
msgstr ""

#: library/asyncio-eventloop.rst:635
msgid ""
"*backlog* is the maximum number of queued connections passed to :meth:"
"`~socket.socket.listen` (defaults to 100)."
msgstr ""

#: library/asyncio-eventloop.rst:638
msgid ""
"*ssl* can be set to an :class:`~ssl.SSLContext` instance to enable TLS over "
"the accepted connections."
msgstr ""

#: library/asyncio-eventloop.rst:641
msgid ""
"*reuse_address* tells the kernel to reuse a local socket in ``TIME_WAIT`` "
"state, without waiting for its natural timeout to expire. If not specified "
"will automatically be set to ``True`` on Unix."
msgstr ""

#: library/asyncio-eventloop.rst:646
msgid ""
"*reuse_port* tells the kernel to allow this endpoint to be bound to the same "
"port as other existing endpoints are bound to, so long as they all set this "
"flag when being created. This option is not supported on Windows."
msgstr ""

#: library/asyncio-eventloop.rst:651
msgid ""
"*ssl_handshake_timeout* is (for a TLS server) the time in seconds to wait "
"for the TLS handshake to complete before aborting the connection. ``60.0`` "
"seconds if ``None`` (default)."
msgstr ""

#: library/asyncio-eventloop.rst:655
msgid ""
"*start_serving* set to ``True`` (the default) causes the created server to "
"start accepting connections immediately.  When set to ``False``, the user "
"should await on :meth:`Server.start_serving` or :meth:`Server.serve_forever` "
"to make the server to start accepting connections."
msgstr ""

#: library/asyncio-eventloop.rst:663
msgid "Added *ssl_handshake_timeout* and *start_serving* parameters."
msgstr ""

#: library/asyncio-eventloop.rst:676
msgid "The *host* parameter can be a sequence of strings."
msgstr ""

#: library/asyncio-eventloop.rst:680
msgid ""
"The :func:`start_server` function is a higher-level alternative API that "
"returns a pair of :class:`StreamReader` and :class:`StreamWriter` that can "
"be used in an async/await code."
msgstr ""

#: library/asyncio-eventloop.rst:689
msgid ""
"Similar to :meth:`loop.create_server` but works with the :py:data:`~socket."
"AF_UNIX` socket family."
msgstr ""

#: library/asyncio-eventloop.rst:692
msgid ""
"*path* is the name of a Unix domain socket, and is required, unless a *sock* "
"argument is provided.  Abstract Unix sockets, :class:`str`, :class:`bytes`, "
"and :class:`~pathlib.Path` paths are supported."
msgstr ""

#: library/asyncio-eventloop.rst:697
msgid ""
"See the documentation of the :meth:`loop.create_server` method for "
"information about arguments to this method."
msgstr ""

#: library/asyncio-eventloop.rst:704
msgid "The *ssl_handshake_timeout* and *start_serving* parameters."
msgstr ""

#: library/asyncio-eventloop.rst:708
msgid "The *path* parameter can now be a :class:`~pathlib.Path` object."
msgstr ""

#: library/asyncio-eventloop.rst:713
msgid "Wrap an already accepted connection into a transport/protocol pair."
msgstr ""

#: library/asyncio-eventloop.rst:715
msgid ""
"This method can be used by servers that accept connections outside of "
"asyncio but that use asyncio to handle them."
msgstr ""

#: library/asyncio-eventloop.rst:718 library/asyncio-eventloop.rst:785
msgid "Parameters:"
msgstr "Paramètres :"

#: library/asyncio-eventloop.rst:723
msgid ""
"*sock* is a preexisting socket object returned from :meth:`socket.accept "
"<socket.socket.accept>`."
msgstr ""

#: library/asyncio-eventloop.rst:726
msgid ""
"*ssl* can be set to an :class:`~ssl.SSLContext` to enable SSL over the "
"accepted connections."
msgstr ""

#: library/asyncio-eventloop.rst:729
msgid ""
"*ssl_handshake_timeout* is (for an SSL connection) the time in seconds to "
"wait for the SSL handshake to complete before aborting the connection. "
"``60.0`` seconds if ``None`` (default)."
msgstr ""

#: library/asyncio-eventloop.rst:733
msgid "Returns a ``(transport, protocol)`` pair."
msgstr ""

#: library/asyncio-eventloop.rst:743
msgid "Transferring files"
msgstr ""

#: library/asyncio-eventloop.rst:748
msgid ""
"Send a *file* over a *transport*.  Return the total number of bytes sent."
msgstr ""

#: library/asyncio-eventloop.rst:751
msgid "The method uses high-performance :meth:`os.sendfile` if available."
msgstr ""

#: library/asyncio-eventloop.rst:753
msgid "*file* must be a regular file object opened in binary mode."
msgstr ""

#: library/asyncio-eventloop.rst:755 library/asyncio-eventloop.rst:945
msgid ""
"*offset* tells from where to start reading the file. If specified, *count* "
"is the total number of bytes to transmit as opposed to sending the file "
"until EOF is reached. File position is always updated, even when this method "
"raises an error, and :meth:`file.tell() <io.IOBase.tell>` can be used to "
"obtain the actual number of bytes sent."
msgstr ""

#: library/asyncio-eventloop.rst:762
msgid ""
"*fallback* set to ``True`` makes asyncio to manually read and send the file "
"when the platform does not support the sendfile system call (e.g. Windows or "
"SSL socket on Unix)."
msgstr ""

#: library/asyncio-eventloop.rst:766
msgid ""
"Raise :exc:`SendfileNotAvailableError` if the system does not support the "
"*sendfile* syscall and *fallback* is ``False``."
msgstr ""

#: library/asyncio-eventloop.rst:773
msgid "TLS Upgrade"
msgstr ""

#: library/asyncio-eventloop.rst:779
msgid "Upgrade an existing transport-based connection to TLS."
msgstr "Convertit une connexion existante en connexion TLS."

#: library/asyncio-eventloop.rst:781
msgid ""
"Return a new transport instance, that the *protocol* must start using "
"immediately after the *await*.  The *transport* instance passed to the "
"*start_tls* method should never be used again."
msgstr ""

#: library/asyncio-eventloop.rst:787
msgid ""
"*transport* and *protocol* instances that methods like :meth:`~loop."
"create_server` and :meth:`~loop.create_connection` return."
msgstr ""

#: library/asyncio-eventloop.rst:791
msgid "*sslcontext*: a configured instance of :class:`~ssl.SSLContext`."
msgstr ""

#: library/asyncio-eventloop.rst:793
msgid ""
"*server_side* pass ``True`` when a server-side connection is being upgraded "
"(like the one created by :meth:`~loop.create_server`)."
msgstr ""

#: library/asyncio-eventloop.rst:796
msgid ""
"*server_hostname*: sets or overrides the host name that the target server's "
"certificate will be matched against."
msgstr ""

#: library/asyncio-eventloop.rst:807
msgid "Watching file descriptors"
msgstr "Surveiller des descripteurs de fichiers"

#: library/asyncio-eventloop.rst:811
msgid ""
"Start monitoring the *fd* file descriptor for read availability and invoke "
"*callback* with the specified arguments once *fd* is available for reading."
msgstr ""

#: library/asyncio-eventloop.rst:817
msgid "Stop monitoring the *fd* file descriptor for read availability."
msgstr ""

#: library/asyncio-eventloop.rst:821
msgid ""
"Start monitoring the *fd* file descriptor for write availability and invoke "
"*callback* with the specified arguments once *fd* is available for writing."
msgstr ""

#: library/asyncio-eventloop.rst:825 library/asyncio-eventloop.rst:1044
msgid ""
"Use :func:`functools.partial` :ref:`to pass keyword arguments <asyncio-pass-"
"keywords>` to *callback*."
msgstr ""

#: library/asyncio-eventloop.rst:830
msgid "Stop monitoring the *fd* file descriptor for write availability."
msgstr ""

#: library/asyncio-eventloop.rst:832
msgid ""
"See also :ref:`Platform Support <asyncio-platform-support>` section for some "
"limitations of these methods."
msgstr ""

#: library/asyncio-eventloop.rst:837
msgid "Working with socket objects directly"
msgstr ""

#: library/asyncio-eventloop.rst:839
msgid ""
"In general, protocol implementations that use transport-based APIs such as :"
"meth:`loop.create_connection` and :meth:`loop.create_server` are faster than "
"implementations that work with sockets directly. However, there are some use "
"cases when performance is not critical, and working with :class:`~socket."
"socket` objects directly is more convenient."
msgstr ""

#: library/asyncio-eventloop.rst:848
msgid ""
"Receive up to *nbytes* from *sock*.  Asynchronous version of :meth:`socket."
"recv() <socket.socket.recv>`."
msgstr ""

#: library/asyncio-eventloop.rst:851
msgid "Return the received data as a bytes object."
msgstr ""

#: library/asyncio-eventloop.rst:853 library/asyncio-eventloop.rst:867
#: library/asyncio-eventloop.rst:882 library/asyncio-eventloop.rst:895
#: library/asyncio-eventloop.rst:921 library/asyncio-eventloop.rst:959
msgid "*sock* must be a non-blocking socket."
msgstr "Le connecteur *sock* ne doit pas être bloquant."

#: library/asyncio-eventloop.rst:855
msgid ""
"Even though this method was always documented as a coroutine method, "
"releases before Python 3.7 returned a :class:`Future`. Since Python 3.7 this "
"is an ``async def`` method."
msgstr ""

#: library/asyncio-eventloop.rst:862
msgid ""
"Receive data from *sock* into the *buf* buffer.  Modeled after the blocking :"
"meth:`socket.recv_into() <socket.socket.recv_into>` method."
msgstr ""

#: library/asyncio-eventloop.rst:865
msgid "Return the number of bytes written to the buffer."
msgstr ""

#: library/asyncio-eventloop.rst:873
msgid ""
"Send *data* to the *sock* socket. Asynchronous version of :meth:`socket."
"sendall() <socket.socket.sendall>`."
msgstr ""

#: library/asyncio-eventloop.rst:876
msgid ""
"This method continues to send to the socket until either all data in *data* "
"has been sent or an error occurs.  ``None`` is returned on success.  On "
"error, an exception is raised. Additionally, there is no way to determine "
"how much data, if any, was successfully processed by the receiving end of "
"the connection."
msgstr ""

#: library/asyncio-eventloop.rst:884
msgid ""
"Even though the method was always documented as a coroutine method, before "
"Python 3.7 it returned an :class:`Future`. Since Python 3.7, this is an "
"``async def`` method."
msgstr ""

#: library/asyncio-eventloop.rst:891
msgid "Connect *sock* to a remote socket at *address*."
msgstr ""

#: library/asyncio-eventloop.rst:893
msgid ""
"Asynchronous version of :meth:`socket.connect() <socket.socket.connect>`."
msgstr ""

#: library/asyncio-eventloop.rst:897
msgid ""
"``address`` no longer needs to be resolved.  ``sock_connect`` will try to "
"check if the *address* is already resolved by calling :func:`socket."
"inet_pton`.  If not, :meth:`loop.getaddrinfo` will be used to resolve the "
"*address*."
msgstr ""

#: library/asyncio-eventloop.rst:906
msgid ""
":meth:`loop.create_connection` and  :func:`asyncio.open_connection() "
"<open_connection>`."
msgstr ""

#: library/asyncio-eventloop.rst:912
msgid ""
"Accept a connection.  Modeled after the blocking :meth:`socket.accept() "
"<socket.socket.accept>` method."
msgstr ""

#: library/asyncio-eventloop.rst:915
msgid ""
"The socket must be bound to an address and listening for connections. The "
"return value is a pair ``(conn, address)`` where *conn* is a *new* socket "
"object usable to send and receive data on the connection, and *address* is "
"the address bound to the socket on the other end of the connection."
msgstr ""

#: library/asyncio-eventloop.rst:923
msgid ""
"Even though the method was always documented as a coroutine method, before "
"Python 3.7 it returned a :class:`Future`. Since Python 3.7, this is an "
"``async def`` method."
msgstr ""

#: library/asyncio-eventloop.rst:930
msgid ":meth:`loop.create_server` and :func:`start_server`."
msgstr ""

#: library/asyncio-eventloop.rst:935
msgid ""
"Send a file using high-performance :mod:`os.sendfile` if possible. Return "
"the total number of bytes sent."
msgstr ""

#: library/asyncio-eventloop.rst:938
msgid ""
"Asynchronous version of :meth:`socket.sendfile() <socket.socket.sendfile>`."
msgstr ""

#: library/asyncio-eventloop.rst:940
msgid ""
"*sock* must be a non-blocking :const:`socket.SOCK_STREAM` :class:`~socket."
"socket`."
msgstr ""

#: library/asyncio-eventloop.rst:943
msgid "*file* must be a regular file object open in binary mode."
msgstr ""

#: library/asyncio-eventloop.rst:952
msgid ""
"*fallback*, when set to ``True``, makes asyncio manually read and send the "
"file when the platform does not support the sendfile syscall (e.g. Windows "
"or SSL socket on Unix)."
msgstr ""

#: library/asyncio-eventloop.rst:956
msgid ""
"Raise :exc:`SendfileNotAvailableError` if the system does not support "
"*sendfile* syscall and *fallback* is ``False``."
msgstr ""

#: library/asyncio-eventloop.rst:965
msgid "DNS"
msgstr ""

#: library/asyncio-eventloop.rst:970
msgid "Asynchronous version of :meth:`socket.getaddrinfo`."
msgstr ""

#: library/asyncio-eventloop.rst:974
msgid "Asynchronous version of :meth:`socket.getnameinfo`."
msgstr ""

#: library/asyncio-eventloop.rst:976
msgid ""
"Both *getaddrinfo* and *getnameinfo* methods were always documented to "
"return a coroutine, but prior to Python 3.7 they were, in fact, returning :"
"class:`asyncio.Future` objects.  Starting with Python 3.7 both methods are "
"coroutines."
msgstr ""

#: library/asyncio-eventloop.rst:984
msgid "Working with pipes"
msgstr ""

#: library/asyncio-eventloop.rst:988
msgid "Register the read end of *pipe* in the event loop."
msgstr ""
"Branche l'extrémité en lecture du tube *pipe* à la boucle d'évènements."

#: library/asyncio-eventloop.rst:993
msgid "*pipe* is a :term:`file-like object <file object>`."
msgstr ""

#: library/asyncio-eventloop.rst:995
msgid ""
"Return pair ``(transport, protocol)``, where *transport* supports the :class:"
"`ReadTransport` interface and *protocol* is an object instantiated by the "
"*protocol_factory*."
msgstr ""

#: library/asyncio-eventloop.rst:999 library/asyncio-eventloop.rst:1015
msgid ""
"With :class:`SelectorEventLoop` event loop, the *pipe* is set to non-"
"blocking mode."
msgstr ""

#: library/asyncio-eventloop.rst:1004
msgid "Register the write end of *pipe* in the event loop."
msgstr "Branche l'extrémité en écriture de *pipe* à la boucle d'évènements."

#: library/asyncio-eventloop.rst:1009
msgid "*pipe* is :term:`file-like object <file object>`."
msgstr ""

#: library/asyncio-eventloop.rst:1011
msgid ""
"Return pair ``(transport, protocol)``, where *transport* supports :class:"
"`WriteTransport` interface and *protocol* is an object instantiated by the "
"*protocol_factory*."
msgstr ""

#: library/asyncio-eventloop.rst:1020
msgid ""
":class:`SelectorEventLoop` does not support the above methods on Windows.  "
"Use :class:`ProactorEventLoop` instead for Windows."
msgstr ""

#: library/asyncio-eventloop.rst:1025
msgid ""
"The :meth:`loop.subprocess_exec` and :meth:`loop.subprocess_shell` methods."
msgstr ""

#: library/asyncio-eventloop.rst:1030
msgid "Unix signals"
msgstr "Signaux Unix"

#: library/asyncio-eventloop.rst:1034
msgid "Set *callback* as the handler for the *signum* signal."
msgstr ""

#: library/asyncio-eventloop.rst:1036
msgid ""
"The callback will be invoked by *loop*, along with other queued callbacks "
"and runnable coroutines of that event loop. Unlike signal handlers "
"registered using :func:`signal.signal`, a callback registered with this "
"function is allowed to interact with the event loop."
msgstr ""

#: library/asyncio-eventloop.rst:1041
msgid ""
"Raise :exc:`ValueError` if the signal number is invalid or uncatchable. "
"Raise :exc:`RuntimeError` if there is a problem setting up the handler."
msgstr ""

#: library/asyncio-eventloop.rst:1047
msgid ""
"Like :func:`signal.signal`, this function must be invoked in the main thread."
msgstr ""

#: library/asyncio-eventloop.rst:1052
msgid "Remove the handler for the *sig* signal."
msgstr "Supprime le gestionnaire du signal *sig*."

#: library/asyncio-eventloop.rst:1054
msgid ""
"Return ``True`` if the signal handler was removed, or ``False`` if no "
"handler was set for the given signal."
msgstr ""

#: library/asyncio-eventloop.rst:1061
msgid "The :mod:`signal` module."
msgstr "Le module :mod:`signal`."

#: library/asyncio-eventloop.rst:1065
msgid "Executing code in thread or process pools"
msgstr ""

#: library/asyncio-eventloop.rst:1069
msgid "Arrange for *func* to be called in the specified executor."
msgstr ""

#: library/asyncio-eventloop.rst:1071
msgid ""
"The *executor* argument should be an :class:`concurrent.futures.Executor` "
"instance. The default executor is used if *executor* is ``None``."
msgstr ""

#: library/asyncio-eventloop.rst:1115
msgid "This method returns a :class:`asyncio.Future` object."
msgstr ""

#: library/asyncio-eventloop.rst:1117
msgid ""
"Use :func:`functools.partial` :ref:`to pass keyword arguments <asyncio-pass-"
"keywords>` to *func*."
msgstr ""

#: library/asyncio-eventloop.rst:1120
msgid ""
":meth:`loop.run_in_executor` no longer configures the ``max_workers`` of the "
"thread pool executor it creates, instead leaving it up to the thread pool "
"executor (:class:`~concurrent.futures.ThreadPoolExecutor`) to set the "
"default."
msgstr ""

#: library/asyncio-eventloop.rst:1129
msgid ""
"Set *executor* as the default executor used by :meth:`run_in_executor`. "
"*executor* should be an instance of :class:`~concurrent.futures."
"ThreadPoolExecutor`."
msgstr ""

#: library/asyncio-eventloop.rst:1133
msgid ""
"Using an executor that is not an instance of :class:`~concurrent.futures."
"ThreadPoolExecutor` is deprecated and will trigger an error in Python 3.9."
msgstr ""

#: library/asyncio-eventloop.rst:1138
msgid ""
"*executor* must be an instance of :class:`concurrent.futures."
"ThreadPoolExecutor`."
msgstr ""

#: library/asyncio-eventloop.rst:1143
msgid "Error Handling API"
msgstr "API de gestion d'erreur"

#: library/asyncio-eventloop.rst:1145
msgid "Allows customizing how exceptions are handled in the event loop."
msgstr ""

#: library/asyncio-eventloop.rst:1149
msgid "Set *handler* as the new event loop exception handler."
msgstr ""

#: library/asyncio-eventloop.rst:1151
msgid ""
"If *handler* is ``None``, the default exception handler will be set.  "
"Otherwise, *handler* must be a callable with the signature matching ``(loop, "
"context)``, where ``loop`` is a reference to the active event loop, and "
"``context`` is a ``dict`` object containing the details of the exception "
"(see :meth:`call_exception_handler` documentation for details about context)."
msgstr ""

#: library/asyncio-eventloop.rst:1161
msgid ""
"Return the current exception handler, or ``None`` if no custom exception "
"handler was set."
msgstr ""

#: library/asyncio-eventloop.rst:1168
msgid "Default exception handler."
msgstr "Gestionnaire d'exception par défaut."

#: library/asyncio-eventloop.rst:1170
msgid ""
"This is called when an exception occurs and no exception handler is set. "
"This can be called by a custom exception handler that wants to defer to the "
"default handler behavior."
msgstr ""

#: library/asyncio-eventloop.rst:1174
msgid ""
"*context* parameter has the same meaning as in :meth:"
"`call_exception_handler`."
msgstr ""

#: library/asyncio-eventloop.rst:1179
msgid "Call the current event loop exception handler."
msgstr ""
"Appelle le gestionnaire d'exception de la boucle d'évènements actuelle."

#: library/asyncio-eventloop.rst:1181
msgid ""
"*context* is a ``dict`` object containing the following keys (new keys may "
"be introduced in future Python versions):"
msgstr ""

#: library/asyncio-eventloop.rst:1184
msgid "'message': Error message;"
msgstr "``message`` : Message d'erreur ;"

#: library/asyncio-eventloop.rst:1185
msgid "'exception' (optional): Exception object;"
msgstr "``exception`` (optionnel): Un objet exception ;"

#: library/asyncio-eventloop.rst:1186
msgid "'future' (optional): :class:`asyncio.Future` instance;"
msgstr ""

#: library/asyncio-eventloop.rst:1187
msgid "'handle' (optional): :class:`asyncio.Handle` instance;"
msgstr ""

#: library/asyncio-eventloop.rst:1188
msgid "'protocol' (optional): :ref:`Protocol <asyncio-protocol>` instance;"
msgstr ""

#: library/asyncio-eventloop.rst:1189
msgid "'transport' (optional): :ref:`Transport <asyncio-transport>` instance;"
msgstr ""

#: library/asyncio-eventloop.rst:1190
msgid "'socket' (optional): :class:`socket.socket` instance."
msgstr ""

#: library/asyncio-eventloop.rst:1194
msgid ""
"This method should not be overloaded in subclassed event loops.  For custom "
"exception handling, use the :meth:`set_exception_handler()` method."
msgstr ""

#: library/asyncio-eventloop.rst:1199
msgid "Enabling debug mode"
msgstr "Active le mode débogage"

#: library/asyncio-eventloop.rst:1203
msgid "Get the debug mode (:class:`bool`) of the event loop."
msgstr ""

#: library/asyncio-eventloop.rst:1205
msgid ""
"The default value is ``True`` if the environment variable :envvar:"
"`PYTHONASYNCIODEBUG` is set to a non-empty string, ``False`` otherwise."
msgstr ""

#: library/asyncio-eventloop.rst:1211
msgid "Set the debug mode of the event loop."
msgstr "Active le mode débogage pour la boucle d'évènements."

#: library/asyncio-eventloop.rst:1215
msgid ""
"The new :ref:`Python Development Mode <devmode>` can now also be used to "
"enable the debug mode."
msgstr ""

#: library/asyncio-eventloop.rst:1220
msgid "The :ref:`debug mode of asyncio <asyncio-debug-mode>`."
msgstr ""

#: library/asyncio-eventloop.rst:1224
msgid "Running Subprocesses"
msgstr ""

#: library/asyncio-eventloop.rst:1226
msgid ""
"Methods described in this subsections are low-level.  In regular async/await "
"code consider using the high-level :func:`asyncio.create_subprocess_shell` "
"and :func:`asyncio.create_subprocess_exec` convenience functions instead."
msgstr ""

#: library/asyncio-eventloop.rst:1233
msgid ""
"The default asyncio event loop on **Windows** does not support subprocesses. "
"See :ref:`Subprocess Support on Windows <asyncio-windows-subprocess>` for "
"details."
msgstr ""

#: library/asyncio-eventloop.rst:1241
msgid ""
"Create a subprocess from one or more string arguments specified by *args*."
msgstr ""

#: library/asyncio-eventloop.rst:1244
msgid "*args* must be a list of strings represented by:"
msgstr ""

#: library/asyncio-eventloop.rst:1246
#, fuzzy
msgid ":class:`str`;"
msgstr ":class:`str`"

#: library/asyncio-eventloop.rst:1247
msgid ""
"or :class:`bytes`, encoded to the :ref:`filesystem encoding <filesystem-"
"encoding>`."
msgstr ""

#: library/asyncio-eventloop.rst:1250
msgid ""
"The first string specifies the program executable, and the remaining strings "
"specify the arguments.  Together, string arguments form the ``argv`` of the "
"program."
msgstr ""

#: library/asyncio-eventloop.rst:1254
msgid ""
"This is similar to the standard library :class:`subprocess.Popen` class "
"called with ``shell=False`` and the list of strings passed as the first "
"argument; however, where :class:`~subprocess.Popen` takes a single argument "
"which is list of strings, *subprocess_exec* takes multiple string arguments."
msgstr ""

#: library/asyncio-eventloop.rst:1260
msgid ""
"The *protocol_factory* must be a callable returning a subclass of the :class:"
"`asyncio.SubprocessProtocol` class."
msgstr ""

#: library/asyncio-eventloop.rst:1263
msgid "Other parameters:"
msgstr "Autres paramètres :"

#: library/asyncio-eventloop.rst:1265
msgid "*stdin* can be any of these:"
msgstr ""

#: library/asyncio-eventloop.rst:1267
msgid ""
"a file-like object representing a pipe to be connected to the subprocess's "
"standard input stream using :meth:`~loop.connect_write_pipe`"
msgstr ""

#: library/asyncio-eventloop.rst:1270 library/asyncio-eventloop.rst:1282
#: library/asyncio-eventloop.rst:1294
msgid ""
"the :const:`subprocess.PIPE` constant (default) which will create a new pipe "
"and connect it,"
msgstr ""

#: library/asyncio-eventloop.rst:1272 library/asyncio-eventloop.rst:1284
#: library/asyncio-eventloop.rst:1296
msgid ""
"the value ``None`` which will make the subprocess inherit the file "
"descriptor from this process"
msgstr ""

#: library/asyncio-eventloop.rst:1274 library/asyncio-eventloop.rst:1286
#: library/asyncio-eventloop.rst:1298
msgid ""
"the :const:`subprocess.DEVNULL` constant which indicates that the special :"
"data:`os.devnull` file will be used"
msgstr ""

#: library/asyncio-eventloop.rst:1277
msgid "*stdout* can be any of these:"
msgstr ""

#: library/asyncio-eventloop.rst:1279
msgid ""
"a file-like object representing a pipe to be connected to the subprocess's "
"standard output stream using :meth:`~loop.connect_write_pipe`"
msgstr ""

#: library/asyncio-eventloop.rst:1289
msgid "*stderr* can be any of these:"
msgstr ""

#: library/asyncio-eventloop.rst:1291
msgid ""
"a file-like object representing a pipe to be connected to the subprocess's "
"standard error stream using :meth:`~loop.connect_write_pipe`"
msgstr ""

#: library/asyncio-eventloop.rst:1300
msgid ""
"the :const:`subprocess.STDOUT` constant which will connect the standard "
"error stream to the process' standard output stream"
msgstr ""

#: library/asyncio-eventloop.rst:1303
msgid ""
"All other keyword arguments are passed to :class:`subprocess.Popen` without "
"interpretation, except for *bufsize*, *universal_newlines*, *shell*, *text*, "
"*encoding* and *errors*, which should not be specified at all."
msgstr ""

#: library/asyncio-eventloop.rst:1308
msgid ""
"The ``asyncio`` subprocess API does not support decoding the streams as "
"text. :func:`bytes.decode` can be used to convert the bytes returned from "
"the stream to text."
msgstr ""

#: library/asyncio-eventloop.rst:1312
msgid ""
"See the constructor of the :class:`subprocess.Popen` class for documentation "
"on other arguments."
msgstr ""

#: library/asyncio-eventloop.rst:1315
msgid ""
"Returns a pair of ``(transport, protocol)``, where *transport* conforms to "
"the :class:`asyncio.SubprocessTransport` base class and *protocol* is an "
"object instantiated by the *protocol_factory*."
msgstr ""

#: library/asyncio-eventloop.rst:1323
msgid ""
"Create a subprocess from *cmd*, which can be a :class:`str` or a :class:"
"`bytes` string encoded to the :ref:`filesystem encoding <filesystem-"
"encoding>`, using the platform's \"shell\" syntax."
msgstr ""

#: library/asyncio-eventloop.rst:1328
msgid ""
"This is similar to the standard library :class:`subprocess.Popen` class "
"called with ``shell=True``."
msgstr ""

#: library/asyncio-eventloop.rst:1331
msgid ""
"The *protocol_factory* must be a callable returning a subclass of the :class:"
"`SubprocessProtocol` class."
msgstr ""

#: library/asyncio-eventloop.rst:1334
msgid ""
"See :meth:`~loop.subprocess_exec` for more details about the remaining "
"arguments."
msgstr ""

#: library/asyncio-eventloop.rst:1337
msgid ""
"Returns a pair of ``(transport, protocol)``, where *transport* conforms to "
"the :class:`SubprocessTransport` base class and *protocol* is an object "
"instantiated by the *protocol_factory*."
msgstr ""

#: library/asyncio-eventloop.rst:1342
msgid ""
"It is the application's responsibility to ensure that all whitespace and "
"special characters are quoted appropriately to avoid `shell injection "
"<https://en.wikipedia.org/wiki/Shell_injection#Shell_injection>`_ "
"vulnerabilities. The :func:`shlex.quote` function can be used to properly "
"escape whitespace and special characters in strings that are going to be "
"used to construct shell commands."
msgstr ""

#: library/asyncio-eventloop.rst:1351
msgid "Callback Handles"
msgstr ""

#: library/asyncio-eventloop.rst:1355
msgid ""
"A callback wrapper object returned by :meth:`loop.call_soon`, :meth:`loop."
"call_soon_threadsafe`."
msgstr ""

#: library/asyncio-eventloop.rst:1360
msgid ""
"Cancel the callback.  If the callback has already been canceled or executed, "
"this method has no effect."
msgstr ""

#: library/asyncio-eventloop.rst:1365
msgid "Return ``True`` if the callback was cancelled."
msgstr "Renvoie ``True`` si la fonction de rappel à été annulé."

#: library/asyncio-eventloop.rst:1371
msgid ""
"A callback wrapper object returned by :meth:`loop.call_later`, and :meth:"
"`loop.call_at`."
msgstr ""

#: library/asyncio-eventloop.rst:1374
msgid "This class is a subclass of :class:`Handle`."
msgstr ""

#: library/asyncio-eventloop.rst:1378
msgid "Return a scheduled callback time as :class:`float` seconds."
msgstr ""

#: library/asyncio-eventloop.rst:1380
msgid ""
"The time is an absolute timestamp, using the same time reference as :meth:"
"`loop.time`."
msgstr ""

#: library/asyncio-eventloop.rst:1387
msgid "Server Objects"
msgstr "Objets Serveur"

#: library/asyncio-eventloop.rst:1389
msgid ""
"Server objects are created by :meth:`loop.create_server`, :meth:`loop."
"create_unix_server`, :func:`start_server`, and :func:`start_unix_server` "
"functions."
msgstr ""

#: library/asyncio-eventloop.rst:1393
msgid "Do not instantiate the class directly."
msgstr ""

#: library/asyncio-eventloop.rst:1397
msgid ""
"*Server* objects are asynchronous context managers.  When used in an ``async "
"with`` statement, it's guaranteed that the Server object is closed and not "
"accepting new connections when the ``async with`` statement is completed::"
msgstr ""

#: library/asyncio-eventloop.rst:1410
msgid "Server object is an asynchronous context manager since Python 3.7."
msgstr ""

#: library/asyncio-eventloop.rst:1415
msgid ""
"Stop serving: close listening sockets and set the :attr:`sockets` attribute "
"to ``None``."
msgstr ""

#: library/asyncio-eventloop.rst:1418
msgid ""
"The sockets that represent existing incoming client connections are left "
"open."
msgstr ""

#: library/asyncio-eventloop.rst:1421
msgid ""
"The server is closed asynchronously, use the :meth:`wait_closed` coroutine "
"to wait until the server is closed."
msgstr ""

#: library/asyncio-eventloop.rst:1426
msgid "Return the event loop associated with the server object."
msgstr ""

#: library/asyncio-eventloop.rst:1432
msgid "Start accepting connections."
msgstr "Commence à accepter les connexions."

#: library/asyncio-eventloop.rst:1434
msgid ""
"This method is idempotent, so it can be called when the server is already "
"being serving."
msgstr ""

#: library/asyncio-eventloop.rst:1437
msgid ""
"The *start_serving* keyword-only parameter to :meth:`loop.create_server` "
"and :meth:`asyncio.start_server` allows creating a Server object that is not "
"accepting connections initially.  In this case ``Server.start_serving()``, "
"or :meth:`Server.serve_forever` can be used to make the Server start "
"accepting connections."
msgstr ""

#: library/asyncio-eventloop.rst:1448
msgid ""
"Start accepting connections until the coroutine is cancelled. Cancellation "
"of ``serve_forever`` task causes the server to be closed."
msgstr ""

#: library/asyncio-eventloop.rst:1452
msgid ""
"This method can be called if the server is already accepting connections.  "
"Only one ``serve_forever`` task can exist per one *Server* object."
msgstr ""

#: library/asyncio-eventloop.rst:1474
msgid "Return ``True`` if the server is accepting new connections."
msgstr "Donne ``True`` si le serveur accepte de nouvelles connexions."

#: library/asyncio-eventloop.rst:1480
msgid "Wait until the :meth:`close` method completes."
msgstr "Attends que la méthode :meth:`close` se termine."

#: library/asyncio-eventloop.rst:1484
msgid "List of :class:`socket.socket` objects the server is listening on."
msgstr ""

#: library/asyncio-eventloop.rst:1486
msgid ""
"Prior to Python 3.7 ``Server.sockets`` used to return an internal list of "
"server sockets directly.  In 3.7 a copy of that list is returned."
msgstr ""

#: library/asyncio-eventloop.rst:1495
msgid "Event Loop Implementations"
msgstr "Implémentations de boucle d'évènements"

#: library/asyncio-eventloop.rst:1497
msgid ""
"asyncio ships with two different event loop implementations: :class:"
"`SelectorEventLoop` and :class:`ProactorEventLoop`."
msgstr ""

#: library/asyncio-eventloop.rst:1500
msgid ""
"By default asyncio is configured to use :class:`SelectorEventLoop` on Unix "
"and :class:`ProactorEventLoop` on Windows."
msgstr ""

#: library/asyncio-eventloop.rst:1506
msgid "An event loop based on the :mod:`selectors` module."
msgstr ""

#: library/asyncio-eventloop.rst:1508
msgid ""
"Uses the most efficient *selector* available for the given platform.  It is "
"also possible to manually configure the exact selector implementation to be "
"used::"
msgstr ""

#: library/asyncio-eventloop.rst:1520
msgid ":ref:`Availability <availability>`: Unix, Windows."
msgstr ":ref:`Disponibilité <availability>` : Unix, Windows."

#: library/asyncio-eventloop.rst:1525
msgid "An event loop for Windows that uses \"I/O Completion Ports\" (IOCP)."
msgstr ""

#: library/asyncio-eventloop.rst:1528
msgid ":ref:`Availability <availability>`: Windows."
msgstr ":ref:`Disponibilité <availability>` : Windows."

#: library/asyncio-eventloop.rst:1531
msgid ""
"`MSDN documentation on I/O Completion Ports <https://docs.microsoft.com/en-"
"ca/windows/desktop/FileIO/i-o-completion-ports>`_."
msgstr ""

#: library/asyncio-eventloop.rst:1537
msgid "Abstract base class for asyncio-compliant event loops."
msgstr ""

#: library/asyncio-eventloop.rst:1539
msgid ""
"The :ref:`Event Loop Methods <asyncio-event-loop>` section lists all methods "
"that an alternative implementation of ``AbstractEventLoop`` should have "
"defined."
msgstr ""

#: library/asyncio-eventloop.rst:1545
msgid "Examples"
msgstr "Exemples"

#: library/asyncio-eventloop.rst:1547
msgid ""
"Note that all examples in this section **purposefully** show how to use the "
"low-level event loop APIs, such as :meth:`loop.run_forever` and :meth:`loop."
"call_soon`.  Modern asyncio applications rarely need to be written this way; "
"consider using the high-level functions like :func:`asyncio.run`."
msgstr ""

#: library/asyncio-eventloop.rst:1557
msgid "Hello World with call_soon()"
msgstr "\"Hello World\" avec ``call_soon()``"

#: library/asyncio-eventloop.rst:1559
msgid ""
"An example using the :meth:`loop.call_soon` method to schedule a callback. "
"The callback displays ``\"Hello World\"`` and then stops the event loop::"
msgstr ""

#: library/asyncio-eventloop.rst:1583
msgid ""
"A similar :ref:`Hello World <coroutine>` example created with a coroutine "
"and the :func:`run` function."
msgstr ""

#: library/asyncio-eventloop.rst:1590
msgid "Display the current date with call_later()"
msgstr "Afficher la date actuelle avec ``call_later()``"

#: library/asyncio-eventloop.rst:1592
msgid ""
"An example of a callback displaying the current date every second. The "
"callback uses the :meth:`loop.call_later` method to reschedule itself after "
"5 seconds, and then stops the event loop::"
msgstr ""

#: library/asyncio-eventloop.rst:1620
msgid ""
"A similar :ref:`current date <asyncio_example_sleep>` example created with a "
"coroutine and the :func:`run` function."
msgstr ""

#: library/asyncio-eventloop.rst:1627
msgid "Watch a file descriptor for read events"
msgstr ""

#: library/asyncio-eventloop.rst:1629
msgid ""
"Wait until a file descriptor received some data using the :meth:`loop."
"add_reader` method and then close the event loop::"
msgstr ""

#: library/asyncio-eventloop.rst:1667
msgid ""
"A similar :ref:`example <asyncio_example_create_connection>` using "
"transports, protocols, and the :meth:`loop.create_connection` method."
msgstr ""

#: library/asyncio-eventloop.rst:1671
msgid ""
"Another similar :ref:`example <asyncio_example_create_connection-streams>` "
"using the high-level :func:`asyncio.open_connection` function and streams."
msgstr ""

#: library/asyncio-eventloop.rst:1679
msgid "Set signal handlers for SIGINT and SIGTERM"
msgstr "Définit les gestionnaires de signaux pour *SIGINT* et *SIGTERM*"

#: library/asyncio-eventloop.rst:1681
msgid "(This ``signals`` example only works on Unix.)"
msgstr "(Cet exemple ne fonctionne que sur Unix.)"

#: library/asyncio-eventloop.rst:1683
msgid ""
"Register handlers for signals :py:data:`SIGINT` and :py:data:`SIGTERM` using "
"the :meth:`loop.add_signal_handler` method::"
msgstr ""
