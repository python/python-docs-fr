# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-12-01 07:43+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/asyncio-eventloop.rst:6
msgid "Base Event Loop"
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:8
msgid "**Source code:** :source:`Lib/asyncio/events.py`"
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:10
msgid ""
"The event loop is the central execution device provided by :mod:`asyncio`. "
"It provides multiple facilities, including:"
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:13
msgid "Registering, executing and cancelling delayed calls (timeouts)."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:15
msgid ""
"Creating client and server :ref:`transports <asyncio-transport>` for various "
"kinds of communication."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:18
msgid ""
"Launching subprocesses and the associated :ref:`transports <asyncio-"
"transport>` for communication with an external program."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:21
msgid "Delegating costly function calls to a pool of threads."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:25
msgid ""
"This class is an implementation detail.  It is a subclass of :class:"
"`AbstractEventLoop` and may be a base class of concrete event loop "
"implementations found in :mod:`asyncio`.  It should not be used directly; "
"use :class:`AbstractEventLoop` instead. ``BaseEventLoop`` should not be "
"subclassed by third-party code; the internal interface is not stable."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:34
msgid "Abstract base class of event loops."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:36
msgid "This class is :ref:`not thread safe <asyncio-multithreading>`."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:39
msgid "Run an event loop"
msgstr "Exécuter une boucle d'évènements"

#: ../Doc/library/asyncio-eventloop.rst:43
msgid ""
"Run until :meth:`stop` is called.  If :meth:`stop` is called before :meth:"
"`run_forever()` is called, this polls the I/O selector once with a timeout "
"of zero, runs all callbacks scheduled in response to I/O events (and those "
"that were already scheduled), and then exits. If :meth:`stop` is called "
"while :meth:`run_forever` is running, this will run the current batch of "
"callbacks and then exit.  Note that callbacks scheduled by callbacks will "
"not run in that case; they will run the next time :meth:`run_forever` is "
"called."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:56
msgid "Run until the :class:`Future` is done."
msgstr "Exécuter jusqu'à ce que :class:`Future` soit terminé."

#: ../Doc/library/asyncio-eventloop.rst:58
msgid ""
"If the argument is a :ref:`coroutine object <coroutine>`, it is wrapped by :"
"func:`ensure_future`."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:61
msgid "Return the Future's result, or raise its exception."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:65
msgid "Returns running status of event loop."
msgstr "Donne le status d'exécution de la boucle d'évènements."

#: ../Doc/library/asyncio-eventloop.rst:69
msgid "Stop running the event loop."
msgstr "Arrête l'exécution de la boucle d'évènements."

#: ../Doc/library/asyncio-eventloop.rst:71
msgid ""
"This causes :meth:`run_forever` to exit at the next suitable opportunity "
"(see there for more details)."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:78
msgid "Returns ``True`` if the event loop was closed."
msgstr "Donne ``True`` si la boucle d'évènements est fermée."

#: ../Doc/library/asyncio-eventloop.rst:84
msgid ""
"Close the event loop. The loop must not be running.  Pending callbacks will "
"be lost."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:87
msgid ""
"This clears the queues and shuts down the executor, but does not wait for "
"the executor to finish."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:90
msgid ""
"This is idempotent and irreversible. No other methods should be called after "
"this one."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:96
msgid ""
"Schedule all currently open :term:`asynchronous generator` objects to close "
"with an :meth:`~agen.aclose()` call.  After calling this method, the event "
"loop will issue a warning whenever a new asynchronous generator is "
"iterated.  Should be used to finalize all scheduled asynchronous generators "
"reliably.  Example::"
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:114
msgid "Calls"
msgstr "Appels"

#: ../Doc/library/asyncio-eventloop.rst:116
msgid ""
"Most :mod:`asyncio` functions don't accept keywords. If you want to pass "
"keywords to your callback, use :func:`functools.partial`. For example, "
"``loop.call_soon(functools.partial(print, \"Hello\", flush=True))`` will "
"call ``print(\"Hello\", flush=True)``."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:122
msgid ""
":func:`functools.partial` is better than ``lambda`` functions, because :mod:"
"`asyncio` can inspect :func:`functools.partial` object to display parameters "
"in debug mode, whereas ``lambda`` functions have a poor representation."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:129
msgid ""
"Arrange for a callback to be called as soon as possible.  The callback is "
"called after :meth:`call_soon` returns, when control returns to the event "
"loop."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:133
msgid ""
"This operates as a :abbr:`FIFO (first-in, first-out)` queue, callbacks are "
"called in the order in which they are registered.  Each callback will be "
"called exactly once."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:137
msgid ""
"Any positional arguments after the callback will be passed to the callback "
"when it is called."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:140
#: ../Doc/library/asyncio-eventloop.rst:174
#: ../Doc/library/asyncio-eventloop.rst:196
msgid ""
"An instance of :class:`asyncio.Handle` is returned, which can be used to "
"cancel the callback."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:143
#: ../Doc/library/asyncio-eventloop.rst:185
#: ../Doc/library/asyncio-eventloop.rst:199
#: ../Doc/library/asyncio-eventloop.rst:519
#: ../Doc/library/asyncio-eventloop.rst:531
#: ../Doc/library/asyncio-eventloop.rst:685
msgid ""
":ref:`Use functools.partial to pass keywords to the callback <asyncio-pass-"
"keywords>`."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:148
msgid "Like :meth:`call_soon`, but thread safe."
msgstr "Comme :meth:`call_soon` mais *thread safe*."

#: ../Doc/library/asyncio-eventloop.rst:150
msgid ""
"See the :ref:`concurrency and multithreading <asyncio-multithreading>` "
"section of the documentation."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:157
msgid "Delayed calls"
msgstr "Appels différés"

#: ../Doc/library/asyncio-eventloop.rst:159
msgid ""
"The event loop has its own internal clock for computing timeouts. Which "
"clock is used depends on the (platform-specific) event loop implementation; "
"ideally it is a monotonic clock.  This will generally be a different clock "
"than :func:`time.time`."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:166
msgid ""
"Timeouts (relative *delay* or absolute *when*) should not exceed one day."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:171
msgid ""
"Arrange for the *callback* to be called after the given *delay* seconds "
"(either an int or float)."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:177
msgid ""
"*callback* will be called exactly once per call to :meth:`call_later`. If "
"two callbacks are scheduled for exactly the same time, it is undefined which "
"will be called first."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:181
msgid ""
"The optional positional *args* will be passed to the callback when it is "
"called. If you want the callback to be called with some named arguments, use "
"a closure or :func:`functools.partial`."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:190
msgid ""
"Arrange for the *callback* to be called at the given absolute timestamp "
"*when* (an int or float), using the same time reference as :meth:"
"`AbstractEventLoop.time`."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:194
msgid "This method's behavior is the same as :meth:`call_later`."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:204
msgid ""
"Return the current time, as a :class:`float` value, according to the event "
"loop's internal clock."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:209
msgid "The :func:`asyncio.sleep` function."
msgstr "La fonction :func:`asyncio.sleep`."

#: ../Doc/library/asyncio-eventloop.rst:213
msgid "Futures"
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:217
msgid "Create an :class:`asyncio.Future` object attached to the loop."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:219
msgid ""
"This is a preferred way to create futures in asyncio, as event loop "
"implementations can provide alternative implementations of the Future class "
"(with better performance or instrumentation)."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:227
msgid "Tasks"
msgstr "Tâches"

#: ../Doc/library/asyncio-eventloop.rst:231
msgid ""
"Schedule the execution of a :ref:`coroutine object <coroutine>`: wrap it in "
"a future. Return a :class:`Task` object."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:234
msgid ""
"Third-party event loops can use their own subclass of :class:`Task` for "
"interoperability. In this case, the result type is a subclass of :class:"
"`Task`."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:238
msgid ""
"This method was added in Python 3.4.2. Use the :func:`async` function to "
"support also older Python versions."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:245
msgid ""
"Set a task factory that will be used by :meth:`AbstractEventLoop."
"create_task`."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:248
msgid "If *factory* is ``None`` the default task factory will be set."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:250
msgid ""
"If *factory* is a *callable*, it should have a signature matching ``(loop, "
"coro)``, where *loop* will be a reference to the active event loop, *coro* "
"will be a coroutine object.  The callable must return an :class:`asyncio."
"Future` compatible object."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:259
msgid "Return a task factory, or ``None`` if the default one is in use."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:265
msgid "Creating connections"
msgstr "Créer des connections"

#: ../Doc/library/asyncio-eventloop.rst:269
msgid ""
"Create a streaming transport connection to a given Internet *host* and "
"*port*: socket family :py:data:`~socket.AF_INET` or :py:data:`~socket."
"AF_INET6` depending on *host* (or *family* if specified), socket type :py:"
"data:`~socket.SOCK_STREAM`.  *protocol_factory* must be a callable returning "
"a :ref:`protocol <asyncio-protocol>` instance."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:275
#: ../Doc/library/asyncio-eventloop.rst:349
#: ../Doc/library/asyncio-eventloop.rst:400
msgid ""
"This method is a :ref:`coroutine <coroutine>` which will try to establish "
"the connection in the background.  When successful, the coroutine returns a "
"``(transport, protocol)`` pair."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:279
msgid "The chronological synopsis of the underlying operation is as follows:"
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:281
msgid ""
"The connection is established, and a :ref:`transport <asyncio-transport>` is "
"created to represent it."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:284
msgid ""
"*protocol_factory* is called without arguments and must return a :ref:"
"`protocol <asyncio-protocol>` instance."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:287
msgid ""
"The protocol instance is tied to the transport, and its :meth:"
"`connection_made` method is called."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:290
msgid ""
"The coroutine returns successfully with the ``(transport, protocol)`` pair."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:293
msgid ""
"The created transport is an implementation-dependent bidirectional stream."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:296
msgid ""
"*protocol_factory* can be any kind of callable, not necessarily a class.  "
"For example, if you want to use a pre-created protocol instance, you can "
"pass ``lambda: my_protocol``."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:300
msgid "Options that change how the connection is created:"
msgstr "Options modifiant la création de la connexion :"

#: ../Doc/library/asyncio-eventloop.rst:302
msgid ""
"*ssl*: if given and not false, a SSL/TLS transport is created (by default a "
"plain TCP transport is created).  If *ssl* is a :class:`ssl.SSLContext` "
"object, this context is used to create the transport; if *ssl* is :const:"
"`True`, a context with some unspecified default settings is used."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:308
msgid ":ref:`SSL/TLS security considerations <ssl-security>`"
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:310
msgid ""
"*server_hostname*, is only for use together with *ssl*, and sets or "
"overrides the hostname that the target server's certificate will be matched "
"against.  By default the value of the *host* argument is used.  If *host* is "
"empty, there is no default and you must pass a value for *server_hostname*.  "
"If *server_hostname* is an empty string, hostname matching is disabled "
"(which is a serious security risk, allowing for man-in-the-middle-attacks)."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:318
msgid ""
"*family*, *proto*, *flags* are the optional address family, protocol and "
"flags to be passed through to getaddrinfo() for *host* resolution. If given, "
"these should all be integers from the corresponding :mod:`socket` module "
"constants."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:323
msgid ""
"*sock*, if given, should be an existing, already connected :class:`socket."
"socket` object to be used by the transport. If *sock* is given, none of "
"*host*, *port*, *family*, *proto*, *flags* and *local_addr* should be "
"specified."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:328
msgid ""
"*local_addr*, if given, is a ``(local_host, local_port)`` tuple used to bind "
"the socket to locally.  The *local_host* and *local_port* are looked up "
"using getaddrinfo(), similarly to *host* and *port*."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:334
#: ../Doc/library/asyncio-eventloop.rst:464
msgid "On Windows with :class:`ProactorEventLoop`, SSL/TLS is now supported."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:338
msgid ""
"The :func:`open_connection` function can be used to get a pair of (:class:"
"`StreamReader`, :class:`StreamWriter`) instead of a protocol."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:344
msgid ""
"Create datagram connection: socket family :py:data:`~socket.AF_INET` or :py:"
"data:`~socket.AF_INET6` depending on *host* (or *family* if specified), "
"socket type :py:data:`~socket.SOCK_DGRAM`. *protocol_factory* must be a "
"callable returning a :ref:`protocol <asyncio-protocol>` instance."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:353
msgid "Options changing how the connection is created:"
msgstr "Options modifiant la création de la connexion :"

#: ../Doc/library/asyncio-eventloop.rst:355
msgid ""
"*local_addr*, if given, is a ``(local_host, local_port)`` tuple used to bind "
"the socket to locally.  The *local_host* and *local_port* are looked up "
"using :meth:`getaddrinfo`."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:359
msgid ""
"*remote_addr*, if given, is a ``(remote_host, remote_port)`` tuple used to "
"connect the socket to a remote address.  The *remote_host* and *remote_port* "
"are looked up using :meth:`getaddrinfo`."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:363
msgid ""
"*family*, *proto*, *flags* are the optional address family, protocol and "
"flags to be passed through to :meth:`getaddrinfo` for *host* resolution. If "
"given, these should all be integers from the corresponding :mod:`socket` "
"module constants."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:368
#: ../Doc/library/asyncio-eventloop.rst:450
msgid ""
"*reuse_address* tells the kernel to reuse a local socket in TIME_WAIT state, "
"without waiting for its natural timeout to expire. If not specified will "
"automatically be set to ``True`` on UNIX."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:373
msgid ""
"*reuse_port* tells the kernel to allow this endpoint to be bound to the same "
"port as other existing endpoints are bound to, so long as they all set this "
"flag when being created. This option is not supported on Windows and some "
"UNIX's. If the :py:data:`~socket.SO_REUSEPORT` constant is not defined then "
"this capability is unsupported."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:379
msgid ""
"*allow_broadcast* tells the kernel to allow this endpoint to send messages "
"to the broadcast address."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:382
msgid ""
"*sock* can optionally be specified in order to use a preexisting, already "
"connected, :class:`socket.socket` object to be used by the transport. If "
"specified, *local_addr* and *remote_addr* should be omitted (must be :const:"
"`None`)."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:387
msgid ""
"On Windows with :class:`ProactorEventLoop`, this method is not supported."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:389
msgid ""
"See :ref:`UDP echo client protocol <asyncio-udp-echo-client-protocol>` and :"
"ref:`UDP echo server protocol <asyncio-udp-echo-server-protocol>` examples."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:395
msgid ""
"Create UNIX connection: socket family :py:data:`~socket.AF_UNIX`, socket "
"type :py:data:`~socket.SOCK_STREAM`. The :py:data:`~socket.AF_UNIX` socket "
"family is used to communicate between processes on the same machine "
"efficiently."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:404
msgid ""
"*path* is the name of a UNIX domain socket, and is required unless a *sock* "
"parameter is specified.  Abstract UNIX sockets, :class:`str`, and :class:"
"`bytes` paths are supported."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:408
msgid ""
"See the :meth:`AbstractEventLoop.create_connection` method for parameters."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:410
#: ../Doc/library/asyncio-eventloop.rst:483
msgid "Availability: UNIX."
msgstr "Disponible sur : UNIX."

#: ../Doc/library/asyncio-eventloop.rst:414
msgid "Creating listening connections"
msgstr "Attendre des connections"

#: ../Doc/library/asyncio-eventloop.rst:418
msgid ""
"Create a TCP server (socket type :data:`~socket.SOCK_STREAM`) bound to "
"*host* and *port*."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:421
msgid ""
"Return a :class:`Server` object, its :attr:`~Server.sockets` attribute "
"contains created sockets. Use the :meth:`Server.close` method to stop the "
"server: close listening sockets."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:425
#: ../Doc/library/asyncio-eventloop.rst:492
msgid "Parameters:"
msgstr "Paramètres :"

#: ../Doc/library/asyncio-eventloop.rst:427
msgid ""
"The *host* parameter can be a string, in that case the TCP server is bound "
"to *host* and *port*. The *host* parameter can also be a sequence of strings "
"and in that case the TCP server is bound to all hosts of the sequence. If "
"*host* is an empty string or ``None``, all interfaces are assumed and a list "
"of multiple sockets will be returned (most likely one for IPv4 and another "
"one for IPv6)."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:434
msgid ""
"*family* can be set to either :data:`socket.AF_INET` or :data:`~socket."
"AF_INET6` to force the socket to use IPv4 or IPv6. If not set it will be "
"determined from host (defaults to :data:`socket.AF_UNSPEC`)."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:438
msgid "*flags* is a bitmask for :meth:`getaddrinfo`."
msgstr "*flags* est un masque de bits pour :meth:`getaddrinfo`."

#: ../Doc/library/asyncio-eventloop.rst:440
msgid ""
"*sock* can optionally be specified in order to use a preexisting socket "
"object. If specified, *host* and *port* should be omitted (must be :const:"
"`None`)."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:444
msgid ""
"*backlog* is the maximum number of queued connections passed to :meth:"
"`~socket.socket.listen` (defaults to 100)."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:447
#: ../Doc/library/asyncio-eventloop.rst:497
msgid ""
"*ssl* can be set to an :class:`~ssl.SSLContext` to enable SSL over the "
"accepted connections."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:455
msgid ""
"*reuse_port* tells the kernel to allow this endpoint to be bound to the same "
"port as other existing endpoints are bound to, so long as they all set this "
"flag when being created. This option is not supported on Windows."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:460
#: ../Doc/library/asyncio-eventloop.rst:481
#: ../Doc/library/asyncio-eventloop.rst:558
#: ../Doc/library/asyncio-eventloop.rst:574
#: ../Doc/library/asyncio-eventloop.rst:584
#: ../Doc/library/asyncio-eventloop.rst:612
#: ../Doc/library/asyncio-eventloop.rst:651
#: ../Doc/library/asyncio-eventloop.rst:665
#: ../Doc/library/asyncio-eventloop.rst:716
#: ../Doc/library/asyncio-eventloop.rst:835
msgid "This method is a :ref:`coroutine <coroutine>`."
msgstr "Cette méthode est une :ref:`coroutine <coroutine>`."

#: ../Doc/library/asyncio-eventloop.rst:468
msgid ""
"The function :func:`start_server` creates a (:class:`StreamReader`, :class:"
"`StreamWriter`) pair and calls back a function with this pair."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:473
msgid "The *host* parameter can now be a sequence of strings."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:478
msgid ""
"Similar to :meth:`AbstractEventLoop.create_server`, but specific to the "
"socket family :py:data:`~socket.AF_UNIX`."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:487
msgid "Handle an accepted connection."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:489
msgid ""
"This is used by servers that accept connections outside of asyncio but that "
"use asyncio to handle them."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:494
msgid "*sock* is a preexisting socket object returned from an ``accept`` call."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:500
msgid ""
"This method is a :ref:`coroutine <coroutine>`.  When completed, the "
"coroutine returns a ``(transport, protocol)`` pair."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:507
msgid "Watch file descriptors"
msgstr "Surveiller des descripteurs de fichiers"

#: ../Doc/library/asyncio-eventloop.rst:509
msgid ""
"On Windows with :class:`SelectorEventLoop`, only socket handles are "
"supported (ex: pipe file descriptors are not supported)."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:512
msgid ""
"On Windows with :class:`ProactorEventLoop`, these methods are not supported."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:516
msgid ""
"Start watching the file descriptor for read availability and then call the "
"*callback* with specified arguments."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:524
msgid "Stop watching the file descriptor for read availability."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:528
msgid ""
"Start watching the file descriptor for write availability and then call the "
"*callback* with specified arguments."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:536
msgid "Stop watching the file descriptor for write availability."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:538
msgid ""
"The :ref:`watch a file descriptor for read events <asyncio-watch-read-"
"event>` example uses the low-level :meth:`AbstractEventLoop.add_reader` "
"method to register the file descriptor of a socket."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:544
msgid "Low-level socket operations"
msgstr "Opérations bas niveau sur les *socket*"

#: ../Doc/library/asyncio-eventloop.rst:548
msgid ""
"Receive data from the socket.  Modeled after blocking :meth:`socket.socket."
"recv` method."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:551
msgid ""
"The return value is a bytes object representing the data received.  The "
"maximum amount of data to be received at once is specified by *nbytes*."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:555
#: ../Doc/library/asyncio-eventloop.rst:571
#: ../Doc/library/asyncio-eventloop.rst:581
msgid ""
"With :class:`SelectorEventLoop` event loop, the socket *sock* must be non-"
"blocking."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:562
msgid ""
"Send data to the socket.  Modeled after blocking :meth:`socket.socket."
"sendall` method."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:565
msgid ""
"The socket must be connected to a remote socket. This method continues to "
"send data from *data* until either all data has been sent or an error "
"occurs.  ``None`` is returned on success.  On error, an exception is raised, "
"and there is no way to determine how much data, if any, was successfully "
"processed by the receiving end of the connection."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:578
msgid ""
"Connect to a remote socket at *address*.  Modeled after blocking :meth:"
"`socket.socket.connect` method."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:586
msgid ""
"``address`` no longer needs to be resolved.  ``sock_connect`` will try to "
"check if the *address* is already resolved by calling :func:`socket."
"inet_pton`.  If not, :meth:`AbstractEventLoop.getaddrinfo` will be used to "
"resolve the *address*."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:595
msgid ""
":meth:`AbstractEventLoop.create_connection` and  :func:`asyncio."
"open_connection() <open_connection>`."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:601
msgid ""
"Accept a connection.  Modeled after blocking :meth:`socket.socket.accept`."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:604
msgid ""
"The socket must be bound to an address and listening for connections. The "
"return value is a pair ``(conn, address)`` where *conn* is a *new* socket "
"object usable to send and receive data on the connection, and *address* is "
"the address bound to the socket on the other end of the connection."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:610
msgid "The socket *sock* must be non-blocking."
msgstr "La *socket* *sock* ne soit pas être bloquante."

#: ../Doc/library/asyncio-eventloop.rst:616
msgid ":meth:`AbstractEventLoop.create_server` and :func:`start_server`."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:620
msgid "Resolve host name"
msgstr "Résout le nom d'hôte"

#: ../Doc/library/asyncio-eventloop.rst:624
msgid ""
"This method is a :ref:`coroutine <coroutine>`, similar to :meth:`socket."
"getaddrinfo` function but non-blocking."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:629
msgid ""
"This method is a :ref:`coroutine <coroutine>`, similar to :meth:`socket."
"getnameinfo` function but non-blocking."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:634
msgid "Connect pipes"
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:636
msgid ""
"On Windows with :class:`SelectorEventLoop`, these methods are not supported. "
"Use :class:`ProactorEventLoop` to support pipes on Windows."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:641
msgid "Register read pipe in eventloop."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:643
msgid ""
"*protocol_factory* should instantiate object with :class:`Protocol` "
"interface.  *pipe* is a :term:`file-like object <file object>`. Return pair "
"``(transport, protocol)``, where *transport* supports the :class:"
"`ReadTransport` interface."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:648
#: ../Doc/library/asyncio-eventloop.rst:662
msgid ""
"With :class:`SelectorEventLoop` event loop, the *pipe* is set to non-"
"blocking mode."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:655
msgid "Register write pipe in eventloop."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:657
msgid ""
"*protocol_factory* should instantiate object with :class:`BaseProtocol` "
"interface. *pipe* is :term:`file-like object <file object>`. Return pair "
"``(transport, protocol)``, where *transport* supports :class:"
"`WriteTransport` interface."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:669
msgid ""
"The :meth:`AbstractEventLoop.subprocess_exec` and :meth:`AbstractEventLoop."
"subprocess_shell` methods."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:674
msgid "UNIX signals"
msgstr "Signaux UNIX"

#: ../Doc/library/asyncio-eventloop.rst:676
msgid "Availability: UNIX only."
msgstr "Disponibilité : UNIX seulement."

#: ../Doc/library/asyncio-eventloop.rst:680
msgid "Add a handler for a signal."
msgstr "Ajouter un gestionnaire (*handler*) pour un signal."

#: ../Doc/library/asyncio-eventloop.rst:682
msgid ""
"Raise :exc:`ValueError` if the signal number is invalid or uncatchable. "
"Raise :exc:`RuntimeError` if there is a problem setting up the handler."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:690
msgid "Remove a handler for a signal."
msgstr "Supprimer un *handler* pour un signal."

#: ../Doc/library/asyncio-eventloop.rst:692
msgid "Return ``True`` if a signal handler was removed, ``False`` if not."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:696
msgid "The :mod:`signal` module."
msgstr "Le module :mod:`signal`."

#: ../Doc/library/asyncio-eventloop.rst:700
msgid "Executor"
msgstr "Exécuteur"

#: ../Doc/library/asyncio-eventloop.rst:702
msgid ""
"Call a function in an :class:`~concurrent.futures.Executor` (pool of threads "
"or pool of processes). By default, an event loop uses a thread pool executor "
"(:class:`~concurrent.futures.ThreadPoolExecutor`)."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:708
msgid "Arrange for a *func* to be called in the specified executor."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:710
msgid ""
"The *executor* argument should be an :class:`~concurrent.futures.Executor` "
"instance. The default executor is used if *executor* is ``None``."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:713
msgid ""
":ref:`Use functools.partial to pass keywords to the *func* <asyncio-pass-"
"keywords>`."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:718
msgid ""
":meth:`BaseEventLoop.run_in_executor` no longer configures the "
"``max_workers`` of the thread pool executor it creates, instead leaving it "
"up to the thread pool executor (:class:`~concurrent.futures."
"ThreadPoolExecutor`) to set the default."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:727
msgid "Set the default executor used by :meth:`run_in_executor`."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:731
msgid "Error Handling API"
msgstr "API de gestion d'erreur"

#: ../Doc/library/asyncio-eventloop.rst:733
msgid "Allows customizing how exceptions are handled in the event loop."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:737
msgid "Set *handler* as the new event loop exception handler."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:739
msgid "If *handler* is ``None``, the default exception handler will be set."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:742
msgid ""
"If *handler* is a callable object, it should have a matching signature to "
"``(loop, context)``, where ``loop`` will be a reference to the active event "
"loop, ``context`` will be a ``dict`` object (see :meth:"
"`call_exception_handler` documentation for details about context)."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:750
msgid "Return the exception handler, or ``None`` if the default one is in use."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:757
msgid "Default exception handler."
msgstr "Gestionnaire d'exception par défaut."

#: ../Doc/library/asyncio-eventloop.rst:759
msgid ""
"This is called when an exception occurs and no exception handler is set, and "
"can be called by a custom exception handler that wants to defer to the "
"default behavior."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:763
msgid ""
"*context* parameter has the same meaning as in :meth:"
"`call_exception_handler`."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:768
msgid "Call the current event loop exception handler."
msgstr ""
"Appelle le gestionnaire d'exception de la boucle d'évènements actuelle."

#: ../Doc/library/asyncio-eventloop.rst:770
msgid ""
"*context* is a ``dict`` object containing the following keys (new keys may "
"be introduced later):"
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:773
msgid "'message': Error message;"
msgstr "``message`` : Message d'erreur ;"

#: ../Doc/library/asyncio-eventloop.rst:774
msgid "'exception' (optional): Exception object;"
msgstr "``exception`` (optionnel): Un objet exception ;"

#: ../Doc/library/asyncio-eventloop.rst:775
msgid "'future' (optional): :class:`asyncio.Future` instance;"
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:776
msgid "'handle' (optional): :class:`asyncio.Handle` instance;"
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:777
msgid "'protocol' (optional): :ref:`Protocol <asyncio-protocol>` instance;"
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:778
msgid "'transport' (optional): :ref:`Transport <asyncio-transport>` instance;"
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:779
msgid "'socket' (optional): :class:`socket.socket` instance."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:783
msgid ""
"Note: this method should not be overloaded in subclassed event loops.  For "
"any custom exception handling, use :meth:`set_exception_handler()` method."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:788
msgid "Debug mode"
msgstr "Mode débug"

#: ../Doc/library/asyncio-eventloop.rst:792
msgid "Get the debug mode (:class:`bool`) of the event loop."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:794
msgid ""
"The default value is ``True`` if the environment variable :envvar:"
"`PYTHONASYNCIODEBUG` is set to a non-empty string, ``False`` otherwise."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:802
msgid "Set the debug mode of the event loop."
msgstr "Active le mode débug pour la boucle d'évènements."

#: ../Doc/library/asyncio-eventloop.rst:808
msgid "The :ref:`debug mode of asyncio <asyncio-debug-mode>`."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:811
msgid "Server"
msgstr "Serveur"

#: ../Doc/library/asyncio-eventloop.rst:815
msgid "Server listening on sockets."
msgstr "Serveur écoutant sur des *sockets*."

#: ../Doc/library/asyncio-eventloop.rst:817
msgid ""
"Object created by the :meth:`AbstractEventLoop.create_server` method and "
"the :func:`start_server` function. Don't instantiate the class directly."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:822
msgid ""
"Stop serving: close listening sockets and set the :attr:`sockets` attribute "
"to ``None``."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:825
msgid ""
"The sockets that represent existing incoming client connections are left "
"open."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:828
msgid ""
"The server is closed asynchronously, use the :meth:`wait_closed` coroutine "
"to wait until the server is closed."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:833
msgid "Wait until the :meth:`close` method completes."
msgstr "Attends que la méthode :meth:`close` se termine."

#: ../Doc/library/asyncio-eventloop.rst:839
msgid ""
"List of :class:`socket.socket` objects the server is listening to, or "
"``None`` if the server is closed."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:844
msgid "Handle"
msgstr "Handle"

#: ../Doc/library/asyncio-eventloop.rst:848
msgid ""
"A callback wrapper object returned by :func:`AbstractEventLoop.call_soon`, :"
"func:`AbstractEventLoop.call_soon_threadsafe`, :func:`AbstractEventLoop."
"call_later`, and :func:`AbstractEventLoop.call_at`."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:854
msgid ""
"Cancel the call.  If the callback is already canceled or executed, this "
"method has no effect."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:859
msgid "Event loop examples"
msgstr "Exemples de boucles d'évènements"

#: ../Doc/library/asyncio-eventloop.rst:864
msgid "Hello World with call_soon()"
msgstr "\"Hello World\" avec ``call_soon()``"

#: ../Doc/library/asyncio-eventloop.rst:866
msgid ""
"Example using the :meth:`AbstractEventLoop.call_soon` method to schedule a "
"callback. The callback displays ``\"Hello World\"`` and then stops the event "
"loop::"
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:887
msgid ""
"The :ref:`Hello World coroutine <asyncio-hello-world-coroutine>` example "
"uses a :ref:`coroutine <coroutine>`."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:894
msgid "Display the current date with call_later()"
msgstr "Afficher la date actuelle avec ``call_later()``"

#: ../Doc/library/asyncio-eventloop.rst:896
msgid ""
"Example of callback displaying the current date every second. The callback "
"uses the :meth:`AbstractEventLoop.call_later` method to reschedule itself "
"during 5 seconds, and then stops the event loop::"
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:922
msgid ""
"The :ref:`coroutine displaying the current date <asyncio-date-coroutine>` "
"example uses a :ref:`coroutine <coroutine>`."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:930
msgid "Watch a file descriptor for read events"
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:932
msgid ""
"Wait until a file descriptor received some data using the :meth:"
"`AbstractEventLoop.add_reader` method and then close the event loop::"
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:969
msgid ""
"The :ref:`register an open socket to wait for data using a protocol <asyncio-"
"register-socket>` example uses a low-level protocol created by the :meth:"
"`AbstractEventLoop.create_connection` method."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:973
msgid ""
"The :ref:`register an open socket to wait for data using streams <asyncio-"
"register-socket-streams>` example uses high-level streams created by the :"
"func:`open_connection` function in a coroutine."
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:979
msgid "Set signal handlers for SIGINT and SIGTERM"
msgstr "Définit les gestionnaires de signaux pour *SIGINT* et *SIGTERM*"

#: ../Doc/library/asyncio-eventloop.rst:981
msgid ""
"Register handlers for signals :py:data:`SIGINT` and :py:data:`SIGTERM` using "
"the :meth:`AbstractEventLoop.add_signal_handler` method::"
msgstr ""

#: ../Doc/library/asyncio-eventloop.rst:1005
msgid "This example only works on UNIX."
msgstr "Cet exemple fonctionne seulement sur UNIX."
