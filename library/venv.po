# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-29 22:40+0100\n"
"PO-Revision-Date: 2023-03-20 09:36+0100\n"
"Last-Translator: ZepmanBC <zepman@gmail.com>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.0.6\n"

#: library/venv.rst:2
#, fuzzy
msgid ":mod:`!venv` --- Creation of virtual environments"
msgstr ":mod:`venv` — Création d'environnements virtuels"

#: library/venv.rst:12
msgid "**Source code:** :source:`Lib/venv/`"
msgstr "**Code source :** :source:`Lib/venv/`"

#: library/venv.rst:21
#, fuzzy
msgid ""
"The :mod:`!venv` module supports creating lightweight \"virtual "
"environments\", each with their own independent set of Python packages "
"installed in their :mod:`site` directories. A virtual environment is created "
"on top of an existing Python installation, known as the virtual "
"environment's \"base\" Python, and may optionally be isolated from the "
"packages in the base environment, so only those explicitly installed in the "
"virtual environment are available."
msgstr ""
"Le module :mod:`venv` permet de créer des \"environnements virtuels\" légers "
"avec leurs propres dossiers ``site``, optionnellement isolés des dossiers "
"``site`` système. Chaque environnement virtuel a son propre binaire Python "
"(qui correspond à la version du binaire qui a été utilisée pour créer cet "
"environnement) et peut avoir sa propre liste de paquets Python installés "
"dans ses propres dossiers ``site``."

#: library/venv.rst:29
#, fuzzy
msgid ""
"When used from within a virtual environment, common installation tools such "
"as :pypi:`pip` will install Python packages into a virtual environment "
"without needing to be told to do so explicitly."
msgstr ""
"Les outils d'installations communs comme `setuptools`_ et `pip`_ "
"fonctionnent comme prévu avec des environnements virtuels. En d'autres "
"termes, quand un environnement virtuel est actif, ils installent les paquets "
"Python dans l'environnement virtuel sans avoir besoin de leur préciser "
"explicitement."

#: library/venv.rst:33
msgid "A virtual environment is (amongst other things):"
msgstr ""

#: library/venv.rst:35
msgid ""
"Used to contain a specific Python interpreter and software libraries and "
"binaries which are needed to support a project (library or application). "
"These are by default isolated from software in other virtual environments "
"and Python interpreters and libraries installed in the operating system."
msgstr ""

#: library/venv.rst:40
msgid ""
"Contained in a directory, conventionally named ``.venv`` or ``venv`` in the "
"project directory, or under a container directory for lots of virtual "
"environments, such as ``~/.virtualenvs``."
msgstr ""

#: library/venv.rst:44
msgid "Not checked into source control systems such as Git."
msgstr ""

#: library/venv.rst:46
msgid ""
"Considered as disposable -- it should be simple to delete and recreate it "
"from scratch. You don't place any project code in the environment."
msgstr ""

#: library/venv.rst:49
msgid ""
"Not considered as movable or copyable -- you just recreate the same "
"environment in the target location."
msgstr ""

#: library/venv.rst:52
#, fuzzy
msgid "See :pep:`405` for more background on Python virtual environments."
msgstr ""
"Voir la :pep:`405` pour plus d'informations à propos des environnements "
"virtuels Python."

#: library/venv.rst:56
#, fuzzy
msgid ""
"`Python Packaging User Guide: Creating and using virtual environments "
"<https://packaging.python.org/guides/installing-using-pip-and-virtual-"
"environments/#create-and-use-virtual-environments>`__"
msgstr ""
"`Guide Utilisateur de l'Empaquetage Python : Créer et utiliser des "
"environnements virtuels <https://packaging.python.org/installing/#creating-"
"virtual-environments>`__"

#: includes/wasm-mobile-notavail.rst:3
msgid "Availability"
msgstr ""

#: includes/wasm-mobile-notavail.rst:5
msgid ""
"This module is not supported on :ref:`mobile platforms <mobile-"
"availability>` or :ref:`WebAssembly platforms <wasm-availability>`."
msgstr ""

#: library/venv.rst:62
msgid "Creating virtual environments"
msgstr "Création d'environnements virtuels"

#: library/venv.rst:64
#, fuzzy
msgid ""
":ref:`Virtual environments <venv-def>` are created by executing the ``venv`` "
"module:"
msgstr ""
"La création d':ref:`environnements virtuels <venv-def>` est faite en "
"exécutant la commande ``venv`` ::"

#: library/venv.rst:67
#, fuzzy
msgid "python -m venv /path/to/new/virtual/environment"
msgstr "Commande pour activer l'environnement virtuel"

#: library/venv.rst:71
#, fuzzy
msgid ""
"This creates the target directory (including parent directories as needed) "
"and places a :file:`pyvenv.cfg` file in it with a ``home`` key pointing to "
"the Python installation from which the command was run. It also creates a :"
"file:`bin` (or :file:`Scripts` on Windows) subdirectory containing a copy or "
"symlink of the Python executable (as appropriate for the platform or "
"arguments used at environment creation time). It also creates a :file:`lib/"
"pythonX.Y/site-packages` subdirectory (on Windows, this is :file:`Lib\\site-"
"packages`). If an existing directory is specified, it will be re-used."
msgstr ""
"Lancer cette commande crée le dossier cible (en créant tous les dossiers "
"parents qui n'existent pas déjà) et y ajoute un fichier ``pyvenv.cfg`` "
"contenant une variable ``home`` qui pointe sur l'installation Python depuis "
"laquelle cette commande a été lancée (un nom habituel pour ce dossier cible "
"est ``.venv``). Cela crée également un sous-dossier ``bin`` (ou ``Scripts`` "
"sous Windows) contenant une copie (ou un lien symbolique) du ou des binaires "
"``python`` (dépend de la plateforme et des paramètres donnés à la création "
"de l'environnement). Elle crée aussi un sous-dossier (initialement vide) "
"``lib/pythonX.Y/site-packages`` (Sous Windows, c'est ``Lib\\site-"
"packages``). Si un dossier existant est spécifié, il sera réutilisé."

#: library/venv.rst:81
msgid ""
"The use of ``venv`` is now recommended for creating virtual environments."
msgstr ""
"L'utilisation de ``venv`` est maintenant recommandée pour créer vos "
"environnements virtuels."

#: library/venv.rst:84
#, fuzzy
msgid ""
":program:`pyvenv` was the recommended tool for creating virtual environments "
"for Python 3.3 and 3.4, and replaced in 3.5 by executing ``venv`` directly."
msgstr ""
"``pyvenv`` était l'outil recommandé pour créer des environnements sous "
"Python 3.3 et 3.4, et est `obsolète depuis Python 3.6 <https://docs.python."
"org/dev/whatsnew/3.6.html#deprecated-features>`_."

#: library/venv.rst:90
#, fuzzy
msgid "On Windows, invoke the ``venv`` command as follows:"
msgstr "Sur Windows, appelez la commande ``venv`` comme suit ::"

#: library/venv.rst:92
msgid "PS> python -m venv C:\\path\\to\\new\\virtual\\environment"
msgstr ""

#: library/venv.rst:96
msgid "The command, if run with ``-h``, will show the available options::"
msgstr ""
"La commande, si lancée avec ``-h``, montrera les options disponibles ::"

#: library/venv.rst:98
msgid ""
"usage: venv [-h] [--system-site-packages] [--symlinks | --copies] [--clear]\n"
"            [--upgrade] [--without-pip] [--prompt PROMPT] [--upgrade-deps]\n"
"            [--without-scm-ignore-files]\n"
"            ENV_DIR [ENV_DIR ...]\n"
"\n"
"Creates virtual Python environments in one or more target directories.\n"
"\n"
"positional arguments:\n"
"  ENV_DIR               A directory to create the environment in.\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  --system-site-packages\n"
"                        Give the virtual environment access to the system\n"
"                        site-packages dir.\n"
"  --symlinks            Try to use symlinks rather than copies, when\n"
"                        symlinks are not the default for the platform.\n"
"  --copies              Try to use copies rather than symlinks, even when\n"
"                        symlinks are the default for the platform.\n"
"  --clear               Delete the contents of the environment directory\n"
"                        if it already exists, before environment creation.\n"
"  --upgrade             Upgrade the environment directory to use this\n"
"                        version of Python, assuming Python has been\n"
"                        upgraded in-place.\n"
"  --without-pip         Skips installing or upgrading pip in the virtual\n"
"                        environment (pip is bootstrapped by default)\n"
"  --prompt PROMPT       Provides an alternative prompt prefix for this\n"
"                        environment.\n"
"  --upgrade-deps        Upgrade core dependencies (pip) to the latest\n"
"                        version in PyPI\n"
"  --without-scm-ignore-files\n"
"                        Skips adding SCM ignore files to the environment\n"
"                        directory (Git is supported by default).\n"
"\n"
"Once an environment has been created, you may wish to activate it, e.g. by\n"
"sourcing an activate script in its bin directory."
msgstr ""

#: library/venv.rst:136
#, fuzzy
msgid ""
"Installs pip by default, added the ``--without-pip``  and ``--copies`` "
"options."
msgstr ""
"Installe pip par défaut, ajout des options ``--without-pip`` et ``--copies``"

#: library/venv.rst:140
msgid ""
"In earlier versions, if the target directory already existed, an error was "
"raised, unless the ``--clear`` or ``--upgrade`` option was provided."
msgstr ""
"Dans les versions précédentes, si le dossier de destination existait déjà, "
"une erreur était levée, sauf si l'option ``--clear`` ou ``--upgrade`` était "
"incluse."

#: library/venv.rst:144
msgid ""
"Add ``--upgrade-deps`` option to upgrade pip + setuptools to the latest on "
"PyPI."
msgstr ""

#: library/venv.rst:149
msgid "``setuptools`` is no longer a core venv dependency."
msgstr ""

#: library/venv.rst:153
msgid "Added the ``--without-scm-ignore-files`` option."
msgstr ""

#: library/venv.rst:154
msgid "``venv`` now creates a :file:`.gitignore` file for Git by default."
msgstr ""

#: library/venv.rst:158
msgid ""
"While symlinks are supported on Windows, they are not recommended. Of "
"particular note is that double-clicking ``python.exe`` in File Explorer will "
"resolve the symlink eagerly and ignore the virtual environment."
msgstr ""
"Bien que les liens symboliques soient pris en charge sous Windows, ils ne "
"sont pas recommandés. Il est particulièrement à noter que le double-clic sur "
"``python.exe`` dans l'Explorateur de fichiers suivra le lien symbolique et "
"ignorera l'environnement virtuel."

#: library/venv.rst:163
msgid ""
"On Microsoft Windows, it may be required to enable the ``Activate.ps1`` "
"script by setting the execution policy for the user. You can do this by "
"issuing the following PowerShell command:"
msgstr ""

#: library/venv.rst:167
msgid ""
"PS C:\\> Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser"
msgstr ""

#: library/venv.rst:171
msgid ""
"See `About Execution Policies <https://go.microsoft.com/fwlink/?"
"LinkID=135170>`_ for more information."
msgstr ""

#: library/venv.rst:175
#, fuzzy
msgid ""
"The created :file:`pyvenv.cfg` file also includes the ``include-system-site-"
"packages`` key, set to ``true`` if ``venv`` is run with the ``--system-site-"
"packages`` option, ``false`` otherwise."
msgstr ""
"Le fichier crée ``pyvenv.cfg`` inclus aussi la clé ``include-system-site-"
"packages``, dont la valeur est ``true`` si ``venv`` est lancé avec l'option "
"``--system-site-packages``, sinon sa valeur est ``false``."

#: library/venv.rst:179
msgid ""
"Unless the ``--without-pip`` option is given, :mod:`ensurepip` will be "
"invoked to bootstrap ``pip`` into the virtual environment."
msgstr ""
"Sauf si l'option ``--without-pip`` est incluse, :mod:`ensurepip` sera "
"invoqué pour amorcer ``pip`` dans l'environnement virtuel."

#: library/venv.rst:182
msgid ""
"Multiple paths can be given to ``venv``, in which case an identical virtual "
"environment will be created, according to the given options, at each "
"provided path."
msgstr ""
"Plusieurs chemins peuvent être donnés à ``venv``, et dans ce cas un "
"environnement virtuel sera créé, en fonction des options incluses, à chaque "
"chemin donné."

#: library/venv.rst:189
msgid "How venvs work"
msgstr ""

#: library/venv.rst:191
#, fuzzy
msgid ""
"When a Python interpreter is running from a virtual environment, :data:`sys."
"prefix` and :data:`sys.exec_prefix` point to the directories of the virtual "
"environment, whereas :data:`sys.base_prefix` and :data:`sys."
"base_exec_prefix` point to those of the base Python used to create the "
"environment. It is sufficient to check ``sys.prefix != sys.base_prefix`` to "
"determine if the current interpreter is running from a virtual environment."
msgstr ""
"Quand un environnement virtuel est actif (Par exemple quand l’interpréteur "
"Python de l'environnement virtuel est lancé), les attributs :attr:`sys."
"prefix` et :attr:`sys.exec_prefix` pointent vers le dossier racine de "
"l'environnement virtuel, alors que :attr:`sys.base_prefix` et :attr:`sys."
"base_exec_prefix` pointent vers l'installation de Python qui n'est pas celle "
"de l'environnement virtuel et qui a été utilisée pour créer l'environnement "
"virtuel. Si un environnement virtuel n'est pas actif, alors :attr:`sys."
"prefix` est égal à :attr:`sys.base_prefix` et :attr:`sys.exec_prefix` est "
"égal à :attr:`sys.base_exec_prefix` (ils pointent tous sur une installation "
"Python qui n'est pas un environnement virtuel)."

#: library/venv.rst:200
#, fuzzy
msgid ""
"A virtual environment may be \"activated\" using a script in its binary "
"directory (``bin`` on POSIX; ``Scripts`` on Windows). This will prepend that "
"directory to your :envvar:`PATH`, so that running :program:`python` will "
"invoke the environment's Python interpreter and you can run installed "
"scripts without having to use their full path. The invocation of the "
"activation script is platform-specific (:samp:`{<venv>}` must be replaced by "
"the path to the directory containing the virtual environment):"
msgstr ""
"Une fois qu'un environnement virtuel est créé, il peut être \"activé\" en "
"utilisant un script dans le dossier binaire de l'environnement virtuel. "
"L'invocation de ce script est spécifique à chaque plateforme (``<venv>`` "
"doit être remplacé par le chemin d'accès du répertoire contenant "
"l'environnement virtuel) :"

#: library/venv.rst:210
msgid "Platform"
msgstr "Plateforme"

#: library/venv.rst:210
msgid "Shell"
msgstr "Invite de commande"

#: library/venv.rst:210
msgid "Command to activate virtual environment"
msgstr "Commande pour activer l'environnement virtuel"

#: library/venv.rst:212
msgid "POSIX"
msgstr "POSIX"

#: library/venv.rst:212
msgid "bash/zsh"
msgstr "bash/zsh"

#: library/venv.rst:212
#, fuzzy
msgid ":samp:`$ source {<venv>}/bin/activate`"
msgstr "``$ source <venv>/bin/activate``"

#: library/venv.rst:214
msgid "fish"
msgstr "fish"

#: library/venv.rst:214
#, fuzzy
msgid ":samp:`$ source {<venv>}/bin/activate.fish`"
msgstr "``$ source <venv>/bin/activate.csh``"

#: library/venv.rst:216
msgid "csh/tcsh"
msgstr "csh/tcsh"

#: library/venv.rst:216
#, fuzzy
msgid ":samp:`$ source {<venv>}/bin/activate.csh`"
msgstr "``$ source <venv>/bin/activate.csh``"

#: library/venv.rst:218
msgid "pwsh"
msgstr ""

#: library/venv.rst:218
#, fuzzy
msgid ":samp:`$ {<venv>}/bin/Activate.ps1`"
msgstr "``$ <venv>/bin/Activate.ps1``"

#: library/venv.rst:220
msgid "Windows"
msgstr "Windows"

#: library/venv.rst:220
msgid "cmd.exe"
msgstr "cmd.exe"

#: library/venv.rst:220
#, fuzzy
msgid ":samp:`C:\\\\> {<venv>}\\\\Scripts\\\\activate.bat`"
msgstr "``C:\\\\{venv}\\\\Scripts\\\\activate.bat``"

#: library/venv.rst:222
msgid "PowerShell"
msgstr "PowerShell"

#: library/venv.rst:222
#, fuzzy
msgid ":samp:`PS C:\\\\> {<venv>}\\\\Scripts\\\\Activate.ps1`"
msgstr "``PS C:\\\\> <venv>\\\\Scripts\\\\Activate.ps1``"

#: library/venv.rst:225
#, fuzzy
msgid ":program:`fish` and :program:`csh` activation scripts."
msgstr "Les scripts d'activation pour ``fish`` et ``csh``."

#: library/venv.rst:228
msgid ""
"PowerShell activation scripts installed under POSIX for PowerShell Core "
"support."
msgstr ""
"Scripts d'activation PowerShell installés sous POSIX pour le support de "
"PowerShell Core."

#: library/venv.rst:232
#, fuzzy
msgid ""
"You don't specifically *need* to activate a virtual environment, as you can "
"just specify the full path to that environment's Python interpreter when "
"invoking Python. Furthermore, all scripts installed in the environment "
"should be runnable without activating it."
msgstr ""
"Vous ne devez pas spécialement activer un environnement ; l'activation "
"ajoute juste le chemin du dossier de binaires de votre environnement virtuel "
"à votre PATH, pour que \"python\" invoque l’interpréteur Python de "
"l'environnement virtuel et que vous puissiez lancer des scripts installés "
"sans avoir à utiliser leur chemin complet. Cependant, tous les scripts "
"installés dans un environnement virtuel devraient être exécutables sans "
"l'activer, et se lancer avec l'environnement virtuel Python automatiquement."

#: library/venv.rst:238
#, fuzzy
msgid ""
"In order to achieve this, scripts installed into virtual environments have a "
"\"shebang\" line which points to the environment's Python interpreter, :samp:"
"`#!/{<path-to-venv>}/bin/python`. This means that the script will run with "
"that interpreter regardless of the value of :envvar:`PATH`. On Windows, "
"\"shebang\" line processing is supported if you have the :ref:`launcher` "
"installed. Thus, double-clicking an installed script in a Windows Explorer "
"window should run it with the correct interpreter without the environment "
"needing to be activated or on the :envvar:`PATH`."
msgstr ""
"Quand vous travaillez dans une invite de commande **shell**, les "
"utilisateurs peuvent activer un environnement virtuel en lançant un script "
"``activate`` situé dans le dossier des exécutables de l'environnement "
"virtuel (le nom de fichier précis dépends du shell utilisé), ce qui ajoute "
"le dossier des exécutables de l'environnement virtuel dans la variable "
"d'environnement ``PATH``. Il ne devrait jamais y avoir besoin dans d'autre "
"circonstances d'activer un environnement virtuel. Des scripts installés dans "
"un environnement virtuel ont un « *shebang* » qui pointe vers l’interpréteur "
"Python de l'environnement virtuel. Cela veux dire que le script sera lancé "
"avec cet interpréteur peut importe la valeur de ``PATH``. Sur Windows, le "
"« *shebang* » est interprété si vous avez le Lanceur Python pour Windows "
"installé (Cela a été ajouté à Python 3.3 -- Voir :pep:`397` pour plus de "
"détails). De ce fait, double cliquer un script installé dans une fenêtre de "
"l'Explorateur Windows devrait lancer le script avec le bon interpréteur sans "
"avoir besoin de référencer son environnement virtuel dans ``PATH``."

#: library/venv.rst:247
msgid ""
"When a virtual environment has been activated, the :envvar:`!VIRTUAL_ENV` "
"environment variable is set to the path of the environment. Since explicitly "
"activating a virtual environment is not required to use it, :envvar:`!"
"VIRTUAL_ENV` cannot be relied upon to determine whether a virtual "
"environment is being used."
msgstr ""

#: library/venv.rst:253
msgid ""
"Because scripts installed in environments should not expect the environment "
"to be activated, their shebang lines contain the absolute paths to their "
"environment's interpreters. Because of this, environments are inherently non-"
"portable, in the general case. You should always have a simple means of "
"recreating an environment (for example, if you have a requirements file "
"``requirements.txt``, you can invoke ``pip install -r requirements.txt`` "
"using the environment's ``pip`` to install all of the packages needed by the "
"environment). If for any reason you need to move the environment to a new "
"location, you should recreate it at the desired location and delete the one "
"at the old location. If you move an environment because you moved a parent "
"directory of it, you should recreate the environment in its new location. "
"Otherwise, software installed into the environment may not work as expected."
msgstr ""

#: library/venv.rst:267
#, fuzzy
msgid ""
"You can deactivate a virtual environment by typing ``deactivate`` in your "
"shell. The exact mechanism is platform-specific and is an internal "
"implementation detail (typically, a script or shell function will be used)."
msgstr ""
"Vous pouvez désactiver un environnement virtuel en écrivant « *deactivate* » "
"dans votre shell. Le mécanisme exact est spécifique à la plate-forme et est "
"un détail d'implémentation interne (généralement un script ou une fonction "
"shell sera utilisé)."

#: library/venv.rst:275
msgid "API"
msgstr "API"

#: library/venv.rst:279
msgid ""
"The high-level method described above makes use of a simple API which "
"provides mechanisms for third-party virtual environment creators to "
"customize environment creation according to their needs, the :class:"
"`EnvBuilder` class."
msgstr ""
"La méthode haut niveau décrite au dessus utilise une API simple qui permet à "
"des créateurs d'environnements virtuels externes de personnaliser la "
"création d'environnements virtuels basés sur leurs besoins, la classe :class:"
"`EnvBuilder`."

#: library/venv.rst:288
msgid ""
"The :class:`EnvBuilder` class accepts the following keyword arguments on "
"instantiation:"
msgstr ""
"La classe :class:`EnvBuilder` accepte les arguments suivants lors de "
"l'instanciation :"

#: library/venv.rst:291
#, fuzzy
msgid ""
"*system_site_packages* -- a boolean value indicating that the system Python "
"site-packages should be available to the environment (defaults to ``False``)."
msgstr ""
"``system_site_packages`` -- Une valeur booléenne qui indique que les site-"
"packages du système Python devraient être disponibles dans l'environnement "
"virtuel (par défaut à ``False``)."

#: library/venv.rst:294
#, fuzzy
msgid ""
"*clear* -- a boolean value which, if true, will delete the contents of any "
"existing target directory, before creating the environment."
msgstr ""
"``clear`` -- Une valeur booléenne qui, si vraie, supprimera le contenu de "
"n'importe quel dossier existant cible, avant de créer l'environnement."

#: library/venv.rst:297
#, fuzzy
msgid ""
"*symlinks* -- a boolean value indicating whether to attempt to symlink the "
"Python binary rather than copying."
msgstr ""
"``symlinks`` -- Une valeur booléenne qui indique si il faut créer un lien "
"symbolique sur le binaire Python au lieu de le copier."

#: library/venv.rst:300
#, fuzzy
msgid ""
"*upgrade* -- a boolean value which, if true, will upgrade an existing "
"environment with the running Python - for use when that Python has been "
"upgraded in-place (defaults to ``False``)."
msgstr ""
"``upgrade`` -- Une valeur booléenne qui, si vraie, mettra à jour un "
"environnement existant avec le Python lancé -- utilisé quand Python à été "
"mis a jour sur place (par défaut à ``False``)."

#: library/venv.rst:304
#, fuzzy
msgid ""
"*with_pip* -- a boolean value which, if true, ensures pip is installed in "
"the virtual environment. This uses :mod:`ensurepip` with the ``--default-"
"pip`` option."
msgstr ""
"``with_pip`` -- Une valeur booléenne qui, si vraie, assure que pip est "
"installé dans l'environnement virtuel. Cela utilise :mod:`ensurepip` avec "
"l'option ``--default-pip``."

#: library/venv.rst:308
#, fuzzy
msgid ""
"*prompt* -- a string to be used after virtual environment is activated "
"(defaults to ``None`` which means directory name of the environment would be "
"used). If the special string ``\".\"`` is provided, the basename of the "
"current directory is used as the prompt."
msgstr ""
"``prompt`` -- Une chaine utilisée après que l'environnement virtuel est "
"activé (par défaut à ``None`` ce qui veux dire qu'il utilisera le nom du "
"dossier de l'environnement)."

#: library/venv.rst:313
msgid "*upgrade_deps* -- Update the base venv modules to the latest on PyPI"
msgstr ""

#: library/venv.rst:315
msgid ""
"*scm_ignore_files* -- Create ignore files based for the specified source "
"control managers (SCM) in the iterable. Support is defined by having a "
"method named ``create_{scm}_ignore_file``. The only value supported by "
"default is ``\"git\"`` via :meth:`create_git_ignore_file`."
msgstr ""

#: library/venv.rst:321
msgid "Added the ``with_pip`` parameter"
msgstr "Ajout du paramètre ``with_pip``"

#: library/venv.rst:324
msgid "Added the ``prompt`` parameter"
msgstr "Ajout du paramètre ``prompt``"

#: library/venv.rst:327
#, fuzzy
msgid "Added the ``upgrade_deps`` parameter"
msgstr "Ajout du paramètre ``prompt``"

#: library/venv.rst:330
#, fuzzy
msgid "Added the ``scm_ignore_files`` parameter"
msgstr "Ajout du paramètre ``prompt``"

#: library/venv.rst:333
msgid ":class:`EnvBuilder` may be used as a base class."
msgstr ""

#: library/venv.rst:337
msgid ""
"Create a virtual environment by specifying the target directory (absolute or "
"relative to the current directory) which is to contain the virtual "
"environment.  The ``create`` method will either create the environment in "
"the specified directory, or raise an appropriate exception."
msgstr ""
"Crée un environnement virtuel en spécifiant le chemin cible (absolu ou "
"relatif par rapport au dossier courant) qui contiendra l'environnement "
"virtuel. La méthode ``create`` crée l'environnement dans le dossier spécifié "
"ou lève une exception appropriée."

#: library/venv.rst:343
msgid ""
"The ``create`` method of the :class:`EnvBuilder` class illustrates the hooks "
"available for subclass customization::"
msgstr ""
"La méthode ``create`` de la classe :class:`EnvBuilder` illustre les points "
"d'entrées disponibles pour la personnalisation de sous-classes ::"

#: library/venv.rst:346
msgid ""
"def create(self, env_dir):\n"
"    \"\"\"\n"
"    Create a virtualized Python environment in a directory.\n"
"    env_dir is the target directory to create an environment in.\n"
"    \"\"\"\n"
"    env_dir = os.path.abspath(env_dir)\n"
"    context = self.ensure_directories(env_dir)\n"
"    self.create_configuration(context)\n"
"    self.setup_python(context)\n"
"    self.setup_scripts(context)\n"
"    self.post_setup(context)"
msgstr ""

#: library/venv.rst:358
msgid ""
"Each of the methods :meth:`ensure_directories`, :meth:"
"`create_configuration`, :meth:`setup_python`, :meth:`setup_scripts` and :"
"meth:`post_setup` can be overridden."
msgstr ""
"Chacune des méthodes :meth:`ensure_directories`, :meth:"
"`create_configuration`, :meth:`setup_python`, :meth:`setup_scripts` et :meth:"
"`post_setup` peuvent être écrasés."

#: library/venv.rst:364
#, fuzzy
msgid ""
"Creates the environment directory and all necessary subdirectories that "
"don't already exist, and returns a context object.  This context object is "
"just a holder for attributes (such as paths) for use by the other methods.  "
"If the :class:`EnvBuilder` is created with the arg ``clear=True``, contents "
"of the environment directory will be cleared and then all necessary "
"subdirectories will be recreated."
msgstr ""
"Crée un dossier d'environnement et tous les dossiers nécessaires, et "
"retourne un objet contexte. C'est juste un conteneur pour des attributs "
"(comme des chemins), qui sera utilisé par d'autres méthodes. Ces dossiers "
"peuvent déjà exister. tant que ``clear`` ou ``upgrade`` ont été spécifiés "
"pour permettre de telles opérations dans un dossier d'environnement existant."

#: library/venv.rst:371
msgid ""
"The returned context object is a :class:`types.SimpleNamespace` with the "
"following attributes:"
msgstr ""

#: library/venv.rst:374
msgid ""
"``env_dir`` - The location of the virtual environment. Used for "
"``__VENV_DIR__`` in activation scripts (see :meth:`install_scripts`)."
msgstr ""

#: library/venv.rst:377
msgid ""
"``env_name`` - The name of the virtual environment. Used for "
"``__VENV_NAME__`` in activation scripts (see :meth:`install_scripts`)."
msgstr ""

#: library/venv.rst:380
msgid ""
"``prompt`` - The prompt to be used by the activation scripts. Used for "
"``__VENV_PROMPT__`` in activation scripts (see :meth:`install_scripts`)."
msgstr ""

#: library/venv.rst:383
msgid ""
"``executable`` - The underlying Python executable used by the virtual "
"environment. This takes into account the case where a virtual environment is "
"created from another virtual environment."
msgstr ""

#: library/venv.rst:387
msgid "``inc_path`` - The include path for the virtual environment."
msgstr ""

#: library/venv.rst:389
msgid "``lib_path`` - The purelib path for the virtual environment."
msgstr ""

#: library/venv.rst:391
#, fuzzy
msgid "``bin_path`` - The script path for the virtual environment."
msgstr ""
"Installe les scripts d'activation appropriés à la plateforme dans "
"l'environnement virtuel."

#: library/venv.rst:393
msgid ""
"``bin_name`` - The name of the script path relative to the virtual "
"environment location. Used for ``__VENV_BIN_NAME__`` in activation scripts "
"(see :meth:`install_scripts`)."
msgstr ""

#: library/venv.rst:397
msgid ""
"``env_exe`` - The name of the Python interpreter in the virtual environment. "
"Used for ``__VENV_PYTHON__`` in activation scripts (see :meth:"
"`install_scripts`)."
msgstr ""

#: library/venv.rst:401
msgid ""
"``env_exec_cmd`` - The name of the Python interpreter, taking into account "
"filesystem redirections. This can be used to run Python in the virtual "
"environment."
msgstr ""

#: library/venv.rst:406
msgid ""
"The *venv* :ref:`sysconfig installation scheme <installation_paths>` is used "
"to construct the paths of the created directories."
msgstr ""

#: library/venv.rst:411
msgid ""
"The attribute ``lib_path`` was added to the context, and the context object "
"was documented."
msgstr ""

#: library/venv.rst:417
msgid "Creates the ``pyvenv.cfg`` configuration file in the environment."
msgstr "Crée le fichier de configuration ``pyvenv.cfg`` dans l'environnement."

#: library/venv.rst:421
msgid ""
"Creates a copy or symlink to the Python executable in the environment. On "
"POSIX systems, if a specific executable ``python3.x`` was used, symlinks to "
"``python`` and ``python3`` will be created pointing to that executable, "
"unless files with those names already exist."
msgstr ""
"Crée une copie ou un lien symbolique vers l'exécutable Python dans "
"l'environnement. Sur les systèmes POSIX, si un exécutable spécifique "
"``python3.x`` a été utilisé, des liens symboliques vers ``python`` et "
"``python3`` seront créés pointant vers cet exécutable, sauf si des fichiers "
"avec ces noms existent déjà."

#: library/venv.rst:428
msgid ""
"Installs activation scripts appropriate to the platform into the virtual "
"environment."
msgstr ""
"Installe les scripts d'activation appropriés à la plateforme dans "
"l'environnement virtuel."

#: library/venv.rst:433
msgid ""
"Upgrades the core venv dependency packages (currently :pypi:`pip`) in the "
"environment. This is done by shelling out to the ``pip`` executable in the "
"environment."
msgstr ""

#: library/venv.rst:440
msgid ":pypi:`setuptools` is no longer a core venv dependency."
msgstr ""

#: library/venv.rst:444
msgid ""
"A placeholder method which can be overridden in third party implementations "
"to pre-install packages in the virtual environment or perform other post-"
"creation steps."
msgstr ""
"Une méthode qui n'est la que pour se faire surcharger dans des "
"implémentation externes pour pré installer des paquets dans l'environnement "
"virtuel ou pour exécuter des étapes post-création."

#: library/venv.rst:450
#, fuzzy
msgid ""
"This method can be called from :meth:`setup_scripts` or :meth:`post_setup` "
"in subclasses to assist in installing custom scripts into the virtual "
"environment."
msgstr ""
"De plus, :class:`EnvBuilder` propose cette méthode utilitaire qui peut être "
"appelée de :meth:`setup_scripts` ou :meth:`post_setup` dans des sous classes "
"pour assister dans l'installation de scripts customs dans l'environnement "
"virtuel."

#: library/venv.rst:454
#, fuzzy
msgid ""
"*path* is the path to a directory that should contain subdirectories "
"``common``, ``posix``, ``nt``; each containing scripts destined for the "
"``bin`` directory in the environment.  The contents of ``common`` and the "
"directory corresponding to :data:`os.name` are copied after some text "
"replacement of placeholders:"
msgstr ""
"*path* corresponds au chemin vers le dossier qui contiens les sous dossiers "
"\"**common**\", \"**posix**\", \"**nt**\", chacun contenant des scripts "
"destinés pour le dossier \"**bin**\" dans l'environnement. Le contenu du "
"dossier \"**common**\" et le dossier correspondant à :data:`os.name` sont "
"copiés après quelque remplacement de texte temporaires :"

#: library/venv.rst:460
msgid ""
"``__VENV_DIR__`` is replaced with the absolute path of the environment "
"directory."
msgstr ""
"``__VENV_DIR__`` est remplacé avec le chemin absolu du dossier de "
"l'environnement."

#: library/venv.rst:463
msgid ""
"``__VENV_NAME__`` is replaced with the environment name (final path segment "
"of environment directory)."
msgstr ""
"``__VENV_NAME__`` est remplacé avec le nom de l'environnement (le dernier "
"segment du chemin vers le dossier de l'environnement)."

#: library/venv.rst:466
msgid ""
"``__VENV_PROMPT__`` is replaced with the prompt (the environment name "
"surrounded by parentheses and with a following space)"
msgstr ""
"``__VENV_PROMPT__`` est remplacé par le prompt (nom de l'environnement "
"entouré de parenthèses et avec un espace le suivant)."

#: library/venv.rst:469
msgid ""
"``__VENV_BIN_NAME__`` is replaced with the name of the bin directory (either "
"``bin`` or ``Scripts``)."
msgstr ""
"``__VENV_BIN_NAME__`` est remplacé par le nom du dossier **bin** (soit "
"``bin`` soit ``Scripts``)."

#: library/venv.rst:472
msgid ""
"``__VENV_PYTHON__`` is replaced with the absolute path of the environment's "
"executable."
msgstr ""
"``__VENV_PYTHON__`` est remplacé avec le chemin absolu de l’exécutable de "
"l'environnement."

#: library/venv.rst:475
msgid ""
"The directories are allowed to exist (for when an existing environment is "
"being upgraded)."
msgstr ""
"Les dossiers peuvent exister (pour quand un environnement existant est mis à "
"jour)."

#: library/venv.rst:480
msgid ""
"Creates a ``.gitignore`` file within the virtual environment that causes the "
"entire directory to be ignored by the Git source control manager."
msgstr ""

#: library/venv.rst:485
msgid ""
"Windows now uses redirector scripts for ``python[w].exe`` instead of copying "
"the actual binaries. In 3.7.2 only :meth:`setup_python` does nothing unless "
"running from a build in the source tree."
msgstr ""
"Windows utilise maintenant des scripts de redirection pour ``python[w].exe`` "
"au lieu de copier les fichiers binaires. En 3.7.2 seulement :meth:"
"`setup_python` ne fait rien sauf s'il s'exécute à partir d'un *build* dans "
"l'arborescence source."

#: library/venv.rst:490
msgid ""
"Windows copies the redirector scripts as part of :meth:`setup_python` "
"instead of :meth:`setup_scripts`. This was not the case in 3.7.2. When using "
"symlinks, the original executables will be linked."
msgstr ""
"Windows copie les scripts de redirection dans le cadre de :meth:"
"`setup_python` au lieu de :meth:`setup_scripts`. Ce n'était pas le cas en "
"3.7.2. Lorsque vous utilisez des liens symboliques, les exécutables "
"originaux seront liés."

#: library/venv.rst:495
msgid "There is also a module-level convenience function:"
msgstr "Il y a aussi une fonction pratique au niveau du module :"

#: library/venv.rst:501
msgid ""
"Create an :class:`EnvBuilder` with the given keyword arguments, and call "
"its :meth:`~EnvBuilder.create` method with the *env_dir* argument."
msgstr ""
"Crée une :class:`EnvBuilder` avec les arguments donnés, et appelle sa "
"méthode :meth:`~EnvBuilder.create` avec l'argument *env_dir*."

#: library/venv.rst:506
#, fuzzy
msgid "Added the *with_pip* parameter"
msgstr "Ajout du paramètre ``with_pip``"

#: library/venv.rst:509
#, fuzzy
msgid "Added the *prompt* parameter"
msgstr "Ajout du paramètre ``prompt``"

#: library/venv.rst:512
#, fuzzy
msgid "Added the *upgrade_deps* parameter"
msgstr "Ajout du paramètre ``prompt``"

#: library/venv.rst:515
#, fuzzy
msgid "Added the *scm_ignore_files* parameter"
msgstr "Ajout du paramètre ``prompt``"

#: library/venv.rst:519
msgid "An example of extending ``EnvBuilder``"
msgstr "Un exemple d'extension de ``EnvBuilder``"

#: library/venv.rst:521
msgid ""
"The following script shows how to extend :class:`EnvBuilder` by implementing "
"a subclass which installs setuptools and pip into a created virtual "
"environment::"
msgstr ""
"Le script qui suis montre comment étendre :class:`EnvBuilder` en "
"implémentant une sous-classe qui installe **setuptools** et **pip** dans un "
"environnement créé ::"

#: library/venv.rst:524
msgid ""
"import os\n"
"import os.path\n"
"from subprocess import Popen, PIPE\n"
"import sys\n"
"from threading import Thread\n"
"from urllib.parse import urlparse\n"
"from urllib.request import urlretrieve\n"
"import venv\n"
"\n"
"class ExtendedEnvBuilder(venv.EnvBuilder):\n"
"    \"\"\"\n"
"    This builder installs setuptools and pip so that you can pip or\n"
"    easy_install other packages into the created virtual environment.\n"
"\n"
"    :param nodist: If true, setuptools and pip are not installed into the\n"
"                   created virtual environment.\n"
"    :param nopip: If true, pip is not installed into the created\n"
"                  virtual environment.\n"
"    :param progress: If setuptools or pip are installed, the progress of "
"the\n"
"                     installation can be monitored by passing a progress\n"
"                     callable. If specified, it is called with two\n"
"                     arguments: a string indicating some progress, and a\n"
"                     context indicating where the string is coming from.\n"
"                     The context argument can have one of three values:\n"
"                     'main', indicating that it is called from virtualize()\n"
"                     itself, and 'stdout' and 'stderr', which are obtained\n"
"                     by reading lines from the output streams of a "
"subprocess\n"
"                     which is used to install the app.\n"
"\n"
"                     If a callable is not specified, default progress\n"
"                     information is output to sys.stderr.\n"
"    \"\"\"\n"
"\n"
"    def __init__(self, *args, **kwargs):\n"
"        self.nodist = kwargs.pop('nodist', False)\n"
"        self.nopip = kwargs.pop('nopip', False)\n"
"        self.progress = kwargs.pop('progress', None)\n"
"        self.verbose = kwargs.pop('verbose', False)\n"
"        super().__init__(*args, **kwargs)\n"
"\n"
"    def post_setup(self, context):\n"
"        \"\"\"\n"
"        Set up any packages which need to be pre-installed into the\n"
"        virtual environment being created.\n"
"\n"
"        :param context: The information for the virtual environment\n"
"                        creation request being processed.\n"
"        \"\"\"\n"
"        os.environ['VIRTUAL_ENV'] = context.env_dir\n"
"        if not self.nodist:\n"
"            self.install_setuptools(context)\n"
"        # Can't install pip without setuptools\n"
"        if not self.nopip and not self.nodist:\n"
"            self.install_pip(context)\n"
"\n"
"    def reader(self, stream, context):\n"
"        \"\"\"\n"
"        Read lines from a subprocess' output stream and either pass to a "
"progress\n"
"        callable (if specified) or write progress information to sys."
"stderr.\n"
"        \"\"\"\n"
"        progress = self.progress\n"
"        while True:\n"
"            s = stream.readline()\n"
"            if not s:\n"
"                break\n"
"            if progress is not None:\n"
"                progress(s, context)\n"
"            else:\n"
"                if not self.verbose:\n"
"                    sys.stderr.write('.')\n"
"                else:\n"
"                    sys.stderr.write(s.decode('utf-8'))\n"
"                sys.stderr.flush()\n"
"        stream.close()\n"
"\n"
"    def install_script(self, context, name, url):\n"
"        _, _, path, _, _, _ = urlparse(url)\n"
"        fn = os.path.split(path)[-1]\n"
"        binpath = context.bin_path\n"
"        distpath = os.path.join(binpath, fn)\n"
"        # Download script into the virtual environment's binaries folder\n"
"        urlretrieve(url, distpath)\n"
"        progress = self.progress\n"
"        if self.verbose:\n"
"            term = '\\n'\n"
"        else:\n"
"            term = ''\n"
"        if progress is not None:\n"
"            progress('Installing %s ...%s' % (name, term), 'main')\n"
"        else:\n"
"            sys.stderr.write('Installing %s ...%s' % (name, term))\n"
"            sys.stderr.flush()\n"
"        # Install in the virtual environment\n"
"        args = [context.env_exe, fn]\n"
"        p = Popen(args, stdout=PIPE, stderr=PIPE, cwd=binpath)\n"
"        t1 = Thread(target=self.reader, args=(p.stdout, 'stdout'))\n"
"        t1.start()\n"
"        t2 = Thread(target=self.reader, args=(p.stderr, 'stderr'))\n"
"        t2.start()\n"
"        p.wait()\n"
"        t1.join()\n"
"        t2.join()\n"
"        if progress is not None:\n"
"            progress('done.', 'main')\n"
"        else:\n"
"            sys.stderr.write('done.\\n')\n"
"        # Clean up - no longer needed\n"
"        os.unlink(distpath)\n"
"\n"
"    def install_setuptools(self, context):\n"
"        \"\"\"\n"
"        Install setuptools in the virtual environment.\n"
"\n"
"        :param context: The information for the virtual environment\n"
"                        creation request being processed.\n"
"        \"\"\"\n"
"        url = \"https://bootstrap.pypa.io/ez_setup.py\"\n"
"        self.install_script(context, 'setuptools', url)\n"
"        # clear up the setuptools archive which gets downloaded\n"
"        pred = lambda o: o.startswith('setuptools-') and o.endswith('.tar."
"gz')\n"
"        files = filter(pred, os.listdir(context.bin_path))\n"
"        for f in files:\n"
"            f = os.path.join(context.bin_path, f)\n"
"            os.unlink(f)\n"
"\n"
"    def install_pip(self, context):\n"
"        \"\"\"\n"
"        Install pip in the virtual environment.\n"
"\n"
"        :param context: The information for the virtual environment\n"
"                        creation request being processed.\n"
"        \"\"\"\n"
"        url = 'https://bootstrap.pypa.io/get-pip.py'\n"
"        self.install_script(context, 'pip', url)\n"
"\n"
"\n"
"def main(args=None):\n"
"    import argparse\n"
"\n"
"    parser = argparse.ArgumentParser(prog=__name__,\n"
"                                     description='Creates virtual Python '\n"
"                                                 'environments in one or '\n"
"                                                 'more target '\n"
"                                                 'directories.')\n"
"    parser.add_argument('dirs', metavar='ENV_DIR', nargs='+',\n"
"                        help='A directory in which to create the '\n"
"                             'virtual environment.')\n"
"    parser.add_argument('--no-setuptools', default=False,\n"
"                        action='store_true', dest='nodist',\n"
"                        help=\"Don't install setuptools or pip in the \"\n"
"                             \"virtual environment.\")\n"
"    parser.add_argument('--no-pip', default=False,\n"
"                        action='store_true', dest='nopip',\n"
"                        help=\"Don't install pip in the virtual \"\n"
"                             \"environment.\")\n"
"    parser.add_argument('--system-site-packages', default=False,\n"
"                        action='store_true', dest='system_site',\n"
"                        help='Give the virtual environment access to the '\n"
"                             'system site-packages dir.')\n"
"    if os.name == 'nt':\n"
"        use_symlinks = False\n"
"    else:\n"
"        use_symlinks = True\n"
"    parser.add_argument('--symlinks', default=use_symlinks,\n"
"                        action='store_true', dest='symlinks',\n"
"                        help='Try to use symlinks rather than copies, '\n"
"                             'when symlinks are not the default for '\n"
"                             'the platform.')\n"
"    parser.add_argument('--clear', default=False, action='store_true',\n"
"                        dest='clear', help='Delete the contents of the '\n"
"                                           'virtual environment '\n"
"                                           'directory if it already '\n"
"                                           'exists, before virtual '\n"
"                                           'environment creation.')\n"
"    parser.add_argument('--upgrade', default=False, action='store_true',\n"
"                        dest='upgrade', help='Upgrade the virtual '\n"
"                                             'environment directory to '\n"
"                                             'use this version of '\n"
"                                             'Python, assuming Python '\n"
"                                             'has been upgraded '\n"
"                                             'in-place.')\n"
"    parser.add_argument('--verbose', default=False, action='store_true',\n"
"                        dest='verbose', help='Display the output '\n"
"                                             'from the scripts which '\n"
"                                             'install setuptools and pip.')\n"
"    options = parser.parse_args(args)\n"
"    if options.upgrade and options.clear:\n"
"        raise ValueError('you cannot supply --upgrade and --clear "
"together.')\n"
"    builder = ExtendedEnvBuilder(system_site_packages=options.system_site,\n"
"                                   clear=options.clear,\n"
"                                   symlinks=options.symlinks,\n"
"                                   upgrade=options.upgrade,\n"
"                                   nodist=options.nodist,\n"
"                                   nopip=options.nopip,\n"
"                                   verbose=options.verbose)\n"
"    for d in options.dirs:\n"
"        builder.create(d)\n"
"\n"
"if __name__ == '__main__':\n"
"    rc = 1\n"
"    try:\n"
"        main()\n"
"        rc = 0\n"
"    except Exception as e:\n"
"        print('Error: %s' % e, file=sys.stderr)\n"
"    sys.exit(rc)"
msgstr ""

#: library/venv.rst:732
msgid ""
"This script is also available for download `online <https://gist.github.com/"
"vsajip/4673395>`_."
msgstr ""
"Ce script est aussi disponible au téléchargement `en ligne <https://gist."
"github.com/vsajip/4673395>`_."

#: library/venv.rst:14
msgid "Environments"
msgstr ""

#: library/venv.rst:14
msgid "virtual"
msgstr ""

#~ msgid ""
#~ "Alternatively, if you configured the ``PATH`` and ``PATHEXT`` variables "
#~ "for your :ref:`Python installation <using-on-windows>`::"
#~ msgstr ""
#~ "Alternativement, si vous avez configuré les variables ``PATH`` et "
#~ "``PATHEXT`` pour votre :ref:`installation Python <using-on-windows>` ::"

#~ msgid ""
#~ "Creators of third-party virtual environment tools will be free to use the "
#~ "provided :class:`EnvBuilder` class as a base class."
#~ msgstr ""
#~ "Les créateurs d'outils externes de gestion d'environnements virtuels sont "
#~ "libres d'utiliser la classe :class:`EnvBuilder` mise à disposition en "
#~ "tant que classe de base."

#~ msgid ""
#~ "The returned env-builder is an object which has a method, ``create``:"
#~ msgstr ""
#~ "Le **env-builder** retourné est un objet qui a une méthode, ``create`` :"

#~ msgid "PowerShell Core"
#~ msgstr "PowerShell Core"

#~ msgid ""
#~ "A virtual environment is a Python environment such that the Python "
#~ "interpreter, libraries and scripts installed into it are isolated from "
#~ "those installed in other virtual environments, and (by default) any "
#~ "libraries installed in a \"system\" Python, i.e., one which is installed "
#~ "as part of your operating system."
#~ msgstr ""
#~ "Un environnement virtuel est un environnement Python tel que "
#~ "l'interpréteur Python, les bibliothèques et les scripts installés sont "
#~ "isolés de ceux installés dans d'autres environnements virtuels, et (par "
#~ "défaut) de toutes autres bibliothèques installées dans un Python "
#~ "\"système\", par exemple celui qui est installé avec votre système "
#~ "d'exploitation."

#~ msgid ""
#~ "A virtual environment is a directory tree which contains Python "
#~ "executable files and other files which indicate that it is a virtual "
#~ "environment."
#~ msgstr ""
#~ "Un environnement virtuel est une arborescence de dossiers qui contiens "
#~ "les fichiers exécutables Python et autres fichiers qui indiquent que "
#~ "c'est un environnement virtuel."

#~ msgid ""
#~ "When a virtual environment is active, any options that change the "
#~ "installation path will be ignored from all :mod:`distutils` configuration "
#~ "files to prevent projects being inadvertently installed outside of the "
#~ "virtual environment."
#~ msgstr ""
#~ "Quand un environnement virtuel est actif, toute option qui change le "
#~ "chemin d'installation sera ignoré de tous les fichiers de configuration :"
#~ "mod:`distutils` pour éviter que des projets soient accidentellement "
#~ "installés en dehors de l'environnement virtuel."

#~ msgid "$ . <venv>/bin/activate.fish"
#~ msgstr "``$ . <venv>/bin/activate.fish``"
