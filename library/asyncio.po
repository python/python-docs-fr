# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-29 22:40+0100\n"
"PO-Revision-Date: 2021-05-24 21:49-0400\n"
"Last-Translator: Antoine Wecxsteen\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.4.3\n"

#: library/asyncio.rst:91
msgid "High-level APIs"
msgstr "Bibliothèques de haut-niveau"

#: library/asyncio.rst:103
msgid "Low-level APIs"
msgstr "Bibliothèques de bas-niveau"

#: library/asyncio.rst:114
msgid "Guides and Tutorials"
msgstr "Guides et tutoriels"

#: library/asyncio.rst:2
#, fuzzy
msgid ":mod:`!asyncio` --- Asynchronous I/O"
msgstr ":mod:`asyncio` — Entrées/Sorties asynchrones"

#: library/asyncio.rst:-1
msgid "Hello World!"
msgstr "Hello World !"

#: library/asyncio.rst:13
msgid ""
"import asyncio\n"
"\n"
"async def main():\n"
"    print('Hello ...')\n"
"    await asyncio.sleep(1)\n"
"    print('... World!')\n"
"\n"
"asyncio.run(main())"
msgstr ""

#: library/asyncio.rst:22
msgid ""
"asyncio is a library to write **concurrent** code using the **async/await** "
"syntax."
msgstr ""
"``asyncio`` est une bibliothèque permettant de faire de la programmation "
"asynchrone en utilisant la syntaxe *async*/*await*."

#: library/asyncio.rst:25
msgid ""
"asyncio is used as a foundation for multiple Python asynchronous frameworks "
"that provide high-performance network and web-servers, database connection "
"libraries, distributed task queues, etc."
msgstr ""
"``asyncio`` constitue la base de nombreux cadriciels (*frameworks*) Python "
"asynchrones qui fournissent des utilitaires réseau et des serveurs web "
"performants, des bibliothèques de connexion à des bases de données, des "
"files d'exécution distribuées, etc."

#: library/asyncio.rst:29
msgid ""
"asyncio is often a perfect fit for IO-bound and high-level **structured** "
"network code."
msgstr ""
"``asyncio`` est souvent le bon choix pour écrire du code réseau de haut-"
"niveau et tributaire des entrées-sorties (*IO-bound*)."

#: library/asyncio.rst:32
msgid "asyncio provides a set of **high-level** APIs to:"
msgstr ""
"``asyncio`` fournit des interfaces de programmation **haut-niveau** pour :"

#: library/asyncio.rst:34
msgid ""
":ref:`run Python coroutines <coroutine>` concurrently and have full control "
"over their execution;"
msgstr ""
":ref:`exécuter des coroutines Python <coroutine>` de manière concurrente et "
"d'avoir le contrôle total sur leur exécution ;"

#: library/asyncio.rst:37
msgid "perform :ref:`network IO and IPC <asyncio-streams>`;"
msgstr ""
"effectuer :ref:`des entrées/sorties réseau et de la communication inter-"
"processus <asyncio-streams>` ;"

#: library/asyncio.rst:39
msgid "control :ref:`subprocesses <asyncio-subprocess>`;"
msgstr "contrôler des :ref:`sous-processus <asyncio-subprocess>` ;"

#: library/asyncio.rst:41
msgid "distribute tasks via :ref:`queues <asyncio-queues>`;"
msgstr "distribuer des tâches avec des :ref:`queues <asyncio-queues>` ;"

#: library/asyncio.rst:43
msgid ":ref:`synchronize <asyncio-sync>` concurrent code;"
msgstr ""
":ref:`synchroniser <asyncio-sync>` du code s'exécutant de manière "
"concurrente ;"

#: library/asyncio.rst:45
msgid ""
"Additionally, there are **low-level** APIs for *library and framework "
"developers* to:"
msgstr ""
"En plus, il existe des bibliothèques de **bas-niveau** pour que les "
"*développeurs de bibliothèques et de frameworks* puissent :"

#: library/asyncio.rst:48
#, fuzzy
msgid ""
"create and manage :ref:`event loops <asyncio-event-loop>`, which provide "
"asynchronous APIs for :ref:`networking <loop_create_server>`, running :ref:"
"`subprocesses <loop_subprocess_exec>`, handling :ref:`OS signals "
"<loop_add_signal_handler>`, etc;"
msgstr ""
"créer et gérer des :ref:`boucles d'événements <asyncio-event-loop>`, qui "
"fournissent des bibliothèques asynchrones de :meth:`réseau <loop."
"create_server>`, d'exécution de :meth:`subprocesses <loop.subprocess_exec>`, "
"de gestion de :meth:`signaux système <loop.add_signal_handler>`, etc ;"

#: library/asyncio.rst:53
msgid ""
"implement efficient protocols using :ref:`transports <asyncio-transports-"
"protocols>`;"
msgstr ""
"implémenter des protocoles efficaces à l'aide de :ref:`transports <asyncio-"
"transports-protocols>` ;"

#: library/asyncio.rst:56
msgid ""
":ref:`bridge <asyncio-futures>` callback-based libraries and code with async/"
"await syntax."
msgstr ""
":ref:`lier <asyncio-futures>` des bibliothèques basées sur les fonctions de "
"rappel et développer avec la syntaxe *async*/*await*."

#: includes/wasm-notavail.rst:3
msgid "Availability"
msgstr ""

#: includes/wasm-notavail.rst:5
msgid ""
"This module does not work or is not available on WebAssembly. See :ref:`wasm-"
"availability` for more information."
msgstr ""

#: library/asyncio.rst:64
msgid "asyncio REPL"
msgstr ""

#: library/asyncio.rst:65
msgid ""
"You can experiment with an ``asyncio`` concurrent context in the :term:"
"`REPL`:"
msgstr ""

#: library/asyncio.rst:67
msgid ""
"$ python -m asyncio\n"
"asyncio REPL ...\n"
"Use \"await\" directly instead of \"asyncio.run()\".\n"
"Type \"help\", \"copyright\", \"credits\" or \"license\" for more "
"information.\n"
">>> import asyncio\n"
">>> await asyncio.sleep(10, result='hello')\n"
"'hello'"
msgstr ""

#: library/asyncio.rst:77
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_stdin`` with no "
"arguments."
msgstr ""

#: library/asyncio.rst:79
msgid "(also 3.11.10, 3.10.15, 3.9.20, and 3.8.20) Emits audit events."
msgstr ""

#: library/asyncio.rst:82
msgid ""
"Uses PyREPL if possible, in which case :envvar:`PYTHONSTARTUP` is also "
"executed. Emits audit events."
msgstr ""

#: library/asyncio.rst:90
msgid "Reference"
msgstr "Sommaire"

#: library/asyncio.rst:123
msgid "The source code for asyncio can be found in :source:`Lib/asyncio/`."
msgstr ""
"Le code source d'``asyncio`` est disponible dans :source:`Lib/asyncio/`."
