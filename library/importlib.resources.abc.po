# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To:\n"
"POT-Creation-Date: 2022-05-22 23:13+0200\n"
"PO-Revision-Date: 2022-11-15 16:56+0100\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: library/importlib.resources.abc.rst:3
msgid "*Superseded by TraversableResources*"
msgstr ""

#: library/importlib.resources.abc.rst:5
msgid ""
"An :term:`abstract base class` to provide the ability to read *resources*."
msgstr ""

#: library/importlib.resources.abc.rst:8
msgid ""
"From the perspective of this ABC, a *resource* is a binary artifact that is "
"shipped within a package. Typically this is something like a data file that "
"lives next to the ``__init__.py`` file of the package. The purpose of this "
"class is to help abstract out the accessing of such data files so that it "
"does not matter if the package and its data file(s) are stored in a e.g. zip "
"file versus on the file system."
msgstr ""

#: library/importlib.resources.abc.rst:16
msgid ""
"For any of methods of this class, a *resource* argument is expected to be a :"
"term:`path-like object` which represents conceptually just a file name. This "
"means that no subdirectory paths should be included in the *resource* "
"argument. This is because the location of the package the reader is for, "
"acts as the \"directory\". Hence the metaphor for directories and file names "
"is packages and resources, respectively. This is also why instances of this "
"class are expected to directly correlate to a specific package (instead of "
"potentially representing multiple packages or a module)."
msgstr ""

#: library/importlib.resources.abc.rst:27
msgid ""
"Loaders that wish to support resource reading are expected to provide a "
"method called ``get_resource_reader(fullname)`` which returns an object "
"implementing this ABC's interface. If the module specified by fullname is "
"not a package, this method should return :const:`None`. An object compatible "
"with this ABC should only be returned when the specified module is a package."
msgstr ""

#: library/importlib.resources.abc.rst:38
msgid ""
"Returns an opened, :term:`file-like object` for binary reading of the "
"*resource*."
msgstr ""

#: library/importlib.resources.abc.rst:41
msgid "If the resource cannot be found, :exc:`FileNotFoundError` is raised."
msgstr ""
"Si la ressource ne peut pas être trouvée, :exc:`FileNotFoundError` est levée."

#: library/importlib.resources.abc.rst:46
msgid "Returns the file system path to the *resource*."
msgstr "Renvoie le chemin de *resource* dans le système de fichiers."

#: library/importlib.resources.abc.rst:48
msgid ""
"If the resource does not concretely exist on the file system, raise :exc:"
"`FileNotFoundError`."
msgstr ""

#: library/importlib.resources.abc.rst:53
msgid ""
"Returns ``True`` if the named *name* is considered a resource. :exc:"
"`FileNotFoundError` is raised if *name* does not exist."
msgstr ""

#: library/importlib.resources.abc.rst:58
msgid ""
"Returns an :term:`iterable` of strings over the contents of the package. Do "
"note that it is not required that all names returned by the iterator be "
"actual resources, e.g. it is acceptable to return names for which :meth:"
"`is_resource` would be false."
msgstr ""

#: library/importlib.resources.abc.rst:64
msgid ""
"Allowing non-resource names to be returned is to allow for situations where "
"how a package and its resources are stored are known a priori and the non-"
"resource names would be useful. For instance, returning subdirectory names "
"is allowed so that when it is known that the package and resources are "
"stored on the file system then those subdirectory names can be used directly."
msgstr ""

#: library/importlib.resources.abc.rst:72
msgid "The abstract method returns an iterable of no items."
msgstr ""

#: library/importlib.resources.abc.rst:77
msgid ""
"An abstract base class for a :term:`loader` which implements the optional :"
"pep:`302` protocol for loading arbitrary resources from the storage back-end."
msgstr ""

#: library/importlib.resources.abc.rst:81
msgid ""
"This ABC is deprecated in favour of supporting resource loading through :"
"class:`importlib.abc.ResourceReader`."
msgstr ""

#: library/importlib.resources.abc.rst:87
msgid ""
"An abstract method to return the bytes for the data located at *path*. "
"Loaders that have a file-like storage back-end that allows storing arbitrary "
"data can implement this abstract method to give direct access to the data "
"stored. :exc:`OSError` is to be raised if the *path* cannot be found. The "
"*path* is expected to be constructed using a module's :attr:`__file__` "
"attribute or an item from a package's :attr:`__path__`."
msgstr ""

#: library/importlib.resources.abc.rst:95
msgid "Raises :exc:`OSError` instead of :exc:`NotImplementedError`."
msgstr ""

#: library/importlib.resources.abc.rst:101
msgid ""
"An abstract base class for a :term:`loader` which implements the optional :"
"pep:`302` protocol for loaders that inspect modules."
msgstr ""

#: library/importlib.resources.abc.rst:106
msgid ""
"Return the code object for a module, or ``None`` if the module does not have "
"a code object (as would be the case, for example, for a built-in module).  "
"Raise an :exc:`ImportError` if loader cannot find the requested module."
msgstr ""

#: library/importlib.resources.abc.rst:112
msgid ""
"While the method has a default implementation, it is suggested that it be "
"overridden if possible for performance."
msgstr ""

#: library/importlib.resources.abc.rst:118
msgid "No longer abstract and a concrete implementation is provided."
msgstr ""

#: library/importlib.resources.abc.rst:123
msgid ""
"An abstract method to return the source of a module. It is returned as a "
"text string using :term:`universal newlines`, translating all recognized "
"line separators into ``'\\n'`` characters.  Returns ``None`` if no source is "
"available (e.g. a built-in module). Raises :exc:`ImportError` if the loader "
"cannot find the module specified."
msgstr ""

#: library/importlib.resources.abc.rst:129
#: library/importlib.resources.abc.rst:138
#: library/importlib.resources.abc.rst:188
msgid "Raises :exc:`ImportError` instead of :exc:`NotImplementedError`."
msgstr ""

#: library/importlib.resources.abc.rst:134
msgid ""
"An optional method to return a true value if the module is a package, a "
"false value otherwise. :exc:`ImportError` is raised if the :term:`loader` "
"cannot find the module."
msgstr ""

#: library/importlib.resources.abc.rst:143
msgid "Create a code object from Python source."
msgstr ""

#: library/importlib.resources.abc.rst:145
msgid ""
"The *data* argument can be whatever the :func:`compile` function supports (i."
"e. string or bytes). The *path* argument should be the \"path\" to where the "
"source code originated from, which can be an abstract concept (e.g. location "
"in a zip file)."
msgstr ""

#: library/importlib.resources.abc.rst:150
msgid ""
"With the subsequent code object one can execute it in a module by running "
"``exec(code, module.__dict__)``."
msgstr ""

#: library/importlib.resources.abc.rst:155
msgid "Made the method static."
msgstr ""

#: library/importlib.resources.abc.rst:160
msgid "Implementation of :meth:`Loader.exec_module`."
msgstr ""

#: library/importlib.resources.abc.rst:166
msgid "Implementation of :meth:`Loader.load_module`."
msgstr ""

#: library/importlib.resources.abc.rst:168
msgid "use :meth:`exec_module` instead."
msgstr ""

#: library/importlib.resources.abc.rst:174
msgid ""
"An abstract base class which inherits from :class:`InspectLoader` that, when "
"implemented, helps a module to be executed as a script. The ABC represents "
"an optional :pep:`302` protocol."
msgstr ""

#: library/importlib.resources.abc.rst:180
msgid ""
"An abstract method that is to return the value of :attr:`__file__` for the "
"specified module. If no path is available, :exc:`ImportError` is raised."
msgstr ""

#: library/importlib.resources.abc.rst:184
msgid ""
"If source code is available, then the method should return the path to the "
"source file, regardless of whether a bytecode was used to load the module."
msgstr ""

#: library/importlib.resources.abc.rst:194
msgid ""
"An abstract base class which inherits from :class:`ResourceLoader` and :"
"class:`ExecutionLoader`, providing concrete implementations of :meth:"
"`ResourceLoader.get_data` and :meth:`ExecutionLoader.get_filename`."
msgstr ""

#: library/importlib.resources.abc.rst:198
msgid ""
"The *fullname* argument is a fully resolved name of the module the loader is "
"to handle. The *path* argument is the path to the file for the module."
msgstr ""

#: library/importlib.resources.abc.rst:205
msgid "The name of the module the loader can handle."
msgstr ""

#: library/importlib.resources.abc.rst:209
msgid "Path to the file of the module."
msgstr ""

#: library/importlib.resources.abc.rst:213
msgid "Calls super's ``load_module()``."
msgstr ""

#: library/importlib.resources.abc.rst:215
msgid "Use :meth:`Loader.exec_module` instead."
msgstr ""

#: library/importlib.resources.abc.rst:220
msgid "Returns :attr:`path`."
msgstr ""

#: library/importlib.resources.abc.rst:224
msgid "Reads *path* as a binary file and returns the bytes from it."
msgstr ""

#: library/importlib.resources.abc.rst:229
msgid ""
"An abstract base class for implementing source (and optionally bytecode) "
"file loading. The class inherits from both :class:`ResourceLoader` and :"
"class:`ExecutionLoader`, requiring the implementation of:"
msgstr ""

#: library/importlib.resources.abc.rst:233
msgid ":meth:`ResourceLoader.get_data`"
msgstr ""

#: library/importlib.resources.abc.rst:236
msgid ":meth:`ExecutionLoader.get_filename`"
msgstr ""

#: library/importlib.resources.abc.rst:235
msgid ""
"Should only return the path to the source file; sourceless loading is not "
"supported."
msgstr ""

#: library/importlib.resources.abc.rst:238
msgid ""
"The abstract methods defined by this class are to add optional bytecode file "
"support. Not implementing these optional methods (or causing them to raise :"
"exc:`NotImplementedError`) causes the loader to only work with source code. "
"Implementing the methods allows the loader to work with source *and* "
"bytecode files; it does not allow for *sourceless* loading where only "
"bytecode is provided.  Bytecode files are an optimization to speed up "
"loading by removing the parsing step of Python's compiler, and so no "
"bytecode-specific API is exposed."
msgstr ""

#: library/importlib.resources.abc.rst:249
msgid ""
"Optional abstract method which returns a :class:`dict` containing metadata "
"about the specified path.  Supported dictionary keys are:"
msgstr ""

#: library/importlib.resources.abc.rst:252
msgid ""
"``'mtime'`` (mandatory): an integer or floating-point number representing "
"the modification time of the source code;"
msgstr ""

#: library/importlib.resources.abc.rst:254
msgid "``'size'`` (optional): the size in bytes of the source code."
msgstr ""

#: library/importlib.resources.abc.rst:256
msgid ""
"Any other keys in the dictionary are ignored, to allow for future "
"extensions. If the path cannot be handled, :exc:`OSError` is raised."
msgstr ""

#: library/importlib.resources.abc.rst:261
#: library/importlib.resources.abc.rst:274
msgid "Raise :exc:`OSError` instead of :exc:`NotImplementedError`."
msgstr ""

#: library/importlib.resources.abc.rst:266
msgid ""
"Optional abstract method which returns the modification time for the "
"specified path."
msgstr ""

#: library/importlib.resources.abc.rst:269
msgid ""
"This method is deprecated in favour of :meth:`path_stats`.  You don't have "
"to implement it, but it is still available for compatibility purposes. "
"Raise :exc:`OSError` if the path cannot be handled."
msgstr ""

#: library/importlib.resources.abc.rst:279
msgid ""
"Optional abstract method which writes the specified bytes to a file path. "
"Any intermediate directories which do not exist are to be created "
"automatically."
msgstr ""

#: library/importlib.resources.abc.rst:283
msgid ""
"When writing to the path fails because the path is read-only (:attr:`errno."
"EACCES`/:exc:`PermissionError`), do not propagate the exception."
msgstr ""

#: library/importlib.resources.abc.rst:287
msgid "No longer raises :exc:`NotImplementedError` when called."
msgstr ""

#: library/importlib.resources.abc.rst:292
msgid "Concrete implementation of :meth:`InspectLoader.get_code`."
msgstr ""

#: library/importlib.resources.abc.rst:296
msgid "Concrete implementation of :meth:`Loader.exec_module`."
msgstr ""

#: library/importlib.resources.abc.rst:302
msgid "Concrete implementation of :meth:`Loader.load_module`."
msgstr ""

#: library/importlib.resources.abc.rst:304
msgid "Use :meth:`exec_module` instead."
msgstr ""

#: library/importlib.resources.abc.rst:309
msgid "Concrete implementation of :meth:`InspectLoader.get_source`."
msgstr ""

#: library/importlib.resources.abc.rst:313
msgid ""
"Concrete implementation of :meth:`InspectLoader.is_package`. A module is "
"determined to be a package if its file path (as provided by :meth:"
"`ExecutionLoader.get_filename`) is a file named ``__init__`` when the file "
"extension is removed **and** the module name itself does not end in "
"``__init__``."
msgstr ""

#: library/importlib.resources.abc.rst:322
msgid ""
"An object with a subset of pathlib.Path methods suitable for traversing "
"directories and opening files."
msgstr ""

#: library/importlib.resources.abc.rst:329
msgid "Abstract. The base name of this object without any parent references."
msgstr ""

#: library/importlib.resources.abc.rst:333
msgid "Yield Traversable objects in self."
msgstr ""

#: library/importlib.resources.abc.rst:337
msgid "Return True if self is a directory."
msgstr ""

#: library/importlib.resources.abc.rst:341
msgid "Return True if self is a file."
msgstr ""

#: library/importlib.resources.abc.rst:345
#: library/importlib.resources.abc.rst:349
msgid "Return Traversable child in self."
msgstr ""

#: library/importlib.resources.abc.rst:353
msgid ""
"*mode* may be 'r' or 'rb' to open as text or binary. Return a handle "
"suitable for reading (same as :attr:`pathlib.Path.open`)."
msgstr ""

#: library/importlib.resources.abc.rst:356
msgid ""
"When opening as text, accepts encoding parameters such as those accepted by :"
"attr:`io.TextIOWrapper`."
msgstr ""

#: library/importlib.resources.abc.rst:361
msgid "Read contents of self as bytes."
msgstr ""

#: library/importlib.resources.abc.rst:365
msgid "Read contents of self as text."
msgstr ""

#: library/importlib.resources.abc.rst:370
msgid ""
"An abstract base class for resource readers capable of serving the :meth:"
"`importlib.resources.files` interface. Subclasses :class:`importlib.abc."
"ResourceReader` and provides concrete implementations of the :class:"
"`importlib.abc.ResourceReader`'s abstract methods. Therefore, any loader "
"supplying :class:`importlib.abc.TraversableReader` also supplies "
"ResourceReader."
msgstr ""

#: library/importlib.resources.abc.rst:377
msgid ""
"Loaders that wish to support resource reading are expected to implement this "
"interface."
msgstr ""

#: library/importlib.resources.abc.rst:384
msgid ""
"Returns a :class:`importlib.abc.Traversable` object for the loaded package."
msgstr ""
