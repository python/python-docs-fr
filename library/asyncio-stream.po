# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-28 15:29+0200\n"
"PO-Revision-Date: 2018-07-27 23:20+0200\n"
"Last-Translator: Julien Palard <julien@palard.fr>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/asyncio-stream.rst:7
msgid "Streams (coroutine based API)"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:9
msgid "**Source code:** :source:`Lib/asyncio/streams.py`"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:12
msgid "Stream functions"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:16
msgid ""
"The top-level functions in this module are meant as convenience wrappers "
"only; there's really nothing special there, and if they don't do exactly "
"what you want, feel free to copy their code."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:23
msgid ""
"A wrapper for :meth:`~AbstractEventLoop.create_connection()` returning a "
"(reader, writer) pair."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:26
msgid ""
"The reader returned is a :class:`StreamReader` instance; the writer is a :"
"class:`StreamWriter` instance."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:29 ../Doc/library/asyncio-stream.rst:74
msgid ""
"When specified, the *loop* argument determines which event loop to use, and "
"the *limit* argument determines the buffer size limit used by the returned :"
"class:`StreamReader` instance."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:33
msgid ""
"The rest of the arguments are passed directly to :meth:`AbstractEventLoop."
"create_connection`."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:36 ../Doc/library/asyncio-stream.rst:63
#: ../Doc/library/asyncio-stream.rst:81 ../Doc/library/asyncio-stream.rst:113
msgid "This function is a :ref:`coroutine <coroutine>`."
msgstr "Cette fonction est une :ref:`coroutine <coroutine>`."

#: ../Doc/library/asyncio-stream.rst:40 ../Doc/library/asyncio-stream.rst:87
msgid "The *ssl_handshake_timeout* parameter."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:44
msgid ""
"Start a socket server, with a callback for each client connected. The return "
"value is the same as :meth:`~AbstractEventLoop.create_server()`."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:47 ../Doc/library/asyncio-stream.rst:97
msgid ""
"The *client_connected_cb* callback is called whenever a new client "
"connection is established.  It receives a reader/writer pair as two "
"arguments, the first is a :class:`StreamReader` instance, and the second is "
"a :class:`StreamWriter` instance."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:52 ../Doc/library/asyncio-stream.rst:102
msgid ""
"*client_connected_cb* accepts a plain callable or a :ref:`coroutine function "
"<coroutine>`; if it is a coroutine function, it will be automatically "
"converted into a :class:`Task`."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:56 ../Doc/library/asyncio-stream.rst:106
msgid ""
"When specified, the *loop* argument determines which event loop to use, and "
"the *limit* argument determines the buffer size limit used by the :class:"
"`StreamReader` instance passed to *client_connected_cb*."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:60
msgid ""
"The rest of the arguments are passed directly to :meth:`~AbstractEventLoop."
"create_server()`."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:67 ../Doc/library/asyncio-stream.rst:119
msgid "The *ssl_handshake_timeout* and *start_serving* parameters."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:71
msgid ""
"A wrapper for :meth:`~AbstractEventLoop.create_unix_connection()` returning "
"a (reader, writer) pair."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:78
msgid ""
"The rest of the arguments are passed directly to :meth:`~AbstractEventLoop."
"create_unix_connection()`."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:83 ../Doc/library/asyncio-stream.rst:115
msgid "Availability: UNIX."
msgstr "Disponible sur : UNIX."

#: ../Doc/library/asyncio-stream.rst:91
msgid "The *path* parameter can now be a :term:`path-like object`"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:95
msgid ""
"Start a UNIX Domain Socket server, with a callback for each client connected."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:110
msgid ""
"The rest of the arguments are passed directly to :meth:`~AbstractEventLoop."
"create_unix_server()`."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:123
msgid "The *path* parameter can now be a :term:`path-like object`."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:127
msgid "StreamReader"
msgstr "StreamReader"

#: ../Doc/library/asyncio-stream.rst:131 ../Doc/library/asyncio-stream.rst:227
msgid "This class is :ref:`not thread safe <asyncio-multithreading>`."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:135
msgid "Get the exception."
msgstr "Récupère l'exception."

#: ../Doc/library/asyncio-stream.rst:139
msgid "Acknowledge the EOF."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:143
msgid ""
"Feed *data* bytes in the internal buffer.  Any operations waiting for the "
"data will be resumed."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:148
msgid "Set the exception."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:152
msgid "Set the transport."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:156
msgid ""
"Read up to *n* bytes.  If *n* is not provided, or set to ``-1``, read until "
"EOF and return all read bytes."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:159 ../Doc/library/asyncio-stream.rst:171
msgid ""
"If the EOF was received and the internal buffer is empty, return an empty "
"``bytes`` object."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:162 ../Doc/library/asyncio-stream.rst:174
#: ../Doc/library/asyncio-stream.rst:183 ../Doc/library/asyncio-stream.rst:276
msgid "This method is a :ref:`coroutine <coroutine>`."
msgstr "Cette méthode est une :ref:`coroutine <coroutine>`."

#: ../Doc/library/asyncio-stream.rst:166
msgid ""
"Read one line, where \"line\" is a sequence of bytes ending with ``\\n``."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:168
msgid ""
"If EOF is received, and ``\\n`` was not found, the method will return the "
"partial read bytes."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:178
msgid ""
"Read exactly *n* bytes. Raise an :exc:`IncompleteReadError` if the end of "
"the stream is reached before *n* can be read, the :attr:`IncompleteReadError."
"partial` attribute of the exception contains the partial read bytes."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:187
msgid "Read data from the stream until ``separator`` is found."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:189
msgid ""
"On success, the data and separator will be removed from the internal buffer "
"(consumed). Returned data will include the separator at the end."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:193
msgid ""
"Configured stream limit is used to check result. Limit sets the maximal "
"length of data that can be returned, not counting the separator."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:197
msgid ""
"If an EOF occurs and the complete separator is still not found, an :exc:"
"`IncompleteReadError` exception will be raised, and the internal buffer will "
"be reset.  The :attr:`IncompleteReadError.partial` attribute may contain the "
"separator partially."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:203
msgid ""
"If the data cannot be read because of over limit, a :exc:`LimitOverrunError` "
"exception  will be raised, and the data will be left in the internal buffer, "
"so it can be read again."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:211
msgid "Return ``True`` if the buffer is empty and :meth:`feed_eof` was called."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:215
msgid "StreamWriter"
msgstr "StreamWriter"

#: ../Doc/library/asyncio-stream.rst:219
msgid "Wraps a Transport."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:221
msgid ""
"This exposes :meth:`write`, :meth:`writelines`, :meth:`can_write_eof()`, :"
"meth:`write_eof`, :meth:`get_extra_info` and :meth:`close`.  It adds :meth:"
"`drain` which returns an optional :class:`Future` on which you can wait for "
"flow control.  It also adds a transport attribute which references the :"
"class:`Transport` directly."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:231
msgid "Transport."
msgstr "Transport."

#: ../Doc/library/asyncio-stream.rst:235
msgid ""
"Return :const:`True` if the transport supports :meth:`write_eof`, :const:"
"`False` if not. See :meth:`WriteTransport.can_write_eof`."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:240
msgid "Close the transport: see :meth:`BaseTransport.close`."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:244
msgid "Return ``True`` if the writer is closing or is closed."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:250
msgid "Wait until the writer is closed."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:252
msgid ""
"Should be called after :meth:`close`  to wait until the underlying "
"connection (and the associated transport/protocol pair) is closed."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:259
msgid ""
"Let the write buffer of the underlying transport a chance to be flushed."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:261
msgid "The intended use is to write::"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:266
msgid ""
"When the size of the transport buffer reaches the high-water limit (the "
"protocol is paused), block until the size of the buffer is drained down to "
"the low-water limit and the protocol is resumed. When there is nothing to "
"wait for, the yield-from continues immediately."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:271
msgid ""
"Yielding from :meth:`drain` gives the opportunity for the loop to schedule "
"the write operation and flush the buffer. It should especially be used when "
"a possibly large amount of data is written to the transport, and the "
"coroutine does not yield-from between calls to :meth:`write`."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:280
msgid ""
"Return optional transport information: see :meth:`BaseTransport."
"get_extra_info`."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:285
msgid ""
"Write some *data* bytes to the transport: see :meth:`WriteTransport.write`."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:290
msgid ""
"Write a list (or any iterable) of data bytes to the transport: see :meth:"
"`WriteTransport.writelines`."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:295
msgid ""
"Close the write end of the transport after flushing buffered data: see :meth:"
"`WriteTransport.write_eof`."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:300
msgid "StreamReaderProtocol"
msgstr "StreamReaderProtocol"

#: ../Doc/library/asyncio-stream.rst:304
msgid ""
"Trivial helper class to adapt between :class:`Protocol` and :class:"
"`StreamReader`. Subclass of :class:`Protocol`."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:307
msgid ""
"*stream_reader* is a :class:`StreamReader` instance, *client_connected_cb* "
"is an optional function called with (stream_reader, stream_writer) when a "
"connection is made, *loop* is the event loop instance to use."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:311
msgid ""
"(This is a helper class instead of making :class:`StreamReader` itself a :"
"class:`Protocol` subclass, because the :class:`StreamReader` has other "
"potential uses, and to prevent the user of the :class:`StreamReader` from "
"accidentally calling inappropriate methods of the protocol.)"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:318
msgid "IncompleteReadError"
msgstr "IncompleteReadError"

#: ../Doc/library/asyncio-stream.rst:322
msgid "Incomplete read error, subclass of :exc:`EOFError`."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:326
msgid "Total number of expected bytes (:class:`int`)."
msgstr "Nombre total d'octets attendus (:class:`int`)."

#: ../Doc/library/asyncio-stream.rst:330
msgid ""
"Read bytes string before the end of stream was reached (:class:`bytes`)."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:334
msgid "LimitOverrunError"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:338
msgid "Reached the buffer limit while looking for a separator."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:342
msgid "Total number of to be consumed bytes."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:346
msgid "Stream examples"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:351
msgid "TCP echo client using streams"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:353
msgid "TCP echo client using the :func:`asyncio.open_connection` function::"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:377
msgid ""
"The :ref:`TCP echo client protocol <asyncio-tcp-echo-client-protocol>` "
"example uses the :meth:`AbstractEventLoop.create_connection` method."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:384
msgid "TCP echo server using streams"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:386
msgid "TCP echo server using the :func:`asyncio.start_server` function::"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:421
msgid ""
"The :ref:`TCP echo server protocol <asyncio-tcp-echo-server-protocol>` "
"example uses the :meth:`AbstractEventLoop.create_server` method."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:426
msgid "Get HTTP headers"
msgstr "Récupère les en-têtes HTTP"

#: ../Doc/library/asyncio-stream.rst:428
msgid ""
"Simple example querying HTTP headers of the URL passed on the command line::"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:463
msgid "Usage::"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:467
msgid "or with HTTPS::"
msgstr "ou avec HTTPS ::"

#: ../Doc/library/asyncio-stream.rst:474
msgid "Register an open socket to wait for data using streams"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:476
msgid ""
"Coroutine waiting until a socket receives data using the :func:"
"`open_connection` function::"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:508
msgid ""
"The :ref:`register an open socket to wait for data using a protocol <asyncio-"
"register-socket>` example uses a low-level protocol created by the :meth:"
"`AbstractEventLoop.create_connection` method."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:512
msgid ""
"The :ref:`watch a file descriptor for read events <asyncio-watch-read-"
"event>` example uses the low-level :meth:`AbstractEventLoop.add_reader` "
"method to register the file descriptor of a socket."
msgstr ""
