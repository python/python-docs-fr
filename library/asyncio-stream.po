# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-10-09 17:54+0200\n"
"PO-Revision-Date: 2019-09-06 13:48+0200\n"
"Last-Translator: Julien Palard <julien@palard.fr>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/asyncio-stream.rst:7
msgid "Streams"
msgstr "Streams"

#: ../Doc/library/asyncio-stream.rst:9
msgid ""
"Streams are high-level async/await-ready primitives to work with network "
"connections.  Streams allow sending and receiving data without using "
"callbacks or low-level protocols and transports."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:15
msgid "Here is an example of a TCP echo client written using asyncio streams::"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:38
msgid "See also the `Examples`_ section below."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:42
msgid "Stream Functions"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:43
msgid ""
"The following top-level asyncio functions can be used to create and work "
"with streams:"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:52
msgid ""
"Establish a network connection and return a pair of ``(reader, writer)`` "
"objects."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:55
msgid ""
"The returned *reader* and *writer* objects are instances of :class:"
"`StreamReader` and :class:`StreamWriter` classes."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:58
msgid ""
"The *loop* argument is optional and can always be determined automatically "
"when this function is awaited from a coroutine."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:61 ../Doc/library/asyncio-stream.rst:94
msgid ""
"*limit* determines the buffer size limit used by the returned :class:"
"`StreamReader` instance.  By default the *limit* is set to 64 KiB."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:65
msgid ""
"The rest of the arguments are passed directly to :meth:`loop."
"create_connection`."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:70 ../Doc/library/asyncio-stream.rst:123
msgid "The *ssl_handshake_timeout* parameter."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:80
msgid "Start a socket server."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:82
msgid ""
"The *client_connected_cb* callback is called whenever a new client "
"connection is established.  It receives a ``(reader, writer)`` pair as two "
"arguments, instances of the :class:`StreamReader` and :class:`StreamWriter` "
"classes."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:87
msgid ""
"*client_connected_cb* can be a plain callable or a :ref:`coroutine function "
"<coroutine>`; if it is a coroutine function, it will be automatically "
"scheduled as a :class:`Task`."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:91
msgid ""
"The *loop* argument is optional and can always be determined automatically "
"when this method is awaited from a coroutine."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:98
msgid ""
"The rest of the arguments are passed directly to :meth:`loop.create_server`."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:103 ../Doc/library/asyncio-stream.rst:145
msgid "The *ssl_handshake_timeout* and *start_serving* parameters."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:107
msgid "Unix Sockets"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:112
msgid ""
"Establish a Unix socket connection and return a pair of ``(reader, writer)``."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:115
msgid "Similar to :func:`open_connection` but operates on Unix sockets."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:117
msgid "See also the documentation of :meth:`loop.create_unix_connection`."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:120 ../Doc/library/asyncio-stream.rst:142
msgid ":ref:`Availability <availability>`: Unix."
msgstr ":ref:`Disponibilité <availability>` : Unix."

#: ../Doc/library/asyncio-stream.rst:127
msgid "The *path* parameter can now be a :term:`path-like object`"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:135
msgid "Start a Unix socket server."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:137
msgid "Similar to :func:`start_server` but works with Unix sockets."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:139
msgid "See also the documentation of :meth:`loop.create_unix_server`."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:149
msgid "The *path* parameter can now be a :term:`path-like object`."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:153
msgid "StreamReader"
msgstr "StreamReader"

#: ../Doc/library/asyncio-stream.rst:157
msgid ""
"Represents a reader object that provides APIs to read data from the IO "
"stream."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:160
msgid ""
"It is not recommended to instantiate *StreamReader* objects directly; use :"
"func:`open_connection` and :func:`start_server` instead."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:166
msgid ""
"Read up to *n* bytes.  If *n* is not provided, or set to ``-1``, read until "
"EOF and return all read bytes."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:169
msgid ""
"If EOF was received and the internal buffer is empty, return an empty "
"``bytes`` object."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:174
msgid ""
"Read one line, where \"line\" is a sequence of bytes ending with ``\\n``."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:177
msgid ""
"If EOF is received and ``\\n`` was not found, the method returns partially "
"read data."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:180
msgid ""
"If EOF is received and the internal buffer is empty, return an empty "
"``bytes`` object."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:185
msgid "Read exactly *n* bytes."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:187
msgid ""
"Raise an :exc:`IncompleteReadError` if EOF is reached before *n* can be "
"read.  Use the :attr:`IncompleteReadError.partial` attribute to get the "
"partially read data."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:193
msgid "Read data from the stream until *separator* is found."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:195
msgid ""
"On success, the data and separator will be removed from the internal buffer "
"(consumed). Returned data will include the separator at the end."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:199
msgid ""
"If the amount of data read exceeds the configured stream limit, a :exc:"
"`LimitOverrunError` exception is raised, and the data is left in the "
"internal buffer and can be read again."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:203
msgid ""
"If EOF is reached before the complete separator is found, an :exc:"
"`IncompleteReadError` exception is raised, and the internal buffer is "
"reset.  The :attr:`IncompleteReadError.partial` attribute may contain a "
"portion of the separator."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:212
msgid "Return ``True`` if the buffer is empty and :meth:`feed_eof` was called."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:217
msgid "StreamWriter"
msgstr "StreamWriter"

#: ../Doc/library/asyncio-stream.rst:221
msgid ""
"Represents a writer object that provides APIs to write data to the IO stream."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:224
msgid ""
"It is not recommended to instantiate *StreamWriter* objects directly; use :"
"func:`open_connection` and :func:`start_server` instead."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:230
msgid ""
"The method attempts to write the *data* to the underlying socket "
"immediately. If that fails, the data is queued in an internal write buffer "
"until it can be sent."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:234 ../Doc/library/asyncio-stream.rst:246
msgid "The method should be used along with the ``drain()`` method::"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:241
msgid ""
"The method writes a list (or any iterable) of bytes to the underlying socket "
"immediately. If that fails, the data is queued in an internal write buffer "
"until it can be sent."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:253
msgid "The method closes the stream and the underlying socket."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:255
msgid "The method should be used along with the ``wait_closed()`` method::"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:262
msgid ""
"Return *True* if the underlying transport supports the :meth:`write_eof` "
"method, *False* otherwise."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:267
msgid ""
"Close the write end of the stream after the buffered write data is flushed."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:272
msgid "Return the underlying asyncio transport."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:276
msgid ""
"Access optional transport information; see :meth:`BaseTransport."
"get_extra_info` for details."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:281
msgid "Wait until it is appropriate to resume writing to the stream. Example::"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:287
msgid ""
"This is a flow control method that interacts with the underlying IO write "
"buffer.  When the size of the buffer reaches the high watermark, *drain()* "
"blocks until the size of the buffer is drained down to the low watermark and "
"writing can be resumed.  When there is nothing to wait for, the :meth:"
"`drain` returns immediately."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:296
msgid ""
"Return ``True`` if the stream is closed or in the process of being closed."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:303
msgid "Wait until the stream is closed."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:305
msgid ""
"Should be called after :meth:`close` to wait until the underlying connection "
"is closed."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:312
msgid "Examples"
msgstr "Exemples"

#: ../Doc/library/asyncio-stream.rst:317
msgid "TCP echo client using streams"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:319
msgid "TCP echo client using the :func:`asyncio.open_connection` function::"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:341
msgid ""
"The :ref:`TCP echo client protocol "
"<asyncio_example_tcp_echo_client_protocol>` example uses the low-level :meth:"
"`loop.create_connection` method."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:348
msgid "TCP echo server using streams"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:350
msgid "TCP echo server using the :func:`asyncio.start_server` function::"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:383
msgid ""
"The :ref:`TCP echo server protocol "
"<asyncio_example_tcp_echo_server_protocol>` example uses the :meth:`loop."
"create_server` method."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:388
msgid "Get HTTP headers"
msgstr "Récupère les en-têtes HTTP"

#: ../Doc/library/asyncio-stream.rst:390
msgid ""
"Simple example querying HTTP headers of the URL passed on the command line::"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:428
msgid "Usage::"
msgstr "Utilisation ::"

#: ../Doc/library/asyncio-stream.rst:432
msgid "or with HTTPS::"
msgstr "ou avec HTTPS ::"

#: ../Doc/library/asyncio-stream.rst:440
msgid "Register an open socket to wait for data using streams"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:442
msgid ""
"Coroutine waiting until a socket receives data using the :func:"
"`open_connection` function::"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:476
msgid ""
"The :ref:`register an open socket to wait for data using a protocol "
"<asyncio_example_create_connection>` example uses a low-level protocol and "
"the :meth:`loop.create_connection` method."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:480
msgid ""
"The :ref:`watch a file descriptor for read events "
"<asyncio_example_watch_fd>` example uses the low-level :meth:`loop."
"add_reader` method to watch a file descriptor."
msgstr ""

#~ msgid "StreamServer"
#~ msgstr "StreamServer"

#~ msgid "UnixStreamServer"
#~ msgstr "UnixStreamServer"

#~ msgid "Stream"
#~ msgstr "Stream"

#~ msgid "StreamMode"
#~ msgstr "StreamMode"

#~ msgid "This function is a :ref:`coroutine <coroutine>`."
#~ msgstr "Cette fonction est une :ref:`coroutine <coroutine>`."

#~ msgid "Get the exception."
#~ msgstr "Récupère l'exception."

#~ msgid "This method is a :ref:`coroutine <coroutine>`."
#~ msgstr "Cette méthode est une :ref:`coroutine <coroutine>`."

#~ msgid "Transport."
#~ msgstr "Transport."

#~ msgid "StreamReaderProtocol"
#~ msgstr "StreamReaderProtocol"

#~ msgid "IncompleteReadError"
#~ msgstr "IncompleteReadError"

#~ msgid "Total number of expected bytes (:class:`int`)."
#~ msgstr "Nombre total d'octets attendus (:class:`int`)."
