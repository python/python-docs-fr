# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-07-23 14:38+0200\n"
"PO-Revision-Date: 2023-12-18 20:30-0700\n"
"Last-Translator: James Adjinwa <gaanlub2@duck.com>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.4.1\n"

#: library/os.rst:2
msgid ":mod:`os` --- Miscellaneous operating system interfaces"
msgstr ":mod:`os` — Diverses interfaces pour le système d'exploitation"

#: library/os.rst:7
msgid "**Source code:** :source:`Lib/os.py`"
msgstr "**Code source:** :source:`Lib/os.py`"

#: library/os.rst:11
msgid ""
"This module provides a portable way of using operating system dependent "
"functionality.  If you just want to read or write a file see :func:`open`, "
"if you want to manipulate paths, see the :mod:`os.path` module, and if you "
"want to read all the lines in all the files on the command line see the :mod:"
"`fileinput` module.  For creating temporary files and directories see the :"
"mod:`tempfile` module, and for high-level file and directory handling see "
"the :mod:`shutil` module."
msgstr ""
"Ce module fournit une façon portable d'utiliser les fonctionnalités "
"dépendantes du système d'exploitation.  Si vous voulez simplement lire ou "
"écrire un fichier, voir :func:`open`, si vous voulez manipuler les chemins "
"de fichiers, voir le module :mod:`os.path`, et si vous voulez lire toutes "
"les lignes de tous les fichiers de la ligne de commande, voir le module :mod:"
"`fileinput`. Pour la création de fichiers et de répertoires temporaires, "
"voir le module :mod:`tempfile`, et pour la manipulation de fichiers et de "
"répertoires de haut niveau, voir le module :mod:`shutil`."

#: library/os.rst:19
msgid "Notes on the availability of these functions:"
msgstr "Notes sur la disponibilité de ces fonctions :"

#: library/os.rst:21
msgid ""
"The design of all built-in operating system dependent modules of Python is "
"such that as long as the same functionality is available, it uses the same "
"interface; for example, the function ``os.stat(path)`` returns stat "
"information about *path* in the same format (which happens to have "
"originated with the POSIX interface)."
msgstr ""
"La conception des modules natifs Python dépendants du système d'exploitation "
"est qu'une même fonctionnalité utilise une même interface. Par exemple, la "
"fonction ``os.stat(path)`` renvoie des informations sur les statistiques de "
"*path* dans le même format (qui est originaire de l'interface POSIX)."

#: library/os.rst:27
msgid ""
"Extensions peculiar to a particular operating system are also available "
"through the :mod:`os` module, but using them is of course a threat to "
"portability."
msgstr ""
"Les extensions propres à un certain système d'exploitation sont également "
"disponible par le module :mod:`os`, mais les utiliser est bien entendu une "
"menace pour la portabilité."

#: library/os.rst:31
msgid ""
"All functions accepting path or file names accept both bytes and string "
"objects, and result in an object of the same type, if a path or file name is "
"returned."
msgstr ""
"Toutes les fonctions acceptant les chemins ou noms de fichiers acceptent "
"aussi bien des *bytes* que des *string*, et si un chemin ou un nom de "
"fichier est renvoyé, il sera du même type."

#: library/os.rst:35
msgid ""
"On VxWorks, os.popen, os.fork, os.execv and os.spawn*p* are not supported."
msgstr ""
"Sur VxWorks, *os.popen*, *os.fork*, *os.execv* et *os.spawn\\*p\\** ne sont "
"pas pris en charge."

#: library/os.rst:37
msgid ""
"On WebAssembly platforms ``wasm32-emscripten`` and ``wasm32-wasi``, large "
"parts of the :mod:`os` module are not available or behave differently. API "
"related to processes (e.g. :func:`~os.fork`, :func:`~os.execve`), signals (e."
"g. :func:`~os.kill`, :func:`~os.wait`), and resources (e.g. :func:`~os."
"nice`) are not available. Others like :func:`~os.getuid` and :func:`~os."
"getpid` are emulated or stubs."
msgstr ""

#: library/os.rst:47
msgid ""
"All functions in this module raise :exc:`OSError` (or subclasses thereof) in "
"the case of invalid or inaccessible file names and paths, or other arguments "
"that have the correct type, but are not accepted by the operating system."
msgstr ""
"Toutes les fonctions de ce module lèvent une :exc:`OSError` (ou une de ses "
"sous-classes) dans le cas d'un chemin ou nom de fichier invalide ou "
"inaccessible, ou si d'autres arguments sont de type correct mais non géré "
"par le système d'exploitation."

#: library/os.rst:53
msgid "An alias for the built-in :exc:`OSError` exception."
msgstr "Un alias pour les exceptions natives :exc:`OSError`."

#: library/os.rst:58
msgid ""
"The name of the operating system dependent module imported.  The following "
"names have currently been registered: ``'posix'``, ``'nt'``, ``'java'``."
msgstr ""
"Le nom du module importé dépendant du système d'exploitation.  Les noms "
"suivants ont actuellement été enregistrés : ``'posix'``, ``'nt'``, "
"``'java'``."

#: library/os.rst:63
msgid ""
":data:`sys.platform` has a finer granularity.  :func:`os.uname` gives system-"
"dependent version information."
msgstr ""
":data:`sys.platform` a une granularité plus fine. :func:`os.uname` donne des "
"informations relatives à la version du système."

#: library/os.rst:66
msgid ""
"The :mod:`platform` module provides detailed checks for the system's "
"identity."
msgstr ""
"Le module :mod:`platform` fournit des vérifications détaillées pour "
"l'identité du système."

#: library/os.rst:74
msgid "File Names, Command Line Arguments, and Environment Variables"
msgstr ""
"Noms de fichiers, arguments en ligne de commande, et variables "
"d'environnement"

#: library/os.rst:76
msgid ""
"In Python, file names, command line arguments, and environment variables are "
"represented using the string type. On some systems, decoding these strings "
"to and from bytes is necessary before passing them to the operating system. "
"Python uses the :term:`filesystem encoding and error handler` to perform "
"this conversion (see :func:`sys.getfilesystemencoding`)."
msgstr ""
"En Python, les noms de fichiers, les arguments en ligne de commandes, et les "
"variables d'environnement sont des chaînes de caractères. Sur certains "
"systèmes, décoder ces chaînes de caractères depuis et vers des *bytes* est "
"nécessaire avant de les passer au système d'exploitation. Python utilise :"
"term:`filesystem encoding and error handler` pour réaliser ces conversions "
"(voir :func:`sys.getfilesystemencoding`)."

#: library/os.rst:82
msgid ""
"The :term:`filesystem encoding and error handler` are configured at Python "
"startup by the :c:func:`PyConfig_Read` function: see :c:member:`~PyConfig."
"filesystem_encoding` and :c:member:`~PyConfig.filesystem_errors` members of :"
"c:type:`PyConfig`."
msgstr ""
":term:`L'encodage du système de fichiers et le gestionnaire d'erreurs "
"<filesystem encoding and error handler>` sont configurés au démarrage de "
"Python par la fonction :c:func:`PyConfig_Read` : voir :c:member:`~PyConfig."
"filesystem_encoding` et :c:member:`~PyConfig.filesystem_errors` membres de :"
"c:type:`PyConfig`."

#: library/os.rst:87
msgid ""
"On some systems, conversion using the file system encoding may fail. In this "
"case, Python uses the :ref:`surrogateescape encoding error handler "
"<surrogateescape>`, which means that undecodable bytes are replaced by a "
"Unicode character U+DCxx on decoding, and these are again translated to the "
"original byte on encoding."
msgstr ""
"Sur certains systèmes, les conversions utilisant l'encodage du système de "
"fichiers peut échouer. Dans ce cas, Python utilise le :ref:`le gestionnaire "
"d'erreurs d'encodage *surrogateescape* <surrogateescape>`, ce qui veut dire "
"que les octets indécodables sont remplacés par un code de substitution lors "
"du décodage, qui est reconverti vers l'octet original lors de l'encodage."

#: library/os.rst:95
msgid ""
"The :term:`file system encoding <filesystem encoding and error handler>` "
"must guarantee to successfully decode all bytes below 128. If the file "
"system encoding fails to provide this guarantee, API functions can raise :"
"exc:`UnicodeError`."
msgstr ""
":term:`L'encodage du système de fichiers <filesystem encoding and error "
"handler>` doit garantir de pouvoir décoder correctement tous les octets en "
"dessous de 128. Si l'encodage du système de fichiers ne peut garantir cela, "
"les fonctions de l'API peuvent lever une :exc:`UnicodeError`."

#: library/os.rst:100
msgid "See also the :term:`locale encoding`."
msgstr "Voir aussi :term:`encodage régional <locale encoding>`."

#: library/os.rst:106
msgid "Python UTF-8 Mode"
msgstr "Le mode UTF-8 de Python"

#: library/os.rst:108
msgid "See :pep:`540` for more details."
msgstr "Pour en savoir plus, voir :pep:`540`."

#: library/os.rst:111
msgid ""
"The Python UTF-8 Mode ignores the :term:`locale encoding` and forces the "
"usage of the UTF-8 encoding:"
msgstr ""
"Le mode UTF-8 de Python ignore :term:`l'encodage régional <locale encoding>` "
"et rend obligatoire l'utilisation de l'encodage UTF-8:"

#: library/os.rst:114
msgid ""
"Use UTF-8 as the :term:`filesystem encoding <filesystem encoding and error "
"handler>`."
msgstr ""
"Utiliser UTF-8 pour :term:`l'encodage du système de fichiers <filesystem "
"encoding and error handler>`."

#: library/os.rst:116
msgid ":func:`sys.getfilesystemencoding()` returns ``'utf-8'``."
msgstr ":func:`sys.getfilesystemencoding()` renvoie ``'utf-8'``."

#: library/os.rst:117
msgid ""
":func:`locale.getpreferredencoding()` returns ``'utf-8'`` (the "
"*do_setlocale* argument has no effect)."
msgstr ""
":func:`locale.getpreferredencoding()` renvoie ``'utf-8'`` (l'argument "
"*do_setlocale* n'a aucune incidence)."

#: library/os.rst:119
msgid ""
":data:`sys.stdin`, :data:`sys.stdout`, and :data:`sys.stderr` all use UTF-8 "
"as their text encoding, with the ``surrogateescape`` :ref:`error handler "
"<error-handlers>` being enabled for :data:`sys.stdin` and :data:`sys.stdout` "
"(:data:`sys.stderr` continues to use ``backslashreplace`` as it does in the "
"default locale-aware mode)"
msgstr ""

#: library/os.rst:124
msgid ""
"On Unix, :func:`os.device_encoding` returns ``'utf-8'`` rather than the "
"device encoding."
msgstr ""
"Sur Unix, :func:`os.device_encoding` retourne ``'utf-8'`` au lieu de  "
"l'encodage du périphérique."

#: library/os.rst:127
msgid ""
"Note that the standard stream settings in UTF-8 mode can be overridden by :"
"envvar:`PYTHONIOENCODING` (just as they can be in the default locale-aware "
"mode)."
msgstr ""

#: library/os.rst:131
msgid ""
"As a consequence of the changes in those lower level APIs, other higher "
"level APIs also exhibit different default behaviours:"
msgstr ""

#: library/os.rst:134
msgid ""
"Command line arguments, environment variables and filenames are decoded to "
"text using the UTF-8 encoding."
msgstr ""

#: library/os.rst:136
msgid ":func:`os.fsdecode()` and :func:`os.fsencode()` use the UTF-8 encoding."
msgstr ""

#: library/os.rst:137
msgid ""
":func:`open()`, :func:`io.open()`, and :func:`codecs.open()` use the UTF-8 "
"encoding by default. However, they still use the strict error handler by "
"default so that attempting to open a binary file in text mode is likely to "
"raise an exception rather than producing nonsense data."
msgstr ""

#: library/os.rst:142
msgid ""
"The :ref:`Python UTF-8 Mode <utf8-mode>` is enabled if the LC_CTYPE locale "
"is ``C`` or ``POSIX`` at Python startup (see the :c:func:`PyConfig_Read` "
"function)."
msgstr ""

#: library/os.rst:146
msgid ""
"It can be enabled or disabled using the :option:`-X utf8 <-X>` command line "
"option and the :envvar:`PYTHONUTF8` environment variable."
msgstr ""

#: library/os.rst:149
msgid ""
"If the :envvar:`PYTHONUTF8` environment variable is not set at all, then the "
"interpreter defaults to using the current locale settings, *unless* the "
"current locale is identified as a legacy ASCII-based locale (as described "
"for :envvar:`PYTHONCOERCECLOCALE`), and locale coercion is either disabled "
"or fails. In such legacy locales, the interpreter will default to enabling "
"UTF-8 mode unless explicitly instructed not to do so."
msgstr ""

#: library/os.rst:156
msgid ""
"The Python UTF-8 Mode can only be enabled at the Python startup. Its value "
"can be read from :data:`sys.flags.utf8_mode <sys.flags>`."
msgstr ""

#: library/os.rst:159
msgid ""
"See also the :ref:`UTF-8 mode on Windows <win-utf8-mode>` and the :term:"
"`filesystem encoding and error handler`."
msgstr ""

#: library/os.rst:164
msgid ":pep:`686`"
msgstr ":pep:`686`"

#: library/os.rst:165
msgid "Python 3.15 will make :ref:`utf8-mode` default."
msgstr ":ref:`utf8-mode` sera par mis par défaut sur Python 3.15."

#: library/os.rst:171
msgid "Process Parameters"
msgstr "Paramètres de processus"
