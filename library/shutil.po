# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-10-09 17:54+0200\n"
"PO-Revision-Date: 2018-11-29 18:26+0100\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/shutil.rst:2
msgid ":mod:`shutil` --- High-level file operations"
msgstr ":mod:`shutil` --- Opérations de haut niveau sur les fichiers"

#: ../Doc/library/shutil.rst:10
msgid "**Source code:** :source:`Lib/shutil.py`"
msgstr "**Code source :** :source:`Lib/shutil.py`"

#: ../Doc/library/shutil.rst:18
msgid ""
"The :mod:`shutil` module offers a number of high-level operations on files "
"and collections of files.  In particular, functions are provided  which "
"support file copying and removal. For operations on individual files, see "
"also the :mod:`os` module."
msgstr ""
"Le module :mod:`shutil` propose des opérations de haut niveau sur les "
"fichiers et ensembles de fichiers. En particulier, des fonctions pour copier "
"et déplacer les fichiers sont proposées. Pour les opérations individuelles "
"sur les fichiers, reportez-vous au module :mod:`os`."

#: ../Doc/library/shutil.rst:25
msgid ""
"Even the higher-level file copying functions (:func:`shutil.copy`, :func:"
"`shutil.copy2`) cannot copy all file metadata."
msgstr ""
"Même les fonctions de copie haut niveau (:func:`shutil.copy`, :func:`shutil."
"copy2`) ne peuvent copier toutes les métadonnées des fichiers."

#: ../Doc/library/shutil.rst:28
msgid ""
"On POSIX platforms, this means that file owner and group are lost as well as "
"ACLs.  On Mac OS, the resource fork and other metadata are not used. This "
"means that resources will be lost and file type and creator codes will not "
"be correct. On Windows, file owners, ACLs and alternate data streams are not "
"copied."
msgstr ""
"Sur les plateformes POSIX, cela signifie que le propriétaire et le groupe du "
"fichier sont perdus, ainsi que les *ACLs*. Sur Mac OS, le clonage de "
"ressource et autres métadonnées ne sont pas utilisés. Cela signifie que les "
"ressources seront perdues et que le type de fichier et les codes créateur ne "
"seront pas corrects. Sur Windows, les propriétaires des fichiers, *ACLs* et "
"flux de données alternatifs ne sont pas copiés."

#: ../Doc/library/shutil.rst:38
msgid "Directory and files operations"
msgstr "Opérations sur les répertoires et les fichiers"

#: ../Doc/library/shutil.rst:42
msgid ""
"Copy the contents of the file-like object *fsrc* to the file-like object "
"*fdst*. The integer *length*, if given, is the buffer size. In particular, a "
"negative *length* value means to copy the data without looping over the "
"source data in chunks; by default the data is read in chunks to avoid "
"uncontrolled memory consumption. Note that if the current file position of "
"the *fsrc* object is not 0, only the contents from the current file position "
"to the end of the file will be copied."
msgstr ""
"Copie le contenu de l'objet fichier *fsrc* dans l'objet fichier *fdst*. "
"L'entier *length*, si spécifié, est la taille du tampon. En particulier, une "
"valeur de *length* négative signifie la copie des données sans découper la "
"source en morceaux ; par défaut les données sont lues par morceaux pour "
"éviter la consommation mémoire non-contrôlée. À noter que si la position "
"courante dans l'objet *fsrc* n'est pas 0, seul le contenu depuis la position "
"courante jusqu'à la fin est copié."

#: ../Doc/library/shutil.rst:53
msgid ""
"Copy the contents (no metadata) of the file named *src* to a file named "
"*dst* and return *dst* in the most efficient way possible. *src* and *dst* "
"are path-like objects or path names given as strings."
msgstr ""

#: ../Doc/library/shutil.rst:57
#, fuzzy
msgid ""
"*dst* must be the complete target file name; look at :func:`~shutil.copy` "
"for a copy that accepts a target directory path.  If *src* and *dst* specify "
"the same file, :exc:`SameFileError` is raised."
msgstr ""
"Copie le contenu (sans métadonnées) du fichier nommé *src* dans un fichier "
"nommé *dst* et renvoie *dst*. *src* et *dst* sont des chemins sous forme de "
"chaînes de caractères. *dst* doit être le chemin complet de la cible ; voir "
"dans :func:`shutil.copy` pour une copie acceptant le chemin du dossier "
"cible. Si *src* et *dst* désignent le même fichier :exc:`SameFileError` est "
"levée."

#: ../Doc/library/shutil.rst:61
msgid ""
"The destination location must be writable; otherwise, an :exc:`OSError` "
"exception will be raised. If *dst* already exists, it will be replaced. "
"Special files such as character or block devices and pipes cannot be copied "
"with this function."
msgstr ""
"La cible doit être accessible en écriture, sinon l'exception :exc:`OSError` "
"est levée. Si *dst* existe déjà, il est remplacé. Les fichiers spéciaux "
"comme les périphériques caractères ou bloc ainsi que les tubes (*pipes*) ne "
"peuvent pas être copiés avec cette fonction."

#: ../Doc/library/shutil.rst:66
msgid ""
"If *follow_symlinks* is false and *src* is a symbolic link, a new symbolic "
"link will be created instead of copying the file *src* points to."
msgstr ""
"Si *follow_symlinks* est faux et *src* est un lien symbolique, un nouveau "
"lien symbolique est créé au lieu de copier le fichier pointé par *src*."

#: ../Doc/library/shutil.rst:70
msgid ""
":exc:`IOError` used to be raised instead of :exc:`OSError`. Added "
"*follow_symlinks* argument. Now returns *dst*."
msgstr ""
":exc:`IOError` était levée au lieu de :exc:`OSError`. Ajout de l'argument "
"*follow_symlinks*. Maintenant renvoie *dst*."

#: ../Doc/library/shutil.rst:75
msgid ""
"Raise :exc:`SameFileError` instead of :exc:`Error`.  Since the former is a "
"subclass of the latter, this change is backward compatible."
msgstr ""
"Lève :exc:`SameFileError` au lieu de :exc:`Error`. Puisque la première est "
"une sous-classe de la seconde, le changement assure la rétrocompatibilité."

#: ../Doc/library/shutil.rst:79 ../Doc/library/shutil.rst:174
#: ../Doc/library/shutil.rst:202 ../Doc/library/shutil.rst:267
#: ../Doc/library/shutil.rst:353
msgid ""
"Platform-specific fast-copy syscalls may be used internally in order to copy "
"the file more efficiently. See :ref:`shutil-platform-dependent-efficient-"
"copy-operations` section."
msgstr ""

#: ../Doc/library/shutil.rst:86
msgid ""
"This exception is raised if source and destination in :func:`copyfile` are "
"the same file."
msgstr ""
"Cette exception est levée si la source et la destination dans :func:"
"`copyfile` sont le même fichier."

#: ../Doc/library/shutil.rst:94
#, fuzzy
msgid ""
"Copy the permission bits from *src* to *dst*.  The file contents, owner, and "
"group are unaffected.  *src* and *dst* are path-like objects or path names "
"given as strings. If *follow_symlinks* is false, and both *src* and *dst* "
"are symbolic links, :func:`copymode` will attempt to modify the mode of "
"*dst* itself (rather than the file it points to).  This functionality is not "
"available on every platform; please see :func:`copystat` for more "
"information.  If :func:`copymode` cannot modify symbolic links on the local "
"platform, and it is asked to do so, it will do nothing and return."
msgstr ""
"Copie les octets de permission de *src* vers *dst*. Le contenu du fichier, "
"le propriétaire et le groupe ne sont pas modifiés. *src* et *dst* sont des "
"chaînes spécifiant les chemins. Si *follow_symlinks* est faux, et *src* et "
"*dst* sont des liens symboliques, :func:`copymode` tente de modifier le mode "
"de *dst* (au lieu du fichier vers lequel il pointe). Cette fonctionnalité "
"n'est pas disponible sur toutes les plateformes ; voir :func:`copystat` pour "
"plus d'informations. Si :func:`copymode` ne peut pas modifier les liens "
"symboliques sur la plateforme cible alors que c'est demandé, il ne fait rien."

#: ../Doc/library/shutil.rst:104
msgid "Added *follow_symlinks* argument."
msgstr "L'argument *follow_symlinks* a été ajouté."

#: ../Doc/library/shutil.rst:109
#, fuzzy
msgid ""
"Copy the permission bits, last access time, last modification time, and "
"flags from *src* to *dst*.  On Linux, :func:`copystat` also copies the "
"\"extended attributes\" where possible.  The file contents, owner, and group "
"are unaffected.  *src* and *dst* are path-like objects or path names given "
"as strings."
msgstr ""
"Copie les bits définissant les droits d'accès, la date du dernier accès, de "
"la dernière modification et les drapeaux (*flags* en anglais) de *src* vers "
"*dst*.  Sur Linux, :func:`copystat` copie également, si possible, les "
"\"*extended attributes*\". Le contenu du fichier, le propriétaire et le "
"groupe ne sont pas affectés. *src* et *dst* sont des chaînes spécifiant les "
"chemins."

#: ../Doc/library/shutil.rst:115
msgid ""
"If *follow_symlinks* is false, and *src* and *dst* both refer to symbolic "
"links, :func:`copystat` will operate on the symbolic links themselves rather "
"than the files the symbolic links refer to—reading the information from the "
"*src* symbolic link, and writing the information to the *dst* symbolic link."
msgstr ""
"Si *follow_symlinks* est faux et *src* et *dst* représentent des liens "
"symboliques, :func:`copystat` agit sur les liens symboliques au lieu des "
"fichiers cibles — elle lit les informations du lien symbolique de *src* et "
"les écrit vers la destination pointée par *dst*."

#: ../Doc/library/shutil.rst:124
msgid ""
"Not all platforms provide the ability to examine and modify symbolic links.  "
"Python itself can tell you what functionality is locally available."
msgstr ""
"Toutes les plateformes n'offrent pas la possibilité d'examiner et modifier "
"les liens symboliques. Python peut vous informer des fonctionnalités "
"effectivement disponibles."

#: ../Doc/library/shutil.rst:128
msgid ""
"If ``os.chmod in os.supports_follow_symlinks`` is ``True``, :func:`copystat` "
"can modify the permission bits of a symbolic link."
msgstr ""
"Si ``os.chmod in os.supports_follow_symlinks`` est ``True``, :func:"
"`copystat` peut modifier les octets de droits d'accès du lien symbolique."

#: ../Doc/library/shutil.rst:132
msgid ""
"If ``os.utime in os.supports_follow_symlinks`` is ``True``, :func:`copystat` "
"can modify the last access and modification times of a symbolic link."
msgstr ""

#: ../Doc/library/shutil.rst:136
msgid ""
"If ``os.chflags in os.supports_follow_symlinks`` is ``True``, :func:"
"`copystat` can modify the flags of a symbolic link.  (``os.chflags`` is not "
"available on all platforms.)"
msgstr ""

#: ../Doc/library/shutil.rst:141
msgid ""
"On platforms where some or all of this functionality is unavailable, when "
"asked to modify a symbolic link, :func:`copystat` will copy everything it "
"can. :func:`copystat` never returns failure."
msgstr ""

#: ../Doc/library/shutil.rst:146
msgid "Please see :data:`os.supports_follow_symlinks` for more information."
msgstr ""

#: ../Doc/library/shutil.rst:149
msgid ""
"Added *follow_symlinks* argument and support for Linux extended attributes."
msgstr ""

#: ../Doc/library/shutil.rst:154
msgid ""
"Copies the file *src* to the file or directory *dst*.  *src* and *dst* "
"should be strings.  If *dst* specifies a directory, the file will be copied "
"into *dst* using the base filename from *src*.  Returns the path to the "
"newly created file."
msgstr ""

#: ../Doc/library/shutil.rst:159
msgid ""
"If *follow_symlinks* is false, and *src* is a symbolic link, *dst* will be "
"created as a symbolic link.  If *follow_symlinks* is true and *src* is a "
"symbolic link, *dst* will be a copy of the file *src* refers to."
msgstr ""

#: ../Doc/library/shutil.rst:164
msgid ""
":func:`~shutil.copy` copies the file data and the file's permission mode "
"(see :func:`os.chmod`).  Other metadata, like the file's creation and "
"modification times, is not preserved. To preserve all file metadata from the "
"original, use :func:`~shutil.copy2` instead."
msgstr ""

#: ../Doc/library/shutil.rst:170
msgid ""
"Added *follow_symlinks* argument. Now returns path to the newly created file."
msgstr ""

#: ../Doc/library/shutil.rst:181
msgid ""
"Identical to :func:`~shutil.copy` except that :func:`copy2` also attempts to "
"preserve file metadata."
msgstr ""

#: ../Doc/library/shutil.rst:184
msgid ""
"When *follow_symlinks* is false, and *src* is a symbolic link, :func:`copy2` "
"attempts to copy all metadata from the *src* symbolic link to the newly-"
"created *dst* symbolic link. However, this functionality is not available on "
"all platforms. On platforms where some or all of this functionality is "
"unavailable, :func:`copy2` will preserve all the metadata it can; :func:"
"`copy2` never raises an exception because it cannot preserve file metadata."
msgstr ""

#: ../Doc/library/shutil.rst:193
msgid ""
":func:`copy2` uses :func:`copystat` to copy the file metadata. Please see :"
"func:`copystat` for more information about platform support for modifying "
"symbolic link metadata."
msgstr ""

#: ../Doc/library/shutil.rst:197
msgid ""
"Added *follow_symlinks* argument, try to copy extended file system "
"attributes too (currently Linux only). Now returns path to the newly created "
"file."
msgstr ""

#: ../Doc/library/shutil.rst:209
msgid ""
"This factory function creates a function that can be used as a callable for :"
"func:`copytree`\\'s *ignore* argument, ignoring files and directories that "
"match one of the glob-style *patterns* provided.  See the example below."
msgstr ""

#: ../Doc/library/shutil.rst:218
msgid ""
"Recursively copy an entire directory tree rooted at *src* to a directory "
"named *dst* and return the destination directory. *dirs_exist_ok* dictates "
"whether to raise an exception in case *dst* or any missing parent directory "
"already exists."
msgstr ""

#: ../Doc/library/shutil.rst:223
msgid ""
"Permissions and times of directories are copied with :func:`copystat`, "
"individual files are copied using :func:`~shutil.copy2`."
msgstr ""

#: ../Doc/library/shutil.rst:226
msgid ""
"If *symlinks* is true, symbolic links in the source tree are represented as "
"symbolic links in the new tree and the metadata of the original links will "
"be copied as far as the platform allows; if false or omitted, the contents "
"and metadata of the linked files are copied to the new tree."
msgstr ""

#: ../Doc/library/shutil.rst:231
msgid ""
"When *symlinks* is false, if the file pointed by the symlink doesn't exist, "
"an exception will be added in the list of errors raised in an :exc:`Error` "
"exception at the end of the copy process. You can set the optional "
"*ignore_dangling_symlinks* flag to true if you want to silence this "
"exception. Notice that this option has no effect on platforms that don't "
"support :func:`os.symlink`."
msgstr ""

#: ../Doc/library/shutil.rst:238
msgid ""
"If *ignore* is given, it must be a callable that will receive as its "
"arguments the directory being visited by :func:`copytree`, and a list of its "
"contents, as returned by :func:`os.listdir`.  Since :func:`copytree` is "
"called recursively, the *ignore* callable will be called once for each "
"directory that is copied.  The callable must return a sequence of directory "
"and file names relative to the current directory (i.e. a subset of the items "
"in its second argument); these names will then be ignored in the copy "
"process.  :func:`ignore_patterns` can be used to create such a callable that "
"ignores names based on glob-style patterns."
msgstr ""

#: ../Doc/library/shutil.rst:248
msgid ""
"If exception(s) occur, an :exc:`Error` is raised with a list of reasons."
msgstr ""

#: ../Doc/library/shutil.rst:250
msgid ""
"If *copy_function* is given, it must be a callable that will be used to copy "
"each file. It will be called with the source path and the destination path "
"as arguments. By default, :func:`~shutil.copy2` is used, but any function "
"that supports the same signature (like :func:`~shutil.copy`) can be used."
msgstr ""

#: ../Doc/library/shutil.rst:256
msgid ""
"Raises an :ref:`auditing event <auditing>` ``shutil.copytree`` with "
"arguments ``src``, ``dst``."
msgstr ""

#: ../Doc/library/shutil.rst:257
msgid "Copy metadata when *symlinks* is false. Now returns *dst*."
msgstr ""

#: ../Doc/library/shutil.rst:261
msgid ""
"Added the *copy_function* argument to be able to provide a custom copy "
"function. Added the *ignore_dangling_symlinks* argument to silent dangling "
"symlinks errors when *symlinks* is false."
msgstr ""

#: ../Doc/library/shutil.rst:272
#, fuzzy
msgid "The *dirs_exist_ok* parameter."
msgstr "Le paramètre *exist_ok*."

#: ../Doc/library/shutil.rst:279
msgid ""
"Delete an entire directory tree; *path* must point to a directory (but not a "
"symbolic link to a directory).  If *ignore_errors* is true, errors resulting "
"from failed removals will be ignored; if false or omitted, such errors are "
"handled by calling a handler specified by *onerror* or, if that is omitted, "
"they raise an exception."
msgstr ""

#: ../Doc/library/shutil.rst:287
msgid ""
"On platforms that support the necessary fd-based functions a symlink attack "
"resistant version of :func:`rmtree` is used by default.  On other platforms, "
"the :func:`rmtree` implementation is susceptible to a symlink attack: given "
"proper timing and circumstances, attackers can manipulate symlinks on the "
"filesystem to delete files they wouldn't be able to access otherwise.  "
"Applications can use the :data:`rmtree.avoids_symlink_attacks` function "
"attribute to determine which case applies."
msgstr ""

#: ../Doc/library/shutil.rst:295
msgid ""
"If *onerror* is provided, it must be a callable that accepts three "
"parameters: *function*, *path*, and *excinfo*."
msgstr ""

#: ../Doc/library/shutil.rst:298
msgid ""
"The first parameter, *function*, is the function which raised the exception; "
"it depends on the platform and implementation.  The second parameter, "
"*path*, will be the path name passed to *function*.  The third parameter, "
"*excinfo*, will be the exception information returned by :func:`sys."
"exc_info`.  Exceptions raised by *onerror* will not be caught."
msgstr ""

#: ../Doc/library/shutil.rst:305
msgid ""
"Raises an :ref:`auditing event <auditing>` ``shutil.rmtree`` with argument "
"``path``."
msgstr ""

#: ../Doc/library/shutil.rst:306
msgid ""
"Added a symlink attack resistant version that is used automatically if "
"platform supports fd-based functions."
msgstr ""

#: ../Doc/library/shutil.rst:310
msgid ""
"On Windows, will no longer delete the contents of a directory junction "
"before removing the junction."
msgstr ""

#: ../Doc/library/shutil.rst:316
msgid ""
"Indicates whether the current platform and implementation provides a symlink "
"attack resistant version of :func:`rmtree`.  Currently this is only true for "
"platforms supporting fd-based directory access functions."
msgstr ""

#: ../Doc/library/shutil.rst:325
msgid ""
"Recursively move a file or directory (*src*) to another location (*dst*) and "
"return the destination."
msgstr ""

#: ../Doc/library/shutil.rst:328
msgid ""
"If the destination is an existing directory, then *src* is moved inside that "
"directory. If the destination already exists but is not a directory, it may "
"be overwritten depending on :func:`os.rename` semantics."
msgstr ""

#: ../Doc/library/shutil.rst:332
msgid ""
"If the destination is on the current filesystem, then :func:`os.rename` is "
"used. Otherwise, *src* is copied to *dst* using *copy_function* and then "
"removed.  In case of symlinks, a new symlink pointing to the target of *src* "
"will be created in or as *dst* and *src* will be removed."
msgstr ""

#: ../Doc/library/shutil.rst:337
msgid ""
"If *copy_function* is given, it must be a callable that takes two arguments "
"*src* and *dst*, and will be used to copy *src* to *dest* if :func:`os."
"rename` cannot be used.  If the source is a directory, :func:`copytree` is "
"called, passing it the :func:`copy_function`. The default *copy_function* "
"is :func:`copy2`.  Using :func:`~shutil.copy` as the *copy_function* allows "
"the move to succeed when it is not possible to also copy the metadata, at "
"the expense of not copying any of the metadata."
msgstr ""

#: ../Doc/library/shutil.rst:345
msgid ""
"Added explicit symlink handling for foreign filesystems, thus adapting it to "
"the behavior of GNU's :program:`mv`. Now returns *dst*."
msgstr ""

#: ../Doc/library/shutil.rst:350
msgid "Added the *copy_function* keyword argument."
msgstr ""

#: ../Doc/library/shutil.rst:360
msgid ""
"Return disk usage statistics about the given path as a :term:`named tuple` "
"with the attributes *total*, *used* and *free*, which are the amount of "
"total, used and free space, in bytes. *path* may be a file or a directory."
msgstr ""

#: ../Doc/library/shutil.rst:367
msgid "On Windows, *path* can now be a file or directory."
msgstr ""

#: ../Doc/library/shutil.rst:370
msgid ":ref:`Availability <availability>`: Unix, Windows."
msgstr ":ref:`Disponibilité <availability>` : Unix, Windows."

#: ../Doc/library/shutil.rst:374
msgid "Change owner *user* and/or *group* of the given *path*."
msgstr ""

#: ../Doc/library/shutil.rst:376
msgid ""
"*user* can be a system user name or a uid; the same applies to *group*. At "
"least one argument is required."
msgstr ""

#: ../Doc/library/shutil.rst:379
msgid "See also :func:`os.chown`, the underlying function."
msgstr ""

#: ../Doc/library/shutil.rst:382
msgid ":ref:`Availability <availability>`: Unix."
msgstr ":ref:`Disponibilité <availability>` : Unix."

#: ../Doc/library/shutil.rst:388
msgid ""
"Return the path to an executable which would be run if the given *cmd* was "
"called.  If no *cmd* would be called, return ``None``."
msgstr ""

#: ../Doc/library/shutil.rst:391
msgid ""
"*mode* is a permission mask passed to :func:`os.access`, by default "
"determining if the file exists and executable."
msgstr ""

#: ../Doc/library/shutil.rst:394
msgid ""
"When no *path* is specified, the results of :func:`os.environ` are used, "
"returning either the \"PATH\" value or a fallback of :attr:`os.defpath`."
msgstr ""

#: ../Doc/library/shutil.rst:397
msgid ""
"On Windows, the current directory is always prepended to the *path* whether "
"or not you use the default or provide your own, which is the behavior the "
"command shell uses when finding executables.  Additionally, when finding the "
"*cmd* in the *path*, the ``PATHEXT`` environment variable is checked.  For "
"example, if you call ``shutil.which(\"python\")``, :func:`which` will search "
"``PATHEXT`` to know that it should look for ``python.exe`` within the *path* "
"directories.  For example, on Windows::"
msgstr ""

#: ../Doc/library/shutil.rst:410
msgid ""
"The :class:`bytes` type is now accepted.  If *cmd* type is :class:`bytes`, "
"the result type is also :class:`bytes`."
msgstr ""

#: ../Doc/library/shutil.rst:416
msgid ""
"This exception collects exceptions that are raised during a multi-file "
"operation. For :func:`copytree`, the exception argument is a list of 3-"
"tuples (*srcname*, *dstname*, *exception*)."
msgstr ""

#: ../Doc/library/shutil.rst:423
msgid "Platform-dependent efficient copy operations"
msgstr ""

#: ../Doc/library/shutil.rst:425
msgid ""
"Starting from Python 3.8 all functions involving a file copy (:func:"
"`copyfile`, :func:`copy`, :func:`copy2`, :func:`copytree`, and :func:`move`) "
"may use platform-specific \"fast-copy\" syscalls in order to copy the file "
"more efficiently (see :issue:`33671`). \"fast-copy\" means that the copying "
"operation occurs within the kernel, avoiding the use of userspace buffers in "
"Python as in \"``outfd.write(infd.read())``\"."
msgstr ""

#: ../Doc/library/shutil.rst:432
msgid "On macOS `fcopyfile`_ is used to copy the file content (not metadata)."
msgstr ""

#: ../Doc/library/shutil.rst:434
msgid "On Linux :func:`os.sendfile` is used."
msgstr ""

#: ../Doc/library/shutil.rst:436
msgid ""
"On Windows :func:`shutil.copyfile` uses a bigger default buffer size (1 MiB "
"instead of 64 KiB) and a :func:`memoryview`-based variant of :func:`shutil."
"copyfileobj` is used."
msgstr ""

#: ../Doc/library/shutil.rst:440
msgid ""
"If the fast-copy operation fails and no data was written in the destination "
"file then shutil will silently fallback on using less efficient :func:"
"`copyfileobj` function internally."
msgstr ""

#: ../Doc/library/shutil.rst:449
msgid "copytree example"
msgstr ""

#: ../Doc/library/shutil.rst:451
msgid ""
"This example is the implementation of the :func:`copytree` function, "
"described above, with the docstring omitted.  It demonstrates many of the "
"other functions provided by this module. ::"
msgstr ""

#: ../Doc/library/shutil.rst:486
msgid "Another example that uses the :func:`ignore_patterns` helper::"
msgstr ""

#: ../Doc/library/shutil.rst:492
msgid ""
"This will copy everything except ``.pyc`` files and files or directories "
"whose name starts with ``tmp``."
msgstr ""

#: ../Doc/library/shutil.rst:495
msgid "Another example that uses the *ignore* argument to add a logging call::"
msgstr ""

#: ../Doc/library/shutil.rst:510
msgid "rmtree example"
msgstr ""

#: ../Doc/library/shutil.rst:512
msgid ""
"This example shows how to remove a directory tree on Windows where some of "
"the files have their read-only bit set. It uses the onerror callback to "
"clear the readonly bit and reattempt the remove. Any subsequent failure will "
"propagate. ::"
msgstr ""

#: ../Doc/library/shutil.rst:530
msgid "Archiving operations"
msgstr ""

#: ../Doc/library/shutil.rst:534
#, fuzzy
msgid "Added support for the *xztar* format."
msgstr "Ajout du support des fichiers ``xztar``."

#: ../Doc/library/shutil.rst:538
msgid ""
"High-level utilities to create and read compressed and archived files are "
"also provided.  They rely on the :mod:`zipfile` and :mod:`tarfile` modules."
msgstr ""

#: ../Doc/library/shutil.rst:543
msgid "Create an archive file (such as zip or tar) and return its name."
msgstr ""

#: ../Doc/library/shutil.rst:545
msgid ""
"*base_name* is the name of the file to create, including the path, minus any "
"format-specific extension. *format* is the archive format: one of \"zip"
"\" (if the :mod:`zlib` module is available), \"tar\", \"gztar\" (if the :mod:"
"`zlib` module is available), \"bztar\" (if the :mod:`bz2` module is "
"available), or \"xztar\" (if the :mod:`lzma` module is available)."
msgstr ""

#: ../Doc/library/shutil.rst:551
msgid ""
"*root_dir* is a directory that will be the root directory of the archive; "
"for example, we typically chdir into *root_dir* before creating the archive."
msgstr ""

#: ../Doc/library/shutil.rst:555
msgid ""
"*base_dir* is the directory where we start archiving from; i.e. *base_dir* "
"will be the common prefix of all files and directories in the archive."
msgstr ""

#: ../Doc/library/shutil.rst:559
msgid "*root_dir* and *base_dir* both default to the current directory."
msgstr ""

#: ../Doc/library/shutil.rst:561
msgid ""
"If *dry_run* is true, no archive is created, but the operations that would "
"be executed are logged to *logger*."
msgstr ""

#: ../Doc/library/shutil.rst:564
msgid ""
"*owner* and *group* are used when creating a tar archive. By default, uses "
"the current owner and group."
msgstr ""

#: ../Doc/library/shutil.rst:567
msgid ""
"*logger* must be an object compatible with :pep:`282`, usually an instance "
"of :class:`logging.Logger`."
msgstr ""

#: ../Doc/library/shutil.rst:570
msgid "The *verbose* argument is unused and deprecated."
msgstr ""

#: ../Doc/library/shutil.rst:573
msgid ""
"Raises an :ref:`auditing event <auditing>` ``shutil.make_archive`` with "
"arguments ``base_name``, ``format``, ``root_dir``, ``base_dir``."
msgstr ""

#: ../Doc/library/shutil.rst:574
msgid ""
"The modern pax (POSIX.1-2001) format is now used instead of the legacy GNU "
"format for archives created with ``format=\"tar\"``."
msgstr ""

#: ../Doc/library/shutil.rst:581
msgid ""
"Return a list of supported formats for archiving. Each element of the "
"returned sequence is a tuple ``(name, description)``."
msgstr ""

#: ../Doc/library/shutil.rst:584 ../Doc/library/shutil.rst:664
msgid "By default :mod:`shutil` provides these formats:"
msgstr ""

#: ../Doc/library/shutil.rst:586
msgid "*zip*: ZIP file (if the :mod:`zlib` module is available)."
msgstr ""

#: ../Doc/library/shutil.rst:587
msgid ""
"*tar*: Uncompressed tar file. Uses POSIX.1-2001 pax format for new archives."
msgstr ""

#: ../Doc/library/shutil.rst:588 ../Doc/library/shutil.rst:669
msgid "*gztar*: gzip'ed tar-file (if the :mod:`zlib` module is available)."
msgstr ""

#: ../Doc/library/shutil.rst:589 ../Doc/library/shutil.rst:670
msgid "*bztar*: bzip2'ed tar-file (if the :mod:`bz2` module is available)."
msgstr ""

#: ../Doc/library/shutil.rst:590 ../Doc/library/shutil.rst:671
msgid "*xztar*: xz'ed tar-file (if the :mod:`lzma` module is available)."
msgstr ""

#: ../Doc/library/shutil.rst:592
msgid ""
"You can register new formats or provide your own archiver for any existing "
"formats, by using :func:`register_archive_format`."
msgstr ""

#: ../Doc/library/shutil.rst:598
msgid "Register an archiver for the format *name*."
msgstr ""

#: ../Doc/library/shutil.rst:600
msgid ""
"*function* is the callable that will be used to unpack archives. The "
"callable will receive the *base_name* of the file to create, followed by the "
"*base_dir* (which defaults to :data:`os.curdir`) to start archiving from. "
"Further arguments are passed as keyword arguments: *owner*, *group*, "
"*dry_run* and *logger* (as passed in :func:`make_archive`)."
msgstr ""

#: ../Doc/library/shutil.rst:606
msgid ""
"If given, *extra_args* is a sequence of ``(name, value)`` pairs that will be "
"used as extra keywords arguments when the archiver callable is used."
msgstr ""

#: ../Doc/library/shutil.rst:609
msgid ""
"*description* is used by :func:`get_archive_formats` which returns the list "
"of archivers.  Defaults to an empty string."
msgstr ""

#: ../Doc/library/shutil.rst:615
msgid "Remove the archive format *name* from the list of supported formats."
msgstr ""

#: ../Doc/library/shutil.rst:620
msgid "Unpack an archive. *filename* is the full path of the archive."
msgstr ""

#: ../Doc/library/shutil.rst:622
msgid ""
"*extract_dir* is the name of the target directory where the archive is "
"unpacked. If not provided, the current working directory is used."
msgstr ""

#: ../Doc/library/shutil.rst:625
msgid ""
"*format* is the archive format: one of \"zip\", \"tar\", \"gztar\", \"bztar"
"\", or \"xztar\".  Or any other format registered with :func:"
"`register_unpack_format`.  If not provided, :func:`unpack_archive` will use "
"the archive file name extension and see if an unpacker was registered for "
"that extension.  In case none is found, a :exc:`ValueError` is raised."
msgstr ""

#: ../Doc/library/shutil.rst:632
msgid "Accepts a :term:`path-like object` for *filename* and *extract_dir*."
msgstr ""

#: ../Doc/library/shutil.rst:638
msgid ""
"Registers an unpack format. *name* is the name of the format and "
"*extensions* is a list of extensions corresponding to the format, like ``."
"zip`` for Zip files."
msgstr ""

#: ../Doc/library/shutil.rst:642
msgid ""
"*function* is the callable that will be used to unpack archives. The "
"callable will receive the path of the archive, followed by the directory the "
"archive must be extracted to."
msgstr ""

#: ../Doc/library/shutil.rst:646
msgid ""
"When provided, *extra_args* is a sequence of ``(name, value)`` tuples that "
"will be passed as keywords arguments to the callable."
msgstr ""

#: ../Doc/library/shutil.rst:649
msgid ""
"*description* can be provided to describe the format, and will be returned "
"by the :func:`get_unpack_formats` function."
msgstr ""

#: ../Doc/library/shutil.rst:655
msgid "Unregister an unpack format. *name* is the name of the format."
msgstr ""

#: ../Doc/library/shutil.rst:660
msgid ""
"Return a list of all registered formats for unpacking. Each element of the "
"returned sequence is a tuple ``(name, extensions, description)``."
msgstr ""

#: ../Doc/library/shutil.rst:666
msgid ""
"*zip*: ZIP file (unpacking compressed files works only if the corresponding "
"module is available)."
msgstr ""

#: ../Doc/library/shutil.rst:668
msgid "*tar*: uncompressed tar file."
msgstr ""

#: ../Doc/library/shutil.rst:673
msgid ""
"You can register new formats or provide your own unpacker for any existing "
"formats, by using :func:`register_unpack_format`."
msgstr ""

#: ../Doc/library/shutil.rst:680
msgid "Archiving example"
msgstr ""

#: ../Doc/library/shutil.rst:682
msgid ""
"In this example, we create a gzip'ed tar-file archive containing all files "
"found in the :file:`.ssh` directory of the user::"
msgstr ""

#: ../Doc/library/shutil.rst:692
msgid "The resulting archive contains:"
msgstr ""

#: ../Doc/library/shutil.rst:708
msgid "Querying the size of the output terminal"
msgstr ""

#: ../Doc/library/shutil.rst:712
msgid "Get the size of the terminal window."
msgstr ""

#: ../Doc/library/shutil.rst:714
msgid ""
"For each of the two dimensions, the environment variable, ``COLUMNS`` and "
"``LINES`` respectively, is checked. If the variable is defined and the value "
"is a positive integer, it is used."
msgstr ""

#: ../Doc/library/shutil.rst:718
msgid ""
"When ``COLUMNS`` or ``LINES`` is not defined, which is the common case, the "
"terminal connected to :data:`sys.__stdout__` is queried by invoking :func:"
"`os.get_terminal_size`."
msgstr ""

#: ../Doc/library/shutil.rst:722
msgid ""
"If the terminal size cannot be successfully queried, either because the "
"system doesn't support querying, or because we are not connected to a "
"terminal, the value given in ``fallback`` parameter is used. ``fallback`` "
"defaults to ``(80, 24)`` which is the default size used by many terminal "
"emulators."
msgstr ""

#: ../Doc/library/shutil.rst:728
msgid "The value returned is a named tuple of type :class:`os.terminal_size`."
msgstr ""

#: ../Doc/library/shutil.rst:730
msgid ""
"See also: The Single UNIX Specification, Version 2, `Other Environment "
"Variables`_."
msgstr ""
