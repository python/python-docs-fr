# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-24 09:01+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: library/codeop.rst:2
msgid ":mod:`codeop` --- Compile Python code"
msgstr ":mod:`codeop` — Compilation de code Python"

#: library/codeop.rst:10
msgid "**Source code:** :source:`Lib/codeop.py`"
msgstr "**Code source :** :source:`Lib/codeop.py`"

#: library/codeop.rst:14
msgid ""
"The :mod:`codeop` module provides utilities upon which the Python read-eval-"
"print loop can be emulated, as is done in the :mod:`code` module.  As a "
"result, you probably don't want to use the module directly; if you want to "
"include such a loop in your program you probably want to use the :mod:`code` "
"module instead."
msgstr ""
"Le module :mod:`codeop` fournit des outils permettant d'émuler une boucle de "
"lecture-évaluation-affichage (en anglais *read-eval-print-loop* ou REPL), "
"comme dans le module :mod:`code`.  Par conséquent, ce module n'est pas "
"destiné à être utilisé directement ; pour inclure un REPL dans un programme, "
"il est préférable d'utiliser le module :mod:`code`."

#: library/codeop.rst:20
msgid "There are two parts to this job:"
msgstr "Cette tâche se divise en deux parties :"

#: library/codeop.rst:22
msgid ""
"Being able to tell if a line of input completes a Python  statement: in "
"short, telling whether to print '``>>>``' or '``...``' next."
msgstr ""
"Pouvoir affirmer qu'une ligne d'entrée est une instruction complète, ou "
"achève une instruction : en bref, savoir s'il faut afficher « ``>>>`` » ou "
"« ``...`` » à sa suite."

#: library/codeop.rst:25
msgid ""
"Remembering which future statements the user has entered, so  subsequent "
"input can be compiled with these in effect."
msgstr ""
"Conserver les instructions déjà entrées par l'utilisateur, afin que les "
"entrées suivantes puissent êtres compilées avec elles."

#: library/codeop.rst:28
msgid ""
"The :mod:`codeop` module provides a way of doing each of these things, and a "
"way of doing them both."
msgstr ""
"Le module :mod:`codeop` fournit un moyen d'effectuer ces deux parties, "
"individuellement ou simultanément."

#: library/codeop.rst:31
msgid "To do just the former:"
msgstr "Pour ne faire que la première partie :"

#: library/codeop.rst:35
msgid ""
"Tries to compile *source*, which should be a string of Python code and "
"return a code object if *source* is valid Python code. In that case, the "
"filename attribute of the code object will be *filename*, which defaults to "
"``'<input>'``. Returns ``None`` if *source* is *not* valid Python code, but "
"is a prefix of valid Python code."
msgstr ""
"Essaye de compiler *source*, qui doit être une chaîne de caractères "
"représentant du code Python valide et renvoie un objet code le cas échéant. "
"Dans ce cas, l'attribut de nom de fichier de l'objet code renvoyé sera "
"*filename* (``'<input>'`` par défaut). Renvoie ``None`` si *source* n'est "
"*pas* du code Python valide, mais un *début* de code Python valide."

#: library/codeop.rst:41
msgid ""
"If there is a problem with *source*, an exception will be raised. :exc:"
"`SyntaxError` is raised if there is invalid Python syntax, and :exc:"
"`OverflowError` or :exc:`ValueError` if there is an invalid literal."
msgstr ""
"En cas de problème avec *source*, une exception est levée ; :exc:"
"`SyntaxError` si la syntaxe Python est incorrecte, et :exc:`OverflowError` "
"ou :exc:`ValueError` si un littéral invalide est rencontré."

#: library/codeop.rst:45
#, fuzzy
msgid ""
"The *symbol* argument determines whether *source* is compiled as a statement "
"(``'single'``, the default), as a sequence of statements (``'exec'``) or as "
"an :term:`expression` (``'eval'``).  Any other value will cause :exc:"
"`ValueError` to  be raised."
msgstr ""
"L'argument *symbol* détermine si *source* est compilée comme une instruction "
"(``'single'``, par défaut) ou comme une :term:`expression` (``'eval'``).  "
"Toute autre valeur lèvera :exc:`ValueError`."

#: library/codeop.rst:52
msgid ""
"It is possible (but not likely) that the parser stops parsing with a "
"successful outcome before reaching the end of the source; in this case, "
"trailing symbols may be ignored instead of causing an error.  For example, a "
"backslash followed by two newlines may be followed by arbitrary garbage. "
"This will be fixed once the API for the parser is better."
msgstr ""
"Il est possible (quoique improbable) que l'analyseur s'arrête avant "
"d'atteindre la fin du code source ; dans ce cas, les symboles venant après "
"peuvent être ignorés au lieu de provoquer une erreur. Par exemple, une barre "
"oblique inverse suivie de deux retours à la ligne peut être suivie par de la "
"mémoire non-initialisée. Ceci sera corrigé quand l'interface de l'analyseur "
"aura été améliorée."

#: library/codeop.rst:61
msgid ""
"Instances of this class have :meth:`__call__` methods identical in signature "
"to the built-in function :func:`compile`, but with the difference that if "
"the instance compiles program text containing a :mod:`__future__` statement, "
"the instance 'remembers' and compiles all subsequent program texts with the "
"statement in force."
msgstr ""
"Les instances de cette classe ont des méthodes :meth:`__call__` de signature "
"identique à la fonction native :func:`compile`, à la différence près que si "
"l'instance compile du code source contenant une instruction :mod:"
"`__future__`, l'instance s'en « souviendra » et compilera tous les codes "
"sources suivants avec cette instruction activée."

#: library/codeop.rst:70
msgid ""
"Instances of this class have :meth:`__call__` methods identical in signature "
"to :func:`compile_command`; the difference is that if the instance compiles "
"program text containing a ``__future__`` statement, the instance 'remembers' "
"and compiles all subsequent program texts with the statement in force."
msgstr ""
"Les instances de cette classe ont des méthodes :meth:`__call__` de signature "
"identique à la fonction :func:`compile_command`, à la différence près que si "
"l'instance compile du code source contenant une instruction ``__future__``, "
"l'instance s'en « souviendra » et compilera tous les codes sources suivants "
"avec cette instruction activée."
