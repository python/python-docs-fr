# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-23 16:48+0200\n"
"PO-Revision-Date: 2018-12-06 22:18+0100\n"
"Last-Translator: Julien Palard <julien@palard.fr>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.2\n"

#: ../Doc/library/random.rst:2
msgid ":mod:`random` --- Generate pseudo-random numbers"
msgstr ":mod:`random` --- Génère des nombres pseudo-aléatoires"

#: ../Doc/library/random.rst:7
msgid "**Source code:** :source:`Lib/random.py`"
msgstr "**Code source :** :source:`Lib/random.py`"

#: ../Doc/library/random.rst:11
msgid ""
"This module implements pseudo-random number generators for various "
"distributions."
msgstr ""
"Ce module implémente des générateurs de nombres pseudo-aléatoires pour "
"différentes distributions."

#: ../Doc/library/random.rst:14
msgid ""
"For integers, there is uniform selection from a range. For sequences, there "
"is uniform selection of a random element, a function to generate a random "
"permutation of a list in-place, and a function for random sampling without "
"replacement."
msgstr ""
"Pour les entiers, il existe une sélection uniforme à partir d'une plage. "
"Pour les séquences, il existe une sélection uniforme d'un élément aléatoire, "
"une fonction pour générer une permutation aléatoire d'une liste sur place et "
"une fonction pour un échantillonnage aléatoire sans remplacement."

#: ../Doc/library/random.rst:19
msgid ""
"On the real line, there are functions to compute uniform, normal (Gaussian), "
"lognormal, negative exponential, gamma, and beta distributions. For "
"generating distributions of angles, the von Mises distribution is available."
msgstr ""
"Pour l'ensemble des réels, il y a des fonctions pour calculer des "
"distributions uniformes, normales (gaussiennes), log-normales, "
"exponentielles négatives, gamma et bêta. Pour générer des distributions "
"d'angles, la distribution de *von Mises* est disponible."

#: ../Doc/library/random.rst:23
msgid ""
"Almost all module functions depend on the basic function :func:`.random`, "
"which generates a random float uniformly in the semi-open range [0.0, 1.0).  "
"Python uses the Mersenne Twister as the core generator.  It produces 53-bit "
"precision floats and has a period of 2\\*\\*19937-1.  The underlying "
"implementation in C is both fast and threadsafe.  The Mersenne Twister is "
"one of the most extensively tested random number generators in existence.  "
"However, being completely deterministic, it is not suitable for all "
"purposes, and is completely unsuitable for cryptographic purposes."
msgstr ""
"Presque toutes les fonctions du module dépendent de la fonction de base :"
"func:`.random`, qui génère un nombre à virgule flottante aléatoire de façon "
"uniforme dans la plage semi-ouverte [0.0, 1.0). Python utilise l'algorithme "
"*Mersenne Twister* comme générateur de base. Il produit des flottants de "
"précision de 53 bits et a une période de 2\\*\\*\\*19937-1. L'implémentation "
"sous-jacente en C est à la fois rapide et  compatible avec les programmes "
"ayant de multiples fils d'exécution. Le *Mersenne Twister* est l'un des "
"générateurs de nombres aléatoires les plus largement testés qui existent. "
"Cependant, étant complètement déterministe, il n'est pas adapté à tous les "
"usages et est totalement inadapté à des fins cryptographiques."

#: ../Doc/library/random.rst:32
msgid ""
"The functions supplied by this module are actually bound methods of a hidden "
"instance of the :class:`random.Random` class.  You can instantiate your own "
"instances of :class:`Random` to get generators that don't share state."
msgstr ""
"Les fonctions fournies par ce module dépendent en réalité de méthodes d’une "
"instance cachée de la classe :class:`random.Random`. Vous pouvez créer vos "
"propres instances de :class:`Random` pour obtenir des générateurs sans états "
"partagés."

#: ../Doc/library/random.rst:36
msgid ""
"Class :class:`Random` can also be subclassed if you want to use a different "
"basic generator of your own devising: in that case, override the :meth:"
"`~Random.random`, :meth:`~Random.seed`, :meth:`~Random.getstate`, and :meth:"
"`~Random.setstate` methods. Optionally, a new generator can supply a :meth:"
"`~Random.getrandbits` method --- this allows :meth:`randrange` to produce "
"selections over an arbitrarily large range."
msgstr ""
"La classe :class:`Random` peut également être sous-classée si vous voulez "
"utiliser un générateur de base différent, de votre propre conception. Dans "
"ce cas, remplacez les méthodes :meth:`~Random.random`, :meth:`~Random."
"seed`, :meth:`~Random.gettsate` et :meth:`~Random.setstate`. En option, un "
"nouveau générateur peut fournir une méthode :meth:`~Random.getrandbits` --- "
"ce qui permet à :meth:`randrange` de produire des sélections sur une plage "
"de taille arbitraire."

#: ../Doc/library/random.rst:42
msgid ""
"The :mod:`random` module also provides the :class:`SystemRandom` class which "
"uses the system function :func:`os.urandom` to generate random numbers from "
"sources provided by the operating system."
msgstr ""

#: ../Doc/library/random.rst:48
msgid ""
"The pseudo-random generators of this module should not be used for security "
"purposes.  For security or cryptographic uses, see the :mod:`secrets` module."
msgstr ""

#: ../Doc/library/random.rst:54
msgid ""
"M. Matsumoto and T. Nishimura, \"Mersenne Twister: A 623-dimensionally "
"equidistributed uniform pseudorandom number generator\", ACM Transactions on "
"Modeling and Computer Simulation Vol. 8, No. 1, January pp.3--30 1998."
msgstr ""

#: ../Doc/library/random.rst:59
msgid ""
"`Complementary-Multiply-with-Carry recipe <https://code.activestate.com/"
"recipes/576707/>`_ for a compatible alternative random number generator with "
"a long period and comparatively simple update operations."
msgstr ""

#: ../Doc/library/random.rst:66
msgid "Bookkeeping functions"
msgstr ""

#: ../Doc/library/random.rst:70
msgid "Initialize the random number generator."
msgstr ""

#: ../Doc/library/random.rst:72
msgid ""
"If *a* is omitted or ``None``, the current system time is used.  If "
"randomness sources are provided by the operating system, they are used "
"instead of the system time (see the :func:`os.urandom` function for details "
"on availability)."
msgstr ""

#: ../Doc/library/random.rst:77
msgid "If *a* is an int, it is used directly."
msgstr ""

#: ../Doc/library/random.rst:79
msgid ""
"With version 2 (the default), a :class:`str`, :class:`bytes`, or :class:"
"`bytearray` object gets converted to an :class:`int` and all of its bits are "
"used."
msgstr ""

#: ../Doc/library/random.rst:82
msgid ""
"With version 1 (provided for reproducing random sequences from older "
"versions of Python), the algorithm for :class:`str` and :class:`bytes` "
"generates a narrower range of seeds."
msgstr ""

#: ../Doc/library/random.rst:86
msgid ""
"Moved to the version 2 scheme which uses all of the bits in a string seed."
msgstr ""

#: ../Doc/library/random.rst:91
msgid ""
"Return an object capturing the current internal state of the generator.  "
"This object can be passed to :func:`setstate` to restore the state."
msgstr ""

#: ../Doc/library/random.rst:97
msgid ""
"*state* should have been obtained from a previous call to :func:`getstate`, "
"and :func:`setstate` restores the internal state of the generator to what it "
"was at the time :func:`getstate` was called."
msgstr ""

#: ../Doc/library/random.rst:104
msgid ""
"Returns a Python integer with *k* random bits. This method is supplied with "
"the MersenneTwister generator and some other generators may also provide it "
"as an optional part of the API. When available, :meth:`getrandbits` enables :"
"meth:`randrange` to handle arbitrarily large ranges."
msgstr ""

#: ../Doc/library/random.rst:111
msgid "Functions for integers"
msgstr ""

#: ../Doc/library/random.rst:116
msgid ""
"Return a randomly selected element from ``range(start, stop, step)``.  This "
"is equivalent to ``choice(range(start, stop, step))``, but doesn't actually "
"build a range object."
msgstr ""

#: ../Doc/library/random.rst:120
msgid ""
"The positional argument pattern matches that of :func:`range`.  Keyword "
"arguments should not be used because the function may use them in unexpected "
"ways."
msgstr ""

#: ../Doc/library/random.rst:123
msgid ""
":meth:`randrange` is more sophisticated about producing equally distributed "
"values.  Formerly it used a style like ``int(random()*n)`` which could "
"produce slightly uneven distributions."
msgstr ""

#: ../Doc/library/random.rst:130
msgid ""
"Return a random integer *N* such that ``a <= N <= b``.  Alias for "
"``randrange(a, b+1)``."
msgstr ""

#: ../Doc/library/random.rst:135
msgid "Functions for sequences"
msgstr ""

#: ../Doc/library/random.rst:139
msgid ""
"Return a random element from the non-empty sequence *seq*. If *seq* is "
"empty, raises :exc:`IndexError`."
msgstr ""

#: ../Doc/library/random.rst:144
msgid ""
"Return a *k* sized list of elements chosen from the *population* with "
"replacement. If the *population* is empty, raises :exc:`IndexError`."
msgstr ""

#: ../Doc/library/random.rst:147
msgid ""
"If a *weights* sequence is specified, selections are made according to the "
"relative weights.  Alternatively, if a *cum_weights* sequence is given, the "
"selections are made according to the cumulative weights (perhaps computed "
"using :func:`itertools.accumulate`).  For example, the relative weights "
"``[10, 5, 30, 5]`` are equivalent to the cumulative weights ``[10, 15, 45, "
"50]``.  Internally, the relative weights are converted to cumulative weights "
"before making selections, so supplying the cumulative weights saves work."
msgstr ""

#: ../Doc/library/random.rst:156
msgid ""
"If neither *weights* nor *cum_weights* are specified, selections are made "
"with equal probability.  If a weights sequence is supplied, it must be the "
"same length as the *population* sequence.  It is a :exc:`TypeError` to "
"specify both *weights* and *cum_weights*."
msgstr ""

#: ../Doc/library/random.rst:161
msgid ""
"The *weights* or *cum_weights* can use any numeric type that interoperates "
"with the :class:`float` values returned by :func:`random` (that includes "
"integers, floats, and fractions but excludes decimals)."
msgstr ""

#: ../Doc/library/random.rst:165
msgid ""
"For a given seed, the :func:`choices` function with equal weighting "
"typically produces a different sequence than repeated calls to :func:"
"`choice`.  The algorithm used by :func:`choices` uses floating point "
"arithmetic for internal consistency and speed.  The algorithm used by :func:"
"`choice` defaults to integer arithmetic with repeated selections to avoid "
"small biases from round-off error."
msgstr ""

#: ../Doc/library/random.rst:177
msgid "Shuffle the sequence *x* in place."
msgstr ""

#: ../Doc/library/random.rst:179
msgid ""
"The optional argument *random* is a 0-argument function returning a random "
"float in [0.0, 1.0); by default, this is the function :func:`.random`."
msgstr ""

#: ../Doc/library/random.rst:182
msgid ""
"To shuffle an immutable sequence and return a new shuffled list, use "
"``sample(x, k=len(x))`` instead."
msgstr ""

#: ../Doc/library/random.rst:185
msgid ""
"Note that even for small ``len(x)``, the total number of permutations of *x* "
"can quickly grow larger than the period of most random number generators. "
"This implies that most permutations of a long sequence can never be "
"generated.  For example, a sequence of length 2080 is the largest that can "
"fit within the period of the Mersenne Twister random number generator."
msgstr ""

#: ../Doc/library/random.rst:194
msgid ""
"Return a *k* length list of unique elements chosen from the population "
"sequence or set. Used for random sampling without replacement."
msgstr ""

#: ../Doc/library/random.rst:197
msgid ""
"Returns a new list containing elements from the population while leaving the "
"original population unchanged.  The resulting list is in selection order so "
"that all sub-slices will also be valid random samples.  This allows raffle "
"winners (the sample) to be partitioned into grand prize and second place "
"winners (the subslices)."
msgstr ""

#: ../Doc/library/random.rst:203
msgid ""
"Members of the population need not be :term:`hashable` or unique.  If the "
"population contains repeats, then each occurrence is a possible selection in "
"the sample."
msgstr ""

#: ../Doc/library/random.rst:206
msgid ""
"To choose a sample from a range of integers, use a :func:`range` object as "
"an argument.  This is especially fast and space efficient for sampling from "
"a large population:  ``sample(range(10000000), k=60)``."
msgstr ""

#: ../Doc/library/random.rst:210
msgid ""
"If the sample size is larger than the population size, a :exc:`ValueError` "
"is raised."
msgstr ""

#: ../Doc/library/random.rst:214
msgid "Real-valued distributions"
msgstr ""

#: ../Doc/library/random.rst:216
msgid ""
"The following functions generate specific real-valued distributions. "
"Function parameters are named after the corresponding variables in the "
"distribution's equation, as used in common mathematical practice; most of "
"these equations can be found in any statistics text."
msgstr ""

#: ../Doc/library/random.rst:224
msgid "Return the next random floating point number in the range [0.0, 1.0)."
msgstr ""

#: ../Doc/library/random.rst:229
msgid ""
"Return a random floating point number *N* such that ``a <= N <= b`` for ``a "
"<= b`` and ``b <= N <= a`` for ``b < a``."
msgstr ""

#: ../Doc/library/random.rst:232
msgid ""
"The end-point value ``b`` may or may not be included in the range depending "
"on floating-point rounding in the equation ``a + (b-a) * random()``."
msgstr ""

#: ../Doc/library/random.rst:238
msgid ""
"Return a random floating point number *N* such that ``low <= N <= high`` and "
"with the specified *mode* between those bounds.  The *low* and *high* bounds "
"default to zero and one.  The *mode* argument defaults to the midpoint "
"between the bounds, giving a symmetric distribution."
msgstr ""

#: ../Doc/library/random.rst:246
msgid ""
"Beta distribution.  Conditions on the parameters are ``alpha > 0`` and "
"``beta > 0``. Returned values range between 0 and 1."
msgstr ""

#: ../Doc/library/random.rst:252
msgid ""
"Exponential distribution.  *lambd* is 1.0 divided by the desired mean.  It "
"should be nonzero.  (The parameter would be called \"lambda\", but that is a "
"reserved word in Python.)  Returned values range from 0 to positive infinity "
"if *lambd* is positive, and from negative infinity to 0 if *lambd* is "
"negative."
msgstr ""

#: ../Doc/library/random.rst:261
msgid ""
"Gamma distribution.  (*Not* the gamma function!)  Conditions on the "
"parameters are ``alpha > 0`` and ``beta > 0``."
msgstr ""

#: ../Doc/library/random.rst:264
msgid "The probability distribution function is::"
msgstr ""

#: ../Doc/library/random.rst:273
msgid ""
"Gaussian distribution.  *mu* is the mean, and *sigma* is the standard "
"deviation.  This is slightly faster than the :func:`normalvariate` function "
"defined below."
msgstr ""

#: ../Doc/library/random.rst:280
msgid ""
"Log normal distribution.  If you take the natural logarithm of this "
"distribution, you'll get a normal distribution with mean *mu* and standard "
"deviation *sigma*.  *mu* can have any value, and *sigma* must be greater "
"than zero."
msgstr ""

#: ../Doc/library/random.rst:288
msgid ""
"Normal distribution.  *mu* is the mean, and *sigma* is the standard "
"deviation."
msgstr ""

#: ../Doc/library/random.rst:293
msgid ""
"*mu* is the mean angle, expressed in radians between 0 and 2\\*\\ *pi*, and "
"*kappa* is the concentration parameter, which must be greater than or equal "
"to zero.  If *kappa* is equal to zero, this distribution reduces to a "
"uniform random angle over the range 0 to 2\\*\\ *pi*."
msgstr ""

#: ../Doc/library/random.rst:301
msgid "Pareto distribution.  *alpha* is the shape parameter."
msgstr ""

#: ../Doc/library/random.rst:306
msgid ""
"Weibull distribution.  *alpha* is the scale parameter and *beta* is the "
"shape parameter."
msgstr ""

#: ../Doc/library/random.rst:311
msgid "Alternative Generator"
msgstr ""

#: ../Doc/library/random.rst:315
#, fuzzy
msgid ""
"Class that implements the default pseudo-random number generator used by "
"the :mod:`random` module."
msgstr ""
"Ce module implémente des générateurs de nombres pseudo-aléatoires pour "
"différentes distributions."

#: ../Doc/library/random.rst:320
msgid ""
"Class that uses the :func:`os.urandom` function for generating random "
"numbers from sources provided by the operating system. Not available on all "
"systems. Does not rely on software state, and sequences are not "
"reproducible. Accordingly, the :meth:`seed` method has no effect and is "
"ignored. The :meth:`getstate` and :meth:`setstate` methods raise :exc:"
"`NotImplementedError` if called."
msgstr ""

#: ../Doc/library/random.rst:329
msgid "Notes on Reproducibility"
msgstr ""

#: ../Doc/library/random.rst:331
msgid ""
"Sometimes it is useful to be able to reproduce the sequences given by a "
"pseudo random number generator.  By re-using a seed value, the same sequence "
"should be reproducible from run to run as long as multiple threads are not "
"running."
msgstr ""

#: ../Doc/library/random.rst:335
msgid ""
"Most of the random module's algorithms and seeding functions are subject to "
"change across Python versions, but two aspects are guaranteed not to change:"
msgstr ""

#: ../Doc/library/random.rst:338
msgid ""
"If a new seeding method is added, then a backward compatible seeder will be "
"offered."
msgstr ""

#: ../Doc/library/random.rst:341
msgid ""
"The generator's :meth:`~Random.random` method will continue to produce the "
"same sequence when the compatible seeder is given the same seed."
msgstr ""

#: ../Doc/library/random.rst:347
msgid "Examples and Recipes"
msgstr ""

#: ../Doc/library/random.rst:349
msgid "Basic examples::"
msgstr "Utilisation basique ::"

#: ../Doc/library/random.rst:377
msgid "Simulations::"
msgstr ""

#: ../Doc/library/random.rst:406
msgid ""
"Example of `statistical bootstrapping <https://en.wikipedia.org/wiki/"
"Bootstrapping_(statistics)>`_ using resampling with replacement to estimate "
"a confidence interval for the mean of a sample of size five::"
msgstr ""

#: ../Doc/library/random.rst:420
msgid ""
"Example of a `resampling permutation test <https://en.wikipedia.org/wiki/"
"Resampling_(statistics)#Permutation_tests>`_ to determine the statistical "
"significance or `p-value <https://en.wikipedia.org/wiki/P-value>`_ of an "
"observed difference between the effects of a drug versus a placebo::"
msgstr ""

#: ../Doc/library/random.rst:447
msgid ""
"Simulation of arrival times and service deliveries in a single server queue::"
msgstr ""

#: ../Doc/library/random.rst:478
msgid ""
"`Statistics for Hackers <https://www.youtube.com/watch?v=Iq9DzN6mvYA>`_ a "
"video tutorial by `Jake Vanderplas <https://us.pycon.org/2016/speaker/"
"profile/295/>`_ on statistical analysis using just a few fundamental "
"concepts including simulation, sampling, shuffling, and cross-validation."
msgstr ""

#: ../Doc/library/random.rst:484
msgid ""
"`Economics Simulation <http://nbviewer.jupyter.org/url/norvig.com/ipython/"
"Economics.ipynb>`_ a simulation of a marketplace by `Peter Norvig <http://"
"norvig.com/bio.html>`_ that shows effective use of many of the tools and "
"distributions provided by this module (gauss, uniform, sample, betavariate, "
"choice, triangular, and randrange)."
msgstr ""

#: ../Doc/library/random.rst:491
msgid ""
"`A Concrete Introduction to Probability (using Python) <http://nbviewer."
"jupyter.org/url/norvig.com/ipython/Probability.ipynb>`_ a tutorial by `Peter "
"Norvig <http://norvig.com/bio.html>`_ covering the basics of probability "
"theory, how to write simulations, and how to perform data analysis using "
"Python."
msgstr ""
