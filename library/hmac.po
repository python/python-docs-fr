# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-28 15:29+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/hmac.rst:2
msgid ":mod:`hmac` --- Keyed-Hashing for Message Authentication"
msgstr ""

#: ../Doc/library/hmac.rst:10
msgid "**Source code:** :source:`Lib/hmac.py`"
msgstr "**Code source :** :source:`Lib/hmac.py`"

#: ../Doc/library/hmac.rst:14
msgid "This module implements the HMAC algorithm as described by :rfc:`2104`."
msgstr ""

#: ../Doc/library/hmac.rst:19
msgid ""
"Return a new hmac object.  *key* is a bytes or bytearray object giving the "
"secret key.  If *msg* is present, the method call ``update(msg)`` is made. "
"*digestmod* is the digest name, digest constructor or module for the HMAC "
"object to use. It supports any name suitable to :func:`hashlib.new` and "
"defaults to the :data:`hashlib.md5` constructor."
msgstr ""

#: ../Doc/library/hmac.rst:25
msgid ""
"Parameter *key* can be a bytes or bytearray object. Parameter *msg* can be "
"of any type supported by :mod:`hashlib`. Parameter *digestmod* can be the "
"name of a hash algorithm."
msgstr ""

#: ../Doc/library/hmac.rst:31
msgid "MD5 as implicit default digest for *digestmod* is deprecated."
msgstr ""

#: ../Doc/library/hmac.rst:36
msgid ""
"Return digest of *msg* for given secret *key* and *digest*. The function is "
"equivalent to ``HMAC(key, msg, digest).digest()``, but uses an optimized C "
"or inline implementation, which is faster for messages that fit into memory. "
"The parameters *key*, *msg*, and *digest* have the same meaning as in :func:"
"`~hmac.new`."
msgstr ""

#: ../Doc/library/hmac.rst:42
msgid ""
"CPython implementation detail, the optimized C implementation is only used "
"when *digest* is a string and name of a digest algorithm, which is supported "
"by OpenSSL."
msgstr ""

#: ../Doc/library/hmac.rst:49
msgid "An HMAC object has the following methods:"
msgstr ""

#: ../Doc/library/hmac.rst:53
msgid ""
"Update the hmac object with *msg*.  Repeated calls are equivalent to a "
"single call with the concatenation of all the arguments: ``m.update(a); m."
"update(b)`` is equivalent to ``m.update(a + b)``."
msgstr ""

#: ../Doc/library/hmac.rst:57
msgid "Parameter *msg* can be of any type supported by :mod:`hashlib`."
msgstr ""

#: ../Doc/library/hmac.rst:63
msgid ""
"Return the digest of the bytes passed to the :meth:`update` method so far. "
"This bytes object will be the same length as the *digest_size* of the digest "
"given to the constructor.  It may contain non-ASCII bytes, including NUL "
"bytes."
msgstr ""

#: ../Doc/library/hmac.rst:70
msgid ""
"When comparing the output of :meth:`digest` to an externally-supplied digest "
"during a verification routine, it is recommended to use the :func:"
"`compare_digest` function instead of the ``==`` operator to reduce the "
"vulnerability to timing attacks."
msgstr ""

#: ../Doc/library/hmac.rst:78
msgid ""
"Like :meth:`digest` except the digest is returned as a string twice the "
"length containing only hexadecimal digits.  This may be used to exchange the "
"value safely in email or other non-binary environments."
msgstr ""

#: ../Doc/library/hmac.rst:84
msgid ""
"When comparing the output of :meth:`hexdigest` to an externally-supplied "
"digest during a verification routine, it is recommended to use the :func:"
"`compare_digest` function instead of the ``==`` operator to reduce the "
"vulnerability to timing attacks."
msgstr ""

#: ../Doc/library/hmac.rst:92
msgid ""
"Return a copy (\"clone\") of the hmac object.  This can be used to "
"efficiently compute the digests of strings that share a common initial "
"substring."
msgstr ""

#: ../Doc/library/hmac.rst:96
msgid "A hash object has the following attributes:"
msgstr "L'objet haché possède les attributs suivants ::"

#: ../Doc/library/hmac.rst:100
msgid "The size of the resulting HMAC digest in bytes."
msgstr ""

#: ../Doc/library/hmac.rst:104
msgid "The internal block size of the hash algorithm in bytes."
msgstr "La taille interne d'un bloc de l'algorithme de hachage en octets."

#: ../Doc/library/hmac.rst:110
msgid "The canonical name of this HMAC, always lowercase, e.g. ``hmac-md5``."
msgstr ""

#: ../Doc/library/hmac.rst:115
msgid "This module also provides the following helper function:"
msgstr ""

#: ../Doc/library/hmac.rst:119
msgid ""
"Return ``a == b``.  This function uses an approach designed to prevent "
"timing analysis by avoiding content-based short circuiting behaviour, making "
"it appropriate for cryptography.  *a* and *b* must both be of the same type: "
"either :class:`str` (ASCII only, as e.g. returned by :meth:`HMAC."
"hexdigest`), or a :term:`bytes-like object`."
msgstr ""

#: ../Doc/library/hmac.rst:127
msgid ""
"If *a* and *b* are of different lengths, or if an error occurs, a timing "
"attack could theoretically reveal information about the types and lengths of "
"*a* and *b*—but not their values."
msgstr ""

#: ../Doc/library/hmac.rst:137
msgid "Module :mod:`hashlib`"
msgstr ""

#: ../Doc/library/hmac.rst:138
msgid "The Python module providing secure hash functions."
msgstr ""
