# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-10-09 17:54+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/ftplib.rst:2
msgid ":mod:`ftplib` --- FTP protocol client"
msgstr ""

#: ../Doc/library/ftplib.rst:7
msgid "**Source code:** :source:`Lib/ftplib.py`"
msgstr "**Code source :** :source:`Lib/ftplib.py`"

#: ../Doc/library/ftplib.rst:15
msgid ""
"This module defines the class :class:`FTP` and a few related items. The :"
"class:`FTP` class implements the client side of the FTP protocol.  You can "
"use this to write Python programs that perform a variety of automated FTP "
"jobs, such as mirroring other FTP servers.  It is also used by the module :"
"mod:`urllib.request` to handle URLs that use FTP.  For more information on "
"FTP (File Transfer Protocol), see Internet :rfc:`959`."
msgstr ""

#: ../Doc/library/ftplib.rst:22
msgid "Here's a sample session using the :mod:`ftplib` module::"
msgstr ""

#: ../Doc/library/ftplib.rst:42
msgid "The module defines the following items:"
msgstr "Le module définit les éléments suivants :"

#: ../Doc/library/ftplib.rst:46
msgid ""
"Return a new instance of the :class:`FTP` class.  When *host* is given, the "
"method call ``connect(host)`` is made.  When *user* is given, additionally "
"the method call ``login(user, passwd, acct)`` is made (where *passwd* and "
"*acct* default to the empty string when not given).  The optional *timeout* "
"parameter specifies a timeout in seconds for blocking operations like the "
"connection attempt (if is not specified, the global default timeout setting "
"will be used). *source_address* is a 2-tuple ``(host, port)`` for the socket "
"to bind to as its source address before connecting."
msgstr ""

#: ../Doc/library/ftplib.rst:55
msgid "The :class:`FTP` class supports the :keyword:`with` statement, e.g.:"
msgstr ""

#: ../Doc/library/ftplib.rst:69
msgid "Support for the :keyword:`with` statement was added."
msgstr "La prise en charge de l'instruction :keyword:`with` a été ajoutée."

#: ../Doc/library/ftplib.rst:72 ../Doc/library/ftplib.rst:93
#: ../Doc/library/ftplib.rst:196
msgid "*source_address* parameter was added."
msgstr ""

#: ../Doc/library/ftplib.rst:78
msgid ""
"A :class:`FTP` subclass which adds TLS support to FTP as described in :rfc:"
"`4217`. Connect as usual to port 21 implicitly securing the FTP control "
"connection before authenticating. Securing the data connection requires the "
"user to explicitly ask for it by calling the :meth:`prot_p` method.  "
"*context* is a :class:`ssl.SSLContext` object which allows bundling SSL "
"configuration options, certificates and private keys into a single "
"(potentially long-lived) structure.  Please read :ref:`ssl-security` for "
"best practices."
msgstr ""

#: ../Doc/library/ftplib.rst:87
msgid ""
"*keyfile* and *certfile* are a legacy alternative to *context* -- they can "
"point to PEM-formatted private key and certificate chain files "
"(respectively) for the SSL connection."
msgstr ""

#: ../Doc/library/ftplib.rst:96
msgid ""
"The class now supports hostname check with :attr:`ssl.SSLContext."
"check_hostname` and *Server Name Indication* (see :data:`ssl.HAS_SNI`)."
msgstr ""

#: ../Doc/library/ftplib.rst:103
msgid ""
"*keyfile* and *certfile* are deprecated in favor of *context*. Please use :"
"meth:`ssl.SSLContext.load_cert_chain` instead, or let :func:`ssl."
"create_default_context` select the system's trusted CA certificates for you."
msgstr ""

#: ../Doc/library/ftplib.rst:108
msgid "Here's a sample session using the :class:`FTP_TLS` class::"
msgstr ""

#: ../Doc/library/ftplib.rst:121
msgid "Exception raised when an unexpected reply is received from the server."
msgstr ""

#: ../Doc/library/ftplib.rst:126
msgid ""
"Exception raised when an error code signifying a temporary error (response "
"codes in the range 400--499) is received."
msgstr ""

#: ../Doc/library/ftplib.rst:132
msgid ""
"Exception raised when an error code signifying a permanent error (response "
"codes in the range 500--599) is received."
msgstr ""

#: ../Doc/library/ftplib.rst:138
msgid ""
"Exception raised when a reply is received from the server that does not fit "
"the response specifications of the File Transfer Protocol, i.e. begin with a "
"digit in the range 1--5."
msgstr ""

#: ../Doc/library/ftplib.rst:145
msgid ""
"The set of all exceptions (as a tuple) that methods of :class:`FTP` "
"instances may raise as a result of problems with the FTP connection (as "
"opposed to programming errors made by the caller).  This set includes the "
"four exceptions listed above as well as :exc:`OSError` and :exc:`EOFError`."
msgstr ""

#: ../Doc/library/ftplib.rst:155
msgid "Module :mod:`netrc`"
msgstr ""

#: ../Doc/library/ftplib.rst:154
msgid ""
"Parser for the :file:`.netrc` file format.  The file :file:`.netrc` is "
"typically used by FTP clients to load user authentication information before "
"prompting the user."
msgstr ""

#: ../Doc/library/ftplib.rst:162
msgid "FTP Objects"
msgstr ""

#: ../Doc/library/ftplib.rst:164
msgid ""
"Several methods are available in two flavors: one for handling text files "
"and another for binary files.  These are named for the command which is used "
"followed by ``lines`` for the text version or ``binary`` for the binary "
"version."
msgstr ""

#: ../Doc/library/ftplib.rst:168
#, fuzzy
msgid ":class:`FTP` instances have the following methods:"
msgstr "Les instances :class:`Mailbox` contiennent les méthodes suivantes :"

#: ../Doc/library/ftplib.rst:173
msgid ""
"Set the instance's debugging level.  This controls the amount of debugging "
"output printed.  The default, ``0``, produces no debugging output.  A value "
"of ``1`` produces a moderate amount of debugging output, generally a single "
"line per request.  A value of ``2`` or higher produces the maximum amount of "
"debugging output, logging each line sent and received on the control "
"connection."
msgstr ""

#: ../Doc/library/ftplib.rst:182
msgid ""
"Connect to the given host and port.  The default port number is ``21``, as "
"specified by the FTP protocol specification.  It is rarely needed to specify "
"a different port number.  This function should be called only once for each "
"instance; it should not be called at all if a host was given when the "
"instance was created.  All other methods can only be used after a connection "
"has been made. The optional *timeout* parameter specifies a timeout in "
"seconds for the connection attempt. If no *timeout* is passed, the global "
"default timeout setting will be used. *source_address* is a 2-tuple ``(host, "
"port)`` for the socket to bind to as its source address before connecting."
msgstr ""

#: ../Doc/library/ftplib.rst:195
msgid ""
"Raises an :ref:`auditing event <auditing>` ``ftplib.connect`` with arguments "
"``self``, ``host``, ``port``."
msgstr ""

#: ../Doc/library/ftplib.rst:202
msgid ""
"Return the welcome message sent by the server in reply to the initial "
"connection.  (This message sometimes contains disclaimers or help "
"information that may be relevant to the user.)"
msgstr ""

#: ../Doc/library/ftplib.rst:209
msgid ""
"Log in as the given *user*.  The *passwd* and *acct* parameters are optional "
"and default to the empty string.  If no *user* is specified, it defaults to "
"``'anonymous'``.  If *user* is ``'anonymous'``, the default *passwd* is "
"``'anonymous@'``.  This function should be called only once for each "
"instance, after a connection has been established; it should not be called "
"at all if a host and user were given when the instance was created.  Most "
"FTP commands are only allowed after the client has logged in.  The *acct* "
"parameter supplies \"accounting information\"; few systems implement this."
msgstr ""

#: ../Doc/library/ftplib.rst:221
msgid ""
"Abort a file transfer that is in progress.  Using this does not always work, "
"but it's worth a try."
msgstr ""

#: ../Doc/library/ftplib.rst:227
msgid ""
"Send a simple command string to the server and return the response string."
msgstr ""

#: ../Doc/library/ftplib.rst:229 ../Doc/library/ftplib.rst:238
msgid ""
"Raises an :ref:`auditing event <auditing>` ``ftplib.sendcmd`` with arguments "
"``self``, ``cmd``."
msgstr ""

#: ../Doc/library/ftplib.rst:234
msgid ""
"Send a simple command string to the server and handle the response.  Return "
"nothing if a response code corresponding to success (codes in the range "
"200--299) is received.  Raise :exc:`error_reply` otherwise."
msgstr ""

#: ../Doc/library/ftplib.rst:243
msgid ""
"Retrieve a file in binary transfer mode.  *cmd* should be an appropriate "
"``RETR`` command: ``'RETR filename'``. The *callback* function is called for "
"each block of data received, with a single bytes argument giving the data "
"block. The optional *blocksize* argument specifies the maximum chunk size to "
"read on the low-level socket object created to do the actual transfer (which "
"will also be the largest size of the data blocks passed to *callback*).  A "
"reasonable default is chosen. *rest* means the same thing as in the :meth:"
"`transfercmd` method."
msgstr ""

#: ../Doc/library/ftplib.rst:255
msgid ""
"Retrieve a file or directory listing in ASCII transfer mode.  *cmd* should "
"be an appropriate ``RETR`` command (see :meth:`retrbinary`) or a command "
"such as ``LIST`` or ``NLST`` (usually just the string ``'LIST'``). ``LIST`` "
"retrieves a list of files and information about those files. ``NLST`` "
"retrieves a list of file names. The *callback* function is called for each "
"line with a string argument containing the line with the trailing CRLF "
"stripped.  The default *callback* prints the line to ``sys.stdout``."
msgstr ""

#: ../Doc/library/ftplib.rst:267
msgid ""
"Enable \"passive\" mode if *val* is true, otherwise disable passive mode. "
"Passive mode is on by default."
msgstr ""

#: ../Doc/library/ftplib.rst:273
msgid ""
"Store a file in binary transfer mode.  *cmd* should be an appropriate "
"``STOR`` command: ``\"STOR filename\"``. *fp* is a :term:`file object` "
"(opened in binary mode) which is read until EOF using its :meth:`~io.IOBase."
"read` method in blocks of size *blocksize* to provide the data to be stored. "
"The *blocksize* argument defaults to 8192.  *callback* is an optional single "
"parameter callable that is called on each block of data after it is sent. "
"*rest* means the same thing as in the :meth:`transfercmd` method."
msgstr ""

#: ../Doc/library/ftplib.rst:281
msgid "*rest* parameter added."
msgstr ""

#: ../Doc/library/ftplib.rst:287
msgid ""
"Store a file in ASCII transfer mode.  *cmd* should be an appropriate "
"``STOR`` command (see :meth:`storbinary`).  Lines are read until EOF from "
"the :term:`file object` *fp* (opened in binary mode) using its :meth:`~io."
"IOBase.readline` method to provide the data to be stored.  *callback* is an "
"optional single parameter callable that is called on each line after it is "
"sent."
msgstr ""

#: ../Doc/library/ftplib.rst:296
msgid ""
"Initiate a transfer over the data connection.  If the transfer is active, "
"send an ``EPRT`` or  ``PORT`` command and the transfer command specified by "
"*cmd*, and accept the connection.  If the server is passive, send an "
"``EPSV`` or ``PASV`` command, connect to it, and start the transfer "
"command.  Either way, return the socket for the connection."
msgstr ""

#: ../Doc/library/ftplib.rst:302
msgid ""
"If optional *rest* is given, a ``REST`` command is sent to the server, "
"passing *rest* as an argument.  *rest* is usually a byte offset into the "
"requested file, telling the server to restart sending the file's bytes at "
"the requested offset, skipping over the initial bytes.  Note however that :"
"rfc:`959` requires only that *rest* be a string containing characters in the "
"printable range from ASCII code 33 to ASCII code 126.  The :meth:"
"`transfercmd` method, therefore, converts *rest* to a string, but no check "
"is performed on the string's contents.  If the server does not recognize the "
"``REST`` command, an :exc:`error_reply` exception will be raised.  If this "
"happens, simply call :meth:`transfercmd` without a *rest* argument."
msgstr ""

#: ../Doc/library/ftplib.rst:316
msgid ""
"Like :meth:`transfercmd`, but returns a tuple of the data connection and the "
"expected size of the data.  If the expected size could not be computed, "
"``None`` will be returned as the expected size.  *cmd* and *rest* means the "
"same thing as in :meth:`transfercmd`."
msgstr ""

#: ../Doc/library/ftplib.rst:324
msgid ""
"List a directory in a standardized format by using ``MLSD`` command (:rfc:"
"`3659`).  If *path* is omitted the current directory is assumed. *facts* is "
"a list of strings representing the type of information desired (e.g. "
"``[\"type\", \"size\", \"perm\"]``).  Return a generator object yielding a "
"tuple of two elements for every file found in path.  First element is the "
"file name, the second one is a dictionary containing facts about the file "
"name.  Content of this dictionary might be limited by the *facts* argument "
"but server is not guaranteed to return all requested facts."
msgstr ""

#: ../Doc/library/ftplib.rst:338
msgid ""
"Return a list of file names as returned by the ``NLST`` command.  The "
"optional *argument* is a directory to list (default is the current server "
"directory).  Multiple arguments can be used to pass non-standard options to "
"the ``NLST`` command."
msgstr ""

#: ../Doc/library/ftplib.rst:343 ../Doc/library/ftplib.rst:355
msgid "If your server supports the command, :meth:`mlsd` offers a better API."
msgstr ""

#: ../Doc/library/ftplib.rst:348
msgid ""
"Produce a directory listing as returned by the ``LIST`` command, printing it "
"to standard output.  The optional *argument* is a directory to list (default "
"is the current server directory).  Multiple arguments can be used to pass "
"non-standard options to the ``LIST`` command.  If the last argument is a "
"function, it is used as a *callback* function as for :meth:`retrlines`; the "
"default prints to ``sys.stdout``.  This method returns ``None``."
msgstr ""

#: ../Doc/library/ftplib.rst:360
msgid "Rename file *fromname* on the server to *toname*."
msgstr ""

#: ../Doc/library/ftplib.rst:365
msgid ""
"Remove the file named *filename* from the server.  If successful, returns "
"the text of the response, otherwise raises :exc:`error_perm` on permission "
"errors or :exc:`error_reply` on other errors."
msgstr ""

#: ../Doc/library/ftplib.rst:372
msgid "Set the current directory on the server."
msgstr ""

#: ../Doc/library/ftplib.rst:377
msgid "Create a new directory on the server."
msgstr ""

#: ../Doc/library/ftplib.rst:382
msgid "Return the pathname of the current directory on the server."
msgstr ""

#: ../Doc/library/ftplib.rst:387
msgid "Remove the directory named *dirname* on the server."
msgstr ""

#: ../Doc/library/ftplib.rst:392
msgid ""
"Request the size of the file named *filename* on the server.  On success, "
"the size of the file is returned as an integer, otherwise ``None`` is "
"returned. Note that the ``SIZE`` command is not  standardized, but is "
"supported by many common server implementations."
msgstr ""

#: ../Doc/library/ftplib.rst:400
msgid ""
"Send a ``QUIT`` command to the server and close the connection. This is the "
"\"polite\" way to close a connection, but it may raise an exception if the "
"server responds with an error to the ``QUIT`` command.  This implies a call "
"to the :meth:`close` method which renders the :class:`FTP` instance useless "
"for subsequent calls (see below)."
msgstr ""

#: ../Doc/library/ftplib.rst:409
msgid ""
"Close the connection unilaterally.  This should not be applied to an already "
"closed connection such as after a successful call to :meth:`~FTP.quit`. "
"After this call the :class:`FTP` instance should not be used any more (after "
"a call to :meth:`close` or :meth:`~FTP.quit` you cannot reopen the "
"connection by issuing another :meth:`login` method)."
msgstr ""

#: ../Doc/library/ftplib.rst:417
msgid "FTP_TLS Objects"
msgstr ""

#: ../Doc/library/ftplib.rst:419
msgid ""
":class:`FTP_TLS` class inherits from :class:`FTP`, defining these additional "
"objects:"
msgstr ""

#: ../Doc/library/ftplib.rst:423
msgid "The SSL version to use (defaults to :attr:`ssl.PROTOCOL_SSLv23`)."
msgstr ""

#: ../Doc/library/ftplib.rst:427
msgid ""
"Set up a secure control connection by using TLS or SSL, depending on what is "
"specified in the :attr:`ssl_version` attribute."
msgstr ""

#: ../Doc/library/ftplib.rst:430
msgid ""
"The method now supports hostname check with :attr:`ssl.SSLContext."
"check_hostname` and *Server Name Indication* (see :data:`ssl.HAS_SNI`)."
msgstr ""

#: ../Doc/library/ftplib.rst:437
msgid ""
"Revert control channel back to plaintext.  This can be useful to take "
"advantage of firewalls that know how to handle NAT with non-secure FTP "
"without opening fixed ports."
msgstr ""

#: ../Doc/library/ftplib.rst:445
msgid "Set up secure data connection."
msgstr ""

#: ../Doc/library/ftplib.rst:449
msgid "Set up clear text data connection."
msgstr ""
