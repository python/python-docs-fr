# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-24 09:01+0200\n"
"PO-Revision-Date: 2020-05-18 22:51+0200\n"
"Last-Translator: Loc Cosnier <loc.cosnier@pm.me>\n"
"Language-Team: French <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1)\n"
"X-Generator: Gtranslator 3.36.0\n"

#: library/difflib.rst:2
msgid ":mod:`difflib` --- Helpers for computing deltas"
msgstr ":mod:`difflib` — Utilitaires pour le calcul des deltas"

#: library/difflib.rst:11
msgid "**Source code:** :source:`Lib/difflib.py`"
msgstr "**Code source:** :source:`Lib/difflib.py`"

#: library/difflib.rst:20
msgid ""
"This module provides classes and functions for comparing sequences. It can "
"be used for example, for comparing files, and can produce difference "
"information in various formats, including HTML and context and unified "
"diffs. For comparing directories and files, see also, the :mod:`filecmp` "
"module."
msgstr ""
"Ce module fournit des classes et des fonctions permettant de comparer des "
"séquences. Il peut être utilisé, par exemple, pour comparer des fichiers et "
"peut produire des informations sur les différences dans divers formats, y "
"compris HTML et les différences contextuelles et unifiées. Pour la "
"comparaison de répertoires et de fichiers, voir aussi le module :mod:"
"`filecmp`."

#: library/difflib.rst:29
msgid ""
"This is a flexible class for comparing pairs of sequences of any type, so "
"long as the sequence elements are :term:`hashable`.  The basic algorithm "
"predates, and is a little fancier than, an algorithm published in the late "
"1980's by Ratcliff and Obershelp under the hyperbolic name \"gestalt pattern "
"matching.\"  The idea is to find the longest contiguous matching subsequence "
"that contains no \"junk\" elements; these \"junk\" elements are ones that "
"are uninteresting in some sense, such as blank lines or whitespace.  "
"(Handling junk is an extension to the Ratcliff and Obershelp algorithm.) The "
"same idea is then applied recursively to the pieces of the sequences to the "
"left and to the right of the matching subsequence.  This does not yield "
"minimal edit sequences, but does tend to yield matches that \"look right\" "
"to people."
msgstr ""
"C'est une classe flexible permettant de comparer des séquences deux à deux "
"de n'importe quel type, tant que les éléments des séquences sont :term:"
"`hachables <hashable>`. L'algorithme de base est antérieur, et un peu plus "
"sophistiqué, à un algorithme publié à la fin des années 1980 par Ratcliff et "
"Obershelp sous le nom hyperbolique de *gestalt pattern matching*. L'idée est "
"de trouver la plus longue sous-séquence d'appariement contiguë qui ne "
"contient pas d'éléments « indésirables » ; ces éléments « indésirables » "
"sont ceux qui sont inintéressants dans un certain sens, comme les lignes "
"blanches ou les espaces. (Le traitement des éléments indésirables est une "
"extension de l'algorithme de Ratcliff et Obershelp). La même idée est "
"ensuite appliquée récursivement aux morceaux des séquences à gauche et à "
"droite de la sous-séquence correspondante. Cela ne donne pas des séquences "
"de montage minimales, mais tend à donner des correspondances qui « semblent "
"correctes » pour les gens."

#: library/difflib.rst:41
msgid ""
"**Timing:** The basic Ratcliff-Obershelp algorithm is cubic time in the "
"worst case and quadratic time in the expected case. :class:`SequenceMatcher` "
"is quadratic time for the worst case and has expected-case behavior "
"dependent in a complicated way on how many elements the sequences have in "
"common; best case time is linear."
msgstr ""
"**Compléxité temporelle :** l'algorithme de base de Ratcliff-Obershelp est "
"de complexité cubique dans le pire cas et de complexité quadratique dans le "
"cas attendu. :class:`SequenceMatcher` est de complexité quadratique pour le "
"pire cas et son comportement dans le cas attendu dépend de façon complexe du "
"nombre d'éléments que les séquences ont en commun ; le temps dans le "
"meilleur cas est linéaire."

#: library/difflib.rst:47
msgid ""
"**Automatic junk heuristic:** :class:`SequenceMatcher` supports a heuristic "
"that automatically treats certain sequence items as junk. The heuristic "
"counts how many times each individual item appears in the sequence. If an "
"item's duplicates (after the first one) account for more than 1% of the "
"sequence and the sequence is at least 200 items long, this item is marked as "
"\"popular\" and is treated as junk for the purpose of sequence matching. "
"This heuristic can be turned off by setting the ``autojunk`` argument to "
"``False`` when creating the :class:`SequenceMatcher`."
msgstr ""
"**Heuristique automatique des indésirables:** :class:`SequenceMatcher` "
"utilise une heuristique qui traite automatiquement certains éléments de la "
"séquence comme indésirables. L'heuristique compte combien de fois chaque "
"élément individuel apparaît dans la séquence. Si les doublons d'un élément "
"(après le premier) représentent plus de 1 % de la séquence et que la "
"séquence compte au moins 200 éléments, cet élément est marqué comme "
"« populaire » et est traité comme indésirable aux fins de la comparaison des "
"séquences. Cette heuristique peut être désactivée en réglant l'argument "
"``autojunk`` sur ``False`` lors de la création de la classe :class:"
"`SequenceMatcher`."

#: library/difflib.rst:55 library/difflib.rst:388
msgid "The *autojunk* parameter."
msgstr "Le paramètre *autojunk*."

#: library/difflib.rst:61
msgid ""
"This is a class for comparing sequences of lines of text, and producing "
"human-readable differences or deltas.  Differ uses :class:`SequenceMatcher` "
"both to compare sequences of lines, and to compare sequences of characters "
"within similar (near-matching) lines."
msgstr ""
"Il s'agit d'une classe permettant de comparer des séquences de lignes de "
"texte et de produire des différences ou deltas humainement lisibles. "
"*Differ* utilise :class:`SequenceMatcher` à la fois pour comparer des "
"séquences de lignes, et pour comparer des séquences de caractères dans des "
"lignes similaires (quasi-correspondantes)."

#: library/difflib.rst:66
msgid "Each line of a :class:`Differ` delta begins with a two-letter code:"
msgstr ""
"Chaque ligne d'un delta :class:`Differ` commence par un code de deux "
"lettres :"

#: library/difflib.rst:69
msgid "Code"
msgstr "Code"

#: library/difflib.rst:69 library/difflib.rst:498
msgid "Meaning"
msgstr "Signification"

#: library/difflib.rst:71
msgid "``'- '``"
msgstr "``'- '``"

#: library/difflib.rst:71
msgid "line unique to sequence 1"
msgstr "ligne n'appartenant qu'à la séquence 1"

#: library/difflib.rst:73
msgid "``'+ '``"
msgstr "``'+ '``"

#: library/difflib.rst:73
msgid "line unique to sequence 2"
msgstr "ligne n'appartenant qu'à la séquence 2"

#: library/difflib.rst:75
msgid "``'  '``"
msgstr "``'  '``"

#: library/difflib.rst:75
msgid "line common to both sequences"
msgstr "ligne commune aux deux séquences"

#: library/difflib.rst:77
msgid "``'? '``"
msgstr "``'? '``"

#: library/difflib.rst:77
msgid "line not present in either input sequence"
msgstr "ligne non présente dans l'une ou l'autre des séquences d'entrée"

#: library/difflib.rst:80
msgid ""
"Lines beginning with '``?``' attempt to guide the eye to intraline "
"differences, and were not present in either input sequence. These lines can "
"be confusing if the sequences contain tab characters."
msgstr ""
"Les lignes commençant par ``'?'`` tentent de guider l'œil vers les "
"différences intralignes, et n'étaient présentes dans aucune des séquences "
"d'entrée. Ces lignes peuvent être déroutantes si les séquences contiennent "
"des caractères de tabulation."

#: library/difflib.rst:87
msgid ""
"This class can be used to create an HTML table (or a complete HTML file "
"containing the table) showing a side by side, line by line comparison of "
"text with inter-line and intra-line change highlights.  The table can be "
"generated in either full or contextual difference mode."
msgstr ""
"Cette classe peut être utilisée pour créer un tableau HTML (ou un fichier "
"HTML complet contenant le tableau) montrant une comparaison côte à côte, "
"ligne par ligne, du texte avec les changements inter-lignes et intralignes. "
"Le tableau peut être généré en mode de différence complet ou contextuel."

#: library/difflib.rst:92
msgid "The constructor for this class is:"
msgstr "Le constructeur pour cette classe est :"

#: library/difflib.rst:97
msgid "Initializes instance of :class:`HtmlDiff`."
msgstr "Initialise l'instance de :class:`HtmlDiff`."

#: library/difflib.rst:99
msgid ""
"*tabsize* is an optional keyword argument to specify tab stop spacing and "
"defaults to ``8``."
msgstr ""
"*tabsize* est un mot-clé optionnel pour spécifier l'espacement des "
"tabulations et sa valeur par défaut est ``8``."

#: library/difflib.rst:102
msgid ""
"*wrapcolumn* is an optional keyword to specify column number where lines are "
"broken and wrapped, defaults to ``None`` where lines are not wrapped."
msgstr ""
"*wrapcolumn* est un mot-clé optionnel pour spécifier le numéro de la colonne "
"où les lignes sont coupées pour être ré-agencées, la valeur par défaut est "
"``None`` lorsque les lignes ne sont pas ré-agencées."

#: library/difflib.rst:105
msgid ""
"*linejunk* and *charjunk* are optional keyword arguments passed into :func:"
"`ndiff` (used by :class:`HtmlDiff` to generate the side by side HTML "
"differences).  See :func:`ndiff` documentation for argument default values "
"and descriptions."
msgstr ""
"*linejunk* et *charjunk* sont des arguments de mots-clés optionnels passés "
"dans :func:`ndiff` (utilisés par :class:`HtmlDiff` pour générer les "
"différences HTML côte à côte). Voir la documentation de :func:`ndiff` pour "
"les valeurs par défaut des arguments et les descriptions."

#: library/difflib.rst:109
msgid "The following methods are public:"
msgstr "Les méthodes suivantes sont publiques :"

#: library/difflib.rst:114
msgid ""
"Compares *fromlines* and *tolines* (lists of strings) and returns a string "
"which is a complete HTML file containing a table showing line by line "
"differences with inter-line and intra-line changes highlighted."
msgstr ""
"Compare *fromlines* et *tolines* (listes de chaînes de caractères) et "
"renvoie une chaîne de caractères qui est un fichier HTML complet contenant "
"un tableau montrant les différences ligne par ligne avec les changements "
"inter-lignes et intralignes mis en évidence."

#: library/difflib.rst:118
msgid ""
"*fromdesc* and *todesc* are optional keyword arguments to specify from/to "
"file column header strings (both default to an empty string)."
msgstr ""
"*fromdesc* et *todesc* sont des arguments mot-clé optionnels pour spécifier "
"les chaînes d'en-tête des colonnes *from/to* du fichier (les deux sont des "
"chaînes vides par défaut)."

#: library/difflib.rst:121
msgid ""
"*context* and *numlines* are both optional keyword arguments. Set *context* "
"to ``True`` when contextual differences are to be shown, else the default is "
"``False`` to show the full files. *numlines* defaults to ``5``.  When "
"*context* is ``True`` *numlines* controls the number of context lines which "
"surround the difference highlights.  When *context* is ``False`` *numlines* "
"controls the number of lines which are shown before a difference highlight "
"when using the \"next\" hyperlinks (setting to zero would cause the \"next\" "
"hyperlinks to place the next difference highlight at the top of the browser "
"without any leading context)."
msgstr ""
"*context* et *numlines* sont tous deux des arguments mots-clés facultatifs. "
"Mettre *context* à ``True`` lorsque les différences contextuelles doivent "
"être affichées, sinon la valeur par défaut est ``False`` pour afficher les "
"fichiers complets. Les *numlines* ont pour valeur par défaut ``5``. Lorsque "
"*context* est `True``, *numlines* contrôle le nombre de lignes de contexte "
"qui entourent les différences mise en évidence. Lorsque *context* est "
"``False``, *numlines* contrôle le nombre de lignes qui sont affichées avant "
"un surlignage de différence lors de l'utilisation des hyperliens "
"« suivants » (un réglage à zéro ferait en sorte que les hyperliens "
"« suivants » placeraient le surlignage de différence suivant en haut du "
"navigateur sans aucun contexte introductif)."

#: library/difflib.rst:132
msgid ""
"*fromdesc* and *todesc* are interpreted as unescaped HTML and should be "
"properly escaped while receiving input from untrusted sources."
msgstr ""
"*fromdesc* et *todesc* sont interprétés comme du HTML non échappé et doivent "
"être correctement échappés lors de la réception de données provenant de "
"sources non fiables."

#: library/difflib.rst:135
msgid ""
"*charset* keyword-only argument was added.  The default charset of HTML "
"document changed from ``'ISO-8859-1'`` to ``'utf-8'``."
msgstr ""
"l'argument mot-clé *charset* a été ajouté. Le jeu de caractères par défaut "
"du document HTML est passé de ``'ISO-8859-1'`` à ``'utf-8'``."

#: library/difflib.rst:141
msgid ""
"Compares *fromlines* and *tolines* (lists of strings) and returns a string "
"which is a complete HTML table showing line by line differences with inter-"
"line and intra-line changes highlighted."
msgstr ""
"Compare *fromlines* et *tolines* (listes de chaînes) et renvoie une chaîne "
"qui est un tableau HTML complet montrant les différences ligne par ligne "
"avec les changements inter-lignes et intralignes mis en évidence."

#: library/difflib.rst:145
msgid ""
"The arguments for this method are the same as those for the :meth:"
"`make_file` method."
msgstr ""
"Les arguments pour cette méthode sont les mêmes que ceux de la méthode :meth:"
"`make_file`."

#: library/difflib.rst:148
msgid ""
":file:`Tools/scripts/diff.py` is a command-line front-end to this class and "
"contains a good example of its use."
msgstr ""
":file:`Tools/scripts/diff.py` est un frontal en ligne de commande de cette "
"classe et contient un bon exemple de son utilisation."

#: library/difflib.rst:154
msgid ""
"Compare *a* and *b* (lists of strings); return a delta (a :term:`generator` "
"generating the delta lines) in context diff format."
msgstr ""
"Compare *a* et *b* (listes de chaînes de caractères) ; renvoie un delta (un :"
"term:`generateur <generator>` générant les lignes delta) dans un format de "
"différence de contexte."

#: library/difflib.rst:157
#, fuzzy
msgid ""
"Context diffs are a compact way of showing just the lines that have changed "
"plus a few lines of context.  The changes are shown in a before/after "
"style.  The number of context lines is set by *n* which defaults to three."
msgstr ""
"Les différences de contexte sont une façon compacte de montrer seulement les "
"lignes qui ont changé plus quelques lignes de contexte.  Les changements "
"sont affichés dans un style avant/après.  Le nombre de lignes de contexte "
"est défini par *n*, qui est de trois par défaut."

#: library/difflib.rst:161
msgid ""
"By default, the diff control lines (those with ``***`` or ``---``) are "
"created with a trailing newline.  This is helpful so that inputs created "
"from :func:`io.IOBase.readlines` result in diffs that are suitable for use "
"with :func:`io.IOBase.writelines` since both the inputs and outputs have "
"trailing newlines."
msgstr ""
"Par défaut, les lignes de contrôle de la différence (celles avec ``***`` ou "
"``---``) sont créées avec un saut de ligne à la fin. Ceci est utile pour que "
"les entrées créées à partir de :func:`io.IOBase.readlines` résultent en des "
"différences qui peuvent être utilisées avec :func:`io.IOBase.writelines` "
"puisque les entrées et les sorties ont des nouvelles lignes de fin."

#: library/difflib.rst:167 library/difflib.rst:298
msgid ""
"For inputs that do not have trailing newlines, set the *lineterm* argument "
"to ``\"\"`` so that the output will be uniformly newline free."
msgstr ""
"Pour les entrées qui n'ont pas de retour à la ligne, mettre l'argument "
"*lineterm* à ``\"\"`` afin que la sortie soit uniformément sans retour à la "
"ligne."

#: library/difflib.rst:170 library/difflib.rst:301
msgid ""
"The context diff format normally has a header for filenames and modification "
"times.  Any or all of these may be specified using strings for *fromfile*, "
"*tofile*, *fromfiledate*, and *tofiledate*.  The modification times are "
"normally expressed in the ISO 8601 format. If not specified, the strings "
"default to blanks."
msgstr ""
"Le format de contexte de différence comporte normalement un en-tête pour les "
"noms de fichiers et les heures de modification. Tout ou partie de ces "
"éléments peuvent être spécifiés en utilisant les chaînes de caractères "
"*fromfile*, *tofile*, *fromfiledate* et *tofiledate*. Les heures de "
"modification sont normalement exprimées dans le format ISO 8601. Si elles ne "
"sont pas spécifiées, les chaînes de caractères sont par défaut vierges."

#: library/difflib.rst:193 library/difflib.rst:322
msgid "See :ref:`difflib-interface` for a more detailed example."
msgstr ""
"Voir :ref:`une interface de ligne de commandes pour difflib <difflib-"
"interface>` pour un exemple plus détaillé."

#: library/difflib.rst:198
msgid ""
"Return a list of the best \"good enough\" matches.  *word* is a sequence for "
"which close matches are desired (typically a string), and *possibilities* is "
"a list of sequences against which to match *word* (typically a list of "
"strings)."
msgstr ""

#: library/difflib.rst:202
msgid ""
"Optional argument *n* (default ``3``) is the maximum number of close matches "
"to return; *n* must be greater than ``0``."
msgstr ""

#: library/difflib.rst:205
msgid ""
"Optional argument *cutoff* (default ``0.6``) is a float in the range [0, 1]. "
"Possibilities that don't score at least that similar to *word* are ignored."
msgstr ""

#: library/difflib.rst:208
msgid ""
"The best (no more than *n*) matches among the possibilities are returned in "
"a list, sorted by similarity score, most similar first."
msgstr ""

#: library/difflib.rst:224
msgid ""
"Compare *a* and *b* (lists of strings); return a :class:`Differ`\\ -style "
"delta (a :term:`generator` generating the delta lines)."
msgstr ""

#: library/difflib.rst:227
msgid ""
"Optional keyword parameters *linejunk* and *charjunk* are filtering "
"functions (or ``None``):"
msgstr ""

#: library/difflib.rst:230
msgid ""
"*linejunk*: A function that accepts a single string argument, and returns "
"true if the string is junk, or false if not. The default is ``None``. There "
"is also a module-level function :func:`IS_LINE_JUNK`, which filters out "
"lines without visible characters, except for at most one pound character "
"(``'#'``) -- however the underlying :class:`SequenceMatcher` class does a "
"dynamic analysis of which lines are so frequent as to constitute noise, and "
"this usually works better than using this function."
msgstr ""

#: library/difflib.rst:238
msgid ""
"*charjunk*: A function that accepts a character (a string of length 1), and "
"returns if the character is junk, or false if not. The default is module-"
"level function :func:`IS_CHARACTER_JUNK`, which filters out whitespace "
"characters (a blank or tab; it's a bad idea to include newline in this!)."
msgstr ""

#: library/difflib.rst:243
msgid ""
":file:`Tools/scripts/ndiff.py` is a command-line front-end to this function."
msgstr ""

#: library/difflib.rst:261
msgid "Return one of the two sequences that generated a delta."
msgstr ""

#: library/difflib.rst:263
msgid ""
"Given a *sequence* produced by :meth:`Differ.compare` or :func:`ndiff`, "
"extract lines originating from file 1 or 2 (parameter *which*), stripping "
"off line prefixes."
msgstr ""

#: library/difflib.rst:267
msgid "Example:"
msgstr "Exemple :"

#: library/difflib.rst:284
msgid ""
"Compare *a* and *b* (lists of strings); return a delta (a :term:`generator` "
"generating the delta lines) in unified diff format."
msgstr ""

#: library/difflib.rst:287
msgid ""
"Unified diffs are a compact way of showing just the lines that have changed "
"plus a few lines of context.  The changes are shown in an inline style "
"(instead of separate before/after blocks).  The number of context lines is "
"set by *n* which defaults to three."
msgstr ""

#: library/difflib.rst:292
msgid ""
"By default, the diff control lines (those with ``---``, ``+++``, or ``@@``) "
"are created with a trailing newline.  This is helpful so that inputs created "
"from :func:`io.IOBase.readlines` result in diffs that are suitable for use "
"with :func:`io.IOBase.writelines` since both the inputs and outputs have "
"trailing newlines."
msgstr ""

#: library/difflib.rst:326
msgid ""
"Compare *a* and *b* (lists of bytes objects) using *dfunc*; yield a sequence "
"of delta lines (also bytes) in the format returned by *dfunc*. *dfunc* must "
"be a callable, typically either :func:`unified_diff` or :func:`context_diff`."
msgstr ""

#: library/difflib.rst:331
msgid ""
"Allows you to compare data with unknown or inconsistent encoding. All inputs "
"except *n* must be bytes objects, not str. Works by losslessly converting "
"all inputs (except *n*) to str, and calling ``dfunc(a, b, fromfile, tofile, "
"fromfiledate, tofiledate, n, lineterm)``. The output of *dfunc* is then "
"converted back to bytes, so the delta lines that you receive have the same "
"unknown/inconsistent encodings as *a* and *b*."
msgstr ""

#: library/difflib.rst:342
msgid ""
"Return ``True`` for ignorable lines.  The line *line* is ignorable if *line* "
"is blank or contains a single ``'#'``, otherwise it is not ignorable.  Used "
"as a default for parameter *linejunk* in :func:`ndiff` in older versions."
msgstr ""

#: library/difflib.rst:349
msgid ""
"Return ``True`` for ignorable characters.  The character *ch* is ignorable "
"if *ch* is a space or tab, otherwise it is not ignorable.  Used as a default "
"for parameter *charjunk* in :func:`ndiff`."
msgstr ""

#: library/difflib.rst:357
msgid ""
"`Pattern Matching: The Gestalt Approach <http://www.drdobbs.com/database/"
"pattern-matching-the-gestalt-approach/184407970>`_"
msgstr ""

#: library/difflib.rst:357
msgid ""
"Discussion of a similar algorithm by John W. Ratcliff and D. E. Metzener. "
"This was published in `Dr. Dobb's Journal <http://www.drdobbs.com/>`_ in "
"July, 1988."
msgstr ""

#: library/difflib.rst:364
msgid "SequenceMatcher Objects"
msgstr ""

#: library/difflib.rst:366
msgid "The :class:`SequenceMatcher` class has this constructor:"
msgstr ""

#: library/difflib.rst:371
msgid ""
"Optional argument *isjunk* must be ``None`` (the default) or a one-argument "
"function that takes a sequence element and returns true if and only if the "
"element is \"junk\" and should be ignored. Passing ``None`` for *isjunk* is "
"equivalent to passing ``lambda x: False``; in other words, no elements are "
"ignored. For example, pass::"
msgstr ""

#: library/difflib.rst:379
msgid ""
"if you're comparing lines as sequences of characters, and don't want to "
"synch up on blanks or hard tabs."
msgstr ""

#: library/difflib.rst:382
msgid ""
"The optional arguments *a* and *b* are sequences to be compared; both "
"default to empty strings.  The elements of both sequences must be :term:"
"`hashable`."
msgstr ""

#: library/difflib.rst:385
msgid ""
"The optional argument *autojunk* can be used to disable the automatic junk "
"heuristic."
msgstr ""

#: library/difflib.rst:391
msgid ""
"SequenceMatcher objects get three data attributes: *bjunk* is the set of "
"elements of *b* for which *isjunk* is ``True``; *bpopular* is the set of non-"
"junk elements considered popular by the heuristic (if it is not disabled); "
"*b2j* is a dict mapping the remaining elements of *b* to a list of positions "
"where they occur. All three are reset whenever *b* is reset with :meth:"
"`set_seqs` or :meth:`set_seq2`."
msgstr ""

#: library/difflib.rst:398
msgid "The *bjunk* and *bpopular* attributes."
msgstr ""

#: library/difflib.rst:401
msgid ":class:`SequenceMatcher` objects have the following methods:"
msgstr ""

#: library/difflib.rst:405
msgid "Set the two sequences to be compared."
msgstr ""

#: library/difflib.rst:407
msgid ""
":class:`SequenceMatcher` computes and caches detailed information about the "
"second sequence, so if you want to compare one sequence against many "
"sequences, use :meth:`set_seq2` to set the commonly used sequence once and "
"call :meth:`set_seq1` repeatedly, once for each of the other sequences."
msgstr ""

#: library/difflib.rst:415
msgid ""
"Set the first sequence to be compared.  The second sequence to be compared "
"is not changed."
msgstr ""

#: library/difflib.rst:421
msgid ""
"Set the second sequence to be compared.  The first sequence to be compared "
"is not changed."
msgstr ""

#: library/difflib.rst:427
msgid "Find longest matching block in ``a[alo:ahi]`` and ``b[blo:bhi]``."
msgstr ""

#: library/difflib.rst:429
msgid ""
"If *isjunk* was omitted or ``None``, :meth:`find_longest_match` returns "
"``(i, j, k)`` such that ``a[i:i+k]`` is equal to ``b[j:j+k]``, where ``alo "
"<= i <= i+k <= ahi`` and ``blo <= j <= j+k <= bhi``. For all ``(i', j', "
"k')`` meeting those conditions, the additional conditions ``k >= k'``, ``i "
"<= i'``, and if ``i == i'``, ``j <= j'`` are also met. In other words, of "
"all maximal matching blocks, return one that starts earliest in *a*, and of "
"all those maximal matching blocks that start earliest in *a*, return the one "
"that starts earliest in *b*."
msgstr ""

#: library/difflib.rst:442
msgid ""
"If *isjunk* was provided, first the longest matching block is determined as "
"above, but with the additional restriction that no junk element appears in "
"the block.  Then that block is extended as far as possible by matching "
"(only) junk elements on both sides. So the resulting block never matches on "
"junk except as identical junk happens to be adjacent to an interesting match."
msgstr ""

#: library/difflib.rst:449
msgid ""
"Here's the same example as before, but considering blanks to be junk. That "
"prevents ``' abcd'`` from matching the ``' abcd'`` at the tail end of the "
"second sequence directly.  Instead only the ``'abcd'`` can match, and "
"matches the leftmost ``'abcd'`` in the second sequence:"
msgstr ""

#: library/difflib.rst:458
msgid "If no blocks match, this returns ``(alo, blo, 0)``."
msgstr ""

#: library/difflib.rst:460
msgid "This method returns a :term:`named tuple` ``Match(a, b, size)``."
msgstr ""

#: library/difflib.rst:462
msgid "Added default arguments."
msgstr ""

#: library/difflib.rst:468
msgid ""
"Return list of triples describing non-overlapping matching subsequences. "
"Each triple is of the form ``(i, j, n)``, and means that ``a[i:i+n] == b[j:j"
"+n]``.  The triples are monotonically increasing in *i* and *j*."
msgstr ""

#: library/difflib.rst:473
msgid ""
"The last triple is a dummy, and has the value ``(len(a), len(b), 0)``.  It "
"is the only triple with ``n == 0``.  If ``(i, j, n)`` and ``(i', j', n')`` "
"are adjacent triples in the list, and the second is not the last triple in "
"the list, then ``i+n < i'`` or ``j+n < j'``; in other words, adjacent "
"triples always describe non-adjacent equal blocks."
msgstr ""

#: library/difflib.rst:490
msgid ""
"Return list of 5-tuples describing how to turn *a* into *b*. Each tuple is "
"of the form ``(tag, i1, i2, j1, j2)``.  The first tuple has ``i1 == j1 == "
"0``, and remaining tuples have *i1* equal to the *i2* from the preceding "
"tuple, and, likewise, *j1* equal to the previous *j2*."
msgstr ""

#: library/difflib.rst:495
msgid "The *tag* values are strings, with these meanings:"
msgstr ""

#: library/difflib.rst:498
msgid "Value"
msgstr "Valeur"

#: library/difflib.rst:500
msgid "``'replace'``"
msgstr "``'replace'``"

#: library/difflib.rst:500
msgid "``a[i1:i2]`` should be replaced by ``b[j1:j2]``."
msgstr ""

#: library/difflib.rst:503
msgid "``'delete'``"
msgstr "``'delete'``"

#: library/difflib.rst:503
msgid "``a[i1:i2]`` should be deleted.  Note that ``j1 == j2`` in this case."
msgstr ""

#: library/difflib.rst:506
msgid "``'insert'``"
msgstr "``'insert'``"

#: library/difflib.rst:506
msgid ""
"``b[j1:j2]`` should be inserted at ``a[i1:i1]``. Note that ``i1 == i2`` in "
"this case."
msgstr ""

#: library/difflib.rst:510
msgid "``'equal'``"
msgstr "``'equal'``"

#: library/difflib.rst:510
msgid "``a[i1:i2] == b[j1:j2]`` (the sub-sequences are equal)."
msgstr ""

#: library/difflib.rst:514
msgid "For example::"
msgstr "Par exemple ::"

#: library/difflib.rst:531
msgid "Return a :term:`generator` of groups with up to *n* lines of context."
msgstr ""

#: library/difflib.rst:533
msgid ""
"Starting with the groups returned by :meth:`get_opcodes`, this method splits "
"out smaller change clusters and eliminates intervening ranges which have no "
"changes."
msgstr ""

#: library/difflib.rst:537
msgid "The groups are returned in the same format as :meth:`get_opcodes`."
msgstr ""

#: library/difflib.rst:542
msgid ""
"Return a measure of the sequences' similarity as a float in the range [0, 1]."
msgstr ""

#: library/difflib.rst:545
msgid ""
"Where T is the total number of elements in both sequences, and M is the "
"number of matches, this is 2.0\\*M / T. Note that this is ``1.0`` if the "
"sequences are identical, and ``0.0`` if they have nothing in common."
msgstr ""

#: library/difflib.rst:549
msgid ""
"This is expensive to compute if :meth:`get_matching_blocks` or :meth:"
"`get_opcodes` hasn't already been called, in which case you may want to try :"
"meth:`quick_ratio` or :meth:`real_quick_ratio` first to get an upper bound."
msgstr ""

#: library/difflib.rst:556
msgid ""
"Caution: The result of a :meth:`ratio` call may depend on the order of the "
"arguments. For instance::"
msgstr ""

#: library/difflib.rst:567
msgid "Return an upper bound on :meth:`ratio` relatively quickly."
msgstr ""

#: library/difflib.rst:572
msgid "Return an upper bound on :meth:`ratio` very quickly."
msgstr ""

#: library/difflib.rst:575
msgid ""
"The three methods that return the ratio of matching to total characters can "
"give different results due to differing levels of approximation, although :"
"meth:`quick_ratio` and :meth:`real_quick_ratio` are always at least as large "
"as :meth:`ratio`:"
msgstr ""

#: library/difflib.rst:592
msgid "SequenceMatcher Examples"
msgstr ""

#: library/difflib.rst:594
msgid "This example compares two strings, considering blanks to be \"junk\":"
msgstr ""

#: library/difflib.rst:600
msgid ""
":meth:`ratio` returns a float in [0, 1], measuring the similarity of the "
"sequences.  As a rule of thumb, a :meth:`ratio` value over 0.6 means the "
"sequences are close matches:"
msgstr ""

#: library/difflib.rst:607
msgid ""
"If you're only interested in where the sequences match, :meth:"
"`get_matching_blocks` is handy:"
msgstr ""

#: library/difflib.rst:616
msgid ""
"Note that the last tuple returned by :meth:`get_matching_blocks` is always a "
"dummy, ``(len(a), len(b), 0)``, and this is the only case in which the last "
"tuple element (number of elements matched) is ``0``."
msgstr ""

#: library/difflib.rst:620
msgid ""
"If you want to know how to change the first sequence into the second, use :"
"meth:`get_opcodes`:"
msgstr ""

#: library/difflib.rst:631
msgid ""
"The :func:`get_close_matches` function in this module which shows how simple "
"code building on :class:`SequenceMatcher` can be used to do useful work."
msgstr ""

#: library/difflib.rst:635
msgid ""
"`Simple version control recipe <https://code.activestate.com/recipes/576729/"
">`_ for a small application built with :class:`SequenceMatcher`."
msgstr ""

#: library/difflib.rst:643
msgid "Differ Objects"
msgstr ""

#: library/difflib.rst:645
msgid ""
"Note that :class:`Differ`\\ -generated deltas make no claim to be "
"**minimal** diffs. To the contrary, minimal diffs are often counter-"
"intuitive, because they synch up anywhere possible, sometimes accidental "
"matches 100 pages apart. Restricting synch points to contiguous matches "
"preserves some notion of locality, at the occasional cost of producing a "
"longer diff."
msgstr ""

#: library/difflib.rst:651
msgid "The :class:`Differ` class has this constructor:"
msgstr ""

#: library/difflib.rst:657
msgid ""
"Optional keyword parameters *linejunk* and *charjunk* are for filter "
"functions (or ``None``):"
msgstr ""

#: library/difflib.rst:660
msgid ""
"*linejunk*: A function that accepts a single string argument, and returns "
"true if the string is junk.  The default is ``None``, meaning that no line "
"is considered junk."
msgstr ""

#: library/difflib.rst:664
msgid ""
"*charjunk*: A function that accepts a single character argument (a string of "
"length 1), and returns true if the character is junk. The default is "
"``None``, meaning that no character is considered junk."
msgstr ""

#: library/difflib.rst:668
msgid ""
"These junk-filtering functions speed up matching to find differences and do "
"not cause any differing lines or characters to be ignored.  Read the "
"description of the :meth:`~SequenceMatcher.find_longest_match` method's "
"*isjunk* parameter for an explanation."
msgstr ""

#: library/difflib.rst:674
msgid ""
":class:`Differ` objects are used (deltas generated) via a single method:"
msgstr ""

#: library/difflib.rst:679
msgid ""
"Compare two sequences of lines, and generate the delta (a sequence of lines)."
msgstr ""

#: library/difflib.rst:681
msgid ""
"Each sequence must contain individual single-line strings ending with "
"newlines.  Such sequences can be obtained from the :meth:`~io.IOBase."
"readlines` method of file-like objects.  The delta generated also consists "
"of newline-terminated strings, ready to be printed as-is via the :meth:`~io."
"IOBase.writelines` method of a file-like object."
msgstr ""

#: library/difflib.rst:692
msgid "Differ Example"
msgstr ""

#: library/difflib.rst:694
msgid ""
"This example compares two texts. First we set up the texts, sequences of "
"individual single-line strings ending with newlines (such sequences can also "
"be obtained from the :meth:`~io.BaseIO.readlines` method of file-like "
"objects):"
msgstr ""

#: library/difflib.rst:713
msgid "Next we instantiate a Differ object:"
msgstr ""

#: library/difflib.rst:717
msgid ""
"Note that when instantiating a :class:`Differ` object we may pass functions "
"to filter out line and character \"junk.\"  See the :meth:`Differ` "
"constructor for details."
msgstr ""

#: library/difflib.rst:721
msgid "Finally, we compare the two:"
msgstr ""

#: library/difflib.rst:725
msgid "``result`` is a list of strings, so let's pretty-print it:"
msgstr ""

#: library/difflib.rst:740
msgid "As a single multi-line string it looks like this:"
msgstr ""

#: library/difflib.rst:759
msgid "A command-line interface to difflib"
msgstr ""

#: library/difflib.rst:761
msgid ""
"This example shows how to use difflib to create a ``diff``-like utility. It "
"is also contained in the Python source distribution, as :file:`Tools/scripts/"
"diff.py`."
msgstr ""
