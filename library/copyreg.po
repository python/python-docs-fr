# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-29 16:06+0100\n"
"PO-Revision-Date: 2018-11-23 15:14+0100\n"
"Last-Translator: Jules Lasne <jules.lasne@gmail.com>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.2\n"

#: ../Doc/library/copyreg.rst:2
msgid ":mod:`copyreg` --- Register :mod:`pickle` support functions"
msgstr ":mod:`copyreg` --- Enregistre les fonctions support de :mod:`pickle`"

#: ../Doc/library/copyreg.rst:7
msgid "**Source code:** :source:`Lib/copyreg.py`"
msgstr "**Code source :** :source:`Lib/copyreg.py`"

#: ../Doc/library/copyreg.rst:15
msgid ""
"The :mod:`copyreg` module offers a way to define functions used while "
"pickling specific objects.  The :mod:`pickle` and :mod:`copy` modules use "
"those functions when pickling/copying those objects.  The module provides "
"configuration information about object constructors which are not classes. "
"Such constructors may be factory functions or class instances."
msgstr ""
"Le module :mod:`copyreg` permet de définir des fonctions utilisées durant la "
"sérialisation avec *pickle* de certains objets. Les modules :mod:`pickle` "
"et :mod:`copy` utilisent ces fonctions lors d'une sérialisation ou d'une "
"copie de ces objets. Le module propose alors des informations de "
"configuration à propos de constructeurs d'objets qui ne sont pas des "
"classes. De tels constructeurs peuvent être des instances de classes ou des "
"fonctions."

#: ../Doc/library/copyreg.rst:24
msgid ""
"Declares *object* to be a valid constructor.  If *object* is not callable "
"(and hence not valid as a constructor), raises :exc:`TypeError`."
msgstr ""
"Déclare *object* comme étant un constructeur valide. Si *object* n'est pas "
"appelable (et n'est donc pas un constructeur valide), l'erreur :exc:"
"`TypeError` est levée."

#: ../Doc/library/copyreg.rst:30
msgid ""
"Declares that *function* should be used as a \"reduction\" function for "
"objects of type *type*.  *function* should return either a string or a tuple "
"containing two or three elements."
msgstr ""
"Déclare que *function* devrait être utilisée en tant que fonction de "
"*réduction* pour des objets de type *type*. *function* doit soit retourner "
"une chaîne de caractères soit un tuple qui contiens deux ou trois éléments."

#: ../Doc/library/copyreg.rst:34
msgid ""
"The optional *constructor* parameter, if provided, is a callable object "
"which can be used to reconstruct the object when called with the tuple of "
"arguments returned by *function* at pickling time.  :exc:`TypeError` will be "
"raised if *object* is a class or *constructor* is not callable."
msgstr ""
"Le paramètre optionnel *contructor*, s'il est donné, est un objet appelable "
"qui peux être utilisé pour reconstruire l’objet lorsqu'il est appelé avec un "
"tuple d'arguments retournés par *function* durant la sérialisation avec "
"*pickle*. Une exception :exc:`TypeError` sera levée si *object* est une "
"classe ou si *constructor* n'est pas appelable."

#: ../Doc/library/copyreg.rst:39
msgid ""
"See the :mod:`pickle` module for more details on the interface expected of "
"*function* and *constructor*.  Note that the :attr:`~pickle.Pickler."
"dispatch_table` attribute of a pickler object or subclass of :class:`pickle."
"Pickler` can also be used for declaring reduction functions."
msgstr ""
"Voir le module :mod:`pickle` pour plus de détails sur l'interface attendue "
"de *function* et *constructor*. Notez que l’attribut :attr:`~pickle.Pickler."
"dispatch_table` d'un objet ``pickler`` ou d'une sous-classe de :class:"
"`pickle.Pickler` peut aussi être utilisée pour déclarer des fonctions "
"réductrices."

#: ../Doc/library/copyreg.rst:46
msgid "Example"
msgstr "Exemple"

#: ../Doc/library/copyreg.rst:48
msgid ""
"The example below would like to show how to register a pickle function and "
"how it will be used:"
msgstr ""
"L'exemple si-dessous essaye de démontrer comment enregistrer une fonction "
"*pickle* et comment elle sera utilisée :"
