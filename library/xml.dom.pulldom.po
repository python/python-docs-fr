# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-24 09:01+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: library/xml.dom.pulldom.rst:2
#, fuzzy
msgid ":mod:`xml.dom.pulldom` --- Support for building partial DOM trees"
msgstr ""
":mod:`xml.dom.pulldom`: gestion de la construction partiel des arbres DOM"

#: library/xml.dom.pulldom.rst:9
msgid "**Source code:** :source:`Lib/xml/dom/pulldom.py`"
msgstr ""

#: library/xml.dom.pulldom.rst:13
msgid ""
"The :mod:`xml.dom.pulldom` module provides a \"pull parser\" which can also "
"be asked to produce DOM-accessible fragments of the document where "
"necessary. The basic concept involves pulling \"events\" from a stream of "
"incoming XML and processing them. In contrast to SAX which also employs an "
"event-driven processing model together with callbacks, the user of a pull "
"parser is responsible for explicitly pulling events from the stream, looping "
"over those events until either processing is finished or an error condition "
"occurs."
msgstr ""

#: library/xml.dom.pulldom.rst:24
#, fuzzy
msgid ""
"The :mod:`xml.dom.pulldom` module is not secure against maliciously "
"constructed data.  If you need to parse untrusted or unauthenticated data "
"see :ref:`xml-vulnerabilities`."
msgstr ""
"Le module :mod:`xml.sax` n'est pas sécurisé contre les données construites "
"de façon malveillante. Si vous avez besoin d'analyser des données non "
"sécurisées ou non authentifiées, voir :ref:`xml-vulnerabilities`."

#: library/xml.dom.pulldom.rst:30
msgid ""
"The SAX parser no longer processes general external entities by default to "
"increase security by default. To enable processing of external entities, "
"pass a custom parser instance in::"
msgstr ""

#: library/xml.dom.pulldom.rst:43
msgid "Example::"
msgstr "Exemple ::"

#: library/xml.dom.pulldom.rst:54
msgid "``event`` is a constant and can be one of:"
msgstr ""

#: library/xml.dom.pulldom.rst:56
msgid ":data:`START_ELEMENT`"
msgstr ":data:`START_ELEMENT`"

#: library/xml.dom.pulldom.rst:57
msgid ":data:`END_ELEMENT`"
msgstr ":data:`END_ELEMENT`"

#: library/xml.dom.pulldom.rst:58
msgid ":data:`COMMENT`"
msgstr ":data:`COMMENT`"

#: library/xml.dom.pulldom.rst:59
msgid ":data:`START_DOCUMENT`"
msgstr ":data:`START_DOCUMENT`"

#: library/xml.dom.pulldom.rst:60
msgid ":data:`END_DOCUMENT`"
msgstr ":data:`END_DOCUMENT`"

#: library/xml.dom.pulldom.rst:61
msgid ":data:`CHARACTERS`"
msgstr ":data:`CHARACTERS`"

#: library/xml.dom.pulldom.rst:62
msgid ":data:`PROCESSING_INSTRUCTION`"
msgstr ":data:`PROCESSING_INSTRUCTION`"

#: library/xml.dom.pulldom.rst:63
msgid ":data:`IGNORABLE_WHITESPACE`"
msgstr ":data:`IGNORABLE_WHITESPACE`"

#: library/xml.dom.pulldom.rst:65
msgid ""
"``node`` is an object of type :class:`xml.dom.minidom.Document`, :class:`xml."
"dom.minidom.Element` or :class:`xml.dom.minidom.Text`."
msgstr ""

#: library/xml.dom.pulldom.rst:68
msgid ""
"Since the document is treated as a \"flat\" stream of events, the document "
"\"tree\" is implicitly traversed and the desired elements are found "
"regardless of their depth in the tree. In other words, one does not need to "
"consider hierarchical issues such as recursive searching of the document "
"nodes, although if the context of elements were important, one would either "
"need to maintain some context-related state (i.e. remembering where one is "
"in the document at any given point) or to make use of the :func:"
"`DOMEventStream.expandNode` method and switch to DOM-related processing."
msgstr ""

#: library/xml.dom.pulldom.rst:80 library/xml.dom.pulldom.rst:85
msgid "Subclass of :class:`xml.sax.handler.ContentHandler`."
msgstr ""

#: library/xml.dom.pulldom.rst:90
msgid ""
"Return a :class:`DOMEventStream` from the given input. *stream_or_string* "
"may be either a file name, or a file-like object. *parser*, if given, must "
"be an :class:`~xml.sax.xmlreader.XMLReader` object. This function will "
"change the document handler of the parser and activate namespace support; "
"other parser configuration (like setting an entity resolver) must have been "
"done in advance."
msgstr ""

#: library/xml.dom.pulldom.rst:97
msgid ""
"If you have XML in a string, you can use the :func:`parseString` function "
"instead:"
msgstr ""

#: library/xml.dom.pulldom.rst:101
msgid ""
"Return a :class:`DOMEventStream` that represents the (Unicode) *string*."
msgstr ""

#: library/xml.dom.pulldom.rst:105
msgid "Default value for the *bufsize* parameter to :func:`parse`."
msgstr ""

#: library/xml.dom.pulldom.rst:107
msgid ""
"The value of this variable can be changed before calling :func:`parse` and "
"the new value will take effect."
msgstr ""

#: library/xml.dom.pulldom.rst:113
msgid "DOMEventStream Objects"
msgstr ""

#: library/xml.dom.pulldom.rst:117
msgid "Support for :meth:`sequence protocol <__getitem__>` is deprecated."
msgstr ""

#: library/xml.dom.pulldom.rst:122
msgid ""
"Return a tuple containing *event* and the current *node* as :class:`xml.dom."
"minidom.Document` if event equals :data:`START_DOCUMENT`, :class:`xml.dom."
"minidom.Element` if event equals :data:`START_ELEMENT` or :data:"
"`END_ELEMENT` or :class:`xml.dom.minidom.Text` if event equals :data:"
"`CHARACTERS`. The current node does not contain information about its "
"children, unless :func:`expandNode` is called."
msgstr ""

#: library/xml.dom.pulldom.rst:132
msgid "Expands all children of *node* into *node*. Example::"
msgstr ""
