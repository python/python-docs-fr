# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-28 15:29+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/tarfile.rst:2
msgid ":mod:`tarfile` --- Read and write tar archive files"
msgstr ""

#: ../Doc/library/tarfile.rst:10
msgid "**Source code:** :source:`Lib/tarfile.py`"
msgstr "**Code source :** :source:`Lib/tarfile.py`"

#: ../Doc/library/tarfile.rst:14
msgid ""
"The :mod:`tarfile` module makes it possible to read and write tar archives, "
"including those using gzip, bz2 and lzma compression. Use the :mod:`zipfile` "
"module to read or write :file:`.zip` files, or the higher-level functions "
"in :ref:`shutil <archiving-operations>`."
msgstr ""

#: ../Doc/library/tarfile.rst:19
msgid "Some facts and figures:"
msgstr ""

#: ../Doc/library/tarfile.rst:21
msgid ""
"reads and writes :mod:`gzip`, :mod:`bz2` and :mod:`lzma` compressed archives "
"if the respective modules are available."
msgstr ""

#: ../Doc/library/tarfile.rst:24
msgid "read/write support for the POSIX.1-1988 (ustar) format."
msgstr ""

#: ../Doc/library/tarfile.rst:26
msgid ""
"read/write support for the GNU tar format including *longname* and "
"*longlink* extensions, read-only support for all variants of the *sparse* "
"extension including restoration of sparse files."
msgstr ""

#: ../Doc/library/tarfile.rst:30
msgid "read/write support for the POSIX.1-2001 (pax) format."
msgstr ""

#: ../Doc/library/tarfile.rst:32
msgid ""
"handles directories, regular files, hardlinks, symbolic links, fifos, "
"character devices and block devices and is able to acquire and restore file "
"information like timestamp, access permissions and owner."
msgstr ""

#: ../Doc/library/tarfile.rst:36
msgid "Added support for :mod:`lzma` compression."
msgstr ""

#: ../Doc/library/tarfile.rst:42
msgid ""
"Return a :class:`TarFile` object for the pathname *name*. For detailed "
"information on :class:`TarFile` objects and the keyword arguments that are "
"allowed, see :ref:`tarfile-objects`."
msgstr ""

#: ../Doc/library/tarfile.rst:46
msgid ""
"*mode* has to be a string of the form ``'filemode[:compression]'``, it "
"defaults to ``'r'``. Here is a full list of mode combinations:"
msgstr ""

#: ../Doc/library/tarfile.rst:50
msgid "mode"
msgstr ""

#: ../Doc/library/tarfile.rst:50
msgid "action"
msgstr "action"

#: ../Doc/library/tarfile.rst:52
msgid "``'r' or 'r:*'``"
msgstr "``'r' ou 'r:*'``"

#: ../Doc/library/tarfile.rst:52
msgid "Open for reading with transparent compression (recommended)."
msgstr ""

#: ../Doc/library/tarfile.rst:55
msgid "``'r:'``"
msgstr "``'r:'``"

#: ../Doc/library/tarfile.rst:55
msgid "Open for reading exclusively without compression."
msgstr ""

#: ../Doc/library/tarfile.rst:58
msgid "``'r:gz'``"
msgstr "``'r:gz'``"

#: ../Doc/library/tarfile.rst:58
msgid "Open for reading with gzip compression."
msgstr ""

#: ../Doc/library/tarfile.rst:60
msgid "``'r:bz2'``"
msgstr "``'r:bz2'``"

#: ../Doc/library/tarfile.rst:60
msgid "Open for reading with bzip2 compression."
msgstr ""

#: ../Doc/library/tarfile.rst:62
msgid "``'r:xz'``"
msgstr "``'r:xz'``"

#: ../Doc/library/tarfile.rst:62
msgid "Open for reading with lzma compression."
msgstr ""

#: ../Doc/library/tarfile.rst:64
msgid "``'x'`` or ``'x:'``"
msgstr "``'x'`` ou ``'x:'``"

#: ../Doc/library/tarfile.rst:64
msgid ""
"Create a tarfile exclusively without compression. Raise an :exc:"
"`FileExistsError` exception if it already exists."
msgstr ""

#: ../Doc/library/tarfile.rst:69
msgid "``'x:gz'``"
msgstr "``'x:gz'``"

#: ../Doc/library/tarfile.rst:69
msgid ""
"Create a tarfile with gzip compression. Raise an :exc:`FileExistsError` "
"exception if it already exists."
msgstr ""

#: ../Doc/library/tarfile.rst:73
msgid "``'x:bz2'``"
msgstr "``'x:bz2'``"

#: ../Doc/library/tarfile.rst:73
msgid ""
"Create a tarfile with bzip2 compression. Raise an :exc:`FileExistsError` "
"exception if it already exists."
msgstr ""

#: ../Doc/library/tarfile.rst:77
msgid "``'x:xz'``"
msgstr "``'x:xz'``"

#: ../Doc/library/tarfile.rst:77
msgid ""
"Create a tarfile with lzma compression. Raise an :exc:`FileExistsError` "
"exception if it already exists."
msgstr ""

#: ../Doc/library/tarfile.rst:81
msgid "``'a' or 'a:'``"
msgstr "``'a' ou 'a:'``"

#: ../Doc/library/tarfile.rst:81
msgid ""
"Open for appending with no compression. The file is created if it does not "
"exist."
msgstr ""

#: ../Doc/library/tarfile.rst:84
msgid "``'w' or 'w:'``"
msgstr "``'w' ou 'w:'``"

#: ../Doc/library/tarfile.rst:84
msgid "Open for uncompressed writing."
msgstr ""

#: ../Doc/library/tarfile.rst:86
msgid "``'w:gz'``"
msgstr "``'w:gz'``"

#: ../Doc/library/tarfile.rst:86
msgid "Open for gzip compressed writing."
msgstr ""

#: ../Doc/library/tarfile.rst:88
msgid "``'w:bz2'``"
msgstr "``'w:bz2'``"

#: ../Doc/library/tarfile.rst:88
msgid "Open for bzip2 compressed writing."
msgstr ""

#: ../Doc/library/tarfile.rst:90
msgid "``'w:xz'``"
msgstr "``'w:xz'``"

#: ../Doc/library/tarfile.rst:90
msgid "Open for lzma compressed writing."
msgstr ""

#: ../Doc/library/tarfile.rst:93
msgid ""
"Note that ``'a:gz'``, ``'a:bz2'`` or ``'a:xz'`` is not possible. If *mode* "
"is not suitable to open a certain (compressed) file for reading, :exc:"
"`ReadError` is raised. Use *mode* ``'r'`` to avoid this.  If a compression "
"method is not supported, :exc:`CompressionError` is raised."
msgstr ""

#: ../Doc/library/tarfile.rst:98
msgid ""
"If *fileobj* is specified, it is used as an alternative to a :term:`file "
"object` opened in binary mode for *name*. It is supposed to be at position 0."
msgstr ""

#: ../Doc/library/tarfile.rst:101
msgid ""
"For modes ``'w:gz'``, ``'r:gz'``, ``'w:bz2'``, ``'r:bz2'``, ``'x:gz'``, ``'x:"
"bz2'``, :func:`tarfile.open` accepts the keyword argument *compresslevel* "
"(default ``9``) to specify the compression level of the file."
msgstr ""

#: ../Doc/library/tarfile.rst:105
msgid ""
"For special purposes, there is a second format for *mode*: ``'filemode|"
"[compression]'``.  :func:`tarfile.open` will return a :class:`TarFile` "
"object that processes its data as a stream of blocks.  No random seeking "
"will be done on the file. If given, *fileobj* may be any object that has a :"
"meth:`read` or :meth:`write` method (depending on the *mode*). *bufsize* "
"specifies the blocksize and defaults to ``20 * 512`` bytes. Use this variant "
"in combination with e.g. ``sys.stdin``, a socket :term:`file object` or a "
"tape device. However, such a :class:`TarFile` object is limited in that it "
"does not allow random access, see :ref:`tar-examples`.  The currently "
"possible modes:"
msgstr ""

#: ../Doc/library/tarfile.rst:117
msgid "Mode"
msgstr ""

#: ../Doc/library/tarfile.rst:117
msgid "Action"
msgstr ""

#: ../Doc/library/tarfile.rst:119
msgid "``'r|*'``"
msgstr "``'r|*'``"

#: ../Doc/library/tarfile.rst:119
msgid "Open a *stream* of tar blocks for reading with transparent compression."
msgstr ""

#: ../Doc/library/tarfile.rst:122
msgid "``'r|'``"
msgstr "``'r|'``"

#: ../Doc/library/tarfile.rst:122
msgid "Open a *stream* of uncompressed tar blocks for reading."
msgstr ""

#: ../Doc/library/tarfile.rst:125
msgid "``'r|gz'``"
msgstr "``'r|gz'``"

#: ../Doc/library/tarfile.rst:125
msgid "Open a gzip compressed *stream* for reading."
msgstr ""

#: ../Doc/library/tarfile.rst:128
msgid "``'r|bz2'``"
msgstr "``'r|bz2'``"

#: ../Doc/library/tarfile.rst:128
msgid "Open a bzip2 compressed *stream* for reading."
msgstr ""

#: ../Doc/library/tarfile.rst:131
msgid "``'r|xz'``"
msgstr "``'r|xz'``"

#: ../Doc/library/tarfile.rst:131
msgid "Open an lzma compressed *stream* for reading."
msgstr ""

#: ../Doc/library/tarfile.rst:134
msgid "``'w|'``"
msgstr "``'w|'``"

#: ../Doc/library/tarfile.rst:134
msgid "Open an uncompressed *stream* for writing."
msgstr ""

#: ../Doc/library/tarfile.rst:136
msgid "``'w|gz'``"
msgstr "``'w|gz'``"

#: ../Doc/library/tarfile.rst:136
msgid "Open a gzip compressed *stream* for writing."
msgstr ""

#: ../Doc/library/tarfile.rst:139
msgid "``'w|bz2'``"
msgstr "``'w|bz2'``"

#: ../Doc/library/tarfile.rst:139
msgid "Open a bzip2 compressed *stream* for writing."
msgstr ""

#: ../Doc/library/tarfile.rst:142
msgid "``'w|xz'``"
msgstr "``'w|xz'``"

#: ../Doc/library/tarfile.rst:142
msgid "Open an lzma compressed *stream* for writing."
msgstr ""

#: ../Doc/library/tarfile.rst:146 ../Doc/library/tarfile.rst:324
msgid "The ``'x'`` (exclusive creation) mode was added."
msgstr "Le mode ``'x'`` (création exclusive) est créé."

#: ../Doc/library/tarfile.rst:149 ../Doc/library/tarfile.rst:327
#: ../Doc/library/tarfile.rst:495
msgid "The *name* parameter accepts a :term:`path-like object`."
msgstr ""

#: ../Doc/library/tarfile.rst:155
msgid ""
"Class for reading and writing tar archives. Do not use this class directly: "
"use :func:`tarfile.open` instead. See :ref:`tarfile-objects`."
msgstr ""

#: ../Doc/library/tarfile.rst:161
msgid ""
"Return :const:`True` if *name* is a tar archive file, that the :mod:"
"`tarfile` module can read."
msgstr ""

#: ../Doc/library/tarfile.rst:165
msgid "The :mod:`tarfile` module defines the following exceptions:"
msgstr ""

#: ../Doc/library/tarfile.rst:170
msgid "Base class for all :mod:`tarfile` exceptions."
msgstr ""

#: ../Doc/library/tarfile.rst:175
msgid ""
"Is raised when a tar archive is opened, that either cannot be handled by "
"the :mod:`tarfile` module or is somehow invalid."
msgstr ""

#: ../Doc/library/tarfile.rst:181
msgid ""
"Is raised when a compression method is not supported or when the data cannot "
"be decoded properly."
msgstr ""

#: ../Doc/library/tarfile.rst:187
msgid ""
"Is raised for the limitations that are typical for stream-like :class:"
"`TarFile` objects."
msgstr ""

#: ../Doc/library/tarfile.rst:193
msgid ""
"Is raised for *non-fatal* errors when using :meth:`TarFile.extract`, but "
"only if :attr:`TarFile.errorlevel`\\ ``== 2``."
msgstr ""

#: ../Doc/library/tarfile.rst:199
msgid "Is raised by :meth:`TarInfo.frombuf` if the buffer it gets is invalid."
msgstr ""

#: ../Doc/library/tarfile.rst:202
msgid "The following constants are available at the module level:"
msgstr ""

#: ../Doc/library/tarfile.rst:206
msgid ""
"The default character encoding: ``'utf-8'`` on Windows, the value returned "
"by :func:`sys.getfilesystemencoding` otherwise."
msgstr ""

#: ../Doc/library/tarfile.rst:210
msgid ""
"Each of the following constants defines a tar archive format that the :mod:"
"`tarfile` module is able to create. See section :ref:`tar-formats` for "
"details."
msgstr ""

#: ../Doc/library/tarfile.rst:217
msgid "POSIX.1-1988 (ustar) format."
msgstr ""

#: ../Doc/library/tarfile.rst:222
msgid "GNU tar format."
msgstr ""

#: ../Doc/library/tarfile.rst:227
msgid "POSIX.1-2001 (pax) format."
msgstr ""

#: ../Doc/library/tarfile.rst:232
msgid ""
"The default format for creating archives. This is currently :const:"
"`GNU_FORMAT`."
msgstr ""

#: ../Doc/library/tarfile.rst:238
msgid "Module :mod:`zipfile`"
msgstr ""

#: ../Doc/library/tarfile.rst:238
msgid "Documentation of the :mod:`zipfile` standard module."
msgstr ""

#: ../Doc/library/tarfile.rst:242
msgid ":ref:`archiving-operations`"
msgstr ""

#: ../Doc/library/tarfile.rst:241
msgid ""
"Documentation of the higher-level archiving facilities provided by the "
"standard :mod:`shutil` module."
msgstr ""

#: ../Doc/library/tarfile.rst:244
msgid ""
"`GNU tar manual, Basic Tar Format <https://www.gnu.org/software/tar/manual/"
"html_node/Standard.html>`_"
msgstr ""

#: ../Doc/library/tarfile.rst:245
msgid "Documentation for tar archive files, including GNU tar extensions."
msgstr ""

#: ../Doc/library/tarfile.rst:251
msgid "TarFile Objects"
msgstr ""

#: ../Doc/library/tarfile.rst:253
msgid ""
"The :class:`TarFile` object provides an interface to a tar archive. A tar "
"archive is a sequence of blocks. An archive member (a stored file) is made "
"up of a header block followed by data blocks. It is possible to store a file "
"in a tar archive several times. Each archive member is represented by a :"
"class:`TarInfo` object, see :ref:`tarinfo-objects` for details."
msgstr ""

#: ../Doc/library/tarfile.rst:259
msgid ""
"A :class:`TarFile` object can be used as a context manager in a :keyword:"
"`with` statement. It will automatically be closed when the block is "
"completed. Please note that in the event of an exception an archive opened "
"for writing will not be finalized; only the internally used file object will "
"be closed. See the :ref:`tar-examples` section for a use case."
msgstr ""

#: ../Doc/library/tarfile.rst:265
msgid "Added support for the context management protocol."
msgstr ""

#: ../Doc/library/tarfile.rst:270
msgid ""
"All following arguments are optional and can be accessed as instance "
"attributes as well."
msgstr ""

#: ../Doc/library/tarfile.rst:273
msgid ""
"*name* is the pathname of the archive. *name* may be a :term:`path-like "
"object`. It can be omitted if *fileobj* is given. In this case, the file "
"object's :attr:`name` attribute is used if it exists."
msgstr ""

#: ../Doc/library/tarfile.rst:277
msgid ""
"*mode* is either ``'r'`` to read from an existing archive, ``'a'`` to append "
"data to an existing file, ``'w'`` to create a new file overwriting an "
"existing one, or ``'x'`` to create a new file only if it does not already "
"exist."
msgstr ""

#: ../Doc/library/tarfile.rst:281
msgid ""
"If *fileobj* is given, it is used for reading or writing data. If it can be "
"determined, *mode* is overridden by *fileobj*'s mode. *fileobj* will be used "
"from position 0."
msgstr ""

#: ../Doc/library/tarfile.rst:287
msgid "*fileobj* is not closed, when :class:`TarFile` is closed."
msgstr ""

#: ../Doc/library/tarfile.rst:289
msgid ""
"*format* controls the archive format. It must be one of the constants :const:"
"`USTAR_FORMAT`, :const:`GNU_FORMAT` or :const:`PAX_FORMAT` that are defined "
"at module level."
msgstr ""

#: ../Doc/library/tarfile.rst:293
msgid ""
"The *tarinfo* argument can be used to replace the default :class:`TarInfo` "
"class with a different one."
msgstr ""

#: ../Doc/library/tarfile.rst:296
msgid ""
"If *dereference* is :const:`False`, add symbolic and hard links to the "
"archive. If it is :const:`True`, add the content of the target files to the "
"archive. This has no effect on systems that do not support symbolic links."
msgstr ""

#: ../Doc/library/tarfile.rst:300
msgid ""
"If *ignore_zeros* is :const:`False`, treat an empty block as the end of the "
"archive. If it is :const:`True`, skip empty (and invalid) blocks and try to "
"get as many members as possible. This is only useful for reading "
"concatenated or damaged archives."
msgstr ""

#: ../Doc/library/tarfile.rst:304
msgid ""
"*debug* can be set from ``0`` (no debug messages) up to ``3`` (all debug "
"messages). The messages are written to ``sys.stderr``."
msgstr ""

#: ../Doc/library/tarfile.rst:307
msgid ""
"If *errorlevel* is ``0``, all errors are ignored when using :meth:`TarFile."
"extract`. Nevertheless, they appear as error messages in the debug output, "
"when debugging is enabled.  If ``1``, all *fatal* errors are raised as :exc:"
"`OSError` exceptions. If ``2``, all *non-fatal* errors are raised as :exc:"
"`TarError` exceptions as well."
msgstr ""

#: ../Doc/library/tarfile.rst:313
msgid ""
"The *encoding* and *errors* arguments define the character encoding to be "
"used for reading or writing the archive and how conversion errors are going "
"to be handled. The default settings will work for most users. See section :"
"ref:`tar-unicode` for in-depth information."
msgstr ""

#: ../Doc/library/tarfile.rst:318
msgid ""
"The *pax_headers* argument is an optional dictionary of strings which will "
"be added as a pax global header if *format* is :const:`PAX_FORMAT`."
msgstr ""

#: ../Doc/library/tarfile.rst:321 ../Doc/library/tarfile.rst:548
msgid "Use ``'surrogateescape'`` as the default for the *errors* argument."
msgstr ""

#: ../Doc/library/tarfile.rst:333
msgid ""
"Alternative constructor. The :func:`tarfile.open` function is actually a "
"shortcut to this classmethod."
msgstr ""

#: ../Doc/library/tarfile.rst:339
msgid ""
"Return a :class:`TarInfo` object for member *name*. If *name* can not be "
"found in the archive, :exc:`KeyError` is raised."
msgstr ""

#: ../Doc/library/tarfile.rst:344
msgid ""
"If a member occurs more than once in the archive, its last occurrence is "
"assumed to be the most up-to-date version."
msgstr ""

#: ../Doc/library/tarfile.rst:350
msgid ""
"Return the members of the archive as a list of :class:`TarInfo` objects. The "
"list has the same order as the members in the archive."
msgstr ""

#: ../Doc/library/tarfile.rst:356
msgid ""
"Return the members as a list of their names. It has the same order as the "
"list returned by :meth:`getmembers`."
msgstr ""

#: ../Doc/library/tarfile.rst:362
msgid ""
"Print a table of contents to ``sys.stdout``. If *verbose* is :const:`False`, "
"only the names of the members are printed. If it is :const:`True`, output "
"similar to that of :program:`ls -l` is produced. If optional *members* is "
"given, it must be a subset of the list returned by :meth:`getmembers`."
msgstr ""

#: ../Doc/library/tarfile.rst:367
msgid "Added the *members* parameter."
msgstr ""

#: ../Doc/library/tarfile.rst:373
msgid ""
"Return the next member of the archive as a :class:`TarInfo` object, when :"
"class:`TarFile` is opened for reading. Return :const:`None` if there is no "
"more available."
msgstr ""

#: ../Doc/library/tarfile.rst:380
msgid ""
"Extract all members from the archive to the current working directory or "
"directory *path*. If optional *members* is given, it must be a subset of the "
"list returned by :meth:`getmembers`. Directory information like owner, "
"modification time and permissions are set after all members have been "
"extracted. This is done to work around two problems: A directory's "
"modification time is reset each time a file is created in it. And, if a "
"directory's permissions do not allow writing, extracting files to it will "
"fail."
msgstr ""

#: ../Doc/library/tarfile.rst:388 ../Doc/library/tarfile.rst:414
msgid ""
"If *numeric_owner* is :const:`True`, the uid and gid numbers from the "
"tarfile are used to set the owner/group for the extracted files. Otherwise, "
"the named values from the tarfile are used."
msgstr ""

#: ../Doc/library/tarfile.rst:394
msgid ""
"Never extract archives from untrusted sources without prior inspection. It "
"is possible that files are created outside of *path*, e.g. members that have "
"absolute filenames starting with ``\"/\"`` or filenames with two dots ``\".."
"\"``."
msgstr ""

#: ../Doc/library/tarfile.rst:399 ../Doc/library/tarfile.rst:430
msgid "Added the *numeric_owner* parameter."
msgstr ""

#: ../Doc/library/tarfile.rst:402 ../Doc/library/tarfile.rst:433
msgid "The *path* parameter accepts a :term:`path-like object`."
msgstr ""
"Le paramètre *path* accepte un objet chemin-compatible :term:`path-like "
"object`."

#: ../Doc/library/tarfile.rst:408
msgid ""
"Extract a member from the archive to the current working directory, using "
"its full name. Its file information is extracted as accurately as possible. "
"*member* may be a filename or a :class:`TarInfo` object. You can specify a "
"different directory using *path*. *path* may be a :term:`path-like object`. "
"File attributes (owner, mtime, mode) are set unless *set_attrs* is false."
msgstr ""

#: ../Doc/library/tarfile.rst:420
msgid ""
"The :meth:`extract` method does not take care of several extraction issues. "
"In most cases you should consider using the :meth:`extractall` method."
msgstr ""

#: ../Doc/library/tarfile.rst:425
msgid "See the warning for :meth:`extractall`."
msgstr ""

#: ../Doc/library/tarfile.rst:427
msgid "Added the *set_attrs* parameter."
msgstr ""

#: ../Doc/library/tarfile.rst:439
msgid ""
"Extract a member from the archive as a file object. *member* may be a "
"filename or a :class:`TarInfo` object. If *member* is a regular file or a "
"link, an :class:`io.BufferedReader` object is returned. Otherwise, :const:"
"`None` is returned."
msgstr ""

#: ../Doc/library/tarfile.rst:444
msgid "Return an :class:`io.BufferedReader` object."
msgstr ""

#: ../Doc/library/tarfile.rst:450
msgid ""
"Add the file *name* to the archive. *name* may be any type of file "
"(directory, fifo, symbolic link, etc.). If given, *arcname* specifies an "
"alternative name for the file in the archive. Directories are added "
"recursively by default. This can be avoided by setting *recursive* to :const:"
"`False`. Recursion adds entries in sorted order. If *filter* is given, it "
"should be a function that takes a :class:`TarInfo` object argument and "
"returns the changed :class:`TarInfo` object. If it instead returns :const:"
"`None` the :class:`TarInfo` object will be excluded from the archive. See :"
"ref:`tar-examples` for an example."
msgstr ""

#: ../Doc/library/tarfile.rst:461
msgid "Added the *filter* parameter."
msgstr ""

#: ../Doc/library/tarfile.rst:464
msgid "Recursion adds entries in sorted order."
msgstr ""

#: ../Doc/library/tarfile.rst:470
msgid ""
"Add the :class:`TarInfo` object *tarinfo* to the archive. If *fileobj* is "
"given, it should be a :term:`binary file`, and ``tarinfo.size`` bytes are "
"read from it and added to the archive.  You can create :class:`TarInfo` "
"objects directly, or by using :meth:`gettarinfo`."
msgstr ""

#: ../Doc/library/tarfile.rst:478
msgid ""
"Create a :class:`TarInfo` object from the result of :func:`os.stat` or "
"equivalent on an existing file.  The file is either named by *name*, or "
"specified as a :term:`file object` *fileobj* with a file descriptor. *name* "
"may be a :term:`path-like object`.  If given, *arcname* specifies an "
"alternative name for the file in the archive, otherwise, the name is taken "
"from *fileobj*’s :attr:`~io.FileIO.name` attribute, or the *name* argument.  "
"The name should be a text string."
msgstr ""

#: ../Doc/library/tarfile.rst:487
msgid ""
"You can modify some of the :class:`TarInfo`’s attributes before you add it "
"using :meth:`addfile`. If the file object is not an ordinary file object "
"positioned at the beginning of the file, attributes such as :attr:`~TarInfo."
"size` may need modifying.  This is the case for objects such as :class:"
"`~gzip.GzipFile`. The :attr:`~TarInfo.name` may also be modified, in which "
"case *arcname* could be a dummy string."
msgstr ""

#: ../Doc/library/tarfile.rst:501
msgid ""
"Close the :class:`TarFile`. In write mode, two finishing zero blocks are "
"appended to the archive."
msgstr ""

#: ../Doc/library/tarfile.rst:507
msgid "A dictionary containing key-value pairs of pax global headers."
msgstr ""

#: ../Doc/library/tarfile.rst:514
msgid "TarInfo Objects"
msgstr ""

#: ../Doc/library/tarfile.rst:516
msgid ""
"A :class:`TarInfo` object represents one member in a :class:`TarFile`. Aside "
"from storing all required attributes of a file (like file type, size, time, "
"permissions, owner etc.), it provides some useful methods to determine its "
"type. It does *not* contain the file's data itself."
msgstr ""

#: ../Doc/library/tarfile.rst:521
msgid ""
":class:`TarInfo` objects are returned by :class:`TarFile`'s methods :meth:"
"`getmember`, :meth:`getmembers` and :meth:`gettarinfo`."
msgstr ""

#: ../Doc/library/tarfile.rst:527
msgid "Create a :class:`TarInfo` object."
msgstr ""

#: ../Doc/library/tarfile.rst:532
msgid "Create and return a :class:`TarInfo` object from string buffer *buf*."
msgstr ""

#: ../Doc/library/tarfile.rst:534
msgid "Raises :exc:`HeaderError` if the buffer is invalid."
msgstr ""

#: ../Doc/library/tarfile.rst:539
msgid ""
"Read the next member from the :class:`TarFile` object *tarfile* and return "
"it as a :class:`TarInfo` object."
msgstr ""

#: ../Doc/library/tarfile.rst:545
msgid ""
"Create a string buffer from a :class:`TarInfo` object. For information on "
"the arguments see the constructor of the :class:`TarFile` class."
msgstr ""

#: ../Doc/library/tarfile.rst:552
msgid "A ``TarInfo`` object has the following public data attributes:"
msgstr ""

#: ../Doc/library/tarfile.rst:557
msgid "Name of the archive member."
msgstr ""

#: ../Doc/library/tarfile.rst:562
msgid "Size in bytes."
msgstr ""

#: ../Doc/library/tarfile.rst:567
msgid "Time of last modification."
msgstr ""

#: ../Doc/library/tarfile.rst:572
msgid "Permission bits."
msgstr ""

#: ../Doc/library/tarfile.rst:577
msgid ""
"File type.  *type* is usually one of these constants: :const:`REGTYPE`, :"
"const:`AREGTYPE`, :const:`LNKTYPE`, :const:`SYMTYPE`, :const:`DIRTYPE`, :"
"const:`FIFOTYPE`, :const:`CONTTYPE`, :const:`CHRTYPE`, :const:`BLKTYPE`, :"
"const:`GNUTYPE_SPARSE`.  To determine the type of a :class:`TarInfo` object "
"more conveniently, use the ``is*()`` methods below."
msgstr ""

#: ../Doc/library/tarfile.rst:586
msgid ""
"Name of the target file name, which is only present in :class:`TarInfo` "
"objects of type :const:`LNKTYPE` and :const:`SYMTYPE`."
msgstr ""

#: ../Doc/library/tarfile.rst:592
msgid "User ID of the user who originally stored this member."
msgstr ""

#: ../Doc/library/tarfile.rst:597
msgid "Group ID of the user who originally stored this member."
msgstr ""

#: ../Doc/library/tarfile.rst:602
msgid "User name."
msgstr ""

#: ../Doc/library/tarfile.rst:607
msgid "Group name."
msgstr ""

#: ../Doc/library/tarfile.rst:612
msgid ""
"A dictionary containing key-value pairs of an associated pax extended header."
msgstr ""

#: ../Doc/library/tarfile.rst:615
msgid "A :class:`TarInfo` object also provides some convenient query methods:"
msgstr ""

#: ../Doc/library/tarfile.rst:620
msgid "Return :const:`True` if the :class:`Tarinfo` object is a regular file."
msgstr ""

#: ../Doc/library/tarfile.rst:625
msgid "Same as :meth:`isfile`."
msgstr ""

#: ../Doc/library/tarfile.rst:630
msgid "Return :const:`True` if it is a directory."
msgstr ""

#: ../Doc/library/tarfile.rst:635
msgid "Return :const:`True` if it is a symbolic link."
msgstr ""

#: ../Doc/library/tarfile.rst:640
msgid "Return :const:`True` if it is a hard link."
msgstr ""

#: ../Doc/library/tarfile.rst:645
msgid "Return :const:`True` if it is a character device."
msgstr ""

#: ../Doc/library/tarfile.rst:650
msgid "Return :const:`True` if it is a block device."
msgstr ""

#: ../Doc/library/tarfile.rst:655
msgid "Return :const:`True` if it is a FIFO."
msgstr ""

#: ../Doc/library/tarfile.rst:660
msgid ""
"Return :const:`True` if it is one of character device, block device or FIFO."
msgstr ""

#: ../Doc/library/tarfile.rst:667
msgid "Command-Line Interface"
msgstr "Interface en ligne de commande"

#: ../Doc/library/tarfile.rst:671
msgid ""
"The :mod:`tarfile` module provides a simple command-line interface to "
"interact with tar archives."
msgstr ""

#: ../Doc/library/tarfile.rst:674
msgid ""
"If you want to create a new tar archive, specify its name after the :option:"
"`-c` option and then list the filename(s) that should be included:"
msgstr ""

#: ../Doc/library/tarfile.rst:681
msgid "Passing a directory is also acceptable:"
msgstr "Passer un répertoire est aussi possible :"

#: ../Doc/library/tarfile.rst:687
msgid ""
"If you want to extract a tar archive into the current directory, use the :"
"option:`-e` option:"
msgstr ""

#: ../Doc/library/tarfile.rst:694
msgid ""
"You can also extract a tar archive into a different directory by passing the "
"directory's name:"
msgstr ""

#: ../Doc/library/tarfile.rst:701
msgid "For a list of the files in a tar archive, use the :option:`-l` option:"
msgstr ""

#: ../Doc/library/tarfile.rst:709
msgid "Command-line options"
msgstr "Options de la ligne de commande"

#: ../Doc/library/tarfile.rst:714
msgid "List files in a tarfile."
msgstr ""

#: ../Doc/library/tarfile.rst:719
msgid "Create tarfile from source files."
msgstr ""

#: ../Doc/library/tarfile.rst:724
msgid ""
"Extract tarfile into the current directory if *output_dir* is not specified."
msgstr ""

#: ../Doc/library/tarfile.rst:729
msgid "Test whether the tarfile is valid or not."
msgstr ""

#: ../Doc/library/tarfile.rst:733
msgid "Verbose output."
msgstr ""

#: ../Doc/library/tarfile.rst:738
msgid "Examples"
msgstr "Exemples"

#: ../Doc/library/tarfile.rst:740
msgid "How to extract an entire tar archive to the current working directory::"
msgstr ""

#: ../Doc/library/tarfile.rst:747
msgid ""
"How to extract a subset of a tar archive with :meth:`TarFile.extractall` "
"using a generator function instead of a list::"
msgstr ""

#: ../Doc/library/tarfile.rst:762
msgid "How to create an uncompressed tar archive from a list of filenames::"
msgstr ""

#: ../Doc/library/tarfile.rst:770
msgid "The same example using the :keyword:`with` statement::"
msgstr ""

#: ../Doc/library/tarfile.rst:777
msgid ""
"How to read a gzip compressed tar archive and display some member "
"information::"
msgstr ""

#: ../Doc/library/tarfile.rst:791
msgid ""
"How to create an archive and reset the user information using the *filter* "
"parameter in :meth:`TarFile.add`::"
msgstr ""

#: ../Doc/library/tarfile.rst:807
msgid "Supported tar formats"
msgstr ""

#: ../Doc/library/tarfile.rst:809
msgid ""
"There are three tar formats that can be created with the :mod:`tarfile` "
"module:"
msgstr ""

#: ../Doc/library/tarfile.rst:811
msgid ""
"The POSIX.1-1988 ustar format (:const:`USTAR_FORMAT`). It supports filenames "
"up to a length of at best 256 characters and linknames up to 100 characters. "
"The maximum file size is 8 GiB. This is an old and limited but widely "
"supported format."
msgstr ""

#: ../Doc/library/tarfile.rst:816
msgid ""
"The GNU tar format (:const:`GNU_FORMAT`). It supports long filenames and "
"linknames, files bigger than 8 GiB and sparse files. It is the de facto "
"standard on GNU/Linux systems. :mod:`tarfile` fully supports the GNU tar "
"extensions for long names, sparse file support is read-only."
msgstr ""

#: ../Doc/library/tarfile.rst:821
msgid ""
"The POSIX.1-2001 pax format (:const:`PAX_FORMAT`). It is the most flexible "
"format with virtually no limits. It supports long filenames and linknames, "
"large files and stores pathnames in a portable way. However, not all tar "
"implementations today are able to handle pax archives properly."
msgstr ""

#: ../Doc/library/tarfile.rst:826
msgid ""
"The *pax* format is an extension to the existing *ustar* format. It uses "
"extra headers for information that cannot be stored otherwise. There are two "
"flavours of pax headers: Extended headers only affect the subsequent file "
"header, global headers are valid for the complete archive and affect all "
"following files. All the data in a pax header is encoded in *UTF-8* for "
"portability reasons."
msgstr ""

#: ../Doc/library/tarfile.rst:832
msgid ""
"There are some more variants of the tar format which can be read, but not "
"created:"
msgstr ""

#: ../Doc/library/tarfile.rst:835
msgid ""
"The ancient V7 format. This is the first tar format from Unix Seventh "
"Edition, storing only regular files and directories. Names must not be "
"longer than 100 characters, there is no user/group name information. Some "
"archives have miscalculated header checksums in case of fields with non-"
"ASCII characters."
msgstr ""

#: ../Doc/library/tarfile.rst:840
msgid ""
"The SunOS tar extended format. This format is a variant of the POSIX.1-2001 "
"pax format, but is not compatible."
msgstr ""

#: ../Doc/library/tarfile.rst:846
msgid "Unicode issues"
msgstr ""

#: ../Doc/library/tarfile.rst:848
msgid ""
"The tar format was originally conceived to make backups on tape drives with "
"the main focus on preserving file system information. Nowadays tar archives "
"are commonly used for file distribution and exchanging archives over "
"networks. One problem of the original format (which is the basis of all "
"other formats) is that there is no concept of supporting different character "
"encodings. For example, an ordinary tar archive created on a *UTF-8* system "
"cannot be read correctly on a *Latin-1* system if it contains non-*ASCII* "
"characters. Textual metadata (like filenames, linknames, user/group names) "
"will appear damaged. Unfortunately, there is no way to autodetect the "
"encoding of an archive. The pax format was designed to solve this problem. "
"It stores non-ASCII metadata using the universal character encoding *UTF-8*."
msgstr ""

#: ../Doc/library/tarfile.rst:860
msgid ""
"The details of character conversion in :mod:`tarfile` are controlled by the "
"*encoding* and *errors* keyword arguments of the :class:`TarFile` class."
msgstr ""

#: ../Doc/library/tarfile.rst:863
msgid ""
"*encoding* defines the character encoding to use for the metadata in the "
"archive. The default value is :func:`sys.getfilesystemencoding` or "
"``'ascii'`` as a fallback. Depending on whether the archive is read or "
"written, the metadata must be either decoded or encoded. If *encoding* is "
"not set appropriately, this conversion may fail."
msgstr ""

#: ../Doc/library/tarfile.rst:869
msgid ""
"The *errors* argument defines how characters are treated that cannot be "
"converted. Possible values are listed in section :ref:`error-handlers`. The "
"default scheme is ``'surrogateescape'`` which Python also uses for its file "
"system calls, see :ref:`os-filenames`."
msgstr ""

#: ../Doc/library/tarfile.rst:874
msgid ""
"In case of :const:`PAX_FORMAT` archives, *encoding* is generally not needed "
"because all the metadata is stored using *UTF-8*. *encoding* is only used in "
"the rare cases when binary pax headers are decoded or when strings with "
"surrogate characters are stored."
msgstr ""
