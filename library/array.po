# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-03-23 09:03+0100\n"
"PO-Revision-Date: 2018-07-27 23:05+0200\n"
"Last-Translator: Julien Palard <julien@palard.fr>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 1.8.11\n"

#: ../Doc/library/array.rst:2
msgid ":mod:`array` --- Efficient arrays of numeric values"
msgstr ""

#: ../Doc/library/array.rst:11
msgid ""
"This module defines an object type which can compactly represent an array of "
"basic values: characters, integers, floating point numbers.  Arrays are "
"sequence types and behave very much like lists, except that the type of "
"objects stored in them is constrained.  The type is specified at object "
"creation time by using a :dfn:`type code`, which is a single character.  The "
"following type codes are defined:"
msgstr ""
"Ce module définit un type objet qui permet de représenter de façon compacte "
"un tableau (*array*) de valeurs élémentaires : caractères, entier, "
"flottants. Les tableaux sont des types séquence et se comportent de manière "
"très similaire aux listes, sauf que les types d'objets qui y sont stockés "
"sont limités. Le type est spécifié au moment de la création de l’objet en "
"utilisant :dfn:`type code`, qui est un caractère unique. Voir ci-dessous "
"pour la définition des types :"

#: ../Doc/library/array.rst:19
msgid "Type code"
msgstr "Code du type"

#: ../Doc/library/array.rst:19
msgid "C Type"
msgstr "Type C"

#: ../Doc/library/array.rst:19
msgid "Python Type"
msgstr "Type Python"

#: ../Doc/library/array.rst:19
msgid "Minimum size in bytes"
msgstr "Taille minimum en octets"

#: ../Doc/library/array.rst:19
msgid "Notes"
msgstr "Notes"

#: ../Doc/library/array.rst:21
msgid "``'b'``"
msgstr "``'b'``"

#: ../Doc/library/array.rst:21
msgid "signed char"
msgstr "signed char"

#: ../Doc/library/array.rst:21 ../Doc/library/array.rst:23
#: ../Doc/library/array.rst:27 ../Doc/library/array.rst:29
#: ../Doc/library/array.rst:31 ../Doc/library/array.rst:33
#: ../Doc/library/array.rst:35 ../Doc/library/array.rst:37
#: ../Doc/library/array.rst:39 ../Doc/library/array.rst:41
msgid "int"
msgstr "*int*"

#: ../Doc/library/array.rst:21 ../Doc/library/array.rst:23
msgid "1"
msgstr "1"

#: ../Doc/library/array.rst:23
msgid "``'B'``"
msgstr "``'B'``"

#: ../Doc/library/array.rst:23
msgid "unsigned char"
msgstr "unsigned char"

#: ../Doc/library/array.rst:25
msgid "``'u'``"
msgstr "``'u'``"

#: ../Doc/library/array.rst:25
msgid "Py_UNICODE"
msgstr "Py_UNICODE"

#: ../Doc/library/array.rst:25
msgid "Unicode character"
msgstr "Caractère Unicode"

#: ../Doc/library/array.rst:25 ../Doc/library/array.rst:27
#: ../Doc/library/array.rst:29 ../Doc/library/array.rst:31
#: ../Doc/library/array.rst:33
msgid "2"
msgstr "2"

#: ../Doc/library/array.rst:25
msgid "\\(1)"
msgstr "\\(1)"

#: ../Doc/library/array.rst:27
msgid "``'h'``"
msgstr "``'h'``"

#: ../Doc/library/array.rst:27
msgid "signed short"
msgstr "signed short"

#: ../Doc/library/array.rst:29
msgid "``'H'``"
msgstr "``'H'``"

#: ../Doc/library/array.rst:29
msgid "unsigned short"
msgstr "unsigned short"

#: ../Doc/library/array.rst:31
msgid "``'i'``"
msgstr "``'i'``"

#: ../Doc/library/array.rst:31
msgid "signed int"
msgstr "signed int"

#: ../Doc/library/array.rst:33
msgid "``'I'``"
msgstr "``'I'``"

#: ../Doc/library/array.rst:33
msgid "unsigned int"
msgstr "unsigned int"

#: ../Doc/library/array.rst:35
msgid "``'l'``"
msgstr "``'l'``"

#: ../Doc/library/array.rst:35
msgid "signed long"
msgstr "signed long"

#: ../Doc/library/array.rst:35 ../Doc/library/array.rst:37
#: ../Doc/library/array.rst:43
msgid "4"
msgstr "4"

#: ../Doc/library/array.rst:37
msgid "``'L'``"
msgstr "``'L'``"

#: ../Doc/library/array.rst:37
msgid "unsigned long"
msgstr "unsigned long"

#: ../Doc/library/array.rst:39
msgid "``'q'``"
msgstr "``'q'``"

#: ../Doc/library/array.rst:39
msgid "signed long long"
msgstr "signed long long"

#: ../Doc/library/array.rst:39 ../Doc/library/array.rst:41
#: ../Doc/library/array.rst:45
msgid "8"
msgstr "8"

#: ../Doc/library/array.rst:39 ../Doc/library/array.rst:41
msgid "\\(2)"
msgstr "\\(2)"

#: ../Doc/library/array.rst:41
msgid "``'Q'``"
msgstr "``'Q'``"

#: ../Doc/library/array.rst:41
msgid "unsigned long long"
msgstr "unsigned long long"

#: ../Doc/library/array.rst:43
msgid "``'f'``"
msgstr "``'f'``"

#: ../Doc/library/array.rst:43 ../Doc/library/array.rst:45
msgid "float"
msgstr "*float*"

#: ../Doc/library/array.rst:45
msgid "``'d'``"
msgstr "``'d'``"

#: ../Doc/library/array.rst:45
msgid "double"
msgstr "double"

#: ../Doc/library/array.rst:48
msgid "Notes:"
msgstr "Notes :"

#: ../Doc/library/array.rst:51
msgid ""
"The ``'u'`` type code corresponds to Python's obsolete unicode character (:c:"
"type:`Py_UNICODE` which is :c:type:`wchar_t`). Depending on the platform, it "
"can be 16 bits or 32 bits."
msgstr ""

#: ../Doc/library/array.rst:55
msgid ""
"``'u'`` will be removed together with the rest of the :c:type:`Py_UNICODE` "
"API."
msgstr ""

#: ../Doc/library/array.rst:61
msgid ""
"The ``'q'`` and ``'Q'`` type codes are available only if the platform C "
"compiler used to build Python supports C :c:type:`long long`, or, on "
"Windows, :c:type:`__int64`."
msgstr ""

#: ../Doc/library/array.rst:67
msgid ""
"The actual representation of values is determined by the machine "
"architecture (strictly speaking, by the C implementation).  The actual size "
"can be accessed through the :attr:`itemsize` attribute."
msgstr ""

#: ../Doc/library/array.rst:71
msgid "The module defines the following type:"
msgstr "Le module définit le type suivant :"

#: ../Doc/library/array.rst:76
msgid ""
"A new array whose items are restricted by *typecode*, and initialized from "
"the optional *initializer* value, which must be a list, a :term:`bytes-like "
"object`, or iterable over elements of the appropriate type."
msgstr ""

#: ../Doc/library/array.rst:81
msgid ""
"If given a list or string, the initializer is passed to the new array's :"
"meth:`fromlist`, :meth:`frombytes`, or :meth:`fromunicode` method (see "
"below) to add initial items to the array.  Otherwise, the iterable "
"initializer is passed to the :meth:`extend` method."
msgstr ""

#: ../Doc/library/array.rst:89
msgid "A string with all available type codes."
msgstr ""

#: ../Doc/library/array.rst:91
msgid ""
"Array objects support the ordinary sequence operations of indexing, slicing, "
"concatenation, and multiplication.  When using slice assignment, the "
"assigned value must be an array object with the same type code; in all other "
"cases, :exc:`TypeError` is raised. Array objects also implement the buffer "
"interface, and may be used wherever :term:`bytes-like objects <bytes-like "
"object>` are supported."
msgstr ""

#: ../Doc/library/array.rst:97
msgid "The following data items and methods are also supported:"
msgstr ""

#: ../Doc/library/array.rst:101
msgid "The typecode character used to create the array."
msgstr ""

#: ../Doc/library/array.rst:106
msgid "The length in bytes of one array item in the internal representation."
msgstr ""
"la longueur en octets d'un élément du tableau dans la représentation interne."

#: ../Doc/library/array.rst:111
msgid "Append a new item with value *x* to the end of the array."
msgstr "Ajoute un nouvel élément avec la valeur *x* à la fin du tableau."

#: ../Doc/library/array.rst:116
msgid ""
"Return a tuple ``(address, length)`` giving the current memory address and "
"the length in elements of the buffer used to hold array's contents.  The "
"size of the memory buffer in bytes can be computed as ``array.buffer_info()"
"[1] * array.itemsize``.  This is occasionally useful when working with low-"
"level (and inherently unsafe) I/O interfaces that require memory addresses, "
"such as certain :c:func:`ioctl` operations.  The returned numbers are valid "
"as long as the array exists and no length-changing operations are applied to "
"it."
msgstr ""

#: ../Doc/library/array.rst:126
msgid ""
"When using array objects from code written in C or C++ (the only way to "
"effectively make use of this information), it makes more sense to use the "
"buffer interface supported by array objects.  This method is maintained for "
"backward compatibility and should be avoided in new code.  The buffer "
"interface is documented in :ref:`bufferobjects`."
msgstr ""

#: ../Doc/library/array.rst:135
msgid ""
"\"Byteswap\" all items of the array.  This is only supported for values "
"which are 1, 2, 4, or 8 bytes in size; for other types of values, :exc:"
"`RuntimeError` is raised.  It is useful when reading data from a file "
"written on a machine with a different byte order."
msgstr ""

#: ../Doc/library/array.rst:143
msgid "Return the number of occurrences of *x* in the array."
msgstr ""

#: ../Doc/library/array.rst:148
msgid ""
"Append items from *iterable* to the end of the array.  If *iterable* is "
"another array, it must have *exactly* the same type code; if not, :exc:"
"`TypeError` will be raised.  If *iterable* is not an array, it must be "
"iterable and its elements must be the right type to be appended to the array."
msgstr ""

#: ../Doc/library/array.rst:156
msgid ""
"Appends items from the string, interpreting the string as an array of "
"machine values (as if it had been read from a file using the :meth:"
"`fromfile` method)."
msgstr ""

#: ../Doc/library/array.rst:159
msgid ":meth:`fromstring` is renamed to :meth:`frombytes` for clarity."
msgstr ""

#: ../Doc/library/array.rst:165
msgid ""
"Read *n* items (as machine values) from the :term:`file object` *f* and "
"append them to the end of the array.  If less than *n* items are available, :"
"exc:`EOFError` is raised, but the items that were available are still "
"inserted into the array. *f* must be a real built-in file object; something "
"else with a :meth:`read` method won't do."
msgstr ""

#: ../Doc/library/array.rst:174
msgid ""
"Append items from the list.  This is equivalent to ``for x in list: a."
"append(x)`` except that if there is a type error, the array is unchanged."
msgstr ""

#: ../Doc/library/array.rst:180
msgid "Deprecated alias for :meth:`frombytes`."
msgstr "Alias obsolète de :meth:`frombytes`."

#: ../Doc/library/array.rst:185
msgid ""
"Extends this array with data from the given unicode string.  The array must "
"be a type ``'u'`` array; otherwise a :exc:`ValueError` is raised.  Use "
"``array.frombytes(unicodestring.encode(enc))`` to append Unicode data to an "
"array of some other type."
msgstr ""

#: ../Doc/library/array.rst:193
msgid ""
"Return the smallest *i* such that *i* is the index of the first occurrence "
"of *x* in the array."
msgstr ""

#: ../Doc/library/array.rst:199
msgid ""
"Insert a new item with value *x* in the array before position *i*. Negative "
"values are treated as being relative to the end of the array."
msgstr ""

#: ../Doc/library/array.rst:205
msgid ""
"Removes the item with the index *i* from the array and returns it. The "
"optional argument defaults to ``-1``, so that by default the last item is "
"removed and returned."
msgstr ""

#: ../Doc/library/array.rst:212
msgid "Remove the first occurrence of *x* from the array."
msgstr "Supprime la dernière occurrence de *x* du tableau."

#: ../Doc/library/array.rst:217
msgid "Reverse the order of the items in the array."
msgstr "Inverse l'ordre des élégante du tableau."

#: ../Doc/library/array.rst:222
msgid ""
"Convert the array to an array of machine values and return the bytes "
"representation (the same sequence of bytes that would be written to a file "
"by the :meth:`tofile` method.)"
msgstr ""

#: ../Doc/library/array.rst:226
msgid ":meth:`tostring` is renamed to :meth:`tobytes` for clarity."
msgstr ""

#: ../Doc/library/array.rst:232
msgid "Write all items (as machine values) to the :term:`file object` *f*."
msgstr ""

#: ../Doc/library/array.rst:237
msgid "Convert the array to an ordinary list with the same items."
msgstr ""

#: ../Doc/library/array.rst:242
msgid "Deprecated alias for :meth:`tobytes`."
msgstr "Alias obsolète de :meth:`tobytes`."

#: ../Doc/library/array.rst:247
msgid ""
"Convert the array to a unicode string.  The array must be a type ``'u'`` "
"array; otherwise a :exc:`ValueError` is raised. Use ``array.tobytes()."
"decode(enc)`` to obtain a unicode string from an array of some other type."
msgstr ""

#: ../Doc/library/array.rst:252
msgid ""
"When an array object is printed or converted to a string, it is represented "
"as ``array(typecode, initializer)``.  The *initializer* is omitted if the "
"array is empty, otherwise it is a string if the *typecode* is ``'u'``, "
"otherwise it is a list of numbers.  The string is guaranteed to be able to "
"be converted back to an array with the same type and value using :func:"
"`eval`, so long as the :class:`~array.array` class has been imported using "
"``from array import array``. Examples::"
msgstr ""

#: ../Doc/library/array.rst:269
msgid "Module :mod:`struct`"
msgstr "Module :mod:`struct`"

#: ../Doc/library/array.rst:269
msgid "Packing and unpacking of heterogeneous binary data."
msgstr ""

#: ../Doc/library/array.rst:273
msgid "Module :mod:`xdrlib`"
msgstr "Module :mod:`xdrlib`"

#: ../Doc/library/array.rst:272
msgid ""
"Packing and unpacking of External Data Representation (XDR) data as used in "
"some remote procedure call systems."
msgstr ""

#: ../Doc/library/array.rst:276
msgid "`The Numerical Python Documentation <https://docs.scipy.org/doc/>`_"
msgstr ""

#: ../Doc/library/array.rst:276
msgid ""
"The Numeric Python extension (NumPy) defines another array type; see http://"
"www.numpy.org/ for further information about Numerical Python."
msgstr ""
