# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-29 22:40+0100\n"
"PO-Revision-Date: 2019-10-31 12:47+0100\n"
"Last-Translator: Cléo Buck <cleo.buck@gmail.com>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.0.6\n"

#: library/array.rst:2
#, fuzzy
msgid ":mod:`!array` --- Efficient arrays of numeric values"
msgstr ":mod:`array` — Tableaux efficaces de valeurs numériques"

#: library/array.rst:11
#, fuzzy
msgid ""
"This module defines an object type which can compactly represent an array of "
"basic values: characters, integers, floating-point numbers.  Arrays are "
"sequence types and behave very much like lists, except that the type of "
"objects stored in them is constrained.  The type is specified at object "
"creation time by using a :dfn:`type code`, which is a single character.  The "
"following type codes are defined:"
msgstr ""
"Ce module définit un type d'objet qui permet de représenter de façon "
"compacte un tableau (*array*) de valeurs élémentaires : caractères, entiers, "
"flottants. Les tableaux sont de type séquence et se comportent de manière "
"très similaire aux listes, sauf que les types d'objets qui y sont stockés "
"sont limités. Le type est spécifié au moment de la création de l’objet en "
"utilisant :dfn:`type code`, qui est un caractère unique. Voir ci-dessous "
"pour la définition des types :"

#: library/array.rst:19
msgid "Type code"
msgstr "Code d'indication du type"

#: library/array.rst:19
msgid "C Type"
msgstr "Type C"

#: library/array.rst:19
msgid "Python Type"
msgstr "Type Python"

#: library/array.rst:19
msgid "Minimum size in bytes"
msgstr "Taille minimum en octets"

#: library/array.rst:19
msgid "Notes"
msgstr "Notes"

#: library/array.rst:21
msgid "``'b'``"
msgstr "``'b'``"

#: library/array.rst:21
msgid "signed char"
msgstr "``signed char``"

#: library/array.rst:23 library/array.rst:31 library/array.rst:35
#: library/array.rst:39 library/array.rst:43
msgid "int"
msgstr "*int*"

#: library/array.rst:23
msgid "1"
msgstr "1"

#: library/array.rst:23
msgid "``'B'``"
msgstr "``'B'``"

#: library/array.rst:23
msgid "unsigned char"
msgstr "``unsigned char``"

#: library/array.rst:25
msgid "``'u'``"
msgstr "``'u'``"

#: library/array.rst:25
msgid "wchar_t"
msgstr ""

#: library/array.rst:27
msgid "Unicode character"
msgstr "Caractère Unicode"

#: library/array.rst:29 library/array.rst:33 library/array.rst:35
msgid "2"
msgstr "2"

#: library/array.rst:25
msgid "\\(1)"
msgstr "\\(1)"

#: library/array.rst:27
msgid "``'w'``"
msgstr "``'w'``"

#: library/array.rst:27
msgid "Py_UCS4"
msgstr ""

#: library/array.rst:37 library/array.rst:45
msgid "4"
msgstr "4"

#: library/array.rst:29
msgid "``'h'``"
msgstr "``'h'``"

#: library/array.rst:29
msgid "signed short"
msgstr "``signed short``"

#: library/array.rst:31
msgid "``'H'``"
msgstr "``'H'``"

#: library/array.rst:31
msgid "unsigned short"
msgstr "``unsigned short``"

#: library/array.rst:33
msgid "``'i'``"
msgstr "``'i'``"

#: library/array.rst:33
msgid "signed int"
msgstr "``signed int``"

#: library/array.rst:35
msgid "``'I'``"
msgstr "``'I'``"

#: library/array.rst:35
msgid "unsigned int"
msgstr "``unsigned int``"

#: library/array.rst:37
msgid "``'l'``"
msgstr "``'l'``"

#: library/array.rst:37
msgid "signed long"
msgstr "``signed long``"

#: library/array.rst:39
msgid "``'L'``"
msgstr "``'L'``"

#: library/array.rst:39
msgid "unsigned long"
msgstr "``unsigned long``"

#: library/array.rst:41
msgid "``'q'``"
msgstr "``'q'``"

#: library/array.rst:41
msgid "signed long long"
msgstr "``signed long long``"

#: library/array.rst:43 library/array.rst:47
msgid "8"
msgstr "8"

#: library/array.rst:43
msgid "``'Q'``"
msgstr "``'Q'``"

#: library/array.rst:43
msgid "unsigned long long"
msgstr "``unsigned long long``"

#: library/array.rst:45
msgid "``'f'``"
msgstr "``'f'``"

#: library/array.rst:47
msgid "float"
msgstr "*float*"

#: library/array.rst:47
msgid "``'d'``"
msgstr "``'d'``"

#: library/array.rst:47
msgid "double"
msgstr "double"

#: library/array.rst:50
msgid "Notes:"
msgstr "Notes :"

#: library/array.rst:53
msgid "It can be 16 bits or 32 bits depending on the platform."
msgstr ""

#: library/array.rst:55
msgid ""
"``array('u')`` now uses :c:type:`wchar_t` as C type instead of deprecated "
"``Py_UNICODE``. This change doesn't affect its behavior because "
"``Py_UNICODE`` is alias of :c:type:`wchar_t` since Python 3.3."
msgstr ""

#: library/array.rst:60
msgid "Please migrate to ``'w'`` typecode."
msgstr ""

#: library/array.rst:64
#, fuzzy
msgid ""
"The actual representation of values is determined by the machine "
"architecture (strictly speaking, by the C implementation).  The actual size "
"can be accessed through the :attr:`array.itemsize` attribute."
msgstr ""
"La représentation réelle des valeurs est déterminée par l'architecture de la "
"machine (à proprement parler, par l'implémentation C). La taille réelle est "
"accessible via l'attribut :attr:`itemsize`."

#: library/array.rst:68
#, fuzzy
msgid "The module defines the following item:"
msgstr "Le module définit le type suivant :"

#: library/array.rst:73
msgid "A string with all available type codes."
msgstr "Une chaîne avec tous les codes de types disponibles."

#: library/array.rst:76
msgid "The module defines the following type:"
msgstr "Le module définit le type suivant :"

#: library/array.rst:81
#, fuzzy
msgid ""
"A new array whose items are restricted by *typecode*, and initialized from "
"the optional *initializer* value, which must be a :class:`bytes` or :class:"
"`bytearray` object, a Unicode string, or iterable over elements of the "
"appropriate type."
msgstr ""
"Un nouveau tableau dont les éléments sont limités par *typecode*, et "
"initialisés par la valeur optionnelle *initializer*, qui peut être une "
"liste, un :term:`bytes-like object`, ou un itérable sur des éléments du type "
"approprié."

#: library/array.rst:86
#, fuzzy
msgid ""
"If given a :class:`bytes` or :class:`bytearray` object, the initializer is "
"passed to the new array's :meth:`frombytes` method; if given a Unicode "
"string, the initializer is passed to the :meth:`fromunicode` method; "
"otherwise, the initializer's iterator is passed to the :meth:`extend` method "
"to add initial items to the array."
msgstr ""
"Si le paramètre *initializer* est une liste ou une chaîne de caractères, il "
"est passé à la méthode :meth:`fromlist`, :meth:`frombytes` ou :meth:"
"`fromunicode` du tableau (voir ci-dessous) pour ajouter les éléments "
"initiaux du tableau. Si c'est un itérable, il est passé à la méthode :meth:"
"`extend`."

#: library/array.rst:93
msgid ""
"Array objects support the ordinary sequence operations of indexing, slicing, "
"concatenation, and multiplication.  When using slice assignment, the "
"assigned value must be an array object with the same type code; in all other "
"cases, :exc:`TypeError` is raised. Array objects also implement the buffer "
"interface, and may be used wherever :term:`bytes-like objects <bytes-like "
"object>` are supported."
msgstr ""
"Les objets de tableau supportent les opérations classiques de séquence : "
"indiçage, découpage, concaténation et multiplication. Lors de l'utilisation "
"de tranche, la valeur assignée doit être un tableau du même type ; dans tous "
"les autres cas, l'exception :exc:`TypeError` est levée. Les objets de "
"tableau implémentent également l'interface tampon, et peuvent être utilisés "
"partout où :term:`bytes-like objects <bytes-like object>` sont supportés."

#: library/array.rst:99
msgid ""
"Raises an :ref:`auditing event <auditing>` ``array.__new__`` with arguments "
"``typecode``, ``initializer``."
msgstr ""
"Lève un :ref:`événement d'audit <auditing>` ``array.__new__`` avec les "
"arguments ``typecode``, ``initializer``."

#: library/array.rst:104
msgid "The typecode character used to create the array."
msgstr ""
"Le code (de type Python caractère) utilisé pour spécifier le type des "
"éléments du tableau."

#: library/array.rst:109
msgid "The length in bytes of one array item in the internal representation."
msgstr ""
"La longueur en octets d'un élément du tableau dans la représentation interne."

#: library/array.rst:114
msgid "Append a new item with value *x* to the end of the array."
msgstr "Ajoute un nouvel élément avec la valeur *x* à la fin du tableau."

#: library/array.rst:119
#, fuzzy
msgid ""
"Return a tuple ``(address, length)`` giving the current memory address and "
"the length in elements of the buffer used to hold array's contents.  The "
"size of the memory buffer in bytes can be computed as ``array.buffer_info()"
"[1] * array.itemsize``.  This is occasionally useful when working with low-"
"level (and inherently unsafe) I/O interfaces that require memory addresses, "
"such as certain :c:func:`!ioctl` operations.  The returned numbers are valid "
"as long as the array exists and no length-changing operations are applied to "
"it."
msgstr ""
"Renvoie un *n*-uplet ``(address, length)`` indiquant l'adresse mémoire "
"courante et la longueur en éléments du tampon utilisé pour contenir le "
"contenu du tableau. La taille du tampon mémoire en octets peut être calculée "
"par ``array.buffer_info()[1] * array.itemsize``. Ceci est parfois utile "
"lorsque vous travaillez sur des interfaces E/S de bas niveau (et "
"intrinsèquement dangereuses) qui nécessitent des adresses mémoire, telles "
"que certaines opérations :c:func:`ioctl`. Les nombres renvoyés sont valides "
"tant que le tableau existe et qu'aucune opération qui modifie sa taille ne "
"lui est appliquée."

#: library/array.rst:129
msgid ""
"When using array objects from code written in C or C++ (the only way to "
"effectively make use of this information), it makes more sense to use the "
"buffer interface supported by array objects.  This method is maintained for "
"backward compatibility and should be avoided in new code.  The buffer "
"interface is documented in :ref:`bufferobjects`."
msgstr ""
"Lors de l'utilisation d'objets tableaux provenant de codes écrits en C ou C+"
"+ (le seul moyen d'utiliser efficacement ces informations), il est plus "
"logique d'utiliser l'interface tampon supportée par les objets tableaux. "
"Cette méthode est maintenue pour des raisons de rétrocompatibilité et "
"devrait être évitée dans un nouveau code. L'interface tampon est documentée "
"dans :ref:`bufferobjects`."

#: library/array.rst:138
msgid ""
"\"Byteswap\" all items of the array.  This is only supported for values "
"which are 1, 2, 4, or 8 bytes in size; for other types of values, :exc:"
"`RuntimeError` is raised.  It is useful when reading data from a file "
"written on a machine with a different byte order."
msgstr ""
"Boutisme de tous les éléments du tableau. Ceci n'est pris en charge que pour "
"les valeurs de 1, 2, 4 ou 8 octets ; pour les autres types de valeur, :exc:"
"`RuntimeError` est levée. Il est utile lors de la lecture de données à "
"partir d'un fichier écrit sur une machine avec un ordre d'octets différent."

#: library/array.rst:146
msgid "Return the number of occurrences of *x* in the array."
msgstr "Renvoi le nombre d'occurrences de *x* dans le tableau."

#: library/array.rst:151
msgid ""
"Append items from *iterable* to the end of the array.  If *iterable* is "
"another array, it must have *exactly* the same type code; if not, :exc:"
"`TypeError` will be raised.  If *iterable* is not an array, it must be "
"iterable and its elements must be the right type to be appended to the array."
msgstr ""
"Ajoute les éléments de *iterable* à la fin du tableau. Si *iterable* est un "
"autre tableau, il doit le même code d'indication du type ; dans le cas "
"contraire, :exc:`TypeError` sera levée. Si *iterable* n'est pas un tableau, "
"il doit être itérable et ces éléments doivent être du bon type pour être "
"ajoutés dans le tableau."

#: library/array.rst:159
#, fuzzy
msgid ""
"Appends items from the :term:`bytes-like object`, interpreting its content "
"as an array of machine values (as if it had been read from a file using the :"
"meth:`fromfile` method)."
msgstr ""
"Ajoute des éléments de la chaîne, interprétant la chaîne comme un tableau de "
"valeurs machine (comme si elle avait été lue depuis le fichier en utilisant "
"la méthode :meth:`from file`)."

#: library/array.rst:163
#, fuzzy
msgid ":meth:`!fromstring` is renamed to :meth:`frombytes` for clarity."
msgstr ""
":meth:`fromstring` est renommée en :meth:`frombytes` pour plus de lisibilité."

#: library/array.rst:169
#, fuzzy
msgid ""
"Read *n* items (as machine values) from the :term:`file object` *f* and "
"append them to the end of the array.  If less than *n* items are available, :"
"exc:`EOFError` is raised, but the items that were available are still "
"inserted into the array."
msgstr ""
"Lit *n* éléments (en tant que valeurs machine) du :term:`file object` *f* et "
"les ajouter à la fin du tableau. Si moins de *n* éléments sont disponibles, :"
"exc:`EOFError` est levée, mais les éléments qui étaient disponibles sont "
"tout de même insérés dans le tableau. *f* doit être un objet fichier natif ; "
"quelque chose d'autre avec une méthode :meth:`read` ne suffit pas."

#: library/array.rst:177
msgid ""
"Append items from the list.  This is equivalent to ``for x in list: a."
"append(x)`` except that if there is a type error, the array is unchanged."
msgstr ""
"Ajoute les éléments de la liste. C'est l'équivalent de ``for x in list: a."
"append(x)`` sauf que s'il y a une erreur de type, le tableau est inchangé."

#: library/array.rst:183
#, fuzzy
msgid ""
"Extends this array with data from the given Unicode string. The array must "
"have type code ``'u'`` or ``'w'``; otherwise a :exc:`ValueError` is raised. "
"Use ``array.frombytes(unicodestring.encode(enc))`` to append Unicode data to "
"an array of some other type."
msgstr ""
"Étend ce tableau avec les données de la chaîne Unicode donnée. Le tableau "
"doit être de type ``'u'`` ; sinon :exc:`ValueError` est levée. Utiliser "
"``array.frombytes(unicodestring.encode(enc))`` pour ajouter des données "
"Unicode à un tableau d'un autre type."

#: library/array.rst:191
msgid ""
"Return the smallest *i* such that *i* is the index of the first occurrence "
"of *x* in the array.  The optional arguments *start* and *stop* can be "
"specified to search for *x* within a subsection of the array.  Raise :exc:"
"`ValueError` if *x* is not found."
msgstr ""

#: library/array.rst:196
msgid "Added optional *start* and *stop* parameters."
msgstr ""

#: library/array.rst:202
msgid ""
"Insert a new item with value *x* in the array before position *i*. Negative "
"values are treated as being relative to the end of the array."
msgstr ""
"Ajoute un nouvel élément avec la valeur *x* dans le tableau avant la "
"position *i*. Les valeurs négatives sont traitées relativement à la fin du "
"tableau."

#: library/array.rst:208
msgid ""
"Removes the item with the index *i* from the array and returns it. The "
"optional argument defaults to ``-1``, so that by default the last item is "
"removed and returned."
msgstr ""
"Supprime l'élément du tableau avec l'index *i* et le renvoie. L'argument "
"optionnel par défaut est à ``-1``, de sorte que par défaut le dernier "
"élément est supprimé et renvoyé."

#: library/array.rst:215
msgid "Remove the first occurrence of *x* from the array."
msgstr "Supprime la première occurrence de *x* du tableau."

#: library/array.rst:220
#, fuzzy
msgid "Remove all elements from the array."
msgstr "Supprime la première occurrence de *x* du tableau."

#: library/array.rst:227
msgid "Reverse the order of the items in the array."
msgstr "Inverse l'ordre des éléments du tableau."

#: library/array.rst:232
msgid ""
"Convert the array to an array of machine values and return the bytes "
"representation (the same sequence of bytes that would be written to a file "
"by the :meth:`tofile` method.)"
msgstr ""
"Convertit le tableau en un tableau de valeurs machine et renvoie la "
"représentation en octets (la même séquence d'octets qui serait écrite par la "
"méthode :meth:`tofile`)."

#: library/array.rst:236
#, fuzzy
msgid ":meth:`!tostring` is renamed to :meth:`tobytes` for clarity."
msgstr ""
":meth:`tostring` est renommé en :meth:`tobytes` pour plus de lisibilité."

#: library/array.rst:242
msgid "Write all items (as machine values) to the :term:`file object` *f*."
msgstr ""
"Écrit tous les éléments (en tant que valeurs machine) du :term:`file object` "
"*f*."

#: library/array.rst:247
msgid "Convert the array to an ordinary list with the same items."
msgstr "Convertit le tableau en une liste ordinaire avec les mêmes éléments."

#: library/array.rst:252
#, fuzzy
msgid ""
"Convert the array to a Unicode string.  The array must have a type ``'u'`` "
"or ``'w'``; otherwise a :exc:`ValueError` is raised. Use ``array.tobytes()."
"decode(enc)`` to obtain a Unicode string from an array of some other type."
msgstr ""
"Convertit le tableau en une chaîne Unicode. Le tableau doit être un tableau "
"de type ``'u'`` ; sinon :exc:`ValueError` est levée. Utilisez ``array."
"tobytes().decode(enc)`` pour obtenir une chaîne Unicode depuis un tableau de "
"tout autre type."

#: library/array.rst:257
#, fuzzy
msgid ""
"The string representation of array objects has the form ``array(typecode, "
"initializer)``. The *initializer* is omitted if the array is empty, "
"otherwise it is a Unicode string if the *typecode* is ``'u'`` or ``'w'``, "
"otherwise it is a list of numbers. The string representation is guaranteed "
"to be able to be converted back to an array with the same type and value "
"using :func:`eval`, so long as the :class:`~array.array` class has been "
"imported using ``from array import array``. Variables ``inf`` and ``nan`` "
"must also be defined if it contains corresponding floating-point values. "
"Examples::"
msgstr ""
"Quand un objet tableau est affiché ou converti en chaîne, il est représenté "
"en tant que ``array(typecode, initializer)``. *initializer* est omis si le "
"tableau est vide, sinon c'est une chaine si le *typecode* est ``'u'``, sinon "
"c'est une liste de nombres. Il est garanti que la chaîne puisse être "
"convertie en un tableau avec le même type et la même valeur en utilisant :"
"func:`eval`, tant que la classe :class:`~array.array` a été importée en "
"utilisant ``from array import array``. Exemples ::"

#: library/array.rst:269
msgid ""
"array('l')\n"
"array('w', 'hello \\u2641')\n"
"array('l', [1, 2, 3, 4, 5])\n"
"array('d', [1.0, 2.0, 3.14, -inf, nan])"
msgstr ""

#: library/array.rst:277
msgid "Module :mod:`struct`"
msgstr "Module :mod:`struct`"

#: library/array.rst:278
msgid "Packing and unpacking of heterogeneous binary data."
msgstr "Empaquetage et dépaquetage de données binaires hétérogènes."

#: library/array.rst:280
msgid "`NumPy <https://numpy.org/>`_"
msgstr ""

#: library/array.rst:281
msgid "The NumPy package defines another array type."
msgstr ""

#: library/array.rst:7
msgid "arrays"
msgstr ""

#~ msgid "Module :mod:`xdrlib`"
#~ msgstr "Module :mod:`xdrlib`"

#~ msgid ""
#~ "Packing and unpacking of External Data Representation (XDR) data as used "
#~ "in some remote procedure call systems."
#~ msgstr ""
#~ "Empaquetage et dépaquetage des données XDR (External Data Representation) "
#~ "telles qu'elles sont utilisées dans certains systèmes d'appels de "
#~ "procédures à distance (ou RPC pour *remote procedure call* en anglais)."

#~ msgid "The following data items and methods are also supported:"
#~ msgstr ""
#~ "Les éléments de données et méthodes suivants sont également supportés :"

#~ msgid ""
#~ "Return the smallest *i* such that *i* is the index of the first "
#~ "occurrence of *x* in the array."
#~ msgstr ""
#~ "Renvoie le plus petit *i* tel que *i* est l'index de la première "
#~ "occurrence de *x* dans le tableau."

#~ msgid "`The Numerical Python Documentation <https://docs.scipy.org/doc/>`_"
#~ msgstr ""
#~ "`La documentation de *Numerical Python* <https://docs.scipy.org/doc/>`"

#~ msgid ""
#~ "The Numeric Python extension (NumPy) defines another array type; see "
#~ "http://www.numpy.org/ for further information about Numerical Python."
#~ msgstr ""
#~ "L'extension *Numeric Python* (NumPy) définit un autre type de tableau ; "
#~ "voir http://www.numpy.org/ pour plus d'informations sur *Numeric Python*."

#~ msgid "Py_UNICODE"
#~ msgstr "Py_UNICODE"

#~ msgid ""
#~ "The ``'u'`` type code corresponds to Python's obsolete unicode character "
#~ "(:c:type:`Py_UNICODE` which is :c:type:`wchar_t`). Depending on the "
#~ "platform, it can be 16 bits or 32 bits."
#~ msgstr ""
#~ "Le code de type ``'u'`` correspond au type obsolète de Python caractère "
#~ "Unicode (:c:type:`Py_UNICODE` de type :c:type:`wchar_t`). Selon la "
#~ "plateforme, il peut être 16 bits ou 32 bits."

#~ msgid ""
#~ "``'u'`` will be removed together with the rest of the :c:type:"
#~ "`Py_UNICODE` API."
#~ msgstr "``'u'`` sera supprimé avec le reste de l'API :c:type:`Py_UNICODE`."

#~ msgid "Deprecated alias for :meth:`frombytes`."
#~ msgstr "Alias obsolète de :meth:`frombytes`."

#~ msgid "Deprecated alias for :meth:`tobytes`."
#~ msgstr "Alias obsolète de :meth:`tobytes`."
