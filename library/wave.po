# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-24 09:01+0200\n"
"PO-Revision-Date: 2019-05-31 15:21+0200\n"
"Last-Translator: Julien Palard <julien@palard.fr>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.0.6\n"

#: library/wave.rst:2
msgid ":mod:`wave` --- Read and write WAV files"
msgstr ":mod:`wave` --- Lecture et écriture des fichiers WAV"

#: library/wave.rst:10
msgid "**Source code:** :source:`Lib/wave.py`"
msgstr "**Code source :** :source:`Lib/wave.py`"

#: library/wave.rst:14
msgid ""
"The :mod:`wave` module provides a convenient interface to the WAV sound "
"format. It does not support compression/decompression, but it does support "
"mono/stereo."
msgstr ""
"Le module :mod:`wave` fournit une interface pratique pour le format de son "
"WAV. Il ne gère pas la compression ni la décompression, mais gère le mono et "
"le stéréo."

#: library/wave.rst:17
msgid "The :mod:`wave` module defines the following function and exception:"
msgstr "Le module :mod:`wave` définit la fonction et l'exception suivante :"

#: library/wave.rst:22
msgid ""
"If *file* is a string, open the file by that name, otherwise treat it as a "
"file-like object.  *mode* can be:"
msgstr ""
"Si *file* est une chaîne de caractères, ouvre le fichier sous ce nom, sinon, "
"il est traité comme un objet de type fichier. *mode* peut être :"

#: library/wave.rst:26
msgid "``'rb'``"
msgstr "``'rb'``"

#: library/wave.rst:26
msgid "Read only mode."
msgstr "Mode lecture seule."

#: library/wave.rst:29
msgid "``'wb'``"
msgstr "``'wb'``"

#: library/wave.rst:29
msgid "Write only mode."
msgstr "Mode écriture seule."

#: library/wave.rst:31
msgid "Note that it does not allow read/write WAV files."
msgstr ""
"Notez que ce module ne permet pas de manipuler des fichiers WAV en lecture/"
"écriture."

#: library/wave.rst:33
msgid ""
"A *mode* of ``'rb'`` returns a :class:`Wave_read` object, while a *mode* of "
"``'wb'`` returns a :class:`Wave_write` object.  If *mode* is omitted and a "
"file-like object is passed as *file*, ``file.mode`` is used as the default "
"value for *mode*."
msgstr ""
"Un *mode* ``'rb'`` renvoie un objet :class:`Wave_read`, alors qu'un *mode* "
"``'wb'`` renvoie un objet :class:`Wave_write`. Si *mode* est omis et qu'un "
"objet de type fichier est donné au paramètre *file*, ``file.mode`` est "
"utilisé comme valeur par défaut pour *mode*."

#: library/wave.rst:38
msgid ""
"If you pass in a file-like object, the wave object will not close it when "
"its :meth:`close` method is called; it is the caller's responsibility to "
"close the file object."
msgstr ""
"Si vous donnez un objet de type fichier, l'objet *wave* ne le ferme pas "
"lorsque sa méthode :meth:`close` est appelée car c'est l'appelant qui est "
"responsable de la fermeture."

#: library/wave.rst:42
msgid ""
"The :func:`.open` function may be used in a :keyword:`with` statement.  When "
"the :keyword:`!with` block completes, the :meth:`Wave_read.close() <wave."
"Wave_read.close>` or :meth:`Wave_write.close() <wave.Wave_write.close()>` "
"method is called."
msgstr ""
"La fonction :func:`.open` peut être utilisée dans une instruction :keyword:"
"`with`. Lorsque le :keyword:`!with` est terminé, la méthode :meth:`Wave_read."
"close() <wave.Wave_read.close>` ou la méthode :meth:`Wave_write.close() "
"<wave.Wave_write.close()>` est appelée."

#: library/wave.rst:47 library/wave.rst:163
msgid "Added support for unseekable files."
msgstr "Ajout de la gestion des fichiers non navigables."

#: library/wave.rst:52
msgid ""
"An error raised when something is impossible because it violates the WAV "
"specification or hits an implementation deficiency."
msgstr ""
"Une erreur est levée lorsque quelque chose est impossible car elle enfreint "
"la spécification WAV ou rencontre un problème d'implémentation."

#: library/wave.rst:59
msgid "Wave_read Objects"
msgstr "Objets Wave_read"

#: library/wave.rst:61
msgid ""
"Wave_read objects, as returned by :func:`.open`, have the following methods:"
msgstr ""
"Les objets Wave_read, tels qu'ils sont renvoyés par :func:`.open`, ont les "
"méthodes suivantes :"

#: library/wave.rst:66
msgid ""
"Close the stream if it was opened by :mod:`wave`, and make the instance "
"unusable.  This is called automatically on object collection."
msgstr ""
"Ferme le flux s'il a été ouvert par :mod:`wave` et rend l'instance "
"inutilisable. Ceci est appelé automatiquement lorsque l'objet est détruit ."

#: library/wave.rst:72
msgid "Returns number of audio channels (``1`` for mono, ``2`` for stereo)."
msgstr ""
"Renvoie le nombre de canaux audio (``1`` pour mono, ``2`` pour stéréo)."

#: library/wave.rst:77
msgid "Returns sample width in bytes."
msgstr "Renvoie la largeur de l'échantillon en octets."

#: library/wave.rst:82
msgid "Returns sampling frequency."
msgstr "Renvoie la fréquence d'échantillonnage."

#: library/wave.rst:87
msgid "Returns number of audio frames."
msgstr "Renvoie le nombre de trames audio."

#: library/wave.rst:92
msgid "Returns compression type (``'NONE'`` is the only supported type)."
msgstr "Renvoie le type de compression (``'NONE'`` est le seul type géré)."

#: library/wave.rst:97
msgid ""
"Human-readable version of :meth:`getcomptype`. Usually ``'not compressed'`` "
"parallels ``'NONE'``."
msgstr ""
"Version compréhensible de :meth:`getcomptype`. Généralement, ``'not "
"compressed'`` équivaut à ``'NONE'``."

#: library/wave.rst:103
msgid ""
"Returns a :func:`~collections.namedtuple` ``(nchannels, sampwidth, "
"framerate, nframes, comptype, compname)``, equivalent to output of the :meth:"
"`get\\*` methods."
msgstr ""
"Renvoie une :func:`~collections.namedtuple` ``(nchannels, sampwidth, "
"framerate, nframes, comptype, compname)``, équivalent à la sortie des "
"méthodes :meth:`get\\*`."

#: library/wave.rst:110
msgid ""
"Reads and returns at most *n* frames of audio, as a :class:`bytes` object."
msgstr ""
"Lit et renvoie au plus *n* trames audio, sous forme d'objet :class:`bytes`."

#: library/wave.rst:115
msgid "Rewind the file pointer to the beginning of the audio stream."
msgstr "Remet le pointeur de fichier au début du flux audio."

#: library/wave.rst:117
msgid ""
"The following two methods are defined for compatibility with the :mod:`aifc` "
"module, and don't do anything interesting."
msgstr ""
"Les deux méthodes suivantes sont définies pour la compatibilité avec le "
"module :mod:`aifc` ; elles ne font rien d’intéressant."

#: library/wave.rst:123
msgid "Returns ``None``."
msgstr "Renvoie ``None``."

#: library/wave.rst:128
msgid "Raise an error."
msgstr "Lève une erreur."

#: library/wave.rst:130
msgid ""
"The following two methods define a term \"position\" which is compatible "
"between them, and is otherwise implementation dependent."
msgstr ""
"Les deux fonctions suivantes utilisent le vocabulaire \"position\". Ces "
"positions sont compatible entre elles, la \"position\" de l'un est "
"compatible avec la \"position\" de l'autre. Cette position est dépendante de "
"l'implémentation."

#: library/wave.rst:136
msgid "Set the file pointer to the specified position."
msgstr "Place le pointeur du fichier sur la position spécifiée."

#: library/wave.rst:141
msgid "Return current file pointer position."
msgstr "Renvoie la position actuelle du pointeur du fichier."

#: library/wave.rst:147
msgid "Wave_write Objects"
msgstr "Objets Wave_write"

#: library/wave.rst:149
msgid ""
"For seekable output streams, the ``wave`` header will automatically be "
"updated to reflect the number of frames actually written.  For unseekable "
"streams, the *nframes* value must be accurate when the first frame data is "
"written.  An accurate *nframes* value can be achieved either by calling :"
"meth:`~Wave_write.setnframes` or :meth:`~Wave_write.setparams` with the "
"number of frames that will be written before :meth:`~Wave_write.close` is "
"called and then using :meth:`~Wave_write.writeframesraw` to write the frame "
"data, or by calling :meth:`~Wave_write.writeframes` with all of the frame "
"data to be written.  In the latter case :meth:`~Wave_write.writeframes` will "
"calculate the number of frames in the data and set *nframes* accordingly "
"before writing the frame data."
msgstr ""
"Pour les flux de sortie navigables, l'en-tête ``wave`` est automatiquement "
"mis à jour pour refléter le nombre de trames réellement écrites. Pour les "
"flux non indexables, la valeur *nframes* doit être précise lorsque la "
"première trame est écrite. Une valeur précise de *nframes* peut être obtenue "
"en appelant les méthodes :meth:`~Wave_write.setnframes` ou :meth:"
"`~Wave_write.setparams` en passant en paramètre le nombre de trames qui "
"seront écrites avant que :meth:`~Wave_write.close` soit appelé puis en "
"utilisant la méthode :meth:`~Wave_write.writeframesraw` pour écrire les "
"trames audio, ou en appelant la méthode :meth:`~Wave_write.writeframes` avec "
"toutes les trames audio. Dans ce dernier cas, la méthode :meth:`~Wave_write."
"writeframes` calcule le nombre de trames dans le flux audio et définit "
"*nframes* en conséquence avant d'écrire les données des trames."

#: library/wave.rst:161
msgid ""
"Wave_write objects, as returned by :func:`.open`, have the following methods:"
msgstr ""
"Les objets Wave_write, tels qu'ils sont renvoyés par :func:`.open`, ont les "
"méthodes suivantes :"

#: library/wave.rst:169
msgid ""
"Make sure *nframes* is correct, and close the file if it was opened by :mod:"
"`wave`.  This method is called upon object collection.  It will raise an "
"exception if the output stream is not seekable and *nframes* does not match "
"the number of frames actually written."
msgstr ""
"Assurez-vous que *nframes* soit correct et fermez le fichier s'il a été "
"ouvert par :mod:`wave`. Cette méthode est appelée à la destruction de "
"l'objet. Il lève une erreur si le flux de sortie n'est pas navigable et si "
"*nframes* ne correspond pas au nombre de trames réellement écrites."

#: library/wave.rst:177
msgid "Set the number of channels."
msgstr "Définit le nombre de canaux."

#: library/wave.rst:182
msgid "Set the sample width to *n* bytes."
msgstr "Définit la largeur de l'échantillon à *n* octets."

#: library/wave.rst:187
msgid "Set the frame rate to *n*."
msgstr "Définit la fréquence des trames à *n*."

#: library/wave.rst:189
msgid "A non-integral input to this method is rounded to the nearest integer."
msgstr ""
"Un paramètre non-entier passé à cette méthode est arrondi à l'entier le plus "
"proche."

#: library/wave.rst:196
msgid ""
"Set the number of frames to *n*.  This will be changed later if the number "
"of frames actually written is different (this update attempt will raise an "
"error if the output stream is not seekable)."
msgstr ""
"Définit le nombre de trames à *n*. Cela sera modifié ultérieurement si le "
"nombre de trames réellement écrites est différent (la tentative de mise à "
"jour générera une erreur si le flux de sortie n'est pas indexable)."

#: library/wave.rst:203
msgid ""
"Set the compression type and description. At the moment, only compression "
"type ``NONE`` is supported, meaning no compression."
msgstr ""
"Définit le type de compression et la description. Pour le moment, seul le "
"type de compression ``NONE`` est géré, c'est-à-dire aucune compression."

#: library/wave.rst:209
msgid ""
"The *tuple* should be ``(nchannels, sampwidth, framerate, nframes, comptype, "
"compname)``, with values valid for the :meth:`set\\*` methods.  Sets all "
"parameters."
msgstr ""
"Le *tuple* doit être ``(nchannels, sampwidth, framerate, nframes, comptype, "
"compname)``, avec des valeurs valides pour les méthodes :meth:`set\\*`. Tous "
"les paramètres sont obligatoires et doivent être définis."

#: library/wave.rst:216
msgid ""
"Return current position in the file, with the same disclaimer for the :meth:"
"`Wave_read.tell` and :meth:`Wave_read.setpos` methods."
msgstr ""
"Renvoie la position actuelle dans le fichier, avec les mêmes réserves que "
"pour les méthodes :meth:`Wave_read.tell` et :meth:`Wave_read.setpos`."

#: library/wave.rst:222
msgid "Write audio frames, without correcting *nframes*."
msgstr "Écrit les trames audio sans corriger *nframes*."

#: library/wave.rst:224 library/wave.rst:235
msgid "Any :term:`bytes-like object` is now accepted."
msgstr "N'importe quel :term:`bytes-like object` est maintenant accepté."

#: library/wave.rst:230
msgid ""
"Write audio frames and make sure *nframes* is correct.  It will raise an "
"error if the output stream is not seekable and the total number of frames "
"that have been written after *data* has been written does not match the "
"previously set value for *nframes*."
msgstr ""
"Écrit des trames audio et s'assure que *nframes* est correct. Une erreur est "
"levée si le flux de sortie est non-navigable et si le nombre total de trames "
"écrites après que *data* soit écrit ne correspond pas à la valeur "
"précédemment définie pour *nframes*."

#: library/wave.rst:239
msgid ""
"Note that it is invalid to set any parameters after calling :meth:"
"`writeframes` or :meth:`writeframesraw`, and any attempt to do so will "
"raise :exc:`wave.Error`."
msgstr ""
"Notez qu'il est impossible de définir des paramètres après avoir appelé :"
"meth:`writeframes` ou :meth:`writeframesraw`, et toute tentative en ce sens "
"lève une :exc:`wave.Error`."

#~ msgid "A synonym for :func:`.open`, maintained for backwards compatibility."
#~ msgstr "Un synonyme de :func:`.open`, maintenu pour la rétrocompatibilité."
