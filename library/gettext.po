# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-08-01 13:21+0200\n"
"PO-Revision-Date: 2017-09-23 21:26+0200\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Last-Translator: François Magimel <francois.magimel@alumni.enseeiht.fr>\n"
"Language-Team: \n"
"X-Generator: Poedit 2.0.3\n"

#: ../Doc/library/gettext.rst:2
msgid ":mod:`gettext` --- Multilingual internationalization services"
msgstr ":mod:`gettext` --- Services d'internationalisation multilingue"

#: ../Doc/library/gettext.rst:10
msgid "**Source code:** :source:`Lib/gettext.py`"
msgstr "**Code source :** :source:`Lib/gettext.py`"

#: ../Doc/library/gettext.rst:14
msgid ""
"The :mod:`gettext` module provides internationalization (I18N) and "
"localization (L10N) services for your Python modules and applications. It "
"supports both the GNU ``gettext`` message catalog API and a higher level, "
"class-based API that may be more appropriate for Python files.  The "
"interface described below allows you to write your module and application "
"messages in one natural language, and provide a catalog of translated "
"messages for running under different natural languages."
msgstr ""
"Le module :mod:`gettext` fournit un service d'internationalisation (I18N) et "
"de localisation linguistique (L10N) pour vos modules et applications Python. "
"Il est compatible avec l'API du catalogue de messages GNU `gettext` et à un "
"plus haut niveau, avec l'API basée sur les classes qui serait peut-être plus "
"adaptée aux fichiers Python.  L'interface décrite ci-dessous vous permet "
"d'écrire les textes de vos modules et applications dans une langue "
"naturelle, puis de fournir un catalogue de traductions pour les lancer "
"ensuite dans d'autres langues naturelles."

#: ../Doc/library/gettext.rst:22
msgid ""
"Some hints on localizing your Python modules and applications are also given."
msgstr ""
"Quelques astuces sur la localisation de vos modules et applications Python "
"sont également données."

#: ../Doc/library/gettext.rst:26
msgid "GNU :program:`gettext` API"
msgstr "API GNU :program:`gettext`"

#: ../Doc/library/gettext.rst:28
msgid ""
"The :mod:`gettext` module defines the following API, which is very similar "
"to the GNU :program:`gettext` API.  If you use this API you will affect the "
"translation of your entire application globally.  Often this is what you "
"want if your application is monolingual, with the choice of language "
"dependent on the locale of your user.  If you are localizing a Python "
"module, or if your application needs to switch languages on the fly, you "
"probably want to use the class-based API instead."
msgstr ""
"Le module :mod:`gettext` définit l'API suivante, qui est très proche de "
"l'API de GNU :program:`gettext`.  Si vous utilisez cette API, cela affectera "
"la traduction de toute votre application.  C'est souvent le comportement "
"attendu si votre application est monolingue, avec le choix de la langue qui "
"dépend des paramètres linguistiques de l'utilisateur.  Si vous localisez un "
"module Python ou si votre application a besoin de changer de langue à la "
"volée, il est plus judicieux d'utiliser l'API basée sur des classes."

#: ../Doc/library/gettext.rst:39
msgid ""
"Bind the *domain* to the locale directory *localedir*.  More concretely, :"
"mod:`gettext` will look for binary :file:`.mo` files for the given domain "
"using the path (on Unix): :file:`localedir/language/LC_MESSAGES/domain.mo`, "
"where *languages* is searched for in the environment variables :envvar:"
"`LANGUAGE`, :envvar:`LC_ALL`, :envvar:`LC_MESSAGES`, and :envvar:`LANG` "
"respectively."
msgstr ""
"Lie le *domain* au répertoire *localedir* des localisations.  Plus "
"spécifiquement, :mod:`gettext` va chercher les fichiers binaires :file:`.mo` "
"pour un domaine donné, en utilisant le chemin suivant (sous Unix) : :file:"
"`localedir/language/LC_MESSAGES/domain.mo`, où *language* est contenu "
"respectivement dans l'une des variables d'environnement suivantes : :envvar:"
"`LANGUAGE`, :envvar:`LC_ALL`, :envvar:`LC_MESSAGES` et :envvar:`LANG`."

#: ../Doc/library/gettext.rst:45
msgid ""
"If *localedir* is omitted or ``None``, then the current binding for *domain* "
"is returned. [#]_"
msgstr ""
"Si *localedir* n'est pas renseigné ou vaut ``None``, alors le lien actuel de "
"*domain* est renvoyé. [#]_"

#: ../Doc/library/gettext.rst:51
msgid ""
"Bind the *domain* to *codeset*, changing the encoding of byte strings "
"returned by the :func:`lgettext`, :func:`ldgettext`, :func:`lngettext` and :"
"func:`ldngettext` functions. If *codeset* is omitted, then the current "
"binding is returned."
msgstr ""
"Lie le *domain* à *codeset*, en changeant l'encodage des chaînes d'octets "
"retournées par les fonctions :func:`lgettext`, :func:`ldgettext`, :func:"
"`lngettext` et :func:`ldngettext`.  Si *codeset* n'est pas renseigné, alors "
"le lien actuel est renvoyé."

#: ../Doc/library/gettext.rst:59
msgid ""
"Change or query the current global domain.  If *domain* is ``None``, then "
"the current global domain is returned, otherwise the global domain is set to "
"*domain*, which is returned."
msgstr ""
"Change ou interroge le domaine global actuel. Si *domain* vaut ``None``, "
"alors le domaine global actuel est renvoyé. Sinon, le domaine global est "
"positionné à *domain*, puis renvoyé."

#: ../Doc/library/gettext.rst:66
msgid ""
"Return the localized translation of *message*, based on the current global "
"domain, language, and locale directory.  This function is usually aliased "
"as :func:`_` in the local namespace (see examples below)."
msgstr ""
"Renvoie la traduction localisée de *message*, en se basant sur le domaine "
"global actuel, la langue et le répertoire des localisations."

#: ../Doc/library/gettext.rst:73
msgid ""
"Like :func:`.gettext`, but look the message up in the specified *domain*."
msgstr ""
"Comme :func:`gettext`, mais cherche le message dans le domaine spécifié."

#: ../Doc/library/gettext.rst:78
msgid ""
"Like :func:`.gettext`, but consider plural forms. If a translation is found, "
"apply the plural formula to *n*, and return the resulting message (some "
"languages have more than two plural forms). If no translation is found, "
"return *singular* if *n* is 1; return *plural* otherwise."
msgstr ""
"Comme :func:`gettext`, mais prend en compte les formes au pluriel.  Si une "
"traduction a été trouvée, la forme au pluriel est appliquée à *n* et le "
"message généré est renvoyé (quelques langues ont plus de deux formes au "
"pluriel).  Si aucune traduction n'a été trouvée, renvoie *singular* si *n* "
"vaut 1, *plural* sinon."

#: ../Doc/library/gettext.rst:83
msgid ""
"The Plural formula is taken from the catalog header. It is a C or Python "
"expression that has a free variable *n*; the expression evaluates to the "
"index of the plural in the catalog. See `the GNU gettext documentation "
"<https://www.gnu.org/software/gettext/manual/gettext.html>`__ for the "
"precise syntax to be used in :file:`.po` files and the formulas for a "
"variety of languages."
msgstr ""
"La forme au pluriel est récupérée dans l'entête du catalogue.  C'est une "
"expression en C ou en Python qui a une variable *n* ; l'expression "

#: ../Doc/library/gettext.rst:93
msgid ""
"Like :func:`ngettext`, but look the message up in the specified *domain*."
msgstr ""
"Comme :func:`ngettext`, mais cherche le message dans le domaine spécifié."

#: ../Doc/library/gettext.rst:101
msgid ""
"Equivalent to the corresponding functions without the ``l`` prefix (:func:`."
"gettext`, :func:`dgettext`, :func:`ngettext` and :func:`dngettext`), but the "
"translation is returned as a byte string encoded in the preferred system "
"encoding if no other encoding was explicitly set with :func:"
"`bind_textdomain_codeset`."
msgstr ""
"Équivalent aux fonctions correspondantes non préfixées par ``l`` (:func:`."
"gettext`, :func:`dgettext`, :func:`ngettext` et :func:`dngettext`), mais la "
"traduction est retournée en tant que chaîne d'octets, encodée avec "
"l'encodage du système si aucun autre n'a été explicitement défini avec :func:"
"`bind_textdomain_codeset`."

#: ../Doc/library/gettext.rst:109
msgid ""
"These functions should be avoided in Python 3, because they return encoded "
"bytes.  It's much better to use alternatives which return Unicode strings "
"instead, since most Python applications will want to manipulate human "
"readable text as strings instead of bytes.  Further, it's possible that you "
"may get unexpected Unicode-related exceptions if there are encoding problems "
"with the translated strings.  It is possible that the ``l*()`` functions "
"will be deprecated in future Python versions due to their inherent problems "
"and limitations."
msgstr ""
"Ces fonctions sont à éviter en Python 3 car elles renvoient des octets "
"encodés.  Il est préférable d'utiliser des alternatives qui renvoient de "
"l'Unicode, puisque beaucoup d'applications Python voudront manipuler du "
"texte lisible par des humains plutôt que des octets.  En outre, il est "
"possible que vous obteniez des exceptions non prévues liées à Unicode s'il y "
"a des soucis d'encodage avec les chaînes de caractères traduites.  Il est "
"d'ailleurs probable que les fonctions ``l*()`` deviennent obsolètes dans les "
"versions futures de Python à cause de leurs problèmes et limitations "
"inhérents."

#: ../Doc/library/gettext.rst:119
msgid ""
"Note that GNU :program:`gettext` also defines a :func:`dcgettext` method, "
"but this was deemed not useful and so it is currently unimplemented."
msgstr ""
"Notez que GNU :program:`gettext` a aussi une méthode :func:`dcgettext`, mais "
"elle a été considérée comme inutile et donc actuellement marquée comme non "
"implémentée."

#: ../Doc/library/gettext.rst:122
msgid "Here's an example of typical usage for this API::"
msgstr "Voici un exemple classique d'utilisation de cette API ::"

#: ../Doc/library/gettext.rst:133
msgid "Class-based API"
msgstr "API basée sur les classes"

#: ../Doc/library/gettext.rst:135
msgid ""
"The class-based API of the :mod:`gettext` module gives you more flexibility "
"and greater convenience than the GNU :program:`gettext` API.  It is the "
"recommended way of localizing your Python applications and modules.  :mod:"
"`gettext` defines a \"translations\" class which implements the parsing of "
"GNU :file:`.mo` format files, and has methods for returning strings. "
"Instances of this \"translations\" class can also install themselves in the "
"built-in namespace as the function :func:`_`."
msgstr ""
"L'API du module :mod:`gettext` basée sur les classes vous donne plus de "
"flexibilité et est plus pratique que l'API de GNU :program:`gettext`.  Son "
"utilisation est recommandée pour localiser vos applications et modules "
"Python.  :mod:`gettext` définit une classe \"translations\" qui analyse "
"syntaxiquement les fichiers au format GNU :file:`.mo`, et qui possède des "
"méthodes pour renvoyer des chaînes de caractères.  Les instances de cette "
"classe \"translations\" peuvent également s'installer dans l'espace de noms "
"natif en tant que fonction :func:`_`."

#: ../Doc/library/gettext.rst:146
msgid ""
"This function implements the standard :file:`.mo` file search algorithm.  It "
"takes a *domain*, identical to what :func:`textdomain` takes.  Optional "
"*localedir* is as in :func:`bindtextdomain`  Optional *languages* is a list "
"of strings, where each string is a language code."
msgstr ""
"Cette fonction implémente l'algorithme standard de recherche de fichier :"
"file:`mo`.  Il prend en entrée un *domain*, tout comme la fonction :func:"
"`textdomain`.  Le paramètre optionnel *localedir* est le même que celui de :"
"func:`bindtextdomain`.  Le paramètre optionnel *langages* est une liste de "
"chaîne de caractères correspondants au code d'une langue."

#: ../Doc/library/gettext.rst:151
msgid ""
"If *localedir* is not given, then the default system locale directory is "
"used. [#]_  If *languages* is not given, then the following environment "
"variables are searched: :envvar:`LANGUAGE`, :envvar:`LC_ALL`, :envvar:"
"`LC_MESSAGES`, and :envvar:`LANG`.  The first one returning a non-empty "
"value is used for the *languages* variable. The environment variables should "
"contain a colon separated list of languages, which will be split on the "
"colon to produce the expected list of language code strings."
msgstr ""
"Si *localedir* n'est pas renseigné, alors le répertoire de la locale par "
"défaut du système est utilisé. [#]_  Si *languages* n'est pas renseigné, "
"alors les variables d'environnement suivantes sont utilisées : :envvar:"
"`LANGUAGE`, :envvar:`LC_ALL`, :envvar:`LC_MESSAGES` et :envvar:`LANG`.  La "
"première à renvoyer une valeur non vide est alors utilisée pour "
"*languages*.  Ces variables d'environnement doivent contenir une liste de "
"langues, séparées par des deux-points, qui sera utilisée pour générer la "
"liste des codes de langues attendue."

#: ../Doc/library/gettext.rst:159
msgid ""
":func:`find` then expands and normalizes the languages, and then iterates "
"through them, searching for an existing file built of these components:"
msgstr ""
"Recherche avec :func:`find`, découvre et normalise les langues, puis itère "
"sur la liste obtenue afin de trouver un fichier de traduction existant et "
"correspondant :"

#: ../Doc/library/gettext.rst:162
msgid ":file:`{localedir}/{language}/LC_MESSAGES/{domain}.mo`"
msgstr ":file:`{localedir}/{language}/LC_MESSAGES/{domain}.mo`"

#: ../Doc/library/gettext.rst:164
msgid ""
"The first such file name that exists is returned by :func:`find`. If no such "
"file is found, then ``None`` is returned. If *all* is given, it returns a "
"list of all file names, in the order in which they appear in the languages "
"list or the environment variables."
msgstr ""
"Le premier nom de fichier trouvé est renvoyé par :func:`find`.  Si aucun "
"fichier n'a été trouvé, alors `None` est renvoyé.  Si *all* est vrai, est "
"renvoyée la liste de tous les noms de fichiers, dans l'ordre dans lequel ils "
"apparaissent dans *languages* ou dans les variables d'environnement."

#: ../Doc/library/gettext.rst:172
msgid ""
"Return a :class:`Translations` instance based on the *domain*, *localedir*, "
"and *languages*, which are first passed to :func:`find` to get a list of the "
"associated :file:`.mo` file paths.  Instances with identical :file:`.mo` "
"file names are cached.  The actual class instantiated is either *class_* if "
"provided, otherwise :class:`GNUTranslations`.  The class's constructor must "
"take a single :term:`file object` argument.  If provided, *codeset* will "
"change the charset used to encode translated strings in the :meth:"
"`~NullTranslations.lgettext` and :meth:`~NullTranslations.lngettext` methods."
msgstr ""
"Renvoie une instance de la classe :class:`Translations` en se basant sur "
"*domain*, *localedir* et *languages*, qui sont d'abord passés en argument "
"de :func:`find` afin d'obtenir une liste de chemin des fichiers :file:`.mo` "
"associés.  Les instances avec des noms de fichiers :file:`.mo` identiques "
"sont mises en cache.  La classe réellement instanciée est soit *class_* si "
"renseigné, soit une classe :class:`GNUTranslations`.  Le constructeur de "
"cette classe doit prendre en argument un seul :term:`file object`.  Si "
"renseigné, *codeset* modifiera le jeu de caractères utilisé pour encoder les "
"chaînes de caractères traduites, dans les méthodes :meth:`~NullTranslations."
"lgettext` et :meth:`~NullTranslations.lngettext`."

#: ../Doc/library/gettext.rst:182
msgid ""
"If multiple files are found, later files are used as fallbacks for earlier "
"ones. To allow setting the fallback, :func:`copy.copy` is used to clone each "
"translation object from the cache; the actual instance data is still shared "
"with the cache."
msgstr ""
"Si plusieurs fichiers ont été trouvés, les derniers sont utilisés comme "
"substitut des premiers.  Pour rendre possible cette substitution, :func:"
"`copy.copy` est utilisé pour copier chaque objet traduit depuis le cache ; "
"les vraies données de l'instance étant toujours recopiées dans le cache."

#: ../Doc/library/gettext.rst:187
msgid ""
"If no :file:`.mo` file is found, this function raises :exc:`OSError` if "
"*fallback* is false (which is the default), and returns a :class:"
"`NullTranslations` instance if *fallback* is true."
msgstr ""
"Si aucun fichier :file:`.mo` n'a été trouvé, soit *fallback* vaut *False* "
"(valeur par défaut) et une exception :exc:`OSError` est levée, soit "
"*fallback* vaut *True* et une instance :class:`NullTranslations` est "
"renvoyée."

#: ../Doc/library/gettext.rst:191
msgid ":exc:`IOError` used to be raised instead of :exc:`OSError`."
msgstr ""
"Avant, c'était l'exception :exc:`IOError` qui était levée, au lieu de :exc:"
"`OSError`."

#: ../Doc/library/gettext.rst:197
msgid ""
"This installs the function :func:`_` in Python's builtins namespace, based "
"on *domain*, *localedir*, and *codeset* which are passed to the function :"
"func:`translation`."
msgstr ""
"Positionne la fonction :func:`_` dans l'espace de noms natif à Python, en se "
"basant sur *domain*, *localedir* et *codeset*, qui sont passés en argument "
"de la fonction :func:`translation`."

#: ../Doc/library/gettext.rst:201
msgid ""
"For the *names* parameter, please see the description of the translation "
"object's :meth:`~NullTranslations.install` method."
msgstr ""
"Concernant le paramètre *names*, se référer à la description de la méthode :"
"meth:`~NullTranslations.install`."

#: ../Doc/library/gettext.rst:204
msgid ""
"As seen below, you usually mark the strings in your application that are "
"candidates for translation, by wrapping them in a call to the :func:`_` "
"function, like this::"
msgstr ""
"Habituellement, la fonction :func:`_` est appliquée aux chaînes de "
"caractères qui doivent être traduites comme suit ::"

#: ../Doc/library/gettext.rst:210
msgid ""
"For convenience, you want the :func:`_` function to be installed in Python's "
"builtins namespace, so it is easily accessible in all modules of your "
"application."
msgstr ""
"Pour plus de confort, il vaut mieux positionner la fonction :func:`_` dans "
"l'espace de noms natif à Python pour la rendre plus accessible dans les "
"modules de votre application."

#: ../Doc/library/gettext.rst:216
msgid "The :class:`NullTranslations` class"
msgstr "La classe :class:`NullTranslations`"

#: ../Doc/library/gettext.rst:218
msgid ""
"Translation classes are what actually implement the translation of original "
"source file message strings to translated message strings. The base class "
"used by all translation classes is :class:`NullTranslations`; this provides "
"the basic interface you can use to write your own specialized translation "
"classes.  Here are the methods of :class:`NullTranslations`:"
msgstr ""
"Les classes de traduction implémentent le fait de passer d'une chaîne de "
"caractères du fichier original notée comme à traduire à la traduction de "
"celle-ci.  La classe de base utilisée est :class:`NullTranslations`.  C'est "
"l'interface de base à utiliser lorsque vous souhaitez écrire vos propres "
"classes spécifiques à la traduction. Voici les méthodes de :class:"
"`NullTranslations` :"

#: ../Doc/library/gettext.rst:227
msgid ""
"Takes an optional :term:`file object` *fp*, which is ignored by the base "
"class. Initializes \"protected\" instance variables *_info* and *_charset* "
"which are set by derived classes, as well as *_fallback*, which is set "
"through :meth:`add_fallback`.  It then calls ``self._parse(fp)`` if *fp* is "
"not ``None``."
msgstr ""
"Prends un paramètre optionnel un :term:`file object` *fp*, qui est ignoré "
"par la classe de base.  Initialise les variables d'instance \"protégées\" "
"*_info* et *_chardet*, définies par des classes dérivées, tout comme "
"*_fallback* qui est définie au travers de :meth:`add_fallback`.  Puis ppelle "
"``self._parse(fp)`` si *fp* ne vaut pas ``None``."

#: ../Doc/library/gettext.rst:235
msgid ""
"No-op'd in the base class, this method takes file object *fp*, and reads the "
"data from the file, initializing its message catalog.  If you have an "
"unsupported message catalog file format, you should override this method to "
"parse your format."
msgstr ""
"Cette méthode, non exécutée dans la classe de base, prend en paramètre un "
"objet fichier *fp* et lit les données de ce dernier.  Si vous avez un format "
"de fichier du catalogue de messages non pris en charge, vous devriez "
"surcharger cette méthode pour analyser votre format."

#: ../Doc/library/gettext.rst:243
msgid ""
"Add *fallback* as the fallback object for the current translation object. A "
"translation object should consult the fallback if it cannot provide a "
"translation for a given message."
msgstr ""

#: ../Doc/library/gettext.rst:250
msgid ""
"If a fallback has been set, forward :meth:`.gettext` to the fallback. "
"Otherwise, return *message*.  Overridden in derived classes."
msgstr ""

#: ../Doc/library/gettext.rst:256
msgid ""
"If a fallback has been set, forward :meth:`ngettext` to the fallback. "
"Otherwise, return *singular* if *n* is 1; return *plural* otherwise. "
"Overridden in derived classes."
msgstr ""

#: ../Doc/library/gettext.rst:264
msgid ""
"Equivalent to :meth:`.gettext` and :meth:`ngettext`, but the translation is "
"returned as a byte string encoded in the preferred system encoding if no "
"encoding was explicitly set with :meth:`set_output_charset`. Overridden in "
"derived classes."
msgstr ""

#: ../Doc/library/gettext.rst:271 ../Doc/library/gettext.rst:392
msgid ""
"These methods should be avoided in Python 3.  See the warning for the :func:"
"`lgettext` function."
msgstr ""

#: ../Doc/library/gettext.rst:277
msgid "Return the \"protected\" :attr:`_info` variable."
msgstr ""

#: ../Doc/library/gettext.rst:282
msgid "Return the encoding of the message catalog file."
msgstr ""

#: ../Doc/library/gettext.rst:287
msgid ""
"Return the encoding used to return translated messages in :meth:`.lgettext` "
"and :meth:`.lngettext`."
msgstr ""

#: ../Doc/library/gettext.rst:293
msgid "Change the encoding used to return translated messages."
msgstr ""

#: ../Doc/library/gettext.rst:298
msgid ""
"This method installs :meth:`.gettext` into the built-in namespace, binding "
"it to ``_``."
msgstr ""

#: ../Doc/library/gettext.rst:301
msgid ""
"If the *names* parameter is given, it must be a sequence containing the "
"names of functions you want to install in the builtins namespace in addition "
"to :func:`_`.  Supported names are ``'gettext'``, ``'ngettext'``, "
"``'lgettext'`` and ``'lngettext'``."
msgstr ""

#: ../Doc/library/gettext.rst:306
msgid ""
"Note that this is only one way, albeit the most convenient way, to make the :"
"func:`_` function available to your application.  Because it affects the "
"entire application globally, and specifically the built-in namespace, "
"localized modules should never install :func:`_`. Instead, they should use "
"this code to make :func:`_` available to their module::"
msgstr ""

#: ../Doc/library/gettext.rst:316
msgid ""
"This puts :func:`_` only in the module's global namespace and so only "
"affects calls within this module."
msgstr ""

#: ../Doc/library/gettext.rst:321
msgid "The :class:`GNUTranslations` class"
msgstr "La classe :class:`GNUTranslations`"

#: ../Doc/library/gettext.rst:323
msgid ""
"The :mod:`gettext` module provides one additional class derived from :class:"
"`NullTranslations`: :class:`GNUTranslations`.  This class overrides :meth:"
"`_parse` to enable reading GNU :program:`gettext` format :file:`.mo` files "
"in both big-endian and little-endian format."
msgstr ""

#: ../Doc/library/gettext.rst:328
msgid ""
":class:`GNUTranslations` parses optional meta-data out of the translation "
"catalog.  It is convention with GNU :program:`gettext` to include meta-data "
"as the translation for the empty string.  This meta-data is in :rfc:`822`\\ -"
"style ``key: value`` pairs, and should contain the ``Project-Id-Version`` "
"key.  If the key ``Content-Type`` is found, then the ``charset`` property is "
"used to initialize the \"protected\" :attr:`_charset` instance variable, "
"defaulting to ``None`` if not found.  If the charset encoding is specified, "
"then all message ids and message strings read from the catalog are converted "
"to Unicode using this encoding, else ASCII encoding is assumed."
msgstr ""

#: ../Doc/library/gettext.rst:338
msgid ""
"Since message ids are read as Unicode strings too, all :meth:`*gettext` "
"methods will assume message ids as Unicode strings, not byte strings."
msgstr ""

#: ../Doc/library/gettext.rst:341
msgid ""
"The entire set of key/value pairs are placed into a dictionary and set as "
"the \"protected\" :attr:`_info` instance variable."
msgstr ""

#: ../Doc/library/gettext.rst:344
msgid ""
"If the :file:`.mo` file's magic number is invalid, the major version number "
"is unexpected, or if other problems occur while reading the file, "
"instantiating a :class:`GNUTranslations` class can raise :exc:`OSError`."
msgstr ""

#: ../Doc/library/gettext.rst:350
msgid ""
"The following methods are overridden from the base class implementation:"
msgstr ""

#: ../Doc/library/gettext.rst:354
msgid ""
"Look up the *message* id in the catalog and return the corresponding message "
"string, as a Unicode string.  If there is no entry in the catalog for the "
"*message* id, and a fallback has been set, the look up is forwarded to the "
"fallback's :meth:`~NullTranslations.gettext` method.  Otherwise, the "
"*message* id is returned."
msgstr ""

#: ../Doc/library/gettext.rst:363
msgid ""
"Do a plural-forms lookup of a message id.  *singular* is used as the message "
"id for purposes of lookup in the catalog, while *n* is used to determine "
"which plural form to use.  The returned message string is a Unicode string."
msgstr ""

#: ../Doc/library/gettext.rst:367
msgid ""
"If the message id is not found in the catalog, and a fallback is specified, "
"the request is forwarded to the fallback's :meth:`~NullTranslations."
"ngettext` method.  Otherwise, when *n* is 1 *singular* is returned, and "
"*plural* is returned in all other cases."
msgstr ""

#: ../Doc/library/gettext.rst:372
msgid "Here is an example::"
msgstr "Voici un exemple ::"

#: ../Doc/library/gettext.rst:385
msgid ""
"Equivalent to :meth:`.gettext` and :meth:`.ngettext`, but the translation is "
"returned as a byte string encoded in the preferred system encoding if no "
"encoding  was explicitly set with :meth:`~NullTranslations."
"set_output_charset`."
msgstr ""

#: ../Doc/library/gettext.rst:397
msgid "Solaris message catalog support"
msgstr "Support du catalogue de message de Solaris"

#: ../Doc/library/gettext.rst:399
msgid ""
"The Solaris operating system defines its own binary :file:`.mo` file format, "
"but since no documentation can be found on this format, it is not supported "
"at this time."
msgstr ""
"Le système d'exploitation Solaris possède son propre format de fichier "
"binaire :file:`.mo`, mais pour l'heure, puisqu'on ne peut trouver de "
"documentation sur ce format, il n'est pas géré."

#: ../Doc/library/gettext.rst:405
msgid "The Catalog constructor"
msgstr "Le constructeur *Catalog*"

#: ../Doc/library/gettext.rst:409
msgid ""
"GNOME uses a version of the :mod:`gettext` module by James Henstridge, but "
"this version has a slightly different API.  Its documented usage was::"
msgstr ""

#: ../Doc/library/gettext.rst:417
msgid ""
"For compatibility with this older module, the function :func:`Catalog` is an "
"alias for the :func:`translation` function described above."
msgstr ""

#: ../Doc/library/gettext.rst:420
msgid ""
"One difference between this module and Henstridge's: his catalog objects "
"supported access through a mapping API, but this appears to be unused and so "
"is not currently supported."
msgstr ""

#: ../Doc/library/gettext.rst:426
msgid "Internationalizing your programs and modules"
msgstr "Internationaliser vos programmes et modules"

#: ../Doc/library/gettext.rst:428
msgid ""
"Internationalization (I18N) refers to the operation by which a program is "
"made aware of multiple languages.  Localization (L10N) refers to the "
"adaptation of your program, once internationalized, to the local language "
"and cultural habits. In order to provide multilingual messages for your "
"Python programs, you need to take the following steps:"
msgstr ""

#: ../Doc/library/gettext.rst:434
msgid ""
"prepare your program or module by specially marking translatable strings"
msgstr ""

#: ../Doc/library/gettext.rst:436
msgid ""
"run a suite of tools over your marked files to generate raw messages catalogs"
msgstr ""

#: ../Doc/library/gettext.rst:438
msgid "create language specific translations of the message catalogs"
msgstr ""

#: ../Doc/library/gettext.rst:440
msgid ""
"use the :mod:`gettext` module so that message strings are properly translated"
msgstr ""

#: ../Doc/library/gettext.rst:442
msgid ""
"In order to prepare your code for I18N, you need to look at all the strings "
"in your files.  Any string that needs to be translated should be marked by "
"wrapping it in ``_('...')`` --- that is, a call to the function :func:`_`.  "
"For example::"
msgstr ""

#: ../Doc/library/gettext.rst:452
msgid ""
"In this example, the string ``'writing a log message'`` is marked as a "
"candidate for translation, while the strings ``'mylog.txt'`` and ``'w'`` are "
"not."
msgstr ""

#: ../Doc/library/gettext.rst:455
msgid ""
"There are a few tools to extract the strings meant for translation. The "
"original GNU :program:`gettext` only supported C or C++ source code but its "
"extended version :program:`xgettext` scans code written in a number of "
"languages, including Python, to find strings marked as translatable.  `Babel "
"<http://babel.pocoo.org/>`__ is a Python internationalization library that "
"includes a :file:`pybabel` script to extract and compile message catalogs.  "
"François Pinard's program called :program:`xpot` does a similar job and is "
"available as part of his `po-utils package <https://github.com/pinard/po-"
"utils>`__."
msgstr ""

#: ../Doc/library/gettext.rst:465
msgid ""
"(Python also includes pure-Python versions of these programs, called :"
"program:`pygettext.py` and :program:`msgfmt.py`; some Python distributions "
"will install them for you.  :program:`pygettext.py` is similar to :program:"
"`xgettext`, but only understands Python source code and cannot handle other "
"programming languages such as C or C++. :program:`pygettext.py` supports a "
"command-line interface similar to :program:`xgettext`; for details on its "
"use, run ``pygettext.py --help``.  :program:`msgfmt.py` is binary compatible "
"with GNU :program:`msgfmt`.  With these two programs, you may not need the "
"GNU :program:`gettext` package to internationalize your Python applications.)"
msgstr ""

#: ../Doc/library/gettext.rst:477
msgid ""
":program:`xgettext`, :program:`pygettext`, and similar tools generate :file:"
"`.po` files that are message catalogs.  They are structured human-readable "
"files that contain every marked string in the source code, along with a "
"placeholder for the translated versions of these strings."
msgstr ""

#: ../Doc/library/gettext.rst:483
msgid ""
"Copies of these :file:`.po` files are then handed over to the individual "
"human translators who write translations for every supported natural "
"language.  They send back the completed language-specific versions as a :"
"file:`<language-name>.po` file that's compiled into a machine-readable :file:"
"`.mo` binary catalog file using the :program:`msgfmt` program.  The :file:`."
"mo` files are used by the :mod:`gettext` module for the actual translation "
"processing at run-time."
msgstr ""

#: ../Doc/library/gettext.rst:492
msgid ""
"How you use the :mod:`gettext` module in your code depends on whether you "
"are internationalizing a single module or your entire application. The next "
"two sections will discuss each case."
msgstr ""

#: ../Doc/library/gettext.rst:498
msgid "Localizing your module"
msgstr "Localiser votre module"

#: ../Doc/library/gettext.rst:500
msgid ""
"If you are localizing your module, you must take care not to make global "
"changes, e.g. to the built-in namespace.  You should not use the GNU "
"``gettext`` API but instead the class-based API."
msgstr ""

#: ../Doc/library/gettext.rst:504
msgid ""
"Let's say your module is called \"spam\" and the module's various natural "
"language translation :file:`.mo` files reside in :file:`/usr/share/locale` "
"in GNU :program:`gettext` format.  Here's what you would put at the top of "
"your module::"
msgstr ""

#: ../Doc/library/gettext.rst:515
msgid "Localizing your application"
msgstr "Localiser votre application"

#: ../Doc/library/gettext.rst:517
msgid ""
"If you are localizing your application, you can install the :func:`_` "
"function globally into the built-in namespace, usually in the main driver "
"file of your application.  This will let all your application-specific files "
"just use ``_('...')`` without having to explicitly install it in each file."
msgstr ""

#: ../Doc/library/gettext.rst:522
msgid ""
"In the simple case then, you need only add the following bit of code to the "
"main driver file of your application::"
msgstr ""

#: ../Doc/library/gettext.rst:528
msgid ""
"If you need to set the locale directory, you can pass it into the :func:"
"`install` function::"
msgstr ""

#: ../Doc/library/gettext.rst:536
msgid "Changing languages on the fly"
msgstr "Changer de langue à la volée"

#: ../Doc/library/gettext.rst:538
msgid ""
"If your program needs to support many languages at the same time, you may "
"want to create multiple translation instances and then switch between them "
"explicitly, like so::"
msgstr ""

#: ../Doc/library/gettext.rst:559
msgid "Deferred translations"
msgstr "Traductions différées"

#: ../Doc/library/gettext.rst:561
msgid ""
"In most coding situations, strings are translated where they are coded. "
"Occasionally however, you need to mark strings for translation, but defer "
"actual translation until later.  A classic example is::"
msgstr ""

#: ../Doc/library/gettext.rst:574
msgid ""
"Here, you want to mark the strings in the ``animals`` list as being "
"translatable, but you don't actually want to translate them until they are "
"printed."
msgstr ""

#: ../Doc/library/gettext.rst:578
msgid "Here is one way you can handle this situation::"
msgstr ""

#: ../Doc/library/gettext.rst:594
msgid ""
"This works because the dummy definition of :func:`_` simply returns the "
"string unchanged.  And this dummy definition will temporarily override any "
"definition of :func:`_` in the built-in namespace (until the :keyword:`del` "
"command). Take care, though if you have a previous definition of :func:`_` "
"in the local namespace."
msgstr ""

#: ../Doc/library/gettext.rst:600
msgid ""
"Note that the second use of :func:`_` will not identify \"a\" as being "
"translatable to the :program:`gettext` program, because the parameter is not "
"a string literal."
msgstr ""

#: ../Doc/library/gettext.rst:604
msgid "Another way to handle this is with the following example::"
msgstr ""

#: ../Doc/library/gettext.rst:618
msgid ""
"In this case, you are marking translatable strings with the function :func:"
"`N_`, which won't conflict with any definition of :func:`_`. However, you "
"will need to teach your message extraction program to look for translatable "
"strings marked with :func:`N_`. :program:`xgettext`, :program:`pygettext`, "
"``pybabel extract``, and :program:`xpot` all support this through the use of "
"the :option:`!-k` command-line switch. The choice of :func:`N_` here is "
"totally arbitrary; it could have just as easily been :func:"
"`MarkThisStringForTranslation`."
msgstr ""

#: ../Doc/library/gettext.rst:629
msgid "Acknowledgements"
msgstr "Remerciements"

#: ../Doc/library/gettext.rst:631
msgid ""
"The following people contributed code, feedback, design suggestions, "
"previous implementations, and valuable experience to the creation of this "
"module:"
msgstr ""

#: ../Doc/library/gettext.rst:634
msgid "Peter Funk"
msgstr "Peter Funk"

#: ../Doc/library/gettext.rst:636
msgid "James Henstridge"
msgstr "James Henstridge"

#: ../Doc/library/gettext.rst:638
msgid "Juan David Ibáñez Palomar"
msgstr "Juan David Ibáñez Palomar"

#: ../Doc/library/gettext.rst:640
msgid "Marc-André Lemburg"
msgstr "Marc-André Lemburg"

#: ../Doc/library/gettext.rst:642
msgid "Martin von Löwis"
msgstr "Martin von Löwis"

#: ../Doc/library/gettext.rst:644
msgid "François Pinard"
msgstr "François Pinard"

#: ../Doc/library/gettext.rst:646
msgid "Barry Warsaw"
msgstr "Barry Warsaw"

#: ../Doc/library/gettext.rst:648
msgid "Gustavo Niemeyer"
msgstr "Gustavo Niemeyer"

#: ../Doc/library/gettext.rst:651
msgid "Footnotes"
msgstr "Notes"

#: ../Doc/library/gettext.rst:652
msgid ""
"The default locale directory is system dependent; for example, on RedHat "
"Linux it is :file:`/usr/share/locale`, but on Solaris it is :file:`/usr/lib/"
"locale`. The :mod:`gettext` module does not try to support these system "
"dependent defaults; instead its default is :file:`sys.prefix/share/locale`. "
"For this reason, it is always best to call :func:`bindtextdomain` with an "
"explicit absolute path at the start of your application."
msgstr ""

#: ../Doc/library/gettext.rst:659
msgid "See the footnote for :func:`bindtextdomain` above."
msgstr "Voir la note de :func:`bindtextdomain` ci-dessus."
