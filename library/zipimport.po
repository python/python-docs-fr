# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-24 09:01+0200\n"
"PO-Revision-Date: 2019-11-17 23:08+0100\n"
"Last-Translator: Jules Lasne <jules.lasne@gmail.com>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.2.4\n"

#: library/zipimport.rst:2
msgid ":mod:`zipimport` --- Import modules from Zip archives"
msgstr ":mod:`zipimport` — Importer des modules à partir d'archives Zip"

#: library/zipimport.rst:9
msgid "**Source code:** :source:`Lib/zipimport.py`"
msgstr "**Code source :** :source:`Lib/zipimport.py`"

#: library/zipimport.rst:13
msgid ""
"This module adds the ability to import Python modules (:file:`\\*.py`, :file:"
"`\\*.pyc`) and packages from ZIP-format archives. It is usually not needed "
"to use the :mod:`zipimport` module explicitly; it is automatically used by "
"the built-in :keyword:`import` mechanism for :data:`sys.path` items that are "
"paths to ZIP archives."
msgstr ""
"Ce module ajoute la possibilité d'importer des modules Python (:file:`\\*."
"py`, :file:`\\*.pyc`) et des paquets depuis des archives au format ZIP. Il "
"n'est généralement pas nécessaire d'utiliser explicitement le module :mod:"
"`zipimport` ; il est automatiquement utilisé par le mécanisme intégré de :"
"keyword:`import` pour les éléments :data:`sys.path` qui sont des chemins "
"vers les archives ZIP."

#: library/zipimport.rst:19
msgid ""
"Typically, :data:`sys.path` is a list of directory names as strings.  This "
"module also allows an item of :data:`sys.path` to be a string naming a ZIP "
"file archive. The ZIP archive can contain a subdirectory structure to "
"support package imports, and a path within the archive can be specified to "
"only import from a subdirectory.  For example, the path :file:`example.zip/"
"lib/` would only import from the :file:`lib/` subdirectory within the "
"archive."
msgstr ""
"Typiquement, :data:`sys.path` est une liste de noms de répertoires sous "
"forme de chaînes.  Ce module permet également à un élément de :data:`sys."
"path` d'être une chaîne nommant une archive de fichier ZIP. L'archive ZIP "
"peut contenir une structure de sous-répertoire pour prendre en charge les "
"importations de paquets, et un chemin dans l'archive peut être spécifié pour "
"importer uniquement à partir d'un sous-répertoire.  Par exemple, le chemin "
"d'accès :file:`example.zip/lib/` importerait uniquement depuis le sous-"
"répertoire :file:`lib/` dans l'archive."

#: library/zipimport.rst:26
msgid ""
"Any files may be present in the ZIP archive, but only files :file:`.py` and :"
"file:`.pyc` are available for import.  ZIP import of dynamic modules (:file:"
"`.pyd`, :file:`.so`) is disallowed. Note that if an archive only contains :"
"file:`.py` files, Python will not attempt to modify the archive by adding "
"the corresponding :file:`.pyc` file, meaning that if a ZIP archive doesn't "
"contain :file:`.pyc` files, importing may be rather slow."
msgstr ""
"Tous les fichiers peuvent être présents dans l'archive ZIP, mais seuls les "
"fichiers :file:`.py` et :file:`.pyc` sont disponibles pour importation.  "
"L'importation ZIP des modules dynamiques (:file:`.pyd`, :file:`.so`) est "
"interdite. Notez que si une archive ne contient que des fichiers :file:`."
"py` , Python n'essaiera pas de modifier l'archive en ajoutant le fichier "
"correspondant :file:`.pyc`, ce qui signifie que si une archive ZIP ne "
"contient pas de fichier: :file:`.pyc`, l'importation peut être assez lente."

#: library/zipimport.rst:33
msgid "Previously, ZIP archives with an archive comment were not supported."
msgstr ""
"Auparavant, les archives ZIP avec un commentaire n'étaient pas prises en "
"charge."

#: library/zipimport.rst:40
msgid ""
"`PKZIP Application Note <https://pkware.cachefly.net/webdocs/casestudies/"
"APPNOTE.TXT>`_"
msgstr ""
"`PKZIP Application Note <https://pkware.cachefly.net/webdocs/casestudies/"
"APPNOTE.TXT>`_"

#: library/zipimport.rst:39
msgid ""
"Documentation on the ZIP file format by Phil Katz, the creator of the format "
"and algorithms used."
msgstr ""
"Documentation sur le format de fichier ZIP par Phil Katz, créateur du format "
"et des algorithmes utilisés."

#: library/zipimport.rst:45
msgid ":pep:`273` - Import Modules from Zip Archives"
msgstr ":pep:`273` - Import Modules from Zip Archives"

#: library/zipimport.rst:43
msgid ""
"Written by James C. Ahlstrom, who also provided an implementation. Python "
"2.3 follows the specification in :pep:`273`, but uses an implementation "
"written by Just van Rossum that uses the import hooks described in :pep:"
"`302`."
msgstr ""
"Écrit par James C. Ahlstrom, qui a également fourni une mise en œuvre. "
"Python 2.3 suit les spécifications de :pep:`273`, mais utilise une "
"implémentation écrite par Just van Rossum qui utilise les crochets "
"d'importation décrits dans :pep:`302`."

#: library/zipimport.rst:47
msgid ":pep:`302` - New Import Hooks"
msgstr ":pep:`302` — Nouveaux crochets d'importation"

#: library/zipimport.rst:48
msgid "The PEP to add the import hooks that help this module work."
msgstr ""
"Le PEP pour ajouter les crochets d'importation qui aident ce module à "
"fonctionner."

#: library/zipimport.rst:51
msgid "This module defines an exception:"
msgstr "Ce module définit une exception :"

#: library/zipimport.rst:55
msgid ""
"Exception raised by zipimporter objects. It's a subclass of :exc:"
"`ImportError`, so it can be caught as :exc:`ImportError`, too."
msgstr ""
"Exception levée par les objets *zipimporter*. C'est une sous-classe de :exc:"
"`ImportError`, donc elle peut être aussi interceptée comme une :exc:"
"`ImportError`."

#: library/zipimport.rst:62
msgid "zipimporter Objects"
msgstr "Objets *zimporter*"

#: library/zipimport.rst:64
msgid ":class:`zipimporter` is the class for importing ZIP files."
msgstr ":class:`zipimporter` est la classe pour importer des fichiers ZIP."

#: library/zipimport.rst:68
msgid ""
"Create a new zipimporter instance. *archivepath* must be a path to a ZIP "
"file, or to a specific path within a ZIP file.  For example, an "
"*archivepath* of :file:`foo/bar.zip/lib` will look for modules in the :file:"
"`lib` directory inside the ZIP file :file:`foo/bar.zip` (provided that it "
"exists)."
msgstr ""
"Créez une nouvelle instance de `zipimporter`. *archivepath* doit être un "
"chemin vers un fichier ZIP, ou vers un chemin spécifique dans un fichier "
"ZIP.  Par exemple, un *archivepath* de :file:`foo/bar.zip/lib` cherchera les "
"modules dans le répertoire :file:`lib` du fichier ZIP :file:`foo/bar.zip` "
"(si celui-ci existe)."

#: library/zipimport.rst:73
msgid ""
":exc:`ZipImportError` is raised if *archivepath* doesn't point to a valid "
"ZIP archive."
msgstr ""
":exc:`ZipImportError` est levée si *archivepath* ne pointe pas vers une "
"archive ZIP valide."

#: library/zipimport.rst:78
msgid ""
"Search for a module specified by *fullname*. *fullname* must be the fully "
"qualified (dotted) module name. It returns the zipimporter instance itself "
"if the module was found, or :const:`None` if it wasn't. The optional *path* "
"argument is ignored---it's there for compatibility with the importer "
"protocol."
msgstr ""
"Rechercher un module spécifié par *fullname*. *fullname* doit être le nom du "
"module entièrement qualifié (`dotted`). Elle retourne l'instance "
"`zipimporter` elle-même si le module a été trouvé, ou :const:`None` si ce "
"n'est pas le cas. L'argument optionnel *path* est ignoré --- il est là pour "
"la compatibilité avec le protocole de l'importateur."

#: library/zipimport.rst:87
msgid ""
"Return the code object for the specified module. Raise :exc:`ZipImportError` "
"if the module couldn't be found."
msgstr ""
"Retourne l'objet de code pour le module spécifié. Lève :exc:`ZipImportError` "
"si le module n'a pas pu être trouvé."

#: library/zipimport.rst:93
msgid ""
"Return the data associated with *pathname*. Raise :exc:`OSError` if the file "
"wasn't found."
msgstr ""
"Renvoie les données associées à *pathname*. Lève :exc:`OSError` si le "
"fichier n'a pas été trouvé."

#: library/zipimport.rst:96
msgid ":exc:`IOError` used to be raised instead of :exc:`OSError`."
msgstr ""
"Précédemment, c'était l'exception :exc:`IOError` qui était levée, au lieu "
"de :exc:`OSError`."

#: library/zipimport.rst:102
msgid ""
"Return the value ``__file__`` would be set to if the specified module was "
"imported. Raise :exc:`ZipImportError` if the module couldn't be found."
msgstr ""
"Renvoie la valeur ``__file____`` qui serait définie si le module spécifié "
"était importé. Lève :exc:`ZipImportError` si le module n'a pas pu être "
"trouvé."

#: library/zipimport.rst:111
msgid ""
"Return the source code for the specified module. Raise :exc:`ZipImportError` "
"if the module couldn't be found, return :const:`None` if the archive does "
"contain the module, but has no source for it."
msgstr ""
"Renvoie le code source du module spécifié. Lève :exc:`ZipImportError` si le "
"module n'a pas pu être trouvé, renvoie :const:`None` si l'archive contient "
"le module, mais n'en a pas la source."

#: library/zipimport.rst:119
msgid ""
"Return ``True`` if the module specified by *fullname* is a package. Raise :"
"exc:`ZipImportError` if the module couldn't be found."
msgstr ""
"Renvoie ``True`` si le module spécifié par *fullname* est un paquet. Lève :"
"exc:`ZipImportError` si le module n'a pas pu être trouvé."

#: library/zipimport.rst:125
msgid ""
"Load the module specified by *fullname*. *fullname* must be the fully "
"qualified (dotted) module name. It returns the imported module, or raises :"
"exc:`ZipImportError` if it wasn't found."
msgstr ""
"Charge le module spécifié par *fullname*. *fullname* doit être le nom du "
"module entièrement qualifié (`dotted`). Il renvoie le module importé, ou "
"augmente :exc:`ZipImportError` s'il n'a pas été trouvé."

#: library/zipimport.rst:132
msgid ""
"The file name of the importer's associated ZIP file, without a possible "
"subpath."
msgstr ""
"Le nom de fichier de l'archive ZIP associé à l'importateur, sans sous-chemin "
"possible."

#: library/zipimport.rst:138
msgid ""
"The subpath within the ZIP file where modules are searched.  This is the "
"empty string for zipimporter objects which point to the root of the ZIP file."
msgstr ""
"Le sous-chemin du fichier ZIP où les modules sont recherchés.  C'est la "
"chaîne vide pour les objets `zipimporter` qui pointent vers la racine du "
"fichier ZIP."

#: library/zipimport.rst:142
msgid ""
"The :attr:`archive` and :attr:`prefix` attributes, when combined with a "
"slash, equal the original *archivepath* argument given to the :class:"
"`zipimporter` constructor."
msgstr ""
"Les attributs :attr:`archive` et :attr:`prefix`, lorsqu'ils sont combinés "
"avec une barre oblique, égalent l'argument original *archivepath* donné au "
"constructeur :class:`zipimporter`."

#: library/zipimport.rst:150
msgid "Examples"
msgstr "Exemples"

#: library/zipimport.rst:152
msgid ""
"Here is an example that imports a module from a ZIP archive - note that the :"
"mod:`zipimport` module is not explicitly used."
msgstr ""
"Voici un exemple qui importe un module d'une archive ZIP — notez que le "
"module :mod:`zipimport` n'est pas explicitement utilisé."
