# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-29 22:40+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: library/plistlib.rst:2
msgid ":mod:`!plistlib` --- Generate and parse Apple ``.plist`` files"
msgstr ""

#: library/plistlib.rst:11
msgid "**Source code:** :source:`Lib/plistlib.py`"
msgstr "**Code source :** :source:`Lib/plistlib.py`"

#: library/plistlib.rst:19
msgid ""
"This module provides an interface for reading and writing the \"property "
"list\" files used by Apple, primarily on macOS and iOS. This module supports "
"both binary and XML plist files."
msgstr ""

#: library/plistlib.rst:23
msgid ""
"The property list (``.plist``) file format is a simple serialization "
"supporting basic object types, like dictionaries, lists, numbers and "
"strings.  Usually the top level object is a dictionary."
msgstr ""

#: library/plistlib.rst:27
msgid ""
"To write out and to parse a plist file, use the :func:`dump` and :func:"
"`load` functions."
msgstr ""

#: library/plistlib.rst:30
msgid ""
"To work with plist data in bytes or string objects, use :func:`dumps` and :"
"func:`loads`."
msgstr ""

#: library/plistlib.rst:33
msgid ""
"Values can be strings, integers, floats, booleans, tuples, lists, "
"dictionaries (but only with string keys), :class:`bytes`, :class:`bytearray` "
"or :class:`datetime.datetime` objects."
msgstr ""

#: library/plistlib.rst:37
msgid "New API, old API deprecated.  Support for binary format plists added."
msgstr ""

#: library/plistlib.rst:40
msgid ""
"Support added for reading and writing :class:`UID` tokens in binary plists "
"as used by NSKeyedArchiver and NSKeyedUnarchiver."
msgstr ""

#: library/plistlib.rst:44
msgid "Old API removed."
msgstr ""

#: library/plistlib.rst:49
msgid ""
"`PList manual page <https://developer.apple.com/library/archive/"
"documentation/Cocoa/Conceptual/PropertyLists/>`_"
msgstr ""

#: library/plistlib.rst:50
msgid "Apple's documentation of the file format."
msgstr ""

#: library/plistlib.rst:53
msgid "This module defines the following functions:"
msgstr "Ce module définit les fonctions suivantes :"

#: library/plistlib.rst:57
msgid ""
"Read a plist file. *fp* should be a readable and binary file object. Return "
"the unpacked root object (which usually is a dictionary)."
msgstr ""

#: library/plistlib.rst:61
msgid "The *fmt* is the format of the file and the following values are valid:"
msgstr ""

#: library/plistlib.rst:63
msgid ":data:`None`: Autodetect the file format"
msgstr ""

#: library/plistlib.rst:65
msgid ":data:`FMT_XML`: XML file format"
msgstr ""

#: library/plistlib.rst:67
msgid ":data:`FMT_BINARY`: Binary plist format"
msgstr ""

#: library/plistlib.rst:69
msgid ""
"The *dict_type* is the type used for dictionaries that are read from the "
"plist file."
msgstr ""

#: library/plistlib.rst:72
msgid ""
"When *aware_datetime* is true, fields with type ``datetime.datetime`` will "
"be created as :ref:`aware object <datetime-naive-aware>`, with :attr:`!"
"tzinfo` as :attr:`datetime.UTC`."
msgstr ""

#: library/plistlib.rst:76
msgid ""
"XML data for the :data:`FMT_XML` format is parsed using the Expat parser "
"from :mod:`xml.parsers.expat` -- see its documentation for possible "
"exceptions on ill-formed XML.  Unknown elements will simply be ignored by "
"the plist parser."
msgstr ""

#: library/plistlib.rst:81
msgid ""
"The parser for the binary format raises :exc:`InvalidFileException` when the "
"file cannot be parsed."
msgstr ""

#: library/plistlib.rst:131
msgid "The keyword-only parameter *aware_datetime* has been added."
msgstr ""

#: library/plistlib.rst:92
msgid ""
"Load a plist from a bytes or string object. See :func:`load` for an "
"explanation of the keyword arguments."
msgstr ""

#: library/plistlib.rst:97
msgid "*data* can be a string when *fmt* equals :data:`FMT_XML`."
msgstr ""

#: library/plistlib.rst:102
msgid ""
"Write *value* to a plist file. *Fp* should be a writable, binary file object."
msgstr ""

#: library/plistlib.rst:105
msgid ""
"The *fmt* argument specifies the format of the plist file and can be one of "
"the following values:"
msgstr ""

#: library/plistlib.rst:108
msgid ":data:`FMT_XML`: XML formatted plist file"
msgstr ""

#: library/plistlib.rst:110
msgid ":data:`FMT_BINARY`: Binary formatted plist file"
msgstr ""

#: library/plistlib.rst:112
msgid ""
"When *sort_keys* is true (the default) the keys for dictionaries will be "
"written to the plist in sorted order, otherwise they will be written in the "
"iteration order of the dictionary."
msgstr ""

#: library/plistlib.rst:116
msgid ""
"When *skipkeys* is false (the default) the function raises :exc:`TypeError` "
"when a key of a dictionary is not a string, otherwise such keys are skipped."
msgstr ""

#: library/plistlib.rst:119
msgid ""
"When *aware_datetime* is true and any field with type ``datetime.datetime`` "
"is set as an :ref:`aware object <datetime-naive-aware>`, it will convert to "
"UTC timezone before writing it."
msgstr ""

#: library/plistlib.rst:123
msgid ""
"A :exc:`TypeError` will be raised if the object is of an unsupported type or "
"a container that contains objects of unsupported types."
msgstr ""

#: library/plistlib.rst:126
msgid ""
"An :exc:`OverflowError` will be raised for integer values that cannot be "
"represented in (binary) plist files."
msgstr ""

#: library/plistlib.rst:137
msgid ""
"Return *value* as a plist-formatted bytes object. See the documentation for :"
"func:`dump` for an explanation of the keyword arguments of this function."
msgstr ""

#: library/plistlib.rst:144
msgid "The following classes are available:"
msgstr ""

#: library/plistlib.rst:148
msgid ""
"Wraps an :class:`int`.  This is used when reading or writing NSKeyedArchiver "
"encoded data, which contains UID (see PList manual)."
msgstr ""

#: library/plistlib.rst:151
msgid ""
"It has one attribute, :attr:`data`, which can be used to retrieve the int "
"value of the UID.  :attr:`data` must be in the range ``0 <= data < 2**64``."
msgstr ""

#: library/plistlib.rst:157
msgid "The following constants are available:"
msgstr ""

#: library/plistlib.rst:161
msgid "The XML format for plist files."
msgstr ""

#: library/plistlib.rst:168
msgid "The binary format for plist files"
msgstr ""

#: library/plistlib.rst:174
msgid "Examples"
msgstr "Exemples"

#: library/plistlib.rst:176
msgid "Generating a plist::"
msgstr ""

#: library/plistlib.rst:178
msgid ""
"import datetime\n"
"import plistlib\n"
"\n"
"pl = dict(\n"
"    aString = \"Doodah\",\n"
"    aList = [\"A\", \"B\", 12, 32.1, [1, 2, 3]],\n"
"    aFloat = 0.1,\n"
"    anInt = 728,\n"
"    aDict = dict(\n"
"        anotherString = \"<hello & hi there!>\",\n"
"        aThirdString = \"M\\xe4ssig, Ma\\xdf\",\n"
"        aTrueValue = True,\n"
"        aFalseValue = False,\n"
"    ),\n"
"    someData = b\"<binary gunk>\",\n"
"    someMoreData = b\"<lots of binary gunk>\" * 10,\n"
"    aDate = datetime.datetime.now()\n"
")\n"
"print(plistlib.dumps(pl).decode())"
msgstr ""

#: library/plistlib.rst:198
msgid "Parsing a plist::"
msgstr ""

#: library/plistlib.rst:200
msgid ""
"import plistlib\n"
"\n"
"plist = b\"\"\"<plist version=\"1.0\">\n"
"<dict>\n"
"    <key>foo</key>\n"
"    <string>bar</string>\n"
"</dict>\n"
"</plist>\"\"\"\n"
"pl = plistlib.loads(plist)\n"
"print(pl[\"foo\"])"
msgstr ""

#: library/plistlib.rst:13
msgid "plist"
msgstr ""

#: library/plistlib.rst:13
msgid "file"
msgstr "fichier"

#: library/plistlib.rst:13
msgid "property list"
msgstr ""
