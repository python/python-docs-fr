# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-29 21:40+0100\n"
"PO-Revision-Date: 2023-06-17 22:35+0200\n"
"Last-Translator: Christophe Nanteuil <christophe.nanteuil@gmail.com>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.2.2\n"

#: library/asyncio-llapi-index.rst:6
msgid "Low-level API Index"
msgstr "Index de l'API de bas niveau"

#: library/asyncio-llapi-index.rst:8
msgid "This page lists all low-level asyncio APIs."
msgstr "Cette page répertorie toutes les API asynchrones de bas niveau."

#: library/asyncio-llapi-index.rst:12
msgid "Obtaining the Event Loop"
msgstr "Obtenir une boucle d'évènements"

#: library/asyncio-llapi-index.rst:18
msgid ":func:`asyncio.get_running_loop`"
msgstr ":func:`asyncio.get_running_loop`"

#: library/asyncio-llapi-index.rst:19
msgid "The **preferred** function to get the running event loop."
msgstr ""
"La fonction **préférée** pour obtenir la boucle d'événements en cours "
"d'exécution."

#: library/asyncio-llapi-index.rst:21
msgid ":func:`asyncio.get_event_loop`"
msgstr ":func:`asyncio.get_event_loop`"

#: library/asyncio-llapi-index.rst:22
msgid "Get an event loop instance (running or current via the current policy)."
msgstr ""
"Renvoie une instance de boucle d'événements (en cours d'exécution ou "
"actuelle via la politique actuelle)."

#: library/asyncio-llapi-index.rst:24
msgid ":func:`asyncio.set_event_loop`"
msgstr ":func:`asyncio.set_event_loop`"

#: library/asyncio-llapi-index.rst:25
msgid "Set the event loop as current via the current policy."
msgstr ""
"Définit la boucle d'événements comme actuelle via la politique actuelle."

#: library/asyncio-llapi-index.rst:27
msgid ":func:`asyncio.new_event_loop`"
msgstr ":func:`asyncio.new_event_loop`"

#: library/asyncio-llapi-index.rst:28
msgid "Create a new event loop."
msgstr "Crée une nouvelle boucle d'événements."

#: library/asyncio-llapi-index.rst:32 library/asyncio-llapi-index.rst:269
msgid "Examples"
msgstr "Exemples"

#: library/asyncio-llapi-index.rst:33
msgid ":ref:`Using asyncio.get_running_loop() <asyncio_example_future>`."
msgstr ""
":ref:`Utilisation d'asyncio.get_running_loop() <asyncio_example_future>`."

#: library/asyncio-llapi-index.rst:37
msgid "Event Loop Methods"
msgstr "Méthodes de la boucle d'évènements"

#: library/asyncio-llapi-index.rst:39
msgid ""
"See also the main documentation section about the :ref:`asyncio-event-loop-"
"methods`."
msgstr ""
"Voir aussi la section principale de la documentation sur les :ref:`asyncio-"
"event-loop-methods`."

#: library/asyncio-llapi-index.rst:42
msgid "Lifecycle"
msgstr "Cycle de vie"

#: library/asyncio-llapi-index.rst:47
msgid ":meth:`loop.run_until_complete`"
msgstr ":meth:`loop.run_until_complete`"

#: library/asyncio-llapi-index.rst:48
msgid "Run a Future/Task/awaitable until complete."
msgstr "Exécute un Future/Task/awaitable jusqu'à ce qu'il soit terminé."

#: library/asyncio-llapi-index.rst:50
msgid ":meth:`loop.run_forever`"
msgstr ":meth:`loop.run_forever`"

#: library/asyncio-llapi-index.rst:51
msgid "Run the event loop forever."
msgstr "Exécute la boucle d'événements pour toujours."

#: library/asyncio-llapi-index.rst:53
msgid ":meth:`loop.stop`"
msgstr ":meth:`loop.stop`"

#: library/asyncio-llapi-index.rst:54
msgid "Stop the event loop."
msgstr "Arrête l'exécution de la boucle d'évènements."

#: library/asyncio-llapi-index.rst:56
msgid ":meth:`loop.close`"
msgstr ":meth:`loop.close`"

#: library/asyncio-llapi-index.rst:57
msgid "Close the event loop."
msgstr "Arrête la boucle d'évènements."

#: library/asyncio-llapi-index.rst:59
#, fuzzy
msgid ":meth:`loop.is_running`"
msgstr ":meth:`loop.is_running()`"

#: library/asyncio-llapi-index.rst:60
msgid "Return ``True`` if the event loop is running."
msgstr "Renvoie ``True`` si la boucle d'événements est en cours d'exécution."

#: library/asyncio-llapi-index.rst:62
#, fuzzy
msgid ":meth:`loop.is_closed`"
msgstr ":meth:`loop.is_closed()`"

#: library/asyncio-llapi-index.rst:63
msgid "Return ``True`` if the event loop is closed."
msgstr "Renvoie ``True`` si la boucle d'évènements est arrêtée."

#: library/asyncio-llapi-index.rst:65
msgid "``await`` :meth:`loop.shutdown_asyncgens`"
msgstr "``await`` :meth:`loop.shutdown_asyncgens`"

#: library/asyncio-llapi-index.rst:66
msgid "Close asynchronous generators."
msgstr "Ferme les générateurs asynchrones."

#: library/asyncio-llapi-index.rst:69
msgid "Debugging"
msgstr "Débogage"

#: library/asyncio-llapi-index.rst:74
msgid ":meth:`loop.set_debug`"
msgstr ":meth:`loop.set_debug`"

#: library/asyncio-llapi-index.rst:75
msgid "Enable or disable the debug mode."
msgstr "Active ou désactive le mode débogage."

#: library/asyncio-llapi-index.rst:77
msgid ":meth:`loop.get_debug`"
msgstr ":meth:`loop.get_debug`"

#: library/asyncio-llapi-index.rst:78
msgid "Get the current debug mode."
msgstr "Renvoie le mode de débogage actuel."

#: library/asyncio-llapi-index.rst:81
msgid "Scheduling Callbacks"
msgstr "Planification des rappels"

#: library/asyncio-llapi-index.rst:86
msgid ":meth:`loop.call_soon`"
msgstr ":meth:`loop.call_soon`"

#: library/asyncio-llapi-index.rst:87
msgid "Invoke a callback soon."
msgstr "Invoque un rappel bientôt."

#: library/asyncio-llapi-index.rst:89
msgid ":meth:`loop.call_soon_threadsafe`"
msgstr ":meth:`loop.call_soon_threadsafe`"

#: library/asyncio-llapi-index.rst:90
msgid "A thread-safe variant of :meth:`loop.call_soon`."
msgstr ""
"Une variante compatible avec les programmes à fils d'exécution multiples de :"
"meth:`loop.call_soon`."

#: library/asyncio-llapi-index.rst:92
msgid ":meth:`loop.call_later`"
msgstr ":meth:`loop.call_later`"

#: library/asyncio-llapi-index.rst:93
msgid "Invoke a callback *after* the given time."
msgstr "Invoque un rappel *après* le temps imparti."

#: library/asyncio-llapi-index.rst:95
msgid ":meth:`loop.call_at`"
msgstr ":meth:`loop.call_at`"

#: library/asyncio-llapi-index.rst:96
msgid "Invoke a callback *at* the given time."
msgstr "Invoque un rappel *à l'heure* indiquée."

#: library/asyncio-llapi-index.rst:99
msgid "Thread/Process Pool"
msgstr "Pool de fils d'exécution ou processus"

#: library/asyncio-llapi-index.rst:104
msgid "``await`` :meth:`loop.run_in_executor`"
msgstr "``await`` :meth:`loop.run_in_executor`"

#: library/asyncio-llapi-index.rst:105
msgid ""
"Run a CPU-bound or other blocking function in a :mod:`concurrent.futures` "
"executor."
msgstr ""
"Exécute une fonction utilisant beaucoup de CPU ou une autre fonction "
"bloquante dans un exécuteur :mod:`concurrent.futures`."

#: library/asyncio-llapi-index.rst:108
msgid ":meth:`loop.set_default_executor`"
msgstr ":meth:`loop.set_default_executor`"

#: library/asyncio-llapi-index.rst:109
msgid "Set the default executor for :meth:`loop.run_in_executor`."
msgstr "Définit l'exécuteur par défaut pour :meth:`loop.run_in_executor`."

#: library/asyncio-llapi-index.rst:112
msgid "Tasks and Futures"
msgstr "Tâches et *Futures*"

#: library/asyncio-llapi-index.rst:117
msgid ":meth:`loop.create_future`"
msgstr ":meth:`loop.create_future`"

#: library/asyncio-llapi-index.rst:118
msgid "Create a :class:`Future` object."
msgstr "Crée un objet :class:`Future`."

#: library/asyncio-llapi-index.rst:120
msgid ":meth:`loop.create_task`"
msgstr ":meth:`loop.create_task`"

#: library/asyncio-llapi-index.rst:121
msgid "Schedule coroutine as a :class:`Task`."
msgstr "Planifie la coroutine en tant que :class:`Task`."

#: library/asyncio-llapi-index.rst:123
msgid ":meth:`loop.set_task_factory`"
msgstr ":meth:`loop.set_task_factory`"

#: library/asyncio-llapi-index.rst:124
msgid ""
"Set a factory used by :meth:`loop.create_task` to create :class:`Tasks "
"<Task>`."
msgstr ""
"Définit une fabrique utilisée par :meth:`loop.create_task` pour créer des :"
"class:`Tasks <Task>`."

#: library/asyncio-llapi-index.rst:127
msgid ":meth:`loop.get_task_factory`"
msgstr ":meth:`loop.get_task_factory`"

#: library/asyncio-llapi-index.rst:128
msgid ""
"Get the factory :meth:`loop.create_task` uses to create :class:`Tasks "
"<Task>`."
msgstr ""
"Récupère la fabrique que :meth:`loop.create_task` utilise pour créer des :"
"class:`Tasks <Task>`."

#: library/asyncio-llapi-index.rst:132
msgid "DNS"
msgstr "DNS"

#: library/asyncio-llapi-index.rst:137
msgid "``await`` :meth:`loop.getaddrinfo`"
msgstr "``await`` :meth:`loop.getaddrinfo`"

#: library/asyncio-llapi-index.rst:138
msgid "Asynchronous version of :meth:`socket.getaddrinfo`."
msgstr "Version asynchrone de :meth:`socket.getaddrinfo`."

#: library/asyncio-llapi-index.rst:140
msgid "``await`` :meth:`loop.getnameinfo`"
msgstr "``await`` :meth:`loop.getnameinfo`"

#: library/asyncio-llapi-index.rst:141
msgid "Asynchronous version of :meth:`socket.getnameinfo`."
msgstr "Version asynchrone de :meth:`socket.getnameinfo`."

#: library/asyncio-llapi-index.rst:144
msgid "Networking and IPC"
msgstr "Réseau et communication inter-processus"

#: library/asyncio-llapi-index.rst:149
msgid "``await`` :meth:`loop.create_connection`"
msgstr "``await`` :meth:`loop.create_connection`"

#: library/asyncio-llapi-index.rst:150
msgid "Open a TCP connection."
msgstr "Ouvre une connexion TCP."

#: library/asyncio-llapi-index.rst:152
msgid "``await`` :meth:`loop.create_server`"
msgstr "``await`` :meth:`loop.create_server`"

#: library/asyncio-llapi-index.rst:153
msgid "Create a TCP server."
msgstr "Crée un serveur TCP."

#: library/asyncio-llapi-index.rst:155
msgid "``await`` :meth:`loop.create_unix_connection`"
msgstr "``await`` :meth:`loop.create_unix_connection`"

#: library/asyncio-llapi-index.rst:156
msgid "Open a Unix socket connection."
msgstr "Ouvre une connexion socket Unix."

#: library/asyncio-llapi-index.rst:158
msgid "``await`` :meth:`loop.create_unix_server`"
msgstr "``await`` :meth:`loop.create_unix_server`"

#: library/asyncio-llapi-index.rst:159
msgid "Create a Unix socket server."
msgstr "Crée un serveur de socket Unix."

#: library/asyncio-llapi-index.rst:161
msgid "``await`` :meth:`loop.connect_accepted_socket`"
msgstr "``await`` :meth:`loop.connect_accepted_socket`"

#: library/asyncio-llapi-index.rst:162
msgid "Wrap a :class:`~socket.socket` into a ``(transport, protocol)`` pair."
msgstr ""
"Enveloppe une :class:`~socket.socket` dans une paire ``(transport, "
"protocol)``."

#: library/asyncio-llapi-index.rst:165
msgid "``await`` :meth:`loop.create_datagram_endpoint`"
msgstr "``await`` :meth:`loop.create_datagram_endpoint`"

#: library/asyncio-llapi-index.rst:166
msgid "Open a datagram (UDP) connection."
msgstr "Ouvre une connexion par datagramme (UDP)."

#: library/asyncio-llapi-index.rst:168
msgid "``await`` :meth:`loop.sendfile`"
msgstr "``await`` :meth:`loop.sendfile`"

#: library/asyncio-llapi-index.rst:169
msgid "Send a file over a transport."
msgstr "Envoie un fichier via un transport."

#: library/asyncio-llapi-index.rst:171
msgid "``await`` :meth:`loop.start_tls`"
msgstr "``await`` :meth:`loop.start_tls`"

#: library/asyncio-llapi-index.rst:172
msgid "Upgrade an existing connection to TLS."
msgstr "Bascule une connexion existante vers TLS."

#: library/asyncio-llapi-index.rst:174
msgid "``await`` :meth:`loop.connect_read_pipe`"
msgstr "``await`` :meth:`loop.connect_read_pipe`"

#: library/asyncio-llapi-index.rst:175
msgid "Wrap a read end of a pipe into a ``(transport, protocol)`` pair."
msgstr ""
"Enveloppe une extrémité de lecture d'un tube dans une paire ``(transport, "
"protocol)``."

#: library/asyncio-llapi-index.rst:177
msgid "``await`` :meth:`loop.connect_write_pipe`"
msgstr "``await`` :meth:`loop.connect_write_pipe`"

#: library/asyncio-llapi-index.rst:178
msgid "Wrap a write end of a pipe into a ``(transport, protocol)`` pair."
msgstr ""
"Enveloppe une extrémité d'écriture d'un tube dans une paire ``(transport, "
"protocol)``."

#: library/asyncio-llapi-index.rst:181
msgid "Sockets"
msgstr "Interfaces de connexion (*sockets*)"

#: library/asyncio-llapi-index.rst:186
msgid "``await`` :meth:`loop.sock_recv`"
msgstr "``await`` :meth:`loop.sock_recv`"

#: library/asyncio-llapi-index.rst:187
msgid "Receive data from the :class:`~socket.socket`."
msgstr "Reçoit les données de :class:`~socket.socket`."

#: library/asyncio-llapi-index.rst:189
msgid "``await`` :meth:`loop.sock_recv_into`"
msgstr "``await`` :meth:`loop.sock_recv_into`"

#: library/asyncio-llapi-index.rst:190
msgid "Receive data from the :class:`~socket.socket` into a buffer."
msgstr "Reçoit les données de :class:`~socket.socket` dans un tampon."

#: library/asyncio-llapi-index.rst:192
msgid "``await`` :meth:`loop.sock_recvfrom`"
msgstr "``await`` :meth:`loop.sock_recvfrom`"

#: library/asyncio-llapi-index.rst:193
msgid "Receive a datagram from the :class:`~socket.socket`."
msgstr "Reçoit un datagramme de :class:`~socket.socket`."

#: library/asyncio-llapi-index.rst:195
msgid "``await`` :meth:`loop.sock_recvfrom_into`"
msgstr "``await`` :meth:`loop.sock_recvfrom_into`"

#: library/asyncio-llapi-index.rst:196
msgid "Receive a datagram from the :class:`~socket.socket` into a buffer."
msgstr "Reçoit un datagramme de :class:`~socket.socket` dans un tampon."

#: library/asyncio-llapi-index.rst:198
msgid "``await`` :meth:`loop.sock_sendall`"
msgstr "``await`` :meth:`loop.sock_sendall`"

#: library/asyncio-llapi-index.rst:199
msgid "Send data to the :class:`~socket.socket`."
msgstr "Envoie des données à :class:`~socket.socket`."

#: library/asyncio-llapi-index.rst:201
msgid "``await`` :meth:`loop.sock_sendto`"
msgstr "``await`` :meth:`loop.sock_sendto`"

#: library/asyncio-llapi-index.rst:202
msgid "Send a datagram via the :class:`~socket.socket` to the given address."
msgstr "Envoie un datagramme via :class:`~socket.socket` à l'adresse indiquée."

#: library/asyncio-llapi-index.rst:204
msgid "``await`` :meth:`loop.sock_connect`"
msgstr "``await`` :meth:`loop.sock_connect`"

#: library/asyncio-llapi-index.rst:205
msgid "Connect the :class:`~socket.socket`."
msgstr "Connecte la :class:`~socket.socket`."

#: library/asyncio-llapi-index.rst:207
msgid "``await`` :meth:`loop.sock_accept`"
msgstr "``await`` :meth:`loop.sock_accept`"

#: library/asyncio-llapi-index.rst:208
msgid "Accept a :class:`~socket.socket` connection."
msgstr "Accepte une connexion :class:`~socket.socket`."

#: library/asyncio-llapi-index.rst:210
msgid "``await`` :meth:`loop.sock_sendfile`"
msgstr "``await`` :meth:`loop.sock_sendfile`"

#: library/asyncio-llapi-index.rst:211
msgid "Send a file over the :class:`~socket.socket`."
msgstr "Envoie un fichier via :class:`~socket.socket`."

#: library/asyncio-llapi-index.rst:213
msgid ":meth:`loop.add_reader`"
msgstr ":meth:`loop.add_reader`"

#: library/asyncio-llapi-index.rst:214
msgid "Start watching a file descriptor for read availability."
msgstr ""
"Commence à observer un descripteur de fichier pour la disponibilité en "
"lecture."

#: library/asyncio-llapi-index.rst:216
msgid ":meth:`loop.remove_reader`"
msgstr ":meth:`loop.remove_reader`"

#: library/asyncio-llapi-index.rst:217
msgid "Stop watching a file descriptor for read availability."
msgstr ""
"Arrête d'observer un descripteur de fichier pour la disponibilité en lecture."

#: library/asyncio-llapi-index.rst:219
msgid ":meth:`loop.add_writer`"
msgstr ":meth:`loop.add_writer`"

#: library/asyncio-llapi-index.rst:220
msgid "Start watching a file descriptor for write availability."
msgstr ""
"Commence à observer un descripteur de fichier pour la disponibilité en "
"écriture."

#: library/asyncio-llapi-index.rst:222
msgid ":meth:`loop.remove_writer`"
msgstr ":meth:`loop.remove_writer`"

#: library/asyncio-llapi-index.rst:223
msgid "Stop watching a file descriptor for write availability."
msgstr ""
"Arrête d'observer un descripteur de fichier pour la disponibilité en "
"écriture."

#: library/asyncio-llapi-index.rst:226
msgid "Unix Signals"
msgstr "Signaux Unix"

#: library/asyncio-llapi-index.rst:231
msgid ":meth:`loop.add_signal_handler`"
msgstr ":meth:`loop.add_signal_handler`"

#: library/asyncio-llapi-index.rst:232
msgid "Add a handler for a :mod:`signal`."
msgstr "Ajoute un gestionnaire pour le :mod:`signal`."

#: library/asyncio-llapi-index.rst:234
msgid ":meth:`loop.remove_signal_handler`"
msgstr ":meth:`loop.remove_signal_handler`"

#: library/asyncio-llapi-index.rst:235
msgid "Remove a handler for a :mod:`signal`."
msgstr "Supprime un gestionnaire pour le :mod:`signal`."

#: library/asyncio-llapi-index.rst:238
msgid "Subprocesses"
msgstr "Sous-processus"

#: library/asyncio-llapi-index.rst:243
msgid ":meth:`loop.subprocess_exec`"
msgstr ":meth:`loop.subprocess_exec`"

#: library/asyncio-llapi-index.rst:244
msgid "Spawn a subprocess."
msgstr "Crée un sous-processus."

#: library/asyncio-llapi-index.rst:246
msgid ":meth:`loop.subprocess_shell`"
msgstr ":meth:`loop.subprocess_shell`"

#: library/asyncio-llapi-index.rst:247
msgid "Spawn a subprocess from a shell command."
msgstr "Crée un sous-processus à partir d'une commande shell."

#: library/asyncio-llapi-index.rst:250
msgid "Error Handling"
msgstr "Gestion des erreurs"

#: library/asyncio-llapi-index.rst:255
msgid ":meth:`loop.call_exception_handler`"
msgstr ":meth:`loop.call_exception_handler`"

#: library/asyncio-llapi-index.rst:256
msgid "Call the exception handler."
msgstr "Appelle le gestionnaire d'exceptions."

#: library/asyncio-llapi-index.rst:258
msgid ":meth:`loop.set_exception_handler`"
msgstr ":meth:`loop.set_exception_handler`"

#: library/asyncio-llapi-index.rst:259
msgid "Set a new exception handler."
msgstr "Définit un nouveau gestionnaire d'exceptions."

#: library/asyncio-llapi-index.rst:261
msgid ":meth:`loop.get_exception_handler`"
msgstr ":meth:`loop.get_exception_handler`"

#: library/asyncio-llapi-index.rst:262
msgid "Get the current exception handler."
msgstr "Renvoie le gestionnaire d'exceptions actuel."

#: library/asyncio-llapi-index.rst:264
msgid ":meth:`loop.default_exception_handler`"
msgstr ":meth:`loop.default_exception_handler`"

#: library/asyncio-llapi-index.rst:265
msgid "The default exception handler implementation."
msgstr "Implémentation du gestionnaire d'exceptions par défaut."

#: library/asyncio-llapi-index.rst:270
msgid ""
":ref:`Using asyncio.new_event_loop() and loop.run_forever() "
"<asyncio_example_lowlevel_helloworld>`."
msgstr ""
":ref:`Utilisation d'asyncio.new_event_loop() et de loop.run_forever() "
"<asyncio_example_lowlevel_helloworld>`."

#: library/asyncio-llapi-index.rst:273
msgid ":ref:`Using loop.call_later() <asyncio_example_call_later>`."
msgstr ":ref:`Utilisation de loop.call_later() <asyncio_example_call_later>`."

#: library/asyncio-llapi-index.rst:275
msgid ""
"Using ``loop.create_connection()`` to implement :ref:`an echo-client "
"<asyncio_example_tcp_echo_client_protocol>`."
msgstr ""
"Utilisation de ``loop.create_connection()`` pour implémenter :ref:`un client "
"écho <asyncio_example_tcp_echo_client_protocol>`."

#: library/asyncio-llapi-index.rst:278
msgid ""
"Using ``loop.create_connection()`` to :ref:`connect a socket "
"<asyncio_example_create_connection>`."
msgstr ""
"Utilisation de ``loop.create_connection()`` pour :ref:`connecter un socket "
"<asyncio_example_create_connection>`."

#: library/asyncio-llapi-index.rst:281
msgid ""
":ref:`Using add_reader() to watch an FD for read events "
"<asyncio_example_watch_fd>`."
msgstr ""
":ref:`Utilisation de add_reader() pour surveiller un descripteur de fichier "
"pour les événements de lecture <asyncio_example_watch_fd>`."

#: library/asyncio-llapi-index.rst:284
msgid ":ref:`Using loop.add_signal_handler() <asyncio_example_unix_signals>`."
msgstr ""
":ref:`Utilisation de loop.add_signal_handler() "
"<asyncio_example_unix_signals>`."

#: library/asyncio-llapi-index.rst:286
msgid ":ref:`Using loop.subprocess_exec() <asyncio_example_subprocess_proto>`."
msgstr ""
":ref:`Utilisation de loop.subprocess_exec() "
"<asyncio_example_subprocess_proto>`."

#: library/asyncio-llapi-index.rst:290
msgid "Transports"
msgstr "Transports"

#: library/asyncio-llapi-index.rst:292
msgid "All transports implement the following methods:"
msgstr "Tous les transports mettent en œuvre les méthodes suivantes :"

#: library/asyncio-llapi-index.rst:298
msgid ":meth:`transport.close() <BaseTransport.close>`"
msgstr ":meth:`transport.close() <BaseTransport.close>`"

#: library/asyncio-llapi-index.rst:299
msgid "Close the transport."
msgstr "Ferme le transport."

#: library/asyncio-llapi-index.rst:301
msgid ":meth:`transport.is_closing() <BaseTransport.is_closing>`"
msgstr ":meth:`transport.is_closing() <BaseTransport.is_closing>`"

#: library/asyncio-llapi-index.rst:302
msgid "Return ``True`` if the transport is closing or is closed."
msgstr "Renvoie ``True`` si le transport se ferme ou est fermé."

#: library/asyncio-llapi-index.rst:304
msgid ":meth:`transport.get_extra_info() <BaseTransport.get_extra_info>`"
msgstr ":meth:`transport.get_extra_info() <BaseTransport.get_extra_info>`"

#: library/asyncio-llapi-index.rst:305
msgid "Request for information about the transport."
msgstr "Demande d'informations sur le transport."

#: library/asyncio-llapi-index.rst:307
msgid ":meth:`transport.set_protocol() <BaseTransport.set_protocol>`"
msgstr ":meth:`transport.set_protocol() <BaseTransport.set_protocol>`"

#: library/asyncio-llapi-index.rst:308
msgid "Set a new protocol."
msgstr "Change le protocole."

#: library/asyncio-llapi-index.rst:310
msgid ":meth:`transport.get_protocol() <BaseTransport.get_protocol>`"
msgstr ":meth:`transport.get_protocol() <BaseTransport.get_protocol>`"

#: library/asyncio-llapi-index.rst:311
msgid "Return the current protocol."
msgstr "Renvoie le protocole courant."

#: library/asyncio-llapi-index.rst:314
msgid ""
"Transports that can receive data (TCP and Unix connections, pipes, etc).  "
"Returned from methods like :meth:`loop.create_connection`, :meth:`loop."
"create_unix_connection`, :meth:`loop.connect_read_pipe`, etc:"
msgstr ""
"Transports pouvant recevoir des données (connexions TCP et Unix, pipes, "
"etc.). Renvoyé par des méthodes telles que :meth:`loop.create_connection`, :"
"meth:`loop.create_unix_connection`, :meth:`loop.connect_read_pipe`, etc :"

#: library/asyncio-llapi-index.rst:319
msgid "Read Transports"
msgstr "Transports en lecture"

#: library/asyncio-llapi-index.rst:324
msgid ":meth:`transport.is_reading() <ReadTransport.is_reading>`"
msgstr ":meth:`transport.is_reading() <ReadTransport.is_reading>`"

#: library/asyncio-llapi-index.rst:325
msgid "Return ``True`` if the transport is receiving."
msgstr "Renvoie ``True`` si le transport est en cours de réception."

#: library/asyncio-llapi-index.rst:327
msgid ":meth:`transport.pause_reading() <ReadTransport.pause_reading>`"
msgstr ":meth:`transport.pause_reading() <ReadTransport.pause_reading>`"

#: library/asyncio-llapi-index.rst:328
msgid "Pause receiving."
msgstr "Suspend la réception."

#: library/asyncio-llapi-index.rst:330
msgid ":meth:`transport.resume_reading() <ReadTransport.resume_reading>`"
msgstr ":meth:`transport.resume_reading() <ReadTransport.resume_reading>`"

#: library/asyncio-llapi-index.rst:331
msgid "Resume receiving."
msgstr "Reprend la réception."

#: library/asyncio-llapi-index.rst:334
msgid ""
"Transports that can Send data (TCP and Unix connections, pipes, etc).  "
"Returned from methods like :meth:`loop.create_connection`, :meth:`loop."
"create_unix_connection`, :meth:`loop.connect_write_pipe`, etc:"
msgstr ""
"Transports pouvant envoyer des données (connexions TCP et Unix, pipes, "
"etc.). Renvoyé par des méthodes telles que :meth:`loop.create_connection`, :"
"meth:`loop.create_unix_connection`, :meth:`loop.connect_write_pipe`, etc :"

#: library/asyncio-llapi-index.rst:339
msgid "Write Transports"
msgstr "Transports en écriture"

#: library/asyncio-llapi-index.rst:344
msgid ":meth:`transport.write() <WriteTransport.write>`"
msgstr ":meth:`transport.write() <WriteTransport.write>`"

#: library/asyncio-llapi-index.rst:345
msgid "Write data to the transport."
msgstr "Écrit des données dans le transport."

#: library/asyncio-llapi-index.rst:347
msgid ":meth:`transport.writelines() <WriteTransport.writelines>`"
msgstr ":meth:`transport.writelines() <WriteTransport.writelines>`"

#: library/asyncio-llapi-index.rst:348
msgid "Write buffers to the transport."
msgstr "Écrit des tampons dans le transport."

#: library/asyncio-llapi-index.rst:350
msgid ":meth:`transport.can_write_eof() <WriteTransport.can_write_eof>`"
msgstr ":meth:`transport.can_write_eof() <WriteTransport.can_write_eof>`"

#: library/asyncio-llapi-index.rst:351
msgid "Return :const:`True` if the transport supports sending EOF."
msgstr "Renvoie :const:`True` si le transport prend en charge l'envoi d'EOF."

#: library/asyncio-llapi-index.rst:353
msgid ":meth:`transport.write_eof() <WriteTransport.write_eof>`"
msgstr ":meth:`transport.write_eof() <WriteTransport.write_eof>`"

#: library/asyncio-llapi-index.rst:354
msgid "Close and send EOF after flushing buffered data."
msgstr ""
"Ferme et envoie EOF après avoir vidé les données mises en mémoire tampon."

#: library/asyncio-llapi-index.rst:356
msgid ":meth:`transport.abort() <WriteTransport.abort>`"
msgstr ":meth:`transport.abort() <WriteTransport.abort>`"

#: library/asyncio-llapi-index.rst:357 library/asyncio-llapi-index.rst:383
msgid "Close the transport immediately."
msgstr "Ferme immédiatement le transport."

#: library/asyncio-llapi-index.rst:359
msgid ""
":meth:`transport.get_write_buffer_size() <WriteTransport."
"get_write_buffer_size>`"
msgstr ""
":meth:`transport.get_write_buffer_size() <WriteTransport."
"get_write_buffer_size>`"

#: library/asyncio-llapi-index.rst:361
#, fuzzy
msgid "Return the current size of the output buffer."
msgstr "Renvoie la taille actuelle du tampon de sortie."

#: library/asyncio-llapi-index.rst:363
msgid ""
":meth:`transport.get_write_buffer_limits() <WriteTransport."
"get_write_buffer_limits>`"
msgstr ""
":meth:`transport.get_write_buffer_limits() <WriteTransport."
"get_write_buffer_limits>`"

#: library/asyncio-llapi-index.rst:365
msgid "Return high and low water marks for write flow control."
msgstr "Renvoie les seuils haut et bas pour le contrôle du flux d'écriture."

#: library/asyncio-llapi-index.rst:367
msgid ""
":meth:`transport.set_write_buffer_limits() <WriteTransport."
"set_write_buffer_limits>`"
msgstr ""
":meth:`transport.set_write_buffer_limits() <WriteTransport."
"set_write_buffer_limits>`"

#: library/asyncio-llapi-index.rst:369
msgid "Set new high and low water marks for write flow control."
msgstr ""
"Définit de nouvelles bornes hautes et basses pour le contrôle du flux "
"d'écriture."

#: library/asyncio-llapi-index.rst:372
msgid "Transports returned by :meth:`loop.create_datagram_endpoint`:"
msgstr "Transports renvoyés par :meth:`loop.create_datagram_endpoint` :"

#: library/asyncio-llapi-index.rst:374
msgid "Datagram Transports"
msgstr "Transports par datagrammes"

#: library/asyncio-llapi-index.rst:379
msgid ":meth:`transport.sendto() <DatagramTransport.sendto>`"
msgstr ":meth:`transport.sendto() <DatagramTransport.sendto>`"

#: library/asyncio-llapi-index.rst:380
msgid "Send data to the remote peer."
msgstr "Envoie des données au pair distant."

#: library/asyncio-llapi-index.rst:382
msgid ":meth:`transport.abort() <DatagramTransport.abort>`"
msgstr ":meth:`transport.abort() <DatagramTransport.abort>`"

#: library/asyncio-llapi-index.rst:386
msgid ""
"Low-level transport abstraction over subprocesses. Returned by :meth:`loop."
"subprocess_exec` and :meth:`loop.subprocess_shell`:"
msgstr ""
"Abstraction de transport de bas niveau sur les sous-processus. Renvoyé par :"
"meth:`loop.subprocess_exec` et :meth:`loop.subprocess_shell` :"

#: library/asyncio-llapi-index.rst:390
msgid "Subprocess Transports"
msgstr "Transports vers des sous-processus"

#: library/asyncio-llapi-index.rst:395
msgid ":meth:`transport.get_pid() <SubprocessTransport.get_pid>`"
msgstr ":meth:`transport.get_pid() <SubprocessTransport.get_pid>`"

#: library/asyncio-llapi-index.rst:396
msgid "Return the subprocess process id."
msgstr "Renvoie l'ID de processus du sous-processus."

#: library/asyncio-llapi-index.rst:398
msgid ""
":meth:`transport.get_pipe_transport() <SubprocessTransport."
"get_pipe_transport>`"
msgstr ""
":meth:`transport.get_pipe_transport() <SubprocessTransport."
"get_pipe_transport>`"

#: library/asyncio-llapi-index.rst:400
msgid ""
"Return the transport for the requested communication pipe (*stdin*, "
"*stdout*, or *stderr*)."
msgstr ""
"Renvoie le transport pour le tube de communication demandé (*stdin*, "
"*stdout* ou *stderr*)."

#: library/asyncio-llapi-index.rst:403
msgid ":meth:`transport.get_returncode() <SubprocessTransport.get_returncode>`"
msgstr ""
":meth:`transport.get_returncode() <SubprocessTransport.get_returncode>`"

#: library/asyncio-llapi-index.rst:404
msgid "Return the subprocess return code."
msgstr "Renvoie le code de retour du sous-processus."

#: library/asyncio-llapi-index.rst:406
msgid ":meth:`transport.kill() <SubprocessTransport.kill>`"
msgstr ":meth:`transport.kill() <SubprocessTransport.kill>`"

#: library/asyncio-llapi-index.rst:407
msgid "Kill the subprocess."
msgstr "Tue le sous-processus."

#: library/asyncio-llapi-index.rst:409
msgid ":meth:`transport.send_signal() <SubprocessTransport.send_signal>`"
msgstr ":meth:`transport.send_signal() <SubprocessTransport.send_signal>`"

#: library/asyncio-llapi-index.rst:410
msgid "Send a signal to the subprocess."
msgstr "Envoie un signal au sous-processus."

#: library/asyncio-llapi-index.rst:412
msgid ":meth:`transport.terminate() <SubprocessTransport.terminate>`"
msgstr ":meth:`transport.terminate() <SubprocessTransport.terminate>`"

#: library/asyncio-llapi-index.rst:413
msgid "Stop the subprocess."
msgstr "Termine le sous-processus."

#: library/asyncio-llapi-index.rst:415
msgid ":meth:`transport.close() <SubprocessTransport.close>`"
msgstr ":meth:`transport.close() <SubprocessTransport.close>`"

#: library/asyncio-llapi-index.rst:416
msgid "Kill the subprocess and close all pipes."
msgstr "Tue le sous-processus et ferme tous les tubes."

#: library/asyncio-llapi-index.rst:420
msgid "Protocols"
msgstr "Protocoles"

#: library/asyncio-llapi-index.rst:422
msgid "Protocol classes can implement the following **callback methods**:"
msgstr ""
"Les classes de protocole peuvent implémenter les **méthodes de rappel** "
"suivantes :"

#: library/asyncio-llapi-index.rst:428
msgid "``callback`` :meth:`connection_made() <BaseProtocol.connection_made>`"
msgstr "``callback`` :meth:`connection_made() <BaseProtocol.connection_made>`"

#: library/asyncio-llapi-index.rst:429
msgid "Called when a connection is made."
msgstr "Appelée lorsqu'une connexion est établie."

#: library/asyncio-llapi-index.rst:431
msgid "``callback`` :meth:`connection_lost() <BaseProtocol.connection_lost>`"
msgstr "``callback`` :meth:`connection_lost() <BaseProtocol.connection_lost>`"

#: library/asyncio-llapi-index.rst:432
msgid "Called when the connection is lost or closed."
msgstr "Appelé lorsqu'une connexion est perdue ou fermée."

#: library/asyncio-llapi-index.rst:434
msgid "``callback`` :meth:`pause_writing() <BaseProtocol.pause_writing>`"
msgstr "``callback`` :meth:`pause_writing() <BaseProtocol.pause_writing>`"

#: library/asyncio-llapi-index.rst:435
msgid "Called when the transport's buffer goes over the high water mark."
msgstr "Appelée lorsque la mémoire tampon du transport dépasse le seuil haut."

#: library/asyncio-llapi-index.rst:437
msgid "``callback`` :meth:`resume_writing() <BaseProtocol.resume_writing>`"
msgstr "``callback`` :meth:`resume_writing() <BaseProtocol.resume_writing>`"

#: library/asyncio-llapi-index.rst:438
msgid "Called when the transport's buffer drains below the low water mark."
msgstr ""
"Appelée lorsque la mémoire tampon du transport passe sous le seuil bas."

#: library/asyncio-llapi-index.rst:441
msgid "Streaming Protocols (TCP, Unix Sockets, Pipes)"
msgstr "Protocoles de flux (TCP, Unix Sockets, Pipes)"

#: library/asyncio-llapi-index.rst:446
msgid "``callback`` :meth:`data_received() <Protocol.data_received>`"
msgstr "``callback`` :meth:`data_received() <Protocol.data_received>`"

#: library/asyncio-llapi-index.rst:447
msgid "Called when some data is received."
msgstr "Appelée lorsque certaines données sont reçues."

#: library/asyncio-llapi-index.rst:449
msgid "``callback`` :meth:`eof_received() <Protocol.eof_received>`"
msgstr "``callback`` :meth:`eof_received() <Protocol.eof_received>`"

#: library/asyncio-llapi-index.rst:450 library/asyncio-llapi-index.rst:465
msgid "Called when an EOF is received."
msgstr "Appelée lorsqu'un EOF est reçu."

#: library/asyncio-llapi-index.rst:453
msgid "Buffered Streaming Protocols"
msgstr "Protocoles de flux tamponnés"

#: library/asyncio-llapi-index.rst:458
msgid "``callback`` :meth:`get_buffer() <BufferedProtocol.get_buffer>`"
msgstr "``callback`` :meth:`get_buffer() <BufferedProtocol.get_buffer>`"

#: library/asyncio-llapi-index.rst:459
msgid "Called to allocate a new receive buffer."
msgstr "Appelée pour allouer un nouveau tampon de réception."

#: library/asyncio-llapi-index.rst:461
msgid "``callback`` :meth:`buffer_updated() <BufferedProtocol.buffer_updated>`"
msgstr ""
"``callback`` :meth:`buffer_updated() <BufferedProtocol.buffer_updated>`"

#: library/asyncio-llapi-index.rst:462
msgid "Called when the buffer was updated with the received data."
msgstr "Appelée lorsque le tampon a été mis à jour avec les données reçues."

#: library/asyncio-llapi-index.rst:464
msgid "``callback`` :meth:`eof_received() <BufferedProtocol.eof_received>`"
msgstr "``callback`` :meth:`eof_received() <BufferedProtocol.eof_received>`"

#: library/asyncio-llapi-index.rst:468
msgid "Datagram Protocols"
msgstr "Protocoles par datagrammes (non-connectés)"

#: library/asyncio-llapi-index.rst:473
msgid ""
"``callback`` :meth:`datagram_received() <DatagramProtocol.datagram_received>`"
msgstr ""
"``callback`` :meth:`datagram_received() <DatagramProtocol.datagram_received>`"

#: library/asyncio-llapi-index.rst:475
msgid "Called when a datagram is received."
msgstr "Appelée lorsqu'un datagramme est reçu."

#: library/asyncio-llapi-index.rst:477
msgid "``callback`` :meth:`error_received() <DatagramProtocol.error_received>`"
msgstr ""
"``callback`` :meth:`error_received() <DatagramProtocol.error_received>`"

#: library/asyncio-llapi-index.rst:478
msgid ""
"Called when a previous send or receive operation raises an :class:`OSError`."
msgstr ""
"Appelée lorsqu'une opération d'envoi ou de réception précédente lève une :"
"class:`OSError`."

#: library/asyncio-llapi-index.rst:482
msgid "Subprocess Protocols"
msgstr "Protocoles liés aux sous-processus"

#: library/asyncio-llapi-index.rst:487
#, fuzzy
msgid "``callback`` :meth:`~SubprocessProtocol.pipe_data_received`"
msgstr ""
"``callback`` :meth:`pipe_data_received() <SubprocessProtocol."
"pipe_data_received>`"

#: library/asyncio-llapi-index.rst:488
msgid ""
"Called when the child process writes data into its *stdout* or *stderr* pipe."
msgstr ""
"Appelée lorsqu'un processus enfant écrit sur sa sortie d'erreur ou sa sortie "
"standard."

#: library/asyncio-llapi-index.rst:491
#, fuzzy
msgid "``callback`` :meth:`~SubprocessProtocol.pipe_connection_lost`"
msgstr ""
"``callback`` :meth:`pipe_connection_lost() <SubprocessProtocol."
"pipe_connection_lost>`"

#: library/asyncio-llapi-index.rst:492
msgid ""
"Called when one of the pipes communicating with the child process is closed."
msgstr ""
"Appelée lorsqu'un tube de communication avec un sous-processus est fermée."

#: library/asyncio-llapi-index.rst:495
msgid ""
"``callback`` :meth:`process_exited() <SubprocessProtocol.process_exited>`"
msgstr ""
"``callback`` :meth:`process_exited() <SubprocessProtocol.process_exited>`"

#: library/asyncio-llapi-index.rst:497
msgid ""
"Called when the child process has exited. It can be called before :meth:"
"`~SubprocessProtocol.pipe_data_received` and :meth:`~SubprocessProtocol."
"pipe_connection_lost` methods."
msgstr ""

#: library/asyncio-llapi-index.rst:503
msgid "Event Loop Policies"
msgstr "Politiques de boucle d'événements"

#: library/asyncio-llapi-index.rst:505
msgid ""
"Policies is a low-level mechanism to alter the behavior of functions like :"
"func:`asyncio.get_event_loop`.  See also the main :ref:`policies section "
"<asyncio-policies>` for more details."
msgstr ""
"Les politiques sont un mécanisme de bas niveau pour modifier le comportement "
"de fonctions telles que :func:`asyncio.get_event_loop`. Voir aussi la "
"section principale :ref:`asyncio-policies` pour plus de détails."

#: library/asyncio-llapi-index.rst:511
msgid "Accessing Policies"
msgstr "Accès aux politiques"

#: library/asyncio-llapi-index.rst:516
msgid ":meth:`asyncio.get_event_loop_policy`"
msgstr ":meth:`asyncio.get_event_loop_policy`"

#: library/asyncio-llapi-index.rst:517
msgid "Return the current process-wide policy."
msgstr "Renvoie la politique actuelle à l'échelle du processus."

#: library/asyncio-llapi-index.rst:519
msgid ":meth:`asyncio.set_event_loop_policy`"
msgstr ":meth:`asyncio.set_event_loop_policy`"

#: library/asyncio-llapi-index.rst:520
msgid "Set a new process-wide policy."
msgstr "Définit une nouvelle politique à l'échelle du processus."

#: library/asyncio-llapi-index.rst:522
msgid ":class:`AbstractEventLoopPolicy`"
msgstr ":class:`AbstractEventLoopPolicy`"

#: library/asyncio-llapi-index.rst:523
msgid "Base class for policy objects."
msgstr "Classe mère pour les objets de politique."

#~ msgid "Called when the child process has exited."
#~ msgstr "Appelée lorsqu'un processus enfant se termine."
