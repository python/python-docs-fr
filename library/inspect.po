# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-29 16:06+0100\n"
"PO-Revision-Date: 2017-05-27 19:55+0200\n"
"Last-Translator: Julien Palard <julien@palard.fr>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 1.8.11\n"

#: ../Doc/library/inspect.rst:2
msgid ":mod:`inspect` --- Inspect live objects"
msgstr ""

#: ../Doc/library/inspect.rst:10
msgid "**Source code:** :source:`Lib/inspect.py`"
msgstr "**Code source :** :source:`Lib/inspect.py`"

#: ../Doc/library/inspect.rst:14
msgid ""
"The :mod:`inspect` module provides several useful functions to help get "
"information about live objects such as modules, classes, methods, functions, "
"tracebacks, frame objects, and code objects.  For example, it can help you "
"examine the contents of a class, retrieve the source code of a method, "
"extract and format the argument list for a function, or get all the "
"information you need to display a detailed traceback."
msgstr ""

#: ../Doc/library/inspect.rst:21
msgid ""
"There are four main kinds of services provided by this module: type "
"checking, getting source code, inspecting classes and functions, and "
"examining the interpreter stack."
msgstr ""

#: ../Doc/library/inspect.rst:29
msgid "Types and members"
msgstr ""

#: ../Doc/library/inspect.rst:31
msgid ""
"The :func:`getmembers` function retrieves the members of an object such as a "
"class or module. The functions whose names begin with \"is\" are mainly "
"provided as convenient choices for the second argument to :func:"
"`getmembers`. They also help you determine when you can expect to find the "
"following special attributes:"
msgstr ""

#: ../Doc/library/inspect.rst:41
msgid "Type"
msgstr "Type"

#: ../Doc/library/inspect.rst:41
msgid "Attribute"
msgstr "Attribut"

#: ../Doc/library/inspect.rst:41
msgid "Description"
msgstr "Description"

#: ../Doc/library/inspect.rst:43
msgid "module"
msgstr "module"

#: ../Doc/library/inspect.rst:43 ../Doc/library/inspect.rst:48
#: ../Doc/library/inspect.rst:58 ../Doc/library/inspect.rst:73
#: ../Doc/library/inspect.rst:222
msgid "__doc__"
msgstr "__doc__"

#: ../Doc/library/inspect.rst:43 ../Doc/library/inspect.rst:48
#: ../Doc/library/inspect.rst:58 ../Doc/library/inspect.rst:73
#: ../Doc/library/inspect.rst:222
msgid "documentation string"
msgstr ""

#: ../Doc/library/inspect.rst:45
msgid "__file__"
msgstr "__file__"

#: ../Doc/library/inspect.rst:45
msgid "filename (missing for built-in modules)"
msgstr ""

#: ../Doc/library/inspect.rst:48
msgid "class"
msgstr "classe"

#: ../Doc/library/inspect.rst:50 ../Doc/library/inspect.rst:60
#: ../Doc/library/inspect.rst:75 ../Doc/library/inspect.rst:191
#: ../Doc/library/inspect.rst:205 ../Doc/library/inspect.rst:224
msgid "__name__"
msgstr "__name__"

#: ../Doc/library/inspect.rst:50
msgid "name with which this class was defined"
msgstr ""

#: ../Doc/library/inspect.rst:53 ../Doc/library/inspect.rst:63
#: ../Doc/library/inspect.rst:78 ../Doc/library/inspect.rst:193
#: ../Doc/library/inspect.rst:207 ../Doc/library/inspect.rst:227
msgid "__qualname__"
msgstr "__qualname__"

#: ../Doc/library/inspect.rst:53 ../Doc/library/inspect.rst:63
#: ../Doc/library/inspect.rst:78 ../Doc/library/inspect.rst:193
#: ../Doc/library/inspect.rst:207 ../Doc/library/inspect.rst:227
msgid "qualified name"
msgstr "nom qualifié"

#: ../Doc/library/inspect.rst:55
msgid "__module__"
msgstr "__module__"

#: ../Doc/library/inspect.rst:55
msgid "name of module in which this class was defined"
msgstr ""

#: ../Doc/library/inspect.rst:58
msgid "method"
msgstr "méthode"

#: ../Doc/library/inspect.rst:60
msgid "name with which this method was defined"
msgstr ""

#: ../Doc/library/inspect.rst:65
msgid "__func__"
msgstr "__func__"

#: ../Doc/library/inspect.rst:65
msgid "function object containing implementation of method"
msgstr ""

#: ../Doc/library/inspect.rst:69 ../Doc/library/inspect.rst:229
msgid "__self__"
msgstr "__self__"

#: ../Doc/library/inspect.rst:69
msgid "instance to which this method is bound, or ``None``"
msgstr ""

#: ../Doc/library/inspect.rst:73
msgid "function"
msgstr "fonction"

#: ../Doc/library/inspect.rst:75
msgid "name with which this function was defined"
msgstr ""

#: ../Doc/library/inspect.rst:80
msgid "__code__"
msgstr "__code__"

#: ../Doc/library/inspect.rst:80
msgid "code object containing compiled function :term:`bytecode`"
msgstr ""

#: ../Doc/library/inspect.rst:84
msgid "__defaults__"
msgstr "__defaults__"

#: ../Doc/library/inspect.rst:84
msgid "tuple of any default values for positional or keyword parameters"
msgstr ""

#: ../Doc/library/inspect.rst:88
msgid "__kwdefaults__"
msgstr "__kwdefaults__"

#: ../Doc/library/inspect.rst:88
msgid "mapping of any default values for keyword-only parameters"
msgstr ""

#: ../Doc/library/inspect.rst:92
msgid "__globals__"
msgstr "__globals__"

#: ../Doc/library/inspect.rst:92
msgid "global namespace in which this function was defined"
msgstr ""

#: ../Doc/library/inspect.rst:95
msgid "__annotations__"
msgstr "__annotations__"

#: ../Doc/library/inspect.rst:95
msgid ""
"mapping of parameters names to annotations; ``\"return\"`` key is reserved "
"for return annotations."
msgstr ""

#: ../Doc/library/inspect.rst:101
msgid "traceback"
msgstr "traceback"

#: ../Doc/library/inspect.rst:101
msgid "tb_frame"
msgstr "tb_frame"

#: ../Doc/library/inspect.rst:101
msgid "frame object at this level"
msgstr ""

#: ../Doc/library/inspect.rst:104
msgid "tb_lasti"
msgstr "tb_lasti"

#: ../Doc/library/inspect.rst:104 ../Doc/library/inspect.rst:126
msgid "index of last attempted instruction in bytecode"
msgstr ""

#: ../Doc/library/inspect.rst:107
msgid "tb_lineno"
msgstr "tb_lineno"

#: ../Doc/library/inspect.rst:107 ../Doc/library/inspect.rst:129
msgid "current line number in Python source code"
msgstr ""

#: ../Doc/library/inspect.rst:110
msgid "tb_next"
msgstr "tb_next"

#: ../Doc/library/inspect.rst:110
msgid "next inner traceback object (called by this level)"
msgstr ""

#: ../Doc/library/inspect.rst:114 ../Doc/library/inspect.rst:195
#: ../Doc/library/inspect.rst:212
msgid "frame"
msgstr ""

#: ../Doc/library/inspect.rst:114
msgid "f_back"
msgstr "f_back"

#: ../Doc/library/inspect.rst:114
msgid "next outer frame object (this frame's caller)"
msgstr ""

#: ../Doc/library/inspect.rst:117
msgid "f_builtins"
msgstr "f_builtins"

#: ../Doc/library/inspect.rst:117
msgid "builtins namespace seen by this frame"
msgstr ""

#: ../Doc/library/inspect.rst:120
msgid "f_code"
msgstr "f_code"

#: ../Doc/library/inspect.rst:120
msgid "code object being executed in this frame"
msgstr ""

#: ../Doc/library/inspect.rst:123
msgid "f_globals"
msgstr "f_globals"

#: ../Doc/library/inspect.rst:123
msgid "global namespace seen by this frame"
msgstr ""

#: ../Doc/library/inspect.rst:126
msgid "f_lasti"
msgstr "f_lasti"

#: ../Doc/library/inspect.rst:129
msgid "f_lineno"
msgstr "f_lineno"

#: ../Doc/library/inspect.rst:132
msgid "f_locals"
msgstr "f_locals"

#: ../Doc/library/inspect.rst:132
msgid "local namespace seen by this frame"
msgstr ""

#: ../Doc/library/inspect.rst:135
msgid "f_trace"
msgstr "f_trace"

#: ../Doc/library/inspect.rst:135
msgid "tracing function for this frame, or ``None``"
msgstr ""

#: ../Doc/library/inspect.rst:138 ../Doc/library/inspect.rst:199
#: ../Doc/library/inspect.rst:216
msgid "code"
msgstr ""

#: ../Doc/library/inspect.rst:138
msgid "co_argcount"
msgstr "co_argcount"

#: ../Doc/library/inspect.rst:138
msgid ""
"number of arguments (not including keyword only arguments, \\* or \\*\\* "
"args)"
msgstr ""

#: ../Doc/library/inspect.rst:143
msgid "co_code"
msgstr "co_code"

#: ../Doc/library/inspect.rst:143
msgid "string of raw compiled bytecode"
msgstr ""

#: ../Doc/library/inspect.rst:146
msgid "co_cellvars"
msgstr ""

#: ../Doc/library/inspect.rst:146
msgid "tuple of names of cell variables (referenced by containing scopes)"
msgstr ""

#: ../Doc/library/inspect.rst:150
msgid "co_consts"
msgstr "co_consts"

#: ../Doc/library/inspect.rst:150
msgid "tuple of constants used in the bytecode"
msgstr ""

#: ../Doc/library/inspect.rst:153
msgid "co_filename"
msgstr "co_filename"

#: ../Doc/library/inspect.rst:153
msgid "name of file in which this code object was created"
msgstr ""

#: ../Doc/library/inspect.rst:157
msgid "co_firstlineno"
msgstr "co_firstlineno"

#: ../Doc/library/inspect.rst:157
msgid "number of first line in Python source code"
msgstr ""

#: ../Doc/library/inspect.rst:160
msgid "co_flags"
msgstr "co_flags"

#: ../Doc/library/inspect.rst:160
msgid ""
"bitmap of ``CO_*`` flags, read more :ref:`here <inspect-module-co-flags>`"
msgstr ""

#: ../Doc/library/inspect.rst:164
msgid "co_lnotab"
msgstr "co_lnotab"

#: ../Doc/library/inspect.rst:164
msgid "encoded mapping of line numbers to bytecode indices"
msgstr ""

#: ../Doc/library/inspect.rst:168
msgid "co_freevars"
msgstr "co_freevars"

#: ../Doc/library/inspect.rst:168
msgid "tuple of names of free variables (referenced via a function's closure)"
msgstr ""

#: ../Doc/library/inspect.rst:172
msgid "co_kwonlyargcount"
msgstr "co_kwonlyargcount"

#: ../Doc/library/inspect.rst:172
msgid "number of keyword only arguments (not including \\*\\* arg)"
msgstr ""

#: ../Doc/library/inspect.rst:176
msgid "co_name"
msgstr "co_name"

#: ../Doc/library/inspect.rst:176
msgid "name with which this code object was defined"
msgstr ""

#: ../Doc/library/inspect.rst:179
msgid "co_names"
msgstr "co_names"

#: ../Doc/library/inspect.rst:179
msgid "tuple of names of local variables"
msgstr ""

#: ../Doc/library/inspect.rst:182
msgid "co_nlocals"
msgstr "co_nlocals"

#: ../Doc/library/inspect.rst:182
msgid "number of local variables"
msgstr ""

#: ../Doc/library/inspect.rst:184
msgid "co_stacksize"
msgstr "co_stacksize"

#: ../Doc/library/inspect.rst:184
msgid "virtual machine stack space required"
msgstr ""

#: ../Doc/library/inspect.rst:187
msgid "co_varnames"
msgstr "co_varnames"

#: ../Doc/library/inspect.rst:187
msgid "tuple of names of arguments and local variables"
msgstr ""

#: ../Doc/library/inspect.rst:191
msgid "generator"
msgstr "générateur"

#: ../Doc/library/inspect.rst:191 ../Doc/library/inspect.rst:205
msgid "name"
msgstr ""

#: ../Doc/library/inspect.rst:195
msgid "gi_frame"
msgstr "gi_frame"

#: ../Doc/library/inspect.rst:197
msgid "gi_running"
msgstr "gi_running"

#: ../Doc/library/inspect.rst:197
msgid "is the generator running?"
msgstr ""

#: ../Doc/library/inspect.rst:199
msgid "gi_code"
msgstr "gi_code"

#: ../Doc/library/inspect.rst:201
msgid "gi_yieldfrom"
msgstr "gi_yieldfrom"

#: ../Doc/library/inspect.rst:201
msgid "object being iterated by ``yield from``, or ``None``"
msgstr ""

#: ../Doc/library/inspect.rst:205
msgid "coroutine"
msgstr "coroutine"

#: ../Doc/library/inspect.rst:209
msgid "cr_await"
msgstr "cr_await"

#: ../Doc/library/inspect.rst:209
msgid "object being awaited on, or ``None``"
msgstr ""

#: ../Doc/library/inspect.rst:212
msgid "cr_frame"
msgstr "cr_frame"

#: ../Doc/library/inspect.rst:214
msgid "cr_running"
msgstr "cr_running"

#: ../Doc/library/inspect.rst:214
msgid "is the coroutine running?"
msgstr ""

#: ../Doc/library/inspect.rst:216
msgid "cr_code"
msgstr "cr_code"

#: ../Doc/library/inspect.rst:218
msgid "cr_origin"
msgstr ""

#: ../Doc/library/inspect.rst:218
msgid "where coroutine was created, or ``None``. See |coroutine-origin-link|"
msgstr ""

#: ../Doc/library/inspect.rst:222
msgid "builtin"
msgstr ""

#: ../Doc/library/inspect.rst:224
msgid "original name of this function or method"
msgstr ""

#: ../Doc/library/inspect.rst:229
msgid "instance to which a method is bound, or ``None``"
msgstr ""

#: ../Doc/library/inspect.rst:236
msgid "Add ``__qualname__`` and ``gi_yieldfrom`` attributes to generators."
msgstr ""

#: ../Doc/library/inspect.rst:238
msgid ""
"The ``__name__`` attribute of generators is now set from the function name, "
"instead of the code name, and it can now be modified."
msgstr ""

#: ../Doc/library/inspect.rst:243
msgid "Add ``cr_origin`` attribute to coroutines."
msgstr ""

#: ../Doc/library/inspect.rst:247
msgid ""
"Return all the members of an object in a list of (name, value) pairs sorted "
"by name.  If the optional *predicate* argument is supplied, only members for "
"which the predicate returns a true value are included."
msgstr ""

#: ../Doc/library/inspect.rst:253
msgid ""
":func:`getmembers` will only return class attributes defined in the "
"metaclass when the argument is a class and those attributes have been listed "
"in the metaclass' custom :meth:`__dir__`."
msgstr ""

#: ../Doc/library/inspect.rst:260
msgid ""
"Return the name of the module named by the file *path*, without including "
"the names of enclosing packages. The file extension is checked against all "
"of the entries in :func:`importlib.machinery.all_suffixes`. If it matches, "
"the final path component is returned with the extension removed. Otherwise, "
"``None`` is returned."
msgstr ""

#: ../Doc/library/inspect.rst:266
msgid ""
"Note that this function *only* returns a meaningful name for actual Python "
"modules - paths that potentially refer to Python packages will still return "
"``None``."
msgstr ""

#: ../Doc/library/inspect.rst:270
msgid "The function is based directly on :mod:`importlib`."
msgstr ""

#: ../Doc/library/inspect.rst:276
msgid "Return true if the object is a module."
msgstr ""

#: ../Doc/library/inspect.rst:281
msgid ""
"Return true if the object is a class, whether built-in or created in Python "
"code."
msgstr ""

#: ../Doc/library/inspect.rst:287
msgid "Return true if the object is a bound method written in Python."
msgstr ""

#: ../Doc/library/inspect.rst:292
msgid ""
"Return true if the object is a Python function, which includes functions "
"created by a :term:`lambda` expression."
msgstr ""

#: ../Doc/library/inspect.rst:298
msgid "Return true if the object is a Python generator function."
msgstr ""

#: ../Doc/library/inspect.rst:303
msgid "Return true if the object is a generator."
msgstr ""

#: ../Doc/library/inspect.rst:308
msgid ""
"Return true if the object is a :term:`coroutine function` (a function "
"defined with an :keyword:`async def` syntax)."
msgstr ""

#: ../Doc/library/inspect.rst:316
msgid ""
"Return true if the object is a :term:`coroutine` created by an :keyword:"
"`async def` function."
msgstr ""

#: ../Doc/library/inspect.rst:324
msgid "Return true if the object can be used in :keyword:`await` expression."
msgstr ""

#: ../Doc/library/inspect.rst:326
msgid ""
"Can also be used to distinguish generator-based coroutines from regular "
"generators::"
msgstr ""

#: ../Doc/library/inspect.rst:343
msgid ""
"Return true if the object is an :term:`asynchronous generator` function, for "
"example::"
msgstr ""

#: ../Doc/library/inspect.rst:357
msgid ""
"Return true if the object is an :term:`asynchronous generator iterator` "
"created by an :term:`asynchronous generator` function."
msgstr ""

#: ../Doc/library/inspect.rst:364
msgid "Return true if the object is a traceback."
msgstr ""

#: ../Doc/library/inspect.rst:369
msgid "Return true if the object is a frame."
msgstr ""

#: ../Doc/library/inspect.rst:374
msgid "Return true if the object is a code."
msgstr ""

#: ../Doc/library/inspect.rst:379
msgid ""
"Return true if the object is a built-in function or a bound built-in method."
msgstr ""

#: ../Doc/library/inspect.rst:384
msgid ""
"Return true if the object is a user-defined or built-in function or method."
msgstr ""

#: ../Doc/library/inspect.rst:389
msgid "Return true if the object is an abstract base class."
msgstr ""

#: ../Doc/library/inspect.rst:394
msgid ""
"Return true if the object is a method descriptor, but not if :func:"
"`ismethod`, :func:`isclass`, :func:`isfunction` or :func:`isbuiltin` are "
"true."
msgstr ""

#: ../Doc/library/inspect.rst:398
msgid ""
"This, for example, is true of ``int.__add__``.  An object passing this test "
"has a :meth:`~object.__get__` method but not a :meth:`~object.__set__` "
"method, but beyond that the set of attributes varies.  A :attr:`~definition."
"__name__` attribute is usually sensible, and :attr:`__doc__` often is."
msgstr ""

#: ../Doc/library/inspect.rst:404
msgid ""
"Methods implemented via descriptors that also pass one of the other tests "
"return false from the :func:`ismethoddescriptor` test, simply because the "
"other tests promise more -- you can, e.g., count on having the :attr:"
"`__func__` attribute (etc) when an object passes :func:`ismethod`."
msgstr ""

#: ../Doc/library/inspect.rst:412
msgid "Return true if the object is a data descriptor."
msgstr ""

#: ../Doc/library/inspect.rst:414
msgid ""
"Data descriptors have both a :attr:`~object.__get__` and a :attr:`~object."
"__set__` method. Examples are properties (defined in Python), getsets, and "
"members.  The latter two are defined in C and there are more specific tests "
"available for those types, which is robust across Python implementations.  "
"Typically, data descriptors will also have :attr:`~definition.__name__` and :"
"attr:`__doc__` attributes (properties, getsets, and members have both of "
"these attributes), but this is not guaranteed."
msgstr ""

#: ../Doc/library/inspect.rst:425
msgid "Return true if the object is a getset descriptor."
msgstr ""

#: ../Doc/library/inspect.rst:429
msgid ""
"getsets are attributes defined in extension modules via :c:type:"
"`PyGetSetDef` structures.  For Python implementations without such types, "
"this method will always return ``False``."
msgstr ""

#: ../Doc/library/inspect.rst:436
msgid "Return true if the object is a member descriptor."
msgstr ""

#: ../Doc/library/inspect.rst:440
msgid ""
"Member descriptors are attributes defined in extension modules via :c:type:"
"`PyMemberDef` structures.  For Python implementations without such types, "
"this method will always return ``False``."
msgstr ""

#: ../Doc/library/inspect.rst:448
msgid "Retrieving source code"
msgstr ""

#: ../Doc/library/inspect.rst:452
msgid ""
"Get the documentation string for an object, cleaned up with :func:"
"`cleandoc`. If the documentation string for an object is not provided and "
"the object is a class, a method, a property or a descriptor, retrieve the "
"documentation string from the inheritance hierarchy."
msgstr ""

#: ../Doc/library/inspect.rst:457
msgid "Documentation strings are now inherited if not overridden."
msgstr ""

#: ../Doc/library/inspect.rst:463
msgid ""
"Return in a single string any lines of comments immediately preceding the "
"object's source code (for a class, function, or method), or at the top of "
"the Python source file (if the object is a module).  If the object's source "
"code is unavailable, return ``None``.  This could happen if the object has "
"been defined in C or the interactive shell."
msgstr ""

#: ../Doc/library/inspect.rst:472
msgid ""
"Return the name of the (text or binary) file in which an object was defined. "
"This will fail with a :exc:`TypeError` if the object is a built-in module, "
"class, or function."
msgstr ""

#: ../Doc/library/inspect.rst:479
msgid "Try to guess which module an object was defined in."
msgstr ""

#: ../Doc/library/inspect.rst:484
msgid ""
"Return the name of the Python source file in which an object was defined.  "
"This will fail with a :exc:`TypeError` if the object is a built-in module, "
"class, or function."
msgstr ""

#: ../Doc/library/inspect.rst:491
msgid ""
"Return a list of source lines and starting line number for an object. The "
"argument may be a module, class, method, function, traceback, frame, or code "
"object.  The source code is returned as a list of the lines corresponding to "
"the object and the line number indicates where in the original source file "
"the first line of code was found.  An :exc:`OSError` is raised if the source "
"code cannot be retrieved."
msgstr ""

#: ../Doc/library/inspect.rst:498 ../Doc/library/inspect.rst:510
msgid ""
":exc:`OSError` is raised instead of :exc:`IOError`, now an alias of the "
"former."
msgstr ""

#: ../Doc/library/inspect.rst:505
msgid ""
"Return the text of the source code for an object. The argument may be a "
"module, class, method, function, traceback, frame, or code object.  The "
"source code is returned as a single string.  An :exc:`OSError` is raised if "
"the source code cannot be retrieved."
msgstr ""

#: ../Doc/library/inspect.rst:517
msgid ""
"Clean up indentation from docstrings that are indented to line up with "
"blocks of code."
msgstr ""

#: ../Doc/library/inspect.rst:520
msgid ""
"All leading whitespace is removed from the first line.  Any leading "
"whitespace that can be uniformly removed from the second line onwards is "
"removed.  Empty lines at the beginning and end are subsequently removed.  "
"Also, all tabs are expanded to spaces."
msgstr ""

#: ../Doc/library/inspect.rst:529
msgid "Introspecting callables with the Signature object"
msgstr ""

#: ../Doc/library/inspect.rst:533
msgid ""
"The Signature object represents the call signature of a callable object and "
"its return annotation.  To retrieve a Signature object, use the :func:"
"`signature` function."
msgstr ""

#: ../Doc/library/inspect.rst:539
msgid "Return a :class:`Signature` object for the given ``callable``::"
msgstr ""

#: ../Doc/library/inspect.rst:556
msgid ""
"Accepts a wide range of Python callables, from plain functions and classes "
"to :func:`functools.partial` objects."
msgstr ""

#: ../Doc/library/inspect.rst:559
msgid ""
"Raises :exc:`ValueError` if no signature can be provided, and :exc:"
"`TypeError` if that type of object is not supported."
msgstr ""

#: ../Doc/library/inspect.rst:562
msgid ""
"``follow_wrapped`` parameter. Pass ``False`` to get a signature of "
"``callable`` specifically (``callable.__wrapped__`` will not be used to "
"unwrap decorated callables.)"
msgstr ""

#: ../Doc/library/inspect.rst:569
msgid ""
"Some callables may not be introspectable in certain implementations of "
"Python.  For example, in CPython, some built-in functions defined in C "
"provide no metadata about their arguments."
msgstr ""

#: ../Doc/library/inspect.rst:576
msgid ""
"A Signature object represents the call signature of a function and its "
"return annotation.  For each parameter accepted by the function it stores a :"
"class:`Parameter` object in its :attr:`parameters` collection."
msgstr ""

#: ../Doc/library/inspect.rst:580
msgid ""
"The optional *parameters* argument is a sequence of :class:`Parameter` "
"objects, which is validated to check that there are no parameters with "
"duplicate names, and that the parameters are in the right order, i.e. "
"positional-only first, then positional-or-keyword, and that parameters with "
"defaults follow parameters without defaults."
msgstr ""

#: ../Doc/library/inspect.rst:586
msgid ""
"The optional *return_annotation* argument, can be an arbitrary Python "
"object, is the \"return\" annotation of the callable."
msgstr ""

#: ../Doc/library/inspect.rst:589
msgid ""
"Signature objects are *immutable*.  Use :meth:`Signature.replace` to make a "
"modified copy."
msgstr ""

#: ../Doc/library/inspect.rst:592
msgid "Signature objects are picklable and hashable."
msgstr ""

#: ../Doc/library/inspect.rst:597
msgid "A special class-level marker to specify absence of a return annotation."
msgstr ""

#: ../Doc/library/inspect.rst:601
msgid ""
"An ordered mapping of parameters' names to the corresponding :class:"
"`Parameter` objects.  Parameters appear in strict definition order, "
"including keyword-only parameters."
msgstr ""

#: ../Doc/library/inspect.rst:605 ../Doc/library/inspect.rst:927
msgid ""
"Python only explicitly guaranteed that it preserved the declaration order of "
"keyword-only parameters as of version 3.7, although in practice this order "
"had always been preserved in Python 3."
msgstr ""

#: ../Doc/library/inspect.rst:612
msgid ""
"The \"return\" annotation for the callable.  If the callable has no \"return"
"\" annotation, this attribute is set to :attr:`Signature.empty`."
msgstr ""

#: ../Doc/library/inspect.rst:617
msgid ""
"Create a mapping from positional and keyword arguments to parameters. "
"Returns :class:`BoundArguments` if ``*args`` and ``**kwargs`` match the "
"signature, or raises a :exc:`TypeError`."
msgstr ""

#: ../Doc/library/inspect.rst:623
msgid ""
"Works the same way as :meth:`Signature.bind`, but allows the omission of "
"some required arguments (mimics :func:`functools.partial` behavior.) "
"Returns :class:`BoundArguments`, or raises a :exc:`TypeError` if the passed "
"arguments do not match the signature."
msgstr ""

#: ../Doc/library/inspect.rst:630
msgid ""
"Create a new Signature instance based on the instance replace was invoked "
"on.  It is possible to pass different ``parameters`` and/or "
"``return_annotation`` to override the corresponding properties of the base "
"signature.  To remove return_annotation from the copied Signature, pass in :"
"attr:`Signature.empty`."
msgstr ""

#: ../Doc/library/inspect.rst:647
msgid ""
"Return a :class:`Signature` (or its subclass) object for a given callable "
"``obj``.  Pass ``follow_wrapped=False`` to get a signature of ``obj`` "
"without unwrapping its ``__wrapped__`` chain."
msgstr ""

#: ../Doc/library/inspect.rst:651
msgid "This method simplifies subclassing of :class:`Signature`::"
msgstr ""

#: ../Doc/library/inspect.rst:663
msgid ""
"Parameter objects are *immutable*.  Instead of modifying a Parameter object, "
"you can use :meth:`Parameter.replace` to create a modified copy."
msgstr ""

#: ../Doc/library/inspect.rst:666
msgid "Parameter objects are picklable and hashable."
msgstr ""

#: ../Doc/library/inspect.rst:671
msgid ""
"A special class-level marker to specify absence of default values and "
"annotations."
msgstr ""

#: ../Doc/library/inspect.rst:676
msgid ""
"The name of the parameter as a string.  The name must be a valid Python "
"identifier."
msgstr ""

#: ../Doc/library/inspect.rst:681
msgid ""
"CPython generates implicit parameter names of the form ``.0`` on the code "
"objects used to implement comprehensions and generator expressions."
msgstr ""

#: ../Doc/library/inspect.rst:685
msgid ""
"These parameter names are exposed by this module as names like ``implicit0``."
msgstr ""

#: ../Doc/library/inspect.rst:691
msgid ""
"The default value for the parameter.  If the parameter has no default value, "
"this attribute is set to :attr:`Parameter.empty`."
msgstr ""

#: ../Doc/library/inspect.rst:696
msgid ""
"The annotation for the parameter.  If the parameter has no annotation, this "
"attribute is set to :attr:`Parameter.empty`."
msgstr ""

#: ../Doc/library/inspect.rst:701
msgid ""
"Describes how argument values are bound to the parameter.  Possible values "
"(accessible via :class:`Parameter`, like ``Parameter.KEYWORD_ONLY``):"
msgstr ""

#: ../Doc/library/inspect.rst:707
msgid "Name"
msgstr "Nom"

#: ../Doc/library/inspect.rst:707
msgid "Meaning"
msgstr "Signification"

#: ../Doc/library/inspect.rst:709
msgid "*POSITIONAL_ONLY*"
msgstr ""

#: ../Doc/library/inspect.rst:709
msgid "Value must be supplied as a positional argument."
msgstr ""

#: ../Doc/library/inspect.rst:712
msgid ""
"Python has no explicit syntax for defining positional-only parameters, but "
"many built-in and extension module functions (especially those that accept "
"only one or two parameters) accept them."
msgstr ""

#: ../Doc/library/inspect.rst:718
msgid "*POSITIONAL_OR_KEYWORD*"
msgstr ""

#: ../Doc/library/inspect.rst:718
msgid ""
"Value may be supplied as either a keyword or positional argument (this is "
"the standard binding behaviour for functions implemented in Python.)"
msgstr ""

#: ../Doc/library/inspect.rst:723
msgid "*VAR_POSITIONAL*"
msgstr ""

#: ../Doc/library/inspect.rst:723
msgid ""
"A tuple of positional arguments that aren't bound to any other parameter. "
"This corresponds to a ``*args`` parameter in a Python function definition."
msgstr ""

#: ../Doc/library/inspect.rst:728
msgid "*KEYWORD_ONLY*"
msgstr ""

#: ../Doc/library/inspect.rst:728
msgid ""
"Value must be supplied as a keyword argument. Keyword only parameters are "
"those which appear after a ``*`` or ``*args`` entry in a Python function "
"definition."
msgstr ""

#: ../Doc/library/inspect.rst:733
msgid "*VAR_KEYWORD*"
msgstr ""

#: ../Doc/library/inspect.rst:733
msgid ""
"A dict of keyword arguments that aren't bound to any other parameter. This "
"corresponds to a ``**kwargs`` parameter in a Python function definition."
msgstr ""

#: ../Doc/library/inspect.rst:739
msgid "Example: print all keyword-only arguments without default values::"
msgstr ""

#: ../Doc/library/inspect.rst:753
msgid ""
"Create a new Parameter instance based on the instance replaced was invoked "
"on.  To override a :class:`Parameter` attribute, pass the corresponding "
"argument.  To remove a default value or/and an annotation from a Parameter, "
"pass :attr:`Parameter.empty`."
msgstr ""

#: ../Doc/library/inspect.rst:771
msgid ""
"In Python 3.3 Parameter objects were allowed to have ``name`` set to "
"``None`` if their ``kind`` was set to ``POSITIONAL_ONLY``. This is no longer "
"permitted."
msgstr ""

#: ../Doc/library/inspect.rst:778
msgid ""
"Result of a :meth:`Signature.bind` or :meth:`Signature.bind_partial` call. "
"Holds the mapping of arguments to the function's parameters."
msgstr ""

#: ../Doc/library/inspect.rst:783
msgid ""
"An ordered, mutable mapping (:class:`collections.OrderedDict`) of "
"parameters' names to arguments' values.  Contains only explicitly bound "
"arguments.  Changes in :attr:`arguments` will reflect in :attr:`args` and :"
"attr:`kwargs`."
msgstr ""

#: ../Doc/library/inspect.rst:788
msgid ""
"Should be used in conjunction with :attr:`Signature.parameters` for any "
"argument processing purposes."
msgstr ""

#: ../Doc/library/inspect.rst:793
msgid ""
"Arguments for which :meth:`Signature.bind` or :meth:`Signature.bind_partial` "
"relied on a default value are skipped. However, if needed, use :meth:"
"`BoundArguments.apply_defaults` to add them."
msgstr ""

#: ../Doc/library/inspect.rst:800
msgid ""
"A tuple of positional arguments values.  Dynamically computed from the :attr:"
"`arguments` attribute."
msgstr ""

#: ../Doc/library/inspect.rst:805
msgid ""
"A dict of keyword arguments values.  Dynamically computed from the :attr:"
"`arguments` attribute."
msgstr ""

#: ../Doc/library/inspect.rst:810
msgid "A reference to the parent :class:`Signature` object."
msgstr ""

#: ../Doc/library/inspect.rst:814
msgid "Set default values for missing arguments."
msgstr ""

#: ../Doc/library/inspect.rst:816
msgid ""
"For variable-positional arguments (``*args``) the default is an empty tuple."
msgstr ""

#: ../Doc/library/inspect.rst:819
msgid ""
"For variable-keyword arguments (``**kwargs``) the default is an empty dict."
msgstr ""

#: ../Doc/library/inspect.rst:832
msgid ""
"The :attr:`args` and :attr:`kwargs` properties can be used to invoke "
"functions::"
msgstr ""

#: ../Doc/library/inspect.rst:845
msgid ":pep:`362` - Function Signature Object."
msgstr ""

#: ../Doc/library/inspect.rst:846
msgid "The detailed specification, implementation details and examples."
msgstr ""

#: ../Doc/library/inspect.rst:852
msgid "Classes and functions"
msgstr ""

#: ../Doc/library/inspect.rst:856
msgid ""
"Arrange the given list of classes into a hierarchy of nested lists. Where a "
"nested list appears, it contains classes derived from the class whose entry "
"immediately precedes the list.  Each entry is a 2-tuple containing a class "
"and a tuple of its base classes.  If the *unique* argument is true, exactly "
"one entry appears in the returned structure for each class in the given "
"list.  Otherwise, classes using multiple inheritance and their descendants "
"will appear multiple times."
msgstr ""

#: ../Doc/library/inspect.rst:867
msgid ""
"Get the names and default values of a Python function's parameters. A :term:"
"`named tuple` ``ArgSpec(args, varargs, keywords, defaults)`` is returned. "
"*args* is a list of the parameter names. *varargs* and *keywords* are the "
"names of the ``*`` and ``**`` parameters or ``None``. *defaults* is a tuple "
"of default argument values or ``None`` if there are no default arguments; if "
"this tuple has *n* elements, they correspond to the last *n* elements listed "
"in *args*."
msgstr ""

#: ../Doc/library/inspect.rst:875
msgid ""
"Use :func:`getfullargspec` for an updated API that is usually a drop-in "
"replacement, but also correctly handles function annotations and keyword-"
"only parameters."
msgstr ""

#: ../Doc/library/inspect.rst:880
msgid ""
"Alternatively, use :func:`signature` and :ref:`Signature Object <inspect-"
"signature-object>`, which provide a more structured introspection API for "
"callables."
msgstr ""

#: ../Doc/library/inspect.rst:887
msgid ""
"Get the names and default values of a Python function's parameters.  A :term:"
"`named tuple` is returned:"
msgstr ""

#: ../Doc/library/inspect.rst:890
msgid ""
"``FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, "
"annotations)``"
msgstr ""

#: ../Doc/library/inspect.rst:893
msgid ""
"*args* is a list of the positional parameter names. *varargs* is the name of "
"the ``*`` parameter or ``None`` if arbitrary positional arguments are not "
"accepted. *varkw* is the name of the ``**`` parameter or ``None`` if "
"arbitrary keyword arguments are not accepted. *defaults* is an *n*-tuple of "
"default argument values corresponding to the last *n* positional parameters, "
"or ``None`` if there are no such defaults defined. *kwonlyargs* is a list of "
"keyword-only parameter names in declaration order. *kwonlydefaults* is a "
"dictionary mapping parameter names from *kwonlyargs* to the default values "
"used if no argument is supplied. *annotations* is a dictionary mapping "
"parameter names to annotations. The special key ``\"return\"`` is used to "
"report the function return value annotation (if any)."
msgstr ""

#: ../Doc/library/inspect.rst:908
msgid ""
"Note that :func:`signature` and :ref:`Signature Object <inspect-signature-"
"object>` provide the recommended API for callable introspection, and support "
"additional behaviours (like positional-only arguments) that are sometimes "
"encountered in extension module APIs. This function is retained primarily "
"for use in code that needs to maintain compatibility with the Python 2 "
"``inspect`` module API."
msgstr ""

#: ../Doc/library/inspect.rst:915
msgid ""
"This function is now based on :func:`signature`, but still ignores "
"``__wrapped__`` attributes and includes the already bound first parameter in "
"the signature output for bound methods."
msgstr ""

#: ../Doc/library/inspect.rst:920
msgid ""
"This method was previously documented as deprecated in favour of :func:"
"`signature` in Python 3.5, but that decision has been reversed in order to "
"restore a clearly supported standard interface for single-source Python 2/3 "
"code migrating away from the legacy :func:`getargspec` API."
msgstr ""

#: ../Doc/library/inspect.rst:935
msgid ""
"Get information about arguments passed into a particular frame.  A :term:"
"`named tuple` ``ArgInfo(args, varargs, keywords, locals)`` is returned. "
"*args* is a list of the argument names.  *varargs* and *keywords* are the "
"names of the ``*`` and ``**`` arguments or ``None``.  *locals* is the locals "
"dictionary of the given frame."
msgstr ""

#: ../Doc/library/inspect.rst:942 ../Doc/library/inspect.rst:979
msgid "This function was inadvertently marked as deprecated in Python 3.5."
msgstr ""

#: ../Doc/library/inspect.rst:947
msgid ""
"Format a pretty argument spec from the values returned by :func:"
"`getfullargspec`."
msgstr ""

#: ../Doc/library/inspect.rst:950
msgid ""
"The first seven arguments are (``args``, ``varargs``, ``varkw``, "
"``defaults``, ``kwonlyargs``, ``kwonlydefaults``, ``annotations``)."
msgstr ""

#: ../Doc/library/inspect.rst:953
msgid ""
"The other six arguments are functions that are called to turn argument "
"names, ``*`` argument name, ``**`` argument name, default values, return "
"annotation and individual annotations into strings, respectively."
msgstr ""

#: ../Doc/library/inspect.rst:957
msgid "For example:"
msgstr "Par exemple ::"

#: ../Doc/library/inspect.rst:966
msgid ""
"Use :func:`signature` and :ref:`Signature Object <inspect-signature-"
"object>`, which provide a better introspecting API for callables."
msgstr ""

#: ../Doc/library/inspect.rst:974
msgid ""
"Format a pretty argument spec from the four values returned by :func:"
"`getargvalues`.  The format\\* arguments are the corresponding optional "
"formatting functions that are called to turn names and values into strings."
msgstr ""

#: ../Doc/library/inspect.rst:984
msgid ""
"Return a tuple of class cls's base classes, including cls, in method "
"resolution order.  No class appears more than once in this tuple. Note that "
"the method resolution order depends on cls's type.  Unless a very peculiar "
"user-defined metatype is in use, cls will be the first element of the tuple."
msgstr ""

#: ../Doc/library/inspect.rst:992
msgid ""
"Bind the *args* and *kwds* to the argument names of the Python function or "
"method *func*, as if it was called with them. For bound methods, bind also "
"the first argument (typically named ``self``) to the associated instance. A "
"dict is returned, mapping the argument names (including the names of the "
"``*`` and ``**`` arguments, if any) to their values from *args* and *kwds*. "
"In case of invoking *func* incorrectly, i.e. whenever ``func(*args, "
"**kwds)`` would raise an exception because of incompatible signature, an "
"exception of the same type and the same or similar message is raised. For "
"example::"
msgstr ""

#: ../Doc/library/inspect.rst:1015
msgid "Use :meth:`Signature.bind` and :meth:`Signature.bind_partial` instead."
msgstr ""

#: ../Doc/library/inspect.rst:1021
msgid ""
"Get the mapping of external name references in a Python function or method "
"*func* to their current values. A :term:`named tuple` "
"``ClosureVars(nonlocals, globals, builtins, unbound)`` is returned. "
"*nonlocals* maps referenced names to lexical closure variables, *globals* to "
"the function's module globals and *builtins* to the builtins visible from "
"the function body. *unbound* is the set of names referenced in the function "
"that could not be resolved at all given the current module globals and "
"builtins."
msgstr ""

#: ../Doc/library/inspect.rst:1030
msgid ""
":exc:`TypeError` is raised if *func* is not a Python function or method."
msgstr ""

#: ../Doc/library/inspect.rst:1037
msgid ""
"Get the object wrapped by *func*. It follows the chain of :attr:"
"`__wrapped__` attributes returning the last object in the chain."
msgstr ""

#: ../Doc/library/inspect.rst:1040
msgid ""
"*stop* is an optional callback accepting an object in the wrapper chain as "
"its sole argument that allows the unwrapping to be terminated early if the "
"callback returns a true value. If the callback never returns a true value, "
"the last object in the chain is returned as usual. For example, :func:"
"`signature` uses this to stop unwrapping if any object in the chain has a "
"``__signature__`` attribute defined."
msgstr ""

#: ../Doc/library/inspect.rst:1047
msgid ":exc:`ValueError` is raised if a cycle is encountered."
msgstr ""

#: ../Doc/library/inspect.rst:1055
msgid "The interpreter stack"
msgstr ""

#: ../Doc/library/inspect.rst:1057
msgid ""
"When the following functions return \"frame records,\" each record is a :"
"term:`named tuple` ``FrameInfo(frame, filename, lineno, function, "
"code_context, index)``. The tuple contains the frame object, the filename, "
"the line number of the current line, the function name, a list of lines of "
"context from the source code, and the index of the current line within that "
"list."
msgstr ""

#: ../Doc/library/inspect.rst:1065
msgid "Return a named tuple instead of a tuple."
msgstr ""

#: ../Doc/library/inspect.rst:1070
msgid ""
"Keeping references to frame objects, as found in the first element of the "
"frame records these functions return, can cause your program to create "
"reference cycles.  Once a reference cycle has been created, the lifespan of "
"all objects which can be accessed from the objects which form the cycle can "
"become much longer even if Python's optional cycle detector is enabled.  If "
"such cycles must be created, it is important to ensure they are explicitly "
"broken to avoid the delayed destruction of objects and increased memory "
"consumption which occurs."
msgstr ""

#: ../Doc/library/inspect.rst:1078
msgid ""
"Though the cycle detector will catch these, destruction of the frames (and "
"local variables) can be made deterministic by removing the cycle in a :"
"keyword:`finally` clause.  This is also important if the cycle detector was "
"disabled when Python was compiled or using :func:`gc.disable`.  For example::"
msgstr ""

#: ../Doc/library/inspect.rst:1090
msgid ""
"If you want to keep the frame around (for example to print a traceback "
"later), you can also break reference cycles by using the :meth:`frame.clear` "
"method."
msgstr ""

#: ../Doc/library/inspect.rst:1094
msgid ""
"The optional *context* argument supported by most of these functions "
"specifies the number of lines of context to return, which are centered "
"around the current line."
msgstr ""

#: ../Doc/library/inspect.rst:1101
msgid ""
"Get information about a frame or traceback object.  A :term:`named tuple` "
"``Traceback(filename, lineno, function, code_context, index)`` is returned."
msgstr ""

#: ../Doc/library/inspect.rst:1107
msgid ""
"Get a list of frame records for a frame and all outer frames.  These frames "
"represent the calls that lead to the creation of *frame*. The first entry in "
"the returned list represents *frame*; the last entry represents the "
"outermost call on *frame*'s stack."
msgstr ""

#: ../Doc/library/inspect.rst:1112 ../Doc/library/inspect.rst:1125
#: ../Doc/library/inspect.rst:1149 ../Doc/library/inspect.rst:1162
msgid ""
"A list of :term:`named tuples <named tuple>` ``FrameInfo(frame, filename, "
"lineno, function, code_context, index)`` is returned."
msgstr ""

#: ../Doc/library/inspect.rst:1120
msgid ""
"Get a list of frame records for a traceback's frame and all inner frames.  "
"These frames represent calls made as a consequence of *frame*.  The first "
"entry in the list represents *traceback*; the last entry represents where "
"the exception was raised."
msgstr ""

#: ../Doc/library/inspect.rst:1133
msgid "Return the frame object for the caller's stack frame."
msgstr ""

#: ../Doc/library/inspect.rst:1137
msgid ""
"This function relies on Python stack frame support in the interpreter, which "
"isn't guaranteed to exist in all implementations of Python.  If running in "
"an implementation without Python stack frame support this function returns "
"``None``."
msgstr ""

#: ../Doc/library/inspect.rst:1145
msgid ""
"Return a list of frame records for the caller's stack.  The first entry in "
"the returned list represents the caller; the last entry represents the "
"outermost call on the stack."
msgstr ""

#: ../Doc/library/inspect.rst:1157
msgid ""
"Return a list of frame records for the stack between the current frame and "
"the frame in which an exception currently being handled was raised in.  The "
"first entry in the list represents the caller; the last entry represents "
"where the exception was raised."
msgstr ""

#: ../Doc/library/inspect.rst:1169
msgid "Fetching attributes statically"
msgstr ""

#: ../Doc/library/inspect.rst:1171
msgid ""
"Both :func:`getattr` and :func:`hasattr` can trigger code execution when "
"fetching or checking for the existence of attributes. Descriptors, like "
"properties, will be invoked and :meth:`__getattr__` and :meth:"
"`__getattribute__` may be called."
msgstr ""

#: ../Doc/library/inspect.rst:1176
msgid ""
"For cases where you want passive introspection, like documentation tools, "
"this can be inconvenient. :func:`getattr_static` has the same signature as :"
"func:`getattr` but avoids executing code when it fetches attributes."
msgstr ""

#: ../Doc/library/inspect.rst:1182
msgid ""
"Retrieve attributes without triggering dynamic lookup via the descriptor "
"protocol, :meth:`__getattr__` or :meth:`__getattribute__`."
msgstr ""

#: ../Doc/library/inspect.rst:1185
msgid ""
"Note: this function may not be able to retrieve all attributes that getattr "
"can fetch (like dynamically created attributes) and may find attributes that "
"getattr can't (like descriptors that raise AttributeError). It can also "
"return descriptors objects instead of instance members."
msgstr ""

#: ../Doc/library/inspect.rst:1191
msgid ""
"If the instance :attr:`~object.__dict__` is shadowed by another member (for "
"example a property) then this function will be unable to find instance "
"members."
msgstr ""

#: ../Doc/library/inspect.rst:1197
msgid ""
":func:`getattr_static` does not resolve descriptors, for example slot "
"descriptors or getset descriptors on objects implemented in C. The "
"descriptor object is returned instead of the underlying attribute."
msgstr ""

#: ../Doc/library/inspect.rst:1201
msgid ""
"You can handle these with code like the following. Note that for arbitrary "
"getset descriptors invoking these may trigger code execution::"
msgstr ""

#: ../Doc/library/inspect.rst:1227
msgid "Current State of Generators and Coroutines"
msgstr ""

#: ../Doc/library/inspect.rst:1229
msgid ""
"When implementing coroutine schedulers and for other advanced uses of "
"generators, it is useful to determine whether a generator is currently "
"executing, is waiting to start or resume or execution, or has already "
"terminated. :func:`getgeneratorstate` allows the current state of a "
"generator to be determined easily."
msgstr ""

#: ../Doc/library/inspect.rst:1237
msgid "Get current state of a generator-iterator."
msgstr ""

#: ../Doc/library/inspect.rst:1243 ../Doc/library/inspect.rst:1258
msgid "Possible states are:"
msgstr ""

#: ../Doc/library/inspect.rst:1240
msgid "GEN_CREATED: Waiting to start execution."
msgstr ""

#: ../Doc/library/inspect.rst:1241
msgid "GEN_RUNNING: Currently being executed by the interpreter."
msgstr ""

#: ../Doc/library/inspect.rst:1242
msgid "GEN_SUSPENDED: Currently suspended at a yield expression."
msgstr ""

#: ../Doc/library/inspect.rst:1243
msgid "GEN_CLOSED: Execution has completed."
msgstr ""

#: ../Doc/library/inspect.rst:1249
msgid ""
"Get current state of a coroutine object.  The function is intended to be "
"used with coroutine objects created by :keyword:`async def` functions, but "
"will accept any coroutine-like object that has ``cr_running`` and "
"``cr_frame`` attributes."
msgstr ""

#: ../Doc/library/inspect.rst:1255
msgid "CORO_CREATED: Waiting to start execution."
msgstr ""

#: ../Doc/library/inspect.rst:1256
msgid "CORO_RUNNING: Currently being executed by the interpreter."
msgstr ""

#: ../Doc/library/inspect.rst:1257
msgid "CORO_SUSPENDED: Currently suspended at an await expression."
msgstr ""

#: ../Doc/library/inspect.rst:1258
msgid "CORO_CLOSED: Execution has completed."
msgstr ""

#: ../Doc/library/inspect.rst:1262
msgid ""
"The current internal state of the generator can also be queried. This is "
"mostly useful for testing purposes, to ensure that internal state is being "
"updated as expected:"
msgstr ""

#: ../Doc/library/inspect.rst:1268
msgid ""
"Get the mapping of live local variables in *generator* to their current "
"values.  A dictionary is returned that maps from variable names to values. "
"This is the equivalent of calling :func:`locals` in the body of the "
"generator, and all the same caveats apply."
msgstr ""

#: ../Doc/library/inspect.rst:1273
msgid ""
"If *generator* is a :term:`generator` with no currently associated frame, "
"then an empty dictionary is returned.  :exc:`TypeError` is raised if "
"*generator* is not a Python generator object."
msgstr ""

#: ../Doc/library/inspect.rst:1279
msgid ""
"This function relies on the generator exposing a Python stack frame for "
"introspection, which isn't guaranteed to be the case in all implementations "
"of Python. In such cases, this function will always return an empty "
"dictionary."
msgstr ""

#: ../Doc/library/inspect.rst:1288
msgid ""
"This function is analogous to :func:`~inspect.getgeneratorlocals`, but works "
"for coroutine objects created by :keyword:`async def` functions."
msgstr ""

#: ../Doc/library/inspect.rst:1297
msgid "Code Objects Bit Flags"
msgstr ""

#: ../Doc/library/inspect.rst:1299
msgid ""
"Python code objects have a ``co_flags`` attribute, which is a bitmap of the "
"following flags:"
msgstr ""

#: ../Doc/library/inspect.rst:1304
msgid "The code object is optimized, using fast locals."
msgstr ""

#: ../Doc/library/inspect.rst:1308
msgid ""
"If set, a new dict will be created for the frame's ``f_locals`` when the "
"code object is executed."
msgstr ""

#: ../Doc/library/inspect.rst:1313
msgid "The code object has a variable positional parameter (``*args``-like)."
msgstr ""

#: ../Doc/library/inspect.rst:1317
msgid "The code object has a variable keyword parameter (``**kwargs``-like)."
msgstr ""

#: ../Doc/library/inspect.rst:1321
msgid "The flag is set when the code object is a nested function."
msgstr ""

#: ../Doc/library/inspect.rst:1325
msgid ""
"The flag is set when the code object is a generator function, i.e. a "
"generator object is returned when the code object is executed."
msgstr ""

#: ../Doc/library/inspect.rst:1330
msgid "The flag is set if there are no free or cell variables."
msgstr ""

#: ../Doc/library/inspect.rst:1334
msgid ""
"The flag is set when the code object is a coroutine function. When the code "
"object is executed it returns a coroutine object. See :pep:`492` for more "
"details."
msgstr ""

#: ../Doc/library/inspect.rst:1342
msgid ""
"The flag is used to transform generators into generator-based coroutines.  "
"Generator objects with this flag can be used in ``await`` expression, and "
"can ``yield from`` coroutine objects. See :pep:`492` for more details."
msgstr ""

#: ../Doc/library/inspect.rst:1351
msgid ""
"The flag is set when the code object is an asynchronous generator function.  "
"When the code object is executed it returns an asynchronous generator "
"object.  See :pep:`525` for more details."
msgstr ""

#: ../Doc/library/inspect.rst:1358
msgid ""
"The flags are specific to CPython, and may not be defined in other Python "
"implementations.  Furthermore, the flags are an implementation detail, and "
"can be removed or deprecated in future Python releases. It's recommended to "
"use public APIs from the :mod:`inspect` module for any introspection needs."
msgstr ""

#: ../Doc/library/inspect.rst:1368
msgid "Command Line Interface"
msgstr "Interface en ligne de commande"

#: ../Doc/library/inspect.rst:1370
msgid ""
"The :mod:`inspect` module also provides a basic introspection capability "
"from the command line."
msgstr ""

#: ../Doc/library/inspect.rst:1375
msgid ""
"By default, accepts the name of a module and prints the source of that "
"module. A class or function within the module can be printed instead by "
"appended a colon and the qualified name of the target object."
msgstr ""

#: ../Doc/library/inspect.rst:1381
msgid ""
"Print information about the specified object rather than the source code"
msgstr ""

#~ msgid "f_restricted"
#~ msgstr "f_restricted"
