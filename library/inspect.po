# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-22 23:13+0200\n"
"PO-Revision-Date: 2022-11-17 15:10+0100\n"
"Last-Translator: Julien Palard <julien@palard.fr>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 1.8.11\n"

#: library/inspect.rst:2
msgid ":mod:`inspect` --- Inspect live objects"
msgstr ":mod:`inspect` — Inspection d'objets"

#: library/inspect.rst:10
msgid "**Source code:** :source:`Lib/inspect.py`"
msgstr "**Code source :** :source:`Lib/inspect.py`"

#: library/inspect.rst:14
msgid ""
"The :mod:`inspect` module provides several useful functions to help get "
"information about live objects such as modules, classes, methods, functions, "
"tracebacks, frame objects, and code objects.  For example, it can help you "
"examine the contents of a class, retrieve the source code of a method, "
"extract and format the argument list for a function, or get all the "
"information you need to display a detailed traceback."
msgstr ""
"Le module :mod:`inspect` implémente plusieurs fonctions permettant d'obtenir "
"de l'information à propos d'objets tels que les modules, classes, méthodes, "
"fonctions, traces de piles, cadres d'exécution et objets code. Par exemple, "
"il permet d'inspecter le contenu d'une classe, de retrouver le code source "
"d'une méthode, d'extraire et de mettre en forme une liste d'arguments pour "
"une fonction, ou obtenir toute l'information nécessaire pour afficher une "
"pile d'appels détaillée."

#: library/inspect.rst:21
msgid ""
"There are four main kinds of services provided by this module: type "
"checking, getting source code, inspecting classes and functions, and "
"examining the interpreter stack."
msgstr ""
"Ce module donne accès à 4 types de services : vérification de typage, "
"obtention de code source, inspection de classes et de fonctions et examen de "
"la pile d'exécution."

#: library/inspect.rst:29
msgid "Types and members"
msgstr "Types et membres"

#: library/inspect.rst:31
msgid ""
"The :func:`getmembers` function retrieves the members of an object such as a "
"class or module. The functions whose names begin with \"is\" are mainly "
"provided as convenient choices for the second argument to :func:"
"`getmembers`. They also help you determine when you can expect to find the "
"following special attributes:"
msgstr ""
"La fonction :func:`getmembers` retrouve les membres d'un objet, tel qu'une "
"classe ou un module. Les fonctions avec le préfixe *is* sont pratiques en "
"tant que deuxième argument à :func:`getmembers`. Elles permettent aussi de "
"déterminer si on peut s'attendre à trouver les attributs spéciaux suivants :"

#: library/inspect.rst:41
msgid "Type"
msgstr "Type"

#: library/inspect.rst:41
msgid "Attribute"
msgstr "Attribut"

#: library/inspect.rst:41
msgid "Description"
msgstr "Description"

#: library/inspect.rst:43
msgid "module"
msgstr "module"

#: library/inspect.rst:48 library/inspect.rst:76 library/inspect.rst:238
msgid "__doc__"
msgstr "__doc__"

#: library/inspect.rst:48 library/inspect.rst:76 library/inspect.rst:238
msgid "documentation string"
msgstr "texte de documentation"

#: library/inspect.rst:45
msgid "__file__"
msgstr "__file__"

#: library/inspect.rst:45
msgid "filename (missing for built-in modules)"
msgstr "nom de fichier (inexistant pour les fonctions natives)"

#: library/inspect.rst:48
msgid "class"
msgstr "classe"

#: library/inspect.rst:60 library/inspect.rst:207 library/inspect.rst:240
msgid "__name__"
msgstr "__name__"

#: library/inspect.rst:50
msgid "name with which this class was defined"
msgstr "nom de la classe lors de sa définition"

#: library/inspect.rst:63 library/inspect.rst:209 library/inspect.rst:243
msgid "__qualname__"
msgstr "__qualname__"

#: library/inspect.rst:63 library/inspect.rst:209 library/inspect.rst:243
msgid "qualified name"
msgstr "nom qualifié"

#: library/inspect.rst:73 library/inspect.rst:106
msgid "__module__"
msgstr "__module__"

#: library/inspect.rst:55
msgid "name of module in which this class was defined"
msgstr "nom du module contenant la classe lors de sa définition"

#: library/inspect.rst:58
msgid "method"
msgstr "méthode"

#: library/inspect.rst:60
msgid "name with which this method was defined"
msgstr "nom de la méthode lors de sa définition"

#: library/inspect.rst:65
msgid "__func__"
msgstr "__func__"

#: library/inspect.rst:65
msgid "function object containing implementation of method"
msgstr "objet fonction contenant l'implémentation de la méthode"

#: library/inspect.rst:245
msgid "__self__"
msgstr "__self__"

#: library/inspect.rst:69
msgid "instance to which this method is bound, or ``None``"
msgstr "instance à laquelle cette méthode est liée, ou ``None``"

#: library/inspect.rst:73
msgid "name of module in which this method was defined"
msgstr "nom du module contenant la méthode lors de sa définition"

#: library/inspect.rst:76
msgid "function"
msgstr "fonction"

#: library/inspect.rst:78
msgid "name with which this function was defined"
msgstr "nom de la fonction lors de sa définition"

#: library/inspect.rst:83
msgid "__code__"
msgstr "__code__"

#: library/inspect.rst:83
msgid "code object containing compiled function :term:`bytecode`"
msgstr ""
"objet code contenant le :term:`code intermédiaire <bytecode>` d'une fonction "
"compilée"

#: library/inspect.rst:87
msgid "__defaults__"
msgstr "__defaults__"

#: library/inspect.rst:87
msgid "tuple of any default values for positional or keyword parameters"
msgstr "*n*-uplet de valeurs par défaut pour arguments positionnels ou nommés"

#: library/inspect.rst:91
msgid "__kwdefaults__"
msgstr "__kwdefaults__"

#: library/inspect.rst:91
msgid "mapping of any default values for keyword-only parameters"
msgstr ""
"tableau de correspondance de valeurs par défaut pour les paramètres nommés"

#: library/inspect.rst:95
msgid "__globals__"
msgstr "__globals__"

#: library/inspect.rst:95
msgid "global namespace in which this function was defined"
msgstr "espace de nommage global lors de la définition de la fonction"

#: library/inspect.rst:98
msgid "__builtins__"
msgstr "__builtins__"

#: library/inspect.rst:98
msgid "builtins namespace"
msgstr ""

#: library/inspect.rst:100
msgid "__annotations__"
msgstr "__annotations__"

#: library/inspect.rst:100
msgid ""
"mapping of parameters names to annotations; ``\"return\"`` key is reserved "
"for return annotations."
msgstr ""
"tableau de correspondance des paramètres à leur annotation ; ``\"return\"`` "
"est un mot-clé réservé pour les annotations de type renvoyé."

#: library/inspect.rst:106
msgid "name of module in which this function was defined"
msgstr "nom du module contenant la fonction lors de sa définition"

#: library/inspect.rst:109
msgid "traceback"
msgstr "traceback"

#: library/inspect.rst:109
msgid "tb_frame"
msgstr "tb_frame"

#: library/inspect.rst:109
msgid "frame object at this level"
msgstr "objet cadre à ce niveau"

#: library/inspect.rst:112
msgid "tb_lasti"
msgstr "tb_lasti"

#: library/inspect.rst:134
msgid "index of last attempted instruction in bytecode"
msgstr ""
"index de la dernière instruction lancée dans le code intermédiaire "
"(``bytecode``)"

#: library/inspect.rst:115
msgid "tb_lineno"
msgstr "tb_lineno"

#: library/inspect.rst:137
msgid "current line number in Python source code"
msgstr "numéro de ligne courant dans le code source Python"

#: library/inspect.rst:118
msgid "tb_next"
msgstr "tb_next"

#: library/inspect.rst:118
msgid "next inner traceback object (called by this level)"
msgstr "trace de pile interne suivante (appel par le cadre courant)"

#: library/inspect.rst:211 library/inspect.rst:228
msgid "frame"
msgstr "cadre"

#: library/inspect.rst:122
msgid "f_back"
msgstr "f_back"

#: library/inspect.rst:122
msgid "next outer frame object (this frame's caller)"
msgstr ""
"trace d'exécution externe suivante (le contexte appelant du cadre courant)"

#: library/inspect.rst:125
msgid "f_builtins"
msgstr "f_builtins"

#: library/inspect.rst:125
msgid "builtins namespace seen by this frame"
msgstr "espace de nommage natif du cadre courant"

#: library/inspect.rst:128
msgid "f_code"
msgstr "f_code"

#: library/inspect.rst:128
msgid "code object being executed in this frame"
msgstr "objet code exécuté dans le cadre courant"

#: library/inspect.rst:131
msgid "f_globals"
msgstr "f_globals"

#: library/inspect.rst:131
msgid "global namespace seen by this frame"
msgstr "espace de nommage global tel que vu par cadre courant"

#: library/inspect.rst:134
msgid "f_lasti"
msgstr "f_lasti"

#: library/inspect.rst:137
msgid "f_lineno"
msgstr "f_lineno"

#: library/inspect.rst:140
msgid "f_locals"
msgstr "f_locals"

#: library/inspect.rst:140
msgid "local namespace seen by this frame"
msgstr "espace de nommage local du cadre courant"

#: library/inspect.rst:143
msgid "f_trace"
msgstr "f_trace"

#: library/inspect.rst:143
msgid "tracing function for this frame, or ``None``"
msgstr "fonction de traçage du cadre courant, ou ``None``"

#: library/inspect.rst:215 library/inspect.rst:232
msgid "code"
msgstr "code"

#: library/inspect.rst:146
msgid "co_argcount"
msgstr "co_argcount"

#: library/inspect.rst:146
msgid ""
"number of arguments (not including keyword only arguments, \\* or \\*\\* "
"args)"
msgstr ""
"nombre d'arguments (excluant les arguments *keyword-only*, \\* ou \\*\\*)"

#: library/inspect.rst:151
msgid "co_code"
msgstr "co_code"

#: library/inspect.rst:151
msgid "string of raw compiled bytecode"
msgstr "texte du code intermédiaire compilé"

#: library/inspect.rst:154
msgid "co_cellvars"
msgstr "co_cellvars"

#: library/inspect.rst:154
msgid "tuple of names of cell variables (referenced by containing scopes)"
msgstr ""
"*n*-uplet du nom des cellules variables (référencées par leur contexte)"

#: library/inspect.rst:158
msgid "co_consts"
msgstr "co_consts"

#: library/inspect.rst:158
msgid "tuple of constants used in the bytecode"
msgstr ""
"*n*-uplet des constantes utilisées dans le code intermédiaire (``bytecode``)"

#: library/inspect.rst:161
msgid "co_filename"
msgstr "co_filename"

#: library/inspect.rst:161
msgid "name of file in which this code object was created"
msgstr "nom du fichier dans lequel cet objet code a été créé"

#: library/inspect.rst:165
msgid "co_firstlineno"
msgstr "co_firstlineno"

#: library/inspect.rst:165
msgid "number of first line in Python source code"
msgstr "numéro de la première ligne dans le code source Python"

#: library/inspect.rst:168
msgid "co_flags"
msgstr "co_flags"

#: library/inspect.rst:168
msgid ""
"bitmap of ``CO_*`` flags, read more :ref:`here <inspect-module-co-flags>`"
msgstr ""
"**bitmap** des options ``CO_*``, voir plus :ref:`ici <inspect-module-co-"
"flags>`"

#: library/inspect.rst:172
msgid "co_lnotab"
msgstr "co_lnotab"

#: library/inspect.rst:172
msgid "encoded mapping of line numbers to bytecode indices"
msgstr ""
"tableau de correspondance encodée des numéros de ligne aux numéros d'indices "
"du code intermédiaire (``bytecode``)"

#: library/inspect.rst:176
msgid "co_freevars"
msgstr "co_freevars"

#: library/inspect.rst:176
msgid "tuple of names of free variables (referenced via a function's closure)"
msgstr ""
"*n*-uplet des noms de variables libres (référencées par la fermeture "
"(*closure* en anglais) d'une fonction)"

#: library/inspect.rst:180
msgid "co_posonlyargcount"
msgstr "co_posonlyargcount"

#: library/inspect.rst:180
msgid "number of positional only arguments"
msgstr "nombre d'arguments positionnels"

#: library/inspect.rst:183
msgid "co_kwonlyargcount"
msgstr "co_kwonlyargcount"

#: library/inspect.rst:183
msgid "number of keyword only arguments (not including \\*\\* arg)"
msgstr "nombre d'arguments *keywords-only* (excluant les arguments \\*\\*)"

#: library/inspect.rst:187
msgid "co_name"
msgstr "co_name"

#: library/inspect.rst:187
msgid "name with which this code object was defined"
msgstr "nom de l'objet code lors de sa définition"

#: library/inspect.rst:190
msgid "co_qualname"
msgstr "co_qualname"

#: library/inspect.rst:190
msgid "fully-qualified name with which this code object was defined"
msgstr ""

#: library/inspect.rst:194
msgid "co_names"
msgstr "co_names"

#: library/inspect.rst:194
msgid "tuple of names other than arguments and function locals"
msgstr ""

#: library/inspect.rst:198
msgid "co_nlocals"
msgstr "co_nlocals"

#: library/inspect.rst:198
msgid "number of local variables"
msgstr "nombre de variables locales"

#: library/inspect.rst:200
msgid "co_stacksize"
msgstr "co_stacksize"

#: library/inspect.rst:200
msgid "virtual machine stack space required"
msgstr "espace requis pour la pile de la machine virtuelle"

#: library/inspect.rst:203
msgid "co_varnames"
msgstr "co_varnames"

#: library/inspect.rst:203
msgid "tuple of names of arguments and local variables"
msgstr "*n*-uplet des noms des arguments et variables locales"

#: library/inspect.rst:207
msgid "generator"
msgstr "generator"

#: library/inspect.rst:221
msgid "name"
msgstr "nom"

#: library/inspect.rst:211
msgid "gi_frame"
msgstr "gi_frame"

#: library/inspect.rst:213
msgid "gi_running"
msgstr "gi_running"

#: library/inspect.rst:213
msgid "is the generator running?"
msgstr "est-ce que le générateur est en cours d'exécution ?"

#: library/inspect.rst:215
msgid "gi_code"
msgstr "gi_code"

#: library/inspect.rst:217
msgid "gi_yieldfrom"
msgstr "gi_yieldfrom"

#: library/inspect.rst:217
msgid "object being iterated by ``yield from``, or ``None``"
msgstr "objet pointé par l'itérateur ``yield from``, ou ``None``"

#: library/inspect.rst:221
msgid "coroutine"
msgstr "coroutine"

#: library/inspect.rst:225
msgid "cr_await"
msgstr "cr_await"

#: library/inspect.rst:225
msgid "object being awaited on, or ``None``"
msgstr "objet sur lequel on attend (*await*) présentement, ou ``None``"

#: library/inspect.rst:228
msgid "cr_frame"
msgstr "cr_frame"

#: library/inspect.rst:230
msgid "cr_running"
msgstr "cr_running"

#: library/inspect.rst:230
msgid "is the coroutine running?"
msgstr "est-ce que la coroutine est en cours d'exécution ?"

#: library/inspect.rst:232
msgid "cr_code"
msgstr "cr_code"

#: library/inspect.rst:234
msgid "cr_origin"
msgstr "cr_origin"

#: library/inspect.rst:234
msgid "where coroutine was created, or ``None``. See |coroutine-origin-link|"
msgstr ""
"lieu de création de la coroutine, ou ``None``. Voir |coroutine-origin-link|"

#: library/inspect.rst:238
msgid "builtin"
msgstr "builtin"

#: library/inspect.rst:240
msgid "original name of this function or method"
msgstr "nom originel de cette fonction ou méthode"

#: library/inspect.rst:245
msgid "instance to which a method is bound, or ``None``"
msgstr "instance à laquelle est liée une méthode, ou ``None``"

#: library/inspect.rst:252
msgid "Add ``__qualname__`` and ``gi_yieldfrom`` attributes to generators."
msgstr ""
"ajout des attributs ``__qualname`` et ``gi_yieldfrom`` aux générateurs."

#: library/inspect.rst:254
msgid ""
"The ``__name__`` attribute of generators is now set from the function name, "
"instead of the code name, and it can now be modified."
msgstr ""
"L'attribut ``__name__`` du générateur est maintenant déterminé par le nom de "
"la fonction, plutôt que le nom du code, et peut maintenant être modifié."

#: library/inspect.rst:259
msgid "Add ``cr_origin`` attribute to coroutines."
msgstr "Ajout de l'attribut ``cr_origin`` aux coroutines."

#: library/inspect.rst:263
msgid "Add ``__builtins__`` attribute to functions."
msgstr ""

#: library/inspect.rst:267
msgid ""
"Return all the members of an object in a list of ``(name, value)`` pairs "
"sorted by name. If the optional *predicate* argument—which will be called "
"with the ``value`` object of each member—is supplied, only members for which "
"the predicate returns a true value are included."
msgstr ""
"Renvoie tous les membres d'un objet sous la forme d'une liste de paires "
"``(nom, valeur)``, ordonnée par nom. Si l'argument *predicate* (qui sera "
"appelé avec la ``valeur`` de chaque membre) est fourni, seuls les membres "
"pour lequel le prédicat est vrai seront inclus."

#: library/inspect.rst:274
msgid ""
":func:`getmembers` will only return class attributes defined in the "
"metaclass when the argument is a class and those attributes have been listed "
"in the metaclass' custom :meth:`__dir__`."
msgstr ""
":func:`getmembers` renvoie les attributs de classe définis dans la "
"métaclasse seulement lorsque l'argument est une classe et que ces attributs "
"ont été listés dans la méthode personnalisée :meth:`__dir__` de cette "
"métaclasse."

#: library/inspect.rst:281
msgid ""
"Return all the members of an object in a list of ``(name, value)`` pairs "
"sorted by name without triggering dynamic lookup via the descriptor "
"protocol, __getattr__ or __getattribute__. Optionally, only return members "
"that satisfy a given predicate."
msgstr ""

#: library/inspect.rst:288
msgid ""
":func:`getmembers_static` may not be able to retrieve all members that "
"getmembers can fetch (like dynamically created attributes) and may find "
"members that getmembers can't (like descriptors that raise AttributeError). "
"It can also return descriptor objects instead of instance members in some "
"cases."
msgstr ""

#: library/inspect.rst:299
msgid ""
"Return the name of the module named by the file *path*, without including "
"the names of enclosing packages. The file extension is checked against all "
"of the entries in :func:`importlib.machinery.all_suffixes`. If it matches, "
"the final path component is returned with the extension removed. Otherwise, "
"``None`` is returned."
msgstr ""
"Renvoie le nom du module indiqué par le fichier *path*, excluant le nom des "
"paquets englobants. L'extension du fichier est vérifiée parmi toutes les "
"entrées renvoyées par :func:`importlib.machinery.all_suffixes`. S'il y a une "
"correspondance, le chemin final est renvoyé, sans l'extension. Autrement, "
"``None`` est renvoyé."

#: library/inspect.rst:305
msgid ""
"Note that this function *only* returns a meaningful name for actual Python "
"modules - paths that potentially refer to Python packages will still return "
"``None``."
msgstr ""
"Notez que cette fonction renvoie un nom significatif *seulement* pour les "
"modules Python - les chemins qui réfèrent à des paquets Python donnent "
"toujours ``None``."

#: library/inspect.rst:309
msgid "The function is based directly on :mod:`importlib`."
msgstr "La fonction est basée directement sur :mod:`importlib`."

#: library/inspect.rst:315
msgid "Return ``True`` if the object is a module."
msgstr "Renvoie ``True`` si l'objet est un module."

#: library/inspect.rst:320
msgid ""
"Return ``True`` if the object is a class, whether built-in or created in "
"Python code."
msgstr ""
"Renvoie ``True`` si l'objet est une classe, qu'il s'agisse d'un objet natif "
"ou qu'elle soit écrite en Python."

#: library/inspect.rst:326
msgid "Return ``True`` if the object is a bound method written in Python."
msgstr "Renvoie ``True`` si l'objet est une méthode liée écrite en Python."

#: library/inspect.rst:331
msgid ""
"Return ``True`` if the object is a Python function, which includes functions "
"created by a :term:`lambda` expression."
msgstr ""
"Renvoie ``True`` si l'objet est une fonction Python, ce qui inclut les "
"fonctions créées par une expression :term:`lambda <lambda>`."

#: library/inspect.rst:337
msgid "Return ``True`` if the object is a Python generator function."
msgstr "Renvoie ``True`` si l'objet est un générateur."

#: library/inspect.rst:339
msgid ""
"Functions wrapped in :func:`functools.partial` now return ``True`` if the "
"wrapped function is a Python generator function."
msgstr ""
"les fonctions englobées dans :func:`functools.partial` renvoient maintenant "
"``True`` si la fonction englobée est un générateur Python."

#: library/inspect.rst:346
msgid "Return ``True`` if the object is a generator."
msgstr "Renvoie ``True`` si l'objet est un générateur."

#: library/inspect.rst:351
msgid ""
"Return ``True`` if the object is a :term:`coroutine function` (a function "
"defined with an :keyword:`async def` syntax)."
msgstr ""
"Renvoie ``True`` si l'objet est une :term:`fonction coroutine <coroutine "
"function>` (une fonction définie avec une syntaxe :keyword:`async def`)."

#: library/inspect.rst:356
msgid ""
"Functions wrapped in :func:`functools.partial` now return ``True`` if the "
"wrapped function is a :term:`coroutine function`."
msgstr ""
"les fonctions englobées par :func:`functools.partial` renvoient maintenant "
"``True`` si la fonction englobée est une :term:`coroutine <coroutine "
"function>`."

#: library/inspect.rst:363
msgid ""
"Return ``True`` if the object is a :term:`coroutine` created by an :keyword:"
"`async def` function."
msgstr ""
"Renvoie ``True`` si l'objet est une :term:`coroutine <coroutine>` créée par "
"une fonction :keyword:`async def`."

#: library/inspect.rst:371
msgid ""
"Return ``True`` if the object can be used in :keyword:`await` expression."
msgstr ""
"Renvoie ``True`` si l'objet peut être utilisé par une expression :keyword:"
"`await`."

#: library/inspect.rst:373
msgid ""
"Can also be used to distinguish generator-based coroutines from regular "
"generators::"
msgstr ""
"Peut aussi être utilisé pour distinguer les coroutines basées sur un "
"générateur des générateurs normaux ::"

#: library/inspect.rst:390
msgid ""
"Return ``True`` if the object is an :term:`asynchronous generator` function, "
"for example::"
msgstr ""
"Renvoie ``True`` si l'objet est un :term:`générateur asynchrone "
"<asynchronous generator>`, par exemple ::"

#: library/inspect.rst:401
msgid ""
"Functions wrapped in :func:`functools.partial` now return ``True`` if the "
"wrapped function is a :term:`asynchronous generator` function."
msgstr ""
"les fonctions englobées par :func:`functools.partial` renvoient maintenant "
"``True`` si la fonction englobée est une fonction :term:`génératrice "
"asynchrone <asynchronous generator>`."

#: library/inspect.rst:408
msgid ""
"Return ``True`` if the object is an :term:`asynchronous generator iterator` "
"created by an :term:`asynchronous generator` function."
msgstr ""
"Renvoie ``True`` si l'objet est un :term:`itérateur de générateur asynchrone "
"<asynchronous generator iterator>` créé par une fonction :term:`génératrice "
"asynchrone <asynchronous generator>`."

#: library/inspect.rst:415
msgid "Return ``True`` if the object is a traceback."
msgstr "Renvoie ``True`` si l'objet est une trace d'exécution."

#: library/inspect.rst:420
msgid "Return ``True`` if the object is a frame."
msgstr "Renvoie ``True`` si l'objet est un cadre."

#: library/inspect.rst:425
msgid "Return ``True`` if the object is a code."
msgstr "Renvoie ``True`` si l'objet est un code."

#: library/inspect.rst:430
msgid ""
"Return ``True`` if the object is a built-in function or a bound built-in "
"method."
msgstr ""
"Renvoie ``True`` si l'objet est une fonction native ou une méthode liée "
"native."

#: library/inspect.rst:435
msgid ""
"Return ``True`` if the type of object is a :class:`~types.MethodWrapperType`."
msgstr ""

#: library/inspect.rst:437
msgid ""
"These are instances of :class:`~types.MethodWrapperType`, such as :meth:"
"`~object().__str__`, :meth:`~object().__eq__` and :meth:`~object().__repr__`"
msgstr ""

#: library/inspect.rst:443
msgid ""
"Return ``True`` if the object is a user-defined or built-in function or "
"method."
msgstr ""
"Renvoie ``True`` si l'objet est une fonction, qu'elle soit définie par "
"l'utilisateur, native, ou une méthode."

#: library/inspect.rst:448
msgid "Return ``True`` if the object is an abstract base class."
msgstr "Renvoie ``True`` si l'objet est une classe de base abstraite."

#: library/inspect.rst:453
msgid ""
"Return ``True`` if the object is a method descriptor, but not if :func:"
"`ismethod`, :func:`isclass`, :func:`isfunction` or :func:`isbuiltin` are "
"true."
msgstr ""
"Renvoie ``True`` si l'objet est un descripteur de méthode sauf si :func:"
"`ismethod`, :func:`isclass`, :func:`isfunction` ou :func:`isbuiltin` sont "
"vrais (``True``)."

#: library/inspect.rst:457
msgid ""
"This, for example, is true of ``int.__add__``.  An object passing this test "
"has a :meth:`~object.__get__` method but not a :meth:`~object.__set__` "
"method, but beyond that the set of attributes varies.  A :attr:`~definition."
"__name__` attribute is usually sensible, and :attr:`__doc__` often is."
msgstr ""
"Cela est par exemple vrai pour ``int.__add__``. Un objet qui passe ce test a "
"une méthode :meth:`~object.__get__`, pas de méthode :meth:`~object.__set__`, "
"sans être regardant sur les  autres les attributs. Un attribut :attr:"
"`~definition.__name__` sera souvent présent et :attr:`__doc__` également."

#: library/inspect.rst:463
msgid ""
"Methods implemented via descriptors that also pass one of the other tests "
"return ``False`` from the :func:`ismethoddescriptor` test, simply because "
"the other tests promise more -- you can, e.g., count on having the :attr:"
"`__func__` attribute (etc) when an object passes :func:`ismethod`."
msgstr ""
"Les méthodes implémentées via descripteurs et qui passent l'un ou l'autre "
"des tests renvoie ``False`` pour :func:`ismethoddescriptor`, simplement "
"parce que les autres tests garantissent davantage — vous pouvez supposer "
"l'existence d'un attribut :attr:`__func__` (etc.) lorsqu'un objet renvoie "
"``True`` pour :func:`ismethod` ."

#: library/inspect.rst:471
msgid "Return ``True`` if the object is a data descriptor."
msgstr "Renvoie ``True`` si l'objet est un descripteur de données."

#: library/inspect.rst:473
msgid ""
"Data descriptors have a :attr:`~object.__set__` or a :attr:`~object."
"__delete__` method. Examples are properties (defined in Python), getsets, "
"and members.  The latter two are defined in C and there are more specific "
"tests available for those types, which is robust across Python "
"implementations.  Typically, data descriptors will also have :attr:"
"`~definition.__name__` and :attr:`__doc__` attributes (properties, getsets, "
"and members have both of these attributes), but this is not guaranteed."
msgstr ""
"Les descripteurs de données ont une méthode :attr:`~object.__set__` ou :attr:"
"`~object.__delete__`. Par exemple les propriétés (définies en Python), "
"*getsets* et les membres. Les 2 derniers sont définis en C et il existe des "
"tests plus spécifiques disponibles pour ceux-ci qui sont robustes à travers "
"les implémentations Python. Normalement, les descripteurs de données auront "
"aussi les attributs :attr:`~definition.__name__` et :attr:`~definition."
"__doc__` (les propriétés, *getsets* et membres auront les deux), mais cela "
"n'est pas garanti."

#: library/inspect.rst:484
msgid "Return ``True`` if the object is a getset descriptor."
msgstr "Renvoie ``True`` si l'objet est un descripteur *getset*."

#: library/inspect.rst:488
msgid ""
"getsets are attributes defined in extension modules via :c:type:"
"`PyGetSetDef` structures.  For Python implementations without such types, "
"this method will always return ``False``."
msgstr ""
"*getsets* sont des attributs définis dans des extensions de modules via des "
"structures :c:type:`PyGetSetDef`. Pour les implémentations Python ne "
"possédant pas ces types, cette méthode renvoie toujours ``False``."

#: library/inspect.rst:495
msgid "Return ``True`` if the object is a member descriptor."
msgstr "Renvoie ``True`` si l'objet est un membre descripteur."

#: library/inspect.rst:499
msgid ""
"Member descriptors are attributes defined in extension modules via :c:type:"
"`PyMemberDef` structures.  For Python implementations without such types, "
"this method will always return ``False``."
msgstr ""
"Les membres descripteurs sont des attributs définis dans des extensions de "
"modules via des structures :c:type:`PyMemberDef`. Pour les implémentations "
"Python ne possédant pas ces types, cette méthode renvoie toujours ``False``."

#: library/inspect.rst:507
msgid "Retrieving source code"
msgstr "Récupération du code source"

#: library/inspect.rst:511
msgid ""
"Get the documentation string for an object, cleaned up with :func:"
"`cleandoc`. If the documentation string for an object is not provided and "
"the object is a class, a method, a property or a descriptor, retrieve the "
"documentation string from the inheritance hierarchy. Return ``None`` if the "
"documentation string is invalid or missing."
msgstr ""

#: library/inspect.rst:517
msgid "Documentation strings are now inherited if not overridden."
msgstr ""
"les chaînes de documentation sont maintenant héritées si elles ne sont pas "
"surchargées."

#: library/inspect.rst:523
msgid ""
"Return in a single string any lines of comments immediately preceding the "
"object's source code (for a class, function, or method), or at the top of "
"the Python source file (if the object is a module).  If the object's source "
"code is unavailable, return ``None``.  This could happen if the object has "
"been defined in C or the interactive shell."
msgstr ""
"Renvoie en une chaîne de caractères toute ligne de commentaire qui précède "
"immédiatement le code source de l'objet (pour une classe, fonction ou "
"méthode) ou en début d'un fichier de code source Python (si l'objet est un "
"module). Si le code source de l'objet n'est pas disponible, renvoie "
"``None``. Cela peut se produire si l'objet a été défini en C ou dans un "
"interpréteur interactif."

#: library/inspect.rst:532
msgid ""
"Return the name of the (text or binary) file in which an object was defined. "
"This will fail with a :exc:`TypeError` if the object is a built-in module, "
"class, or function."
msgstr ""
"Renvoie le nom du fichier (texte ou binaire) dans lequel un objet a été "
"défini. Cette méthode échoue avec :exc:`TypeError` si l'objet est un module, "
"une classe ou une fonction native."

#: library/inspect.rst:539
msgid ""
"Try to guess which module an object was defined in. Return ``None`` if the "
"module cannot be determined."
msgstr ""

#: library/inspect.rst:545
msgid ""
"Return the name of the Python source file in which an object was defined or "
"``None`` if no way can be identified to get the source.  This will fail with "
"a :exc:`TypeError` if the object is a built-in module, class, or function."
msgstr ""

#: library/inspect.rst:553
msgid ""
"Return a list of source lines and starting line number for an object. The "
"argument may be a module, class, method, function, traceback, frame, or code "
"object.  The source code is returned as a list of the lines corresponding to "
"the object and the line number indicates where in the original source file "
"the first line of code was found.  An :exc:`OSError` is raised if the source "
"code cannot be retrieved."
msgstr ""
"Renvoie une liste de lignes du code source et le numéro de la première ligne "
"d'un objet. L'argument peut être un module, classe, méthode, fonction, trace "
"d'exécution, cadre ou objet code. Le code source est renvoyé comme une liste "
"des lignes correspondant à l'objet, et le numéro de ligne indique la "
"position à laquelle la première ligne de code a été trouvée. Une :exc:"
"`OSError` est levée si le code source ne peut être retrouvé."

#: library/inspect.rst:572
msgid ""
":exc:`OSError` is raised instead of :exc:`IOError`, now an alias of the "
"former."
msgstr ""
":exc:`OSError` est levé plutôt que :exc:`IOError`, qui est maintenant un "
"alias de ce premier."

#: library/inspect.rst:567
msgid ""
"Return the text of the source code for an object. The argument may be a "
"module, class, method, function, traceback, frame, or code object.  The "
"source code is returned as a single string.  An :exc:`OSError` is raised if "
"the source code cannot be retrieved."
msgstr ""
"Renvoie le texte du code source pour un objet. L'argument peut être un "
"module, classe, méthode, fonction, trace de pile, cadre ou objet code. Le "
"code source est renvoyé comme une seule chaîne de caractères. :exc:`OSError` "
"est levé si le code source ne peut être retrouvé."

#: library/inspect.rst:579
msgid ""
"Clean up indentation from docstrings that are indented to line up with "
"blocks of code."
msgstr ""
"Nettoie les indentations des chaînes de documentation qui sont indentées de "
"manières à s'aligner avec les blocs de code."

#: library/inspect.rst:582
msgid ""
"All leading whitespace is removed from the first line.  Any leading "
"whitespace that can be uniformly removed from the second line onwards is "
"removed.  Empty lines at the beginning and end are subsequently removed.  "
"Also, all tabs are expanded to spaces."
msgstr ""
"Enlève tous les espaces blancs en début de ligne à partir de la première. "
"Tout espace blanc en début de ligne qui puisse être enlevé de manière "
"uniforme à partir de la seconde ligne le sera. Les lignes vides en début et "
"en fin de document seront ensuite enlevées. Les tabulations seront "
"converties en espaces."

#: library/inspect.rst:591
msgid "Introspecting callables with the Signature object"
msgstr "Introspection des appelables avec l'objet Signature"

#: library/inspect.rst:595
msgid ""
"The Signature object represents the call signature of a callable object and "
"its return annotation.  To retrieve a Signature object, use the :func:"
"`signature` function."
msgstr ""
"L'objet Signature représente la signature de l'appel et de la valeur "
"renvoyée d'un objet appelable. Utilisez la fonction :func:`signature` pour "
"obtenir ces signatures."

#: library/inspect.rst:601
msgid "Return a :class:`Signature` object for the given ``callable``::"
msgstr "Renvoie un objet :class:`Signature` pour un ``appelable`` ::"

#: library/inspect.rst:618
msgid ""
"Accepts a wide range of Python callables, from plain functions and classes "
"to :func:`functools.partial` objects."
msgstr ""
"La fonction accepte une grande étendue d'appelables Python, des fonctions et "
"classes jusqu'aux objets :func:`functools.partials`."

#: library/inspect.rst:621
msgid ""
"For objects defined in modules using stringized annotations (``from "
"__future__ import annotations``), :func:`signature` will attempt to "
"automatically un-stringize the annotations using :func:`inspect."
"get_annotations()`.  The ``global``, ``locals``, and ``eval_str`` parameters "
"are passed into :func:`inspect.get_annotations()` when resolving the "
"annotations; see the documentation for :func:`inspect.get_annotations()` for "
"instructions on how to use these parameters."
msgstr ""

#: library/inspect.rst:630
msgid ""
"Raises :exc:`ValueError` if no signature can be provided, and :exc:"
"`TypeError` if that type of object is not supported.  Also, if the "
"annotations are stringized, and ``eval_str`` is not false, the ``eval()`` "
"call(s) to un-stringize the annotations could potentially raise any kind of "
"exception."
msgstr ""

#: library/inspect.rst:636
msgid ""
"A slash(/) in the signature of a function denotes that the parameters prior "
"to it are positional-only. For more info, see :ref:`the FAQ entry on "
"positional-only parameters <faq-positional-only-arguments>`."
msgstr ""
"Une barre oblique (``/``) dans la signature d'une fonction dénote que les "
"paramètres qui précèdent sont exclusivement positionnels. Pour plus "
"d'information, voir :ref:`l'entrée de la FAQ sur les arguments exclusivement "
"positionnels <faq-positional-only-arguments>`."

#: library/inspect.rst:640
msgid ""
"``follow_wrapped`` parameter. Pass ``False`` to get a signature of "
"``callable`` specifically (``callable.__wrapped__`` will not be used to "
"unwrap decorated callables.)"
msgstr ""
"paramètre ``follow_wrapped``. Passez ``False`` pour obtenir une signature "
"``callable`` plus spécifiquement (``callable.__wrapped__`` ne sera pas "
"utilisé pour dépouiller un appelable décoré.)"

#: library/inspect.rst:645
msgid "``globals``, ``locals``, and ``eval_str`` parameters."
msgstr ""

#: library/inspect.rst:650
msgid ""
"Some callables may not be introspectable in certain implementations of "
"Python.  For example, in CPython, some built-in functions defined in C "
"provide no metadata about their arguments."
msgstr ""
"Certains appelables ne peuvent bénéficier d'introspection dans certains "
"environnements Python. Par exemple, en CPython, certaines fonctions natives "
"définies en C ne fournissent aucune métadonnée sur leurs arguments."

#: library/inspect.rst:657
msgid ""
"A Signature object represents the call signature of a function and its "
"return annotation.  For each parameter accepted by the function it stores a :"
"class:`Parameter` object in its :attr:`parameters` collection."
msgstr ""
"L'objet Signature représente la signature d'appel d'une fonction et son "
"annotation de type. Pour chaque paramètre accepté par une fonction, il "
"conserve un objet :class:`Parameter` dans sa collection :attr:`parameters`."

#: library/inspect.rst:661
msgid ""
"The optional *parameters* argument is a sequence of :class:`Parameter` "
"objects, which is validated to check that there are no parameters with "
"duplicate names, and that the parameters are in the right order, i.e. "
"positional-only first, then positional-or-keyword, and that parameters with "
"defaults follow parameters without defaults."
msgstr ""
"L'argument optionnel *parameters* est une séquence d'objets :class:"
"`Parameters`, qui permet de vérifier qu'il n'y a pas de duplication de noms "
"de paramètres, que les paramètres sont dans le bon ordre (positionnels "
"d'abord, positionnels ou nommés ensuite et que les paramètres avec valeurs "
"par défaut sont placés après ceux qui n'en ont pas)."

#: library/inspect.rst:667
msgid ""
"The optional *return_annotation* argument, can be an arbitrary Python "
"object, is the \"return\" annotation of the callable."
msgstr ""
"L'argument optionnel *return_annotation* pouvant être un objet Python "
"arbitraire, est l'annotation du type renvoyé par appelable."

#: library/inspect.rst:670
msgid ""
"Signature objects are *immutable*.  Use :meth:`Signature.replace` to make a "
"modified copy."
msgstr ""
"Les objets Signatures sont *immuables*. Utilisez :meth:`Signature.replace` "
"pour en faire une copie modifiée."

#: library/inspect.rst:673
msgid "Signature objects are picklable and hashable."
msgstr ""
"les objets Signature sont *pickable* (sérialisables avec Pickle) et "
"hachables."

#: library/inspect.rst:678
msgid "A special class-level marker to specify absence of a return annotation."
msgstr ""
"Un marqueur spécial, accessible via ``Signature.empty``, indiquant l'absence "
"d'une annotation de type renvoyé."

#: library/inspect.rst:682
msgid ""
"An ordered mapping of parameters' names to the corresponding :class:"
"`Parameter` objects.  Parameters appear in strict definition order, "
"including keyword-only parameters."
msgstr ""
"Une table de correspondance ordonnée des noms de paramètres avec les objets :"
"class:`Parameter`. Les paramètres apparaissent dans l'ordre strict de leur "
"définition, incluant les paramètres exclusivement nommés."

#: library/inspect.rst:1010
msgid ""
"Python only explicitly guaranteed that it preserved the declaration order of "
"keyword-only parameters as of version 3.7, although in practice this order "
"had always been preserved in Python 3."
msgstr ""
"Python ne garantit explicitement la préservation de l'ordre des paramètres "
"exclusivement nommés que depuis la version 3.7, bien qu'en pratique cet "
"ordre a toujours été préservé sous Python 3."

#: library/inspect.rst:693
msgid ""
"The \"return\" annotation for the callable.  If the callable has no "
"\"return\" annotation, this attribute is set to :attr:`Signature.empty`."
msgstr ""
"L'annotation du type renvoyé par l'appelable. Si l'appelable n'a pas "
"d'annotation de type, cet attribut est évalué à :attr:`Signature.empty`."

#: library/inspect.rst:698
msgid ""
"Create a mapping from positional and keyword arguments to parameters. "
"Returns :class:`BoundArguments` if ``*args`` and ``**kwargs`` match the "
"signature, or raises a :exc:`TypeError`."
msgstr ""
"Crée une table de correspondance entre les arguments positionnels et nommés "
"avec les paramètres. Renvoie :class:`BoundArguments` si ``*args`` et "
"``**kwargs`` concordent avec la signature, autrement lève une :exc:"
"`TypeError`."

#: library/inspect.rst:704
msgid ""
"Works the same way as :meth:`Signature.bind`, but allows the omission of "
"some required arguments (mimics :func:`functools.partial` behavior.) "
"Returns :class:`BoundArguments`, or raises a :exc:`TypeError` if the passed "
"arguments do not match the signature."
msgstr ""
"Fonctionne de manière similaire à :meth:`Signature.bind`, mais permet "
"l'omission de certains arguments (semblable au comportement de :func:"
"`functools.partial`). Renvoie :class:`BoundArguments`, ou lève une :exc:"
"`TypeError` si l'argument passé ne correspond pas à la signature."

#: library/inspect.rst:711
msgid ""
"Create a new Signature instance based on the instance replace was invoked "
"on.  It is possible to pass different ``parameters`` and/or "
"``return_annotation`` to override the corresponding properties of the base "
"signature.  To remove return_annotation from the copied Signature, pass in :"
"attr:`Signature.empty`."
msgstr ""
"Crée une nouvelle instance de Signature sur la base de l'instance sur "
"laquelle la méthode est invoquée. Il est possible de passer différents "
"paramètres et/ou annotations de type pour remplacer les propriétés "
"correspondantes de la signature de base. Pour enlever les annotations de "
"type de la copie de la Signature, lui passer :attr:`Signature.empty`."

#: library/inspect.rst:728
msgid ""
"Return a :class:`Signature` (or its subclass) object for a given callable "
"``obj``.  Pass ``follow_wrapped=False`` to get a signature of ``obj`` "
"without unwrapping its ``__wrapped__`` chain. ``globalns`` and ``localns`` "
"will be used as the namespaces when resolving annotations."
msgstr ""

#: library/inspect.rst:733
msgid "This method simplifies subclassing of :class:`Signature`::"
msgstr "Cette méthode simplifie l'héritage de :class:`Signature` ::"

#: library/inspect.rst:742
msgid "``globalns`` and ``localns`` parameters."
msgstr ""

#: library/inspect.rst:748
msgid ""
"Parameter objects are *immutable*.  Instead of modifying a Parameter object, "
"you can use :meth:`Parameter.replace` to create a modified copy."
msgstr ""
"Les objets *Parameter* sont *immuables*. Utilisez :meth:`Parameter.replace` "
"pour créer une copie modifiée."

#: library/inspect.rst:751
msgid "Parameter objects are picklable and hashable."
msgstr ""
"les objets *Parameters* sont *pickable* (sérialisables avec Pickle) et "
"hachable."

#: library/inspect.rst:756
msgid ""
"A special class-level marker to specify absence of default values and "
"annotations."
msgstr ""
"Un marqueur spécial, accessible via ``Parameters.empty`` indiquant l'absence "
"de valeurs par défaut et d'annotations."

#: library/inspect.rst:761
msgid ""
"The name of the parameter as a string.  The name must be a valid Python "
"identifier."
msgstr ""
"Le nom du paramètre (chaîne de caractères). Le nom doit être un identifiant "
"Python valide."

#: library/inspect.rst:766
msgid ""
"CPython generates implicit parameter names of the form ``.0`` on the code "
"objects used to implement comprehensions and generator expressions."
msgstr ""
"CPython génère un nom de paramètre implicite de forme ``.0`` sur les objets "
"de code utilisés pour implémenter les compréhensions et expressions "
"génératrices."

#: library/inspect.rst:770
msgid ""
"These parameter names are exposed by this module as names like ``implicit0``."
msgstr ""
"ces paramètres sont exposés par ce module par des noms de forme "
"``implicit0``."

#: library/inspect.rst:776
msgid ""
"The default value for the parameter.  If the parameter has no default value, "
"this attribute is set to :attr:`Parameter.empty`."
msgstr ""
"La valeur par défaut de ce paramètre. Si le paramètre n'a pas de valeur par "
"défaut, cet attribut vaut :attr:`Parameter.empty`."

#: library/inspect.rst:781
msgid ""
"The annotation for the parameter.  If the parameter has no annotation, this "
"attribute is set to :attr:`Parameter.empty`."
msgstr ""
"L'annotation du paramètre. Si le paramètre n'a pas d'annotation, cet "
"attribut est défini à :attr:`Parameter.empty`."

#: library/inspect.rst:786
msgid ""
"Describes how argument values are bound to the parameter.  Possible values "
"(accessible via :class:`Parameter`, like ``Parameter.KEYWORD_ONLY``):"
msgstr ""
"Décrit comment les valeurs d'argument sont liées au paramètre. Les valeurs "
"possibles (accessibles par :class:`Parameter`, tel que ``Parameter."
"KEYWORD_ONLY``) :"

#: library/inspect.rst:792
msgid "Name"
msgstr "Nom"

#: library/inspect.rst:792
msgid "Meaning"
msgstr "Signification"

#: library/inspect.rst:794
msgid "*POSITIONAL_ONLY*"
msgstr "*POSITIONAL_ONLY*"

#: library/inspect.rst:794
msgid ""
"Value must be supplied as a positional argument. Positional only parameters "
"are those which appear before a ``/`` entry (if present) in a Python "
"function definition."
msgstr ""
"La valeur doit être donnée comme argument positionnel. Les arguments "
"exclusivement positionnels sont ceux qui apparaissent avant une entrée ``/`` "
"(si présente) dans une définition de fonction Python."

#: library/inspect.rst:799
msgid "*POSITIONAL_OR_KEYWORD*"
msgstr "*POSITIONAL_OR_KEYWORD*"

#: library/inspect.rst:799
msgid ""
"Value may be supplied as either a keyword or positional argument (this is "
"the standard binding behaviour for functions implemented in Python.)"
msgstr ""
"La valeur peut être donnée comme argument nommé ou positionnel (ce qui est "
"l'affectation de variable standard pour les fonctions implémentées en "
"Python)."

#: library/inspect.rst:804
msgid "*VAR_POSITIONAL*"
msgstr "*VAR_POSITIONAL*"

#: library/inspect.rst:804
msgid ""
"A tuple of positional arguments that aren't bound to any other parameter. "
"This corresponds to a ``*args`` parameter in a Python function definition."
msgstr ""
"Un *n*-uplet d'arguments positionnels qui ne sont affectés à aucun autre "
"paramètre. Cela correspond à un paramètre ``*args`` dans une définition de "
"fonction Python."

#: library/inspect.rst:809
msgid "*KEYWORD_ONLY*"
msgstr "*KEYWORD_ONLY*"

#: library/inspect.rst:809
msgid ""
"Value must be supplied as a keyword argument. Keyword only parameters are "
"those which appear after a ``*`` or ``*args`` entry in a Python function "
"definition."
msgstr ""
"La valeur doit être donnée comme argument nommé. Les arguments exclusivement "
"nommés sont ceux qui apparaissent après un ``*`` ou ``*args`` dans une "
"définition de fonction Python."

#: library/inspect.rst:814
msgid "*VAR_KEYWORD*"
msgstr "*VAR_KEYWORD*"

#: library/inspect.rst:814
msgid ""
"A dict of keyword arguments that aren't bound to any other parameter. This "
"corresponds to a ``**kwargs`` parameter in a Python function definition."
msgstr ""
"Un dictionnaire d'arguments nommés qui ne sont liés à aucun autre paramètre. "
"Cela correspond à une expression ``**kwargs`` dans une définition de "
"fonction Python."

#: library/inspect.rst:820
msgid "Example: print all keyword-only arguments without default values::"
msgstr ""
"Exemple : afficher tous les arguments exclusivement nommés sans valeur par "
"défaut :"

#: library/inspect.rst:834
msgid "Describes a enum value of Parameter.kind."
msgstr "Décrit une énumération de valeurs de ``Parameter.kind``."

#: library/inspect.rst:838
msgid "Example: print all descriptions of arguments::"
msgstr "Exemple : afficher toutes les descriptions d'arguments ::"

#: library/inspect.rst:853
msgid ""
"Create a new Parameter instance based on the instance replaced was invoked "
"on.  To override a :class:`Parameter` attribute, pass the corresponding "
"argument.  To remove a default value or/and an annotation from a Parameter, "
"pass :attr:`Parameter.empty`."
msgstr ""
"Crée une nouvelle instance de *Parameter* sur la base de l'instance sur "
"laquelle la méthode est invoquée. Pour redéfinir un attribut :class:"
"`Parameter`, lui passer l'argument correspondant. Pour enlever les valeurs "
"par défaut et/ou les annotations de retour de la copie du Parameter, lui "
"passer :attr:`Parameter.empty`."

#: library/inspect.rst:871
msgid ""
"In Python 3.3 Parameter objects were allowed to have ``name`` set to "
"``None`` if their ``kind`` was set to ``POSITIONAL_ONLY``. This is no longer "
"permitted."
msgstr ""
"en Python 3.3, un objet Parameter pouvait avoir ``name`` à ``None`` si son "
"attribut ``kind`` valait ``POSITIONAL_ONLY``. Cela n'est plus possible."

#: library/inspect.rst:878
msgid ""
"Result of a :meth:`Signature.bind` or :meth:`Signature.bind_partial` call. "
"Holds the mapping of arguments to the function's parameters."
msgstr ""
"Le résultat d'un appel à :meth:`Signature.bind` ou :meth:`Signature."
"bind_partial`. Contient la correspondance entre les arguments et les "
"paramètres de la fonction."

#: library/inspect.rst:883
msgid ""
"A mutable mapping of parameters' names to arguments' values. Contains only "
"explicitly bound arguments.  Changes in :attr:`arguments` will reflect in :"
"attr:`args` and :attr:`kwargs`."
msgstr ""
"Une correspondance muable entre les noms de paramètres et les valeurs des "
"arguments. Contient seulement les arguments liés explicitement. Les "
"changements dans :attr:`arguments` sont reflétés dans :attr:`args` et :attr:"
"`kwargs`."

#: library/inspect.rst:887
msgid ""
"Should be used in conjunction with :attr:`Signature.parameters` for any "
"argument processing purposes."
msgstr ""
"Doit être utilisé en combinaison avec :attr:`Signature.parameters` pour le "
"traitement d'arguments."

#: library/inspect.rst:892
msgid ""
"Arguments for which :meth:`Signature.bind` or :meth:`Signature.bind_partial` "
"relied on a default value are skipped. However, if needed, use :meth:"
"`BoundArguments.apply_defaults` to add them."
msgstr ""
"Les arguments pour lesquels :meth:`Signature.bind` ou :meth:`Signature."
"bind_partial` supposent une valeur par défaut sont ignorés. Au besoin, "
"utiliser :meth:`BoundArguments.apply_defaults` pour les inclure."

#: library/inspect.rst:897
msgid ""
":attr:`arguments` is now of type :class:`dict`. Formerly, it was of type :"
"class:`collections.OrderedDict`."
msgstr ""
":attr:`arguments` est maintenant de type :class:`dict`. Anciennement, il "
"était de type :class:`collections.OrderedDict`."

#: library/inspect.rst:903
msgid ""
"A tuple of positional arguments values.  Dynamically computed from the :attr:"
"`arguments` attribute."
msgstr ""
"Un *n*-uplets des valeurs d'arguments positionnels. Évalué dynamiquement à "
"partir de l'attribut :attr:`arguments`."

#: library/inspect.rst:908
msgid ""
"A dict of keyword arguments values.  Dynamically computed from the :attr:"
"`arguments` attribute."
msgstr ""
"Un dictionnaire des valeurs des arguments nommés. Évalué dynamiquement à "
"partir de l'attribut :attr:`arguments`."

#: library/inspect.rst:913
msgid "A reference to the parent :class:`Signature` object."
msgstr "Une référence à l'objet :class:`Signature` de la classe parente."

#: library/inspect.rst:917
msgid "Set default values for missing arguments."
msgstr "Assigne les valeurs par défaut pour les arguments manquants."

#: library/inspect.rst:919
msgid ""
"For variable-positional arguments (``*args``) the default is an empty tuple."
msgstr ""
"Pour les arguments positionnels variables (``*args``) la valeur par défaut "
"est un *n*-uplet vide."

#: library/inspect.rst:922
msgid ""
"For variable-keyword arguments (``**kwargs``) the default is an empty dict."
msgstr ""
"Pour les arguments nommés variables (``**kwargs``) la valeur par défaut est "
"un dictionnaire vide."

#: library/inspect.rst:935
msgid ""
"The :attr:`args` and :attr:`kwargs` properties can be used to invoke "
"functions::"
msgstr ""
"Les propriétés :attr:`args` et :attr:`kwargs` peuvent être utilisées pour "
"l'appel de fonctions ::"

#: library/inspect.rst:948
msgid ":pep:`362` - Function Signature Object."
msgstr ":pep:`362` — *Function Signature Object*."

#: library/inspect.rst:949
msgid "The detailed specification, implementation details and examples."
msgstr "La spécification détaillée, détails d'implémentation et exemples."

#: library/inspect.rst:955
msgid "Classes and functions"
msgstr "Classes et fonctions"

#: library/inspect.rst:959
msgid ""
"Arrange the given list of classes into a hierarchy of nested lists. Where a "
"nested list appears, it contains classes derived from the class whose entry "
"immediately precedes the list.  Each entry is a 2-tuple containing a class "
"and a tuple of its base classes.  If the *unique* argument is true, exactly "
"one entry appears in the returned structure for each class in the given "
"list.  Otherwise, classes using multiple inheritance and their descendants "
"will appear multiple times."
msgstr ""
"Organise la liste de classes donnée en une hiérarchie de listes imbriquées. "
"Lorsqu'une liste imbriquée apparaît, elle contient les classes dérivées de "
"la classe dont l'entrée précède immédiatement cette liste. Chaque entrée est "
"une paire contenant la classe et un *n*-uplet de ses classes de base. Si "
"l'argument *unique* est vrai, exactement une entrée apparaît dans la "
"structure renvoyée pour chaque classe de la liste donnée en argument. "
"Autrement, les classes utilisant l'héritage multiple et ses descendantes "
"apparaissent plusieurs fois."

#: library/inspect.rst:970
msgid ""
"Get the names and default values of a Python function's parameters.  A :term:"
"`named tuple` is returned:"
msgstr ""
"Obtenir les noms et les valeurs par défaut des paramètres de fonction "
"Python. Un :term:`n-uplet nommé <named tuple>` est renvoyé :"

#: library/inspect.rst:973
msgid ""
"``FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, "
"annotations)``"
msgstr ""
"``FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, "
"annotations)``"

#: library/inspect.rst:976
msgid ""
"*args* is a list of the positional parameter names. *varargs* is the name of "
"the ``*`` parameter or ``None`` if arbitrary positional arguments are not "
"accepted. *varkw* is the name of the ``**`` parameter or ``None`` if "
"arbitrary keyword arguments are not accepted. *defaults* is an *n*-tuple of "
"default argument values corresponding to the last *n* positional parameters, "
"or ``None`` if there are no such defaults defined. *kwonlyargs* is a list of "
"keyword-only parameter names in declaration order. *kwonlydefaults* is a "
"dictionary mapping parameter names from *kwonlyargs* to the default values "
"used if no argument is supplied. *annotations* is a dictionary mapping "
"parameter names to annotations. The special key ``\"return\"`` is used to "
"report the function return value annotation (if any)."
msgstr ""
"*args* est une liste de noms de paramètres positionnels. *varargs* est le "
"nom du paramètre ``*`` ou ``None`` si les arguments positionnels arbitraires "
"ne sont pas acceptés. *varkw* est le nom du paramètre ``**``, ou ``None`` si "
"les paramètres arbitraires nommés ne sont pas acceptés. *defaults* est un "
"*n*-uplet des valeurs des arguments par défaut correspondant aux derniers "
"*n* arguments positionnels, ou ``None`` si aucun défaut n'est défini. "
"*kwonlyargs* est une liste d'arguments exclusivement nommés, ordonnée selon "
"l'ordre de déclaration. *kwonlydefaults* est un dictionnaire de "
"correspondance entre les noms de paramètres de *kwonlyargs* et les valeurs "
"par défaut utilisées si aucun argument n'est donné. *annotations* est un "
"dictionnaire de correspondance entre les noms de paramètres et les "
"annotations. La clef spéciale ``\"return\"`` est utilisée pour obtenir la "
"valeur de retour de l'annotation la fonction (si elle existe)."

#: library/inspect.rst:991
msgid ""
"Note that :func:`signature` and :ref:`Signature Object <inspect-signature-"
"object>` provide the recommended API for callable introspection, and support "
"additional behaviours (like positional-only arguments) that are sometimes "
"encountered in extension module APIs. This function is retained primarily "
"for use in code that needs to maintain compatibility with the Python 2 "
"``inspect`` module API."
msgstr ""
"Notez que :func:`signature` et :ref:`Signature Object <inspect-signature-"
"object>` fournissent l'API recommandé pour l’introspection d'appelables et "
"prennent en charge des comportements additionnels (comme les arguments "
"exclusivement positionnels) qui sont parfois rencontrés dans les APIs des "
"modules d'extension. Cette fonction et maintenue principalement pour "
"maintenir la compatibilité avec l'API du module ``inspect`` de Python 2."

#: library/inspect.rst:998
msgid ""
"This function is now based on :func:`signature`, but still ignores "
"``__wrapped__`` attributes and includes the already bound first parameter in "
"the signature output for bound methods."
msgstr ""
"cette fonction est maintenant basée sur :func:`signature`, mais ignore "
"toujours les attributs ``_wrapped_`` et inclue le premier paramètre (déjà "
"lié) dans la signature des méthodes liées."

#: library/inspect.rst:1003
msgid ""
"This method was previously documented as deprecated in favour of :func:"
"`signature` in Python 3.5, but that decision has been reversed in order to "
"restore a clearly supported standard interface for single-source Python 2/3 "
"code migrating away from the legacy :func:`getargspec` API."
msgstr ""
"cette méthode fût précédemment documentée comme dépréciée en faveur de :func:"
"`signature` en Python 3.5, mais cette décision fût renversée afin de ré-"
"introduire une interface standard clairement supportée pour du code unifié "
"Python 2/3 migrant pour se départir de l'API :func:`getargspec`."

#: library/inspect.rst:1018
msgid ""
"Get information about arguments passed into a particular frame.  A :term:"
"`named tuple` ``ArgInfo(args, varargs, keywords, locals)`` is returned. "
"*args* is a list of the argument names.  *varargs* and *keywords* are the "
"names of the ``*`` and ``**`` arguments or ``None``.  *locals* is the locals "
"dictionary of the given frame."
msgstr ""
"Obtenir de l'information sur les arguments passés à un cadre particulier. "
"Un :term:`n-uplet nommé <named tuple>` ``ArgInfo(args, varargs, keywords, "
"locals)`` est renvoyé. *args* est une liste de noms d'arguments. *varags* et "
"*keywords* sont les noms des arguments ``*`` et ``**`` ou ``None``. *locals* "
"est le dictionnaire des variables locales du cadre courant."

#: library/inspect.rst:1035
msgid "This function was inadvertently marked as deprecated in Python 3.5."
msgstr "Cette fonction fût dépréciée par inadvertance en Python 3.5."

#: library/inspect.rst:1030
msgid ""
"Format a pretty argument spec from the four values returned by :func:"
"`getargvalues`.  The format\\* arguments are the corresponding optional "
"formatting functions that are called to turn names and values into strings."
msgstr ""
"Formatage lisible des quatre valeurs renvoyées par :func:`getargvalues`. Les "
"arguments format\\* sont des fonctions de formatage optionnelles qui sont "
"appelées pour convertir les noms et valeurs en chaînes de caractères."

#: library/inspect.rst:1040
msgid ""
"Return a tuple of class cls's base classes, including cls, in method "
"resolution order.  No class appears more than once in this tuple. Note that "
"the method resolution order depends on cls's type.  Unless a very peculiar "
"user-defined metatype is in use, cls will be the first element of the tuple."
msgstr ""
"Renvoie un *n*-uplet des classes de base de *cls*, incluant *cls*, selon le "
"l'ordre de résolution des méthodes (*method resolution order*). Aucune "
"classe n'apparaît plus d'une fois dans ce *n*-uplet. Notez que le l'ordre de "
"résolution des méthodes dépend du type de *cls*. Exception faite d'une "
"utilisation très particulière de la métaclasse définie par l'usager, *cls* "
"sera toujours le premier élément du tuple."

#: library/inspect.rst:1048
msgid ""
"Bind the *args* and *kwds* to the argument names of the Python function or "
"method *func*, as if it was called with them. For bound methods, bind also "
"the first argument (typically named ``self``) to the associated instance. A "
"dict is returned, mapping the argument names (including the names of the "
"``*`` and ``**`` arguments, if any) to their values from *args* and *kwds*. "
"In case of invoking *func* incorrectly, i.e. whenever ``func(*args, "
"**kwds)`` would raise an exception because of incompatible signature, an "
"exception of the same type and the same or similar message is raised. For "
"example::"
msgstr ""
"Lie *args* et *kwds* aux arguments nommés de la fonction ou méthode Python "
"*func*, comme si elle était appelée avec ceux-ci. Pour les méthodes liées, "
"lie aussi le premier argument (normalement appelé ``self``) à l'instance "
"associée. Un dictionnaire est renvoyé, une correspondance entre les noms des "
"arguments (incluant les noms des arguments ``*`` et ``**``, s'ils existent) "
"et leurs valeurs obtenues de *args* et *kwds*. Lors d'une invocation "
"incorrecte de *func*, i.e. lorsque ``func(*args, **kwds)`` lèverait une "
"exception en raison de signature incompatible, une exception du même type et "
"de message identique ou similaire est levée. Par exemple ::"

#: library/inspect.rst:1071
msgid "Use :meth:`Signature.bind` and :meth:`Signature.bind_partial` instead."
msgstr ""
"utilisez plutôt :meth:`Signature.bind` et :meth:`Signature.bind_partial`."

#: library/inspect.rst:1077
msgid ""
"Get the mapping of external name references in a Python function or method "
"*func* to their current values. A :term:`named tuple` "
"``ClosureVars(nonlocals, globals, builtins, unbound)`` is returned. "
"*nonlocals* maps referenced names to lexical closure variables, *globals* to "
"the function's module globals and *builtins* to the builtins visible from "
"the function body. *unbound* is the set of names referenced in the function "
"that could not be resolved at all given the current module globals and "
"builtins."
msgstr ""
"Obtenir la correspondance de nom de références externes d'une fonction ou "
"méthode Python *func* avec leur valeur courante. Un :term:`n-uplet nommé "
"<named tuple>` ``ClosureVars(nonlocals, globals, builtins, unbound)`` est "
"renvoyé. *nonlocals* établit une correspondance des noms capturés par les "
"fermetures lexicales, *globals* au module de la fonction et *builtins* aux "
"noms natifs visibles depuis le corps de la fonction. *unbound* est un "
"ensemble de noms référencés dans la fonction ne trouvant aucune résolution "
"dans les valeurs globales du module courant ni à travers le lexique natif."

#: library/inspect.rst:1086
msgid ""
":exc:`TypeError` is raised if *func* is not a Python function or method."
msgstr ""
":exc:`TypeError` est levée si *func* n'est ni une fonction ni une méthode "
"Python."

#: library/inspect.rst:1093
msgid ""
"Get the object wrapped by *func*. It follows the chain of :attr:"
"`__wrapped__` attributes returning the last object in the chain."
msgstr ""
"Obtenir l'objet englobé par *func*. Suit une chaîne d'attributs de :attr:"
"`__wrapped__`, renvoyant le dernier objet de la chaîne."

#: library/inspect.rst:1096
msgid ""
"*stop* is an optional callback accepting an object in the wrapper chain as "
"its sole argument that allows the unwrapping to be terminated early if the "
"callback returns a true value. If the callback never returns a true value, "
"the last object in the chain is returned as usual. For example, :func:"
"`signature` uses this to stop unwrapping if any object in the chain has a "
"``__signature__`` attribute defined."
msgstr ""
"*stop* est une fonction de *callback* optionnelle qui accepte un objet de la "
"chaîne englobée comme son seul argument et permet d'arrêter le déballage "
"avant la fin si la fonction de *callback* renvoie une valeur vraie. Si la "
"fonction *callback* ne renvoie jamais une valeur vraie, le dernier objet de "
"la chaîne est renvoyé comme d'habitude. Par exemple, :func:`signature` "
"utilise ceci pour arrêter le déballage si un objet dans la chaîne définit un "
"attribut ``__signature__``."

#: library/inspect.rst:1103
msgid ":exc:`ValueError` is raised if a cycle is encountered."
msgstr ":exc:`ValueError` est levée si un cycle est rencontré."

#: library/inspect.rst:1110
msgid "Compute the annotations dict for an object."
msgstr ""

#: library/inspect.rst:1112
msgid ""
"``obj`` may be a callable, class, or module. Passing in an object of any "
"other type raises :exc:`TypeError`."
msgstr ""

#: library/inspect.rst:1115
msgid ""
"Returns a dict.  ``get_annotations()`` returns a new dict every time it's "
"called; calling it twice on the same object will return two different but "
"equivalent dicts."
msgstr ""

#: library/inspect.rst:1119
msgid "This function handles several details for you:"
msgstr ""

#: library/inspect.rst:1121
msgid ""
"If ``eval_str`` is true, values of type ``str`` will be un-stringized using :"
"func:`eval()`.  This is intended for use with stringized annotations (``from "
"__future__ import annotations``)."
msgstr ""

#: library/inspect.rst:1125
msgid ""
"If ``obj`` doesn't have an annotations dict, returns an empty dict.  "
"(Functions and methods always have an annotations dict; classes, modules, "
"and other types of callables may not.)"
msgstr ""

#: library/inspect.rst:1129
msgid ""
"Ignores inherited annotations on classes.  If a class doesn't have its own "
"annotations dict, returns an empty dict."
msgstr ""

#: library/inspect.rst:1131
msgid ""
"All accesses to object members and dict values are done using ``getattr()`` "
"and ``dict.get()`` for safety."
msgstr ""

#: library/inspect.rst:1133
msgid "Always, always, always returns a freshly-created dict."
msgstr ""

#: library/inspect.rst:1135
msgid ""
"``eval_str`` controls whether or not values of type ``str`` are replaced "
"with the result of calling :func:`eval()` on those values:"
msgstr ""

#: library/inspect.rst:1138
msgid ""
"If eval_str is true, :func:`eval()` is called on values of type ``str``. "
"(Note that ``get_annotations`` doesn't catch exceptions; if :func:`eval()` "
"raises an exception, it will unwind the stack past the ``get_annotations`` "
"call.)"
msgstr ""

#: library/inspect.rst:1142
msgid ""
"If eval_str is false (the default), values of type ``str`` are unchanged."
msgstr ""

#: library/inspect.rst:1144
msgid ""
"``globals`` and ``locals`` are passed in to :func:`eval()`; see the "
"documentation for :func:`eval()` for more information.  If ``globals`` or "
"``locals`` is ``None``, this function may replace that value with a context-"
"specific default, contingent on ``type(obj)``:"
msgstr ""

#: library/inspect.rst:1149
msgid "If ``obj`` is a module, ``globals`` defaults to ``obj.__dict__``."
msgstr ""

#: library/inspect.rst:1150
msgid ""
"If ``obj`` is a class, ``globals`` defaults to ``sys.modules[obj.__module__]."
"__dict__`` and ``locals`` defaults to the ``obj`` class namespace."
msgstr ""

#: library/inspect.rst:1153
msgid ""
"If ``obj`` is a callable, ``globals`` defaults to ``obj.__globals__``, "
"although if ``obj`` is a wrapped function (using ``functools."
"update_wrapper()``) it is first unwrapped."
msgstr ""

#: library/inspect.rst:1157
msgid ""
"Calling ``get_annotations`` is best practice for accessing the annotations "
"dict of any object.  See :ref:`annotations-howto` for more information on "
"annotations best practices."
msgstr ""

#: library/inspect.rst:1167
msgid "The interpreter stack"
msgstr "La pile d'interpréteur"

#: library/inspect.rst:1169
msgid ""
"Some of the following functions return :class:`FrameInfo` objects. For "
"backwards compatibility these objects allow tuple-like operations on all "
"attributes except ``positions``. This behavior is considered deprecated and "
"may be removed in the future."
msgstr ""

#: library/inspect.rst:1178
msgid "The :ref:`frame object <frame-objects>` that the record corresponds to."
msgstr ""

#: library/inspect.rst:1182
msgid ""
"The file name associated with the code being executed by the frame this "
"record corresponds to."
msgstr ""

#: library/inspect.rst:1187
msgid ""
"The line number of the current line associated with the code being executed "
"by the frame this record corresponds to."
msgstr ""

#: library/inspect.rst:1192
msgid ""
"The function name that is being executed by the frame this record "
"corresponds to."
msgstr ""

#: library/inspect.rst:1196
msgid ""
"A list of lines of context from the source code that's being executed by the "
"frame this record corresponds to."
msgstr ""

#: library/inspect.rst:1239
msgid ""
"The index of the current line being executed in the :attr:`code_context` "
"list."
msgstr ""

#: library/inspect.rst:1205
msgid ""
"A :class:`dis.Positions` object containing the start line number, end line "
"number, start column offset, and end column offset associated with the "
"instruction being executed by the frame this record corresponds to."
msgstr ""

#: library/inspect.rst:1209
msgid "Return a named tuple instead of a tuple."
msgstr "renvoie un *n*-uplet nommé plutôt qu'un *n*-uplet simple."

#: library/inspect.rst:1212
msgid ""
"Changed the return object from a named tuple to a regular object (that is "
"backwards compatible with the previous named tuple)."
msgstr ""

#: library/inspect.rst:1220
msgid ""
"The file name associated with the code being executed by the frame this "
"traceback corresponds to."
msgstr ""

#: library/inspect.rst:1225
msgid ""
"The line number of the current line associated with the code being executed "
"by the frame this traceback corresponds to."
msgstr ""

#: library/inspect.rst:1230
msgid ""
"The function name that is being executed by the frame this traceback "
"corresponds to."
msgstr ""

#: library/inspect.rst:1234
msgid ""
"A list of lines of context from the source code that's being executed by the "
"frame this traceback corresponds to."
msgstr ""

#: library/inspect.rst:1243
msgid ""
"A :class:`dis.Positions` object containing the start line number, end line "
"number, start column offset, and end column offset associated with the "
"instruction being executed by the frame this traceback corresponds to."
msgstr ""

#: library/inspect.rst:1250
msgid ""
"Keeping references to frame objects, as found in the first element of the "
"frame records these functions return, can cause your program to create "
"reference cycles.  Once a reference cycle has been created, the lifespan of "
"all objects which can be accessed from the objects which form the cycle can "
"become much longer even if Python's optional cycle detector is enabled.  If "
"such cycles must be created, it is important to ensure they are explicitly "
"broken to avoid the delayed destruction of objects and increased memory "
"consumption which occurs."
msgstr ""
"Conserver des références à des objets cadre, tel que trouvé dans le 1er "
"élément des enregistrements de cadres que ces fonctions renvoient, peut "
"créer des cycles de référence dans votre programme. Lorsqu'un cycle de "
"référence a été créé, la durée de vie de tous les objets pouvant être "
"accessibles par ces objets peut être grandement augmentée, même si le "
"détecteur de cycle (optionnel) de Python est activé. Si ces cycles doivent "
"être créés, il est important de s'assurer qu'ils soient explicitement brisés "
"pour éviter la destruction reportée des objets et l'augmentation résultante "
"de l'utilisation de la mémoire."

#: library/inspect.rst:1258
msgid ""
"Though the cycle detector will catch these, destruction of the frames (and "
"local variables) can be made deterministic by removing the cycle in a :"
"keyword:`finally` clause.  This is also important if the cycle detector was "
"disabled when Python was compiled or using :func:`gc.disable`.  For example::"
msgstr ""
"Bien que le détecteur trouvera ces cycles, la destruction des cadres (et "
"variables locales) peut être fait de manière déterministe en enlevant les "
"cycles dans une clause :keyword:`finally`. Cela est important si le "
"détecteur de cycle a été désactivé lors de la compilation du code Python ou "
"en utilisant :func:`gc.disable`. Par exemple ::"

#: library/inspect.rst:1270
msgid ""
"If you want to keep the frame around (for example to print a traceback "
"later), you can also break reference cycles by using the :meth:`frame.clear` "
"method."
msgstr ""
"Pour conserver ces cadres (par exemple pour imprimer une trace d'exécution "
"plus tard), vous pouvez briser ces cycles de référence en utilisant la "
"méthode :meth:`frame.clear`."

#: library/inspect.rst:1274
msgid ""
"The optional *context* argument supported by most of these functions "
"specifies the number of lines of context to return, which are centered "
"around the current line."
msgstr ""
"L'argument optionnel *context* supporté par la plupart de ces méthodes "
"spécifie le nombre de lignes de contexte à renvoyer, qui sera centré autour "
"de la ligne courante."

#: library/inspect.rst:1281
msgid ""
"Get information about a frame or traceback object.  A :class:`Traceback` "
"object is returned."
msgstr ""

#: library/inspect.rst:1284
msgid "A :class:`Traceback` object is returned instead of a named tuple."
msgstr ""

#: library/inspect.rst:1289
msgid ""
"Get a list of :class:`FrameInfo` objects for a frame and all outer frames. "
"These frames represent the calls that lead to the creation of *frame*. The "
"first entry in the returned list represents *frame*; the last entry "
"represents the outermost call on *frame*'s stack."
msgstr ""

#: library/inspect.rst:1309 library/inspect.rst:1350
msgid ""
"A list of :term:`named tuples <named tuple>` ``FrameInfo(frame, filename, "
"lineno, function, code_context, index)`` is returned."
msgstr ""
"une liste de :term:`n-uplet nommé <named tuple>` ``FrameInfo(frame, "
"filename, lineno, function, code_context, index)`` est renvoyée."

#: library/inspect.rst:1314 library/inspect.rst:1355
msgid "A list of :class:`FrameInfo` objects is returned."
msgstr ""

#: library/inspect.rst:1304
msgid ""
"Get a list of :class:`FrameInfo` objects for a traceback's frame and all "
"inner frames.  These frames represent calls made as a consequence of "
"*frame*. The first entry in the list represents *traceback*; the last entry "
"represents where the exception was raised."
msgstr ""

#: library/inspect.rst:1319
msgid "Return the frame object for the caller's stack frame."
msgstr "Renvoie l'objet cadre de la pile pour le cadre de l’appelant."

#: library/inspect.rst:1323
msgid ""
"This function relies on Python stack frame support in the interpreter, which "
"isn't guaranteed to exist in all implementations of Python.  If running in "
"an implementation without Python stack frame support this function returns "
"``None``."
msgstr ""
"cette fonction nécessite que l'interpréteur Python implémente une pile de "
"cadres d'appel, ce qui n'est pas forcément le cas de toutes les "
"implémentations Python. Si le code s'exécute dans une implémentation Python "
"n'implémentant pas la pile de cadres, cette fonction renvoie ``None``."

#: library/inspect.rst:1331
msgid ""
"Return a list of :class:`FrameInfo` objects for the caller's stack.  The "
"first entry in the returned list represents the caller; the last entry "
"represents the outermost call on the stack."
msgstr ""

#: library/inspect.rst:1345
msgid ""
"Return a list of :class:`FrameInfo` objects for the stack between the "
"current frame and the frame in which an exception currently being handled "
"was raised in.  The first entry in the list represents the caller; the last "
"entry represents where the exception was raised."
msgstr ""

#: library/inspect.rst:1359
msgid "Fetching attributes statically"
msgstr "Recherche dynamique d'attributs"

#: library/inspect.rst:1361
msgid ""
"Both :func:`getattr` and :func:`hasattr` can trigger code execution when "
"fetching or checking for the existence of attributes. Descriptors, like "
"properties, will be invoked and :meth:`__getattr__` and :meth:"
"`__getattribute__` may be called."
msgstr ""
":func:`getattr` et :func:`hasattr` peuvent tous deux engendrer l'exécution "
"de code lors la recherche ou vérification de l'existence d'attributs. Les "
"descripteurs, comme les propriétés, seront invoqués et :meth:`__getattr__` "
"et :meth:`__getattribute__` peuvent être appelés."

#: library/inspect.rst:1366
msgid ""
"For cases where you want passive introspection, like documentation tools, "
"this can be inconvenient. :func:`getattr_static` has the same signature as :"
"func:`getattr` but avoids executing code when it fetches attributes."
msgstr ""
"Pour les cas où une introspection passive est désirée, comme des outils de "
"documentation, cela peut être inconvenable. :func:`getattr_static` possède "
"la même signature que :func:`getattr`, mais évite l'exécution de code lors "
"de la recherche d'attributs."

#: library/inspect.rst:1372
msgid ""
"Retrieve attributes without triggering dynamic lookup via the descriptor "
"protocol, :meth:`__getattr__` or :meth:`__getattribute__`."
msgstr ""
"Retrouve des attributs sans lancer une recherche dynamique via le protocole "
"descripteur, :meth:`__getattr__` ou :meth:`__getattribute__`."

#: library/inspect.rst:1375
msgid ""
"Note: this function may not be able to retrieve all attributes that getattr "
"can fetch (like dynamically created attributes) and may find attributes that "
"getattr can't (like descriptors that raise AttributeError). It can also "
"return descriptors objects instead of instance members."
msgstr ""
"Note : cette fonction ne retrouve pas forcément tous les attributs renvoyés "
"par *getattr* (tel que des attributs générés dynamiquement) et pourrait "
"retrouver des attributs non retrouvés par *getattr* (tel que des "
"descripteurs qui lèvent un *AttributeError*). Elle peut aussi donner des "
"objets descripteurs, plutôt que des membres d'instance."

#: library/inspect.rst:1381
msgid ""
"If the instance :attr:`~object.__dict__` is shadowed by another member (for "
"example a property) then this function will be unable to find instance "
"members."
msgstr ""
"Si l'instance :attr:`~object.__dict__` est cachée (*shadowed*) par un autre "
"membre (par exemple une propriété), cette fonction ne pourra pas retrouver "
"les membres de l'instance."

#: library/inspect.rst:1387
msgid ""
":func:`getattr_static` does not resolve descriptors, for example slot "
"descriptors or getset descriptors on objects implemented in C. The "
"descriptor object is returned instead of the underlying attribute."
msgstr ""
":func:`getattr_static` ne résout pas les descripteurs, par exemple *slot "
"descriptors* ou les descripteurs *getset* des objets implémentés en C. Le "
"descripteur de l'objet est renvoyé plutôt que l'attribut sous-jacent."

#: library/inspect.rst:1391
msgid ""
"You can handle these with code like the following. Note that for arbitrary "
"getset descriptors invoking these may trigger code execution::"
msgstr ""
"Vous pouvez gérer ces cas à l'aide du code suivant. Notez que pour des "
"descripteurs arbitraires *getset* les invoquant, de l'exécution de code "
"pourrait être lancée :"

#: library/inspect.rst:1417
msgid "Current State of Generators and Coroutines"
msgstr "État courant de Générateurs et Coroutines"

#: library/inspect.rst:1419
msgid ""
"When implementing coroutine schedulers and for other advanced uses of "
"generators, it is useful to determine whether a generator is currently "
"executing, is waiting to start or resume or execution, or has already "
"terminated. :func:`getgeneratorstate` allows the current state of a "
"generator to be determined easily."
msgstr ""
"Lors de l'implémentation d'ordonnanceur de coroutine et autres utilisations "
"avancées de générateurs, il est utile de déterminer si un générateur est "
"présentement en cours d'exécution, en attente de démarrage ou de "
"continuation, ou s'il a déjà terminé. :func:`getgeneratorstate` permet "
"d'aisément déterminer l'état courant d'un générateur."

#: library/inspect.rst:1427
msgid "Get current state of a generator-iterator."
msgstr "Donne l'état courant d'un générateur-itérateur."

#: library/inspect.rst:1448
msgid "Possible states are:"
msgstr "Les états possibles :"

#: library/inspect.rst:1430
msgid "GEN_CREATED: Waiting to start execution."
msgstr "GEN_CREATED : En attente de démarrage d'exécution."

#: library/inspect.rst:1431
msgid "GEN_RUNNING: Currently being executed by the interpreter."
msgstr "GEN_RUNNING : En cours d'exécution par l'interpréteur."

#: library/inspect.rst:1432
msgid "GEN_SUSPENDED: Currently suspended at a yield expression."
msgstr "GEN_SUSPENDED : Présentement suspendu à une expression *yield*."

#: library/inspect.rst:1433
msgid "GEN_CLOSED: Execution has completed."
msgstr "GEN_CLOSED : L'exécution est complétée."

#: library/inspect.rst:1439
msgid ""
"Get current state of a coroutine object.  The function is intended to be "
"used with coroutine objects created by :keyword:`async def` functions, but "
"will accept any coroutine-like object that has ``cr_running`` and "
"``cr_frame`` attributes."
msgstr ""
"Donne l'état courant d'un objet coroutine. L'utilisation est prévue avec des "
"objets coroutine créés avec des fonctions :keyword:`async def`, mais accepte "
"n'importe quel objet semblable à une coroutine qui définisse des attributs "
"``cr_running`` ``cr_frame``."

#: library/inspect.rst:1445
msgid "CORO_CREATED: Waiting to start execution."
msgstr "CORO_CREATED : En attente de démarrage d'exécution."

#: library/inspect.rst:1446
msgid "CORO_RUNNING: Currently being executed by the interpreter."
msgstr "CORO_RUNNING : En cours d'exécution par l'interpréteur."

#: library/inspect.rst:1447
msgid "CORO_SUSPENDED: Currently suspended at an await expression."
msgstr "CORO_SUSPENDED : Suspendu à une expression *await*."

#: library/inspect.rst:1448
msgid "CORO_CLOSED: Execution has completed."
msgstr "CORO_CLOSED : Exécution complétée."

#: library/inspect.rst:1452
msgid ""
"The current internal state of the generator can also be queried. This is "
"mostly useful for testing purposes, to ensure that internal state is being "
"updated as expected:"
msgstr ""
"L'état courant interne du générateur peut aussi être vérifié. Ceci est utile "
"pour des tests, afin d'assurer que l'état interne est mise à jour tel que "
"prévu :"

#: library/inspect.rst:1458
msgid ""
"Get the mapping of live local variables in *generator* to their current "
"values.  A dictionary is returned that maps from variable names to values. "
"This is the equivalent of calling :func:`locals` in the body of the "
"generator, and all the same caveats apply."
msgstr ""
"Donne une correspondance de variables locales dans *generator* avec les "
"valeurs courantes. Un dictionnaire est renvoyé, établissant la "
"correspondance entre variables et valeurs. Ceci est équivalent à appeler :"
"func:`locals` dans le corps du générateur et les mêmes restrictions "
"s'appliquent."

#: library/inspect.rst:1463
msgid ""
"If *generator* is a :term:`generator` with no currently associated frame, "
"then an empty dictionary is returned.  :exc:`TypeError` is raised if "
"*generator* is not a Python generator object."
msgstr ""
"Si *generator* est un :term:`générateur <generator>` sans cadre courant "
"associé, alors un dictionnaire vide est renvoyé. :exc:`TypeError` est levé "
"sir *generator* n'est pas un objet générateur Python."

#: library/inspect.rst:1469
msgid ""
"This function relies on the generator exposing a Python stack frame for "
"introspection, which isn't guaranteed to be the case in all implementations "
"of Python. In such cases, this function will always return an empty "
"dictionary."
msgstr ""
"Cette fonction repose sur l'exposition d'une pile de cadres Python par le "
"générateur pour l'introspection, ce qui n'est pas garanti dans toutes les "
"implémentations Python. Dans un tel cas, cette fonction renvoie toujours un "
"dictionnaire vide."

#: library/inspect.rst:1478
msgid ""
"This function is analogous to :func:`~inspect.getgeneratorlocals`, but works "
"for coroutine objects created by :keyword:`async def` functions."
msgstr ""
"Cette fonction est semblable à :func:`~inspect.getgeneratorlocals`, mais "
"fonctionne pour des objets coroutines créés avec des fonctions :keyword:"
"`async def`."

#: library/inspect.rst:1487
msgid "Code Objects Bit Flags"
msgstr "Bit d'option des objets code"

#: library/inspect.rst:1489
msgid ""
"Python code objects have a ``co_flags`` attribute, which is a bitmap of the "
"following flags:"
msgstr ""
"Les objets de code Python ont un attribut ``co_flags``, ce qui est un "
"*bitmap* des valeurs suivantes :"

#: library/inspect.rst:1494
msgid "The code object is optimized, using fast locals."
msgstr "L'objet code est optimisé, utilisant des variables locales rapides."

#: library/inspect.rst:1498
msgid ""
"If set, a new dict will be created for the frame's ``f_locals`` when the "
"code object is executed."
msgstr ""
"Si défini, un nouveau dictionnaire sera créé pour le ``f_locals`` du cadre "
"courant lorsque l'objet code est exécuté."

#: library/inspect.rst:1503
msgid "The code object has a variable positional parameter (``*args``-like)."
msgstr ""
"L'objet code possède un paramètre de variable positionnel (``*args`` ou "
"semblable)."

#: library/inspect.rst:1507
msgid "The code object has a variable keyword parameter (``**kwargs``-like)."
msgstr ""
"L'objet code possède une paramètre par mot-clé variable (``**kwargs`` ou "
"semblable)."

#: library/inspect.rst:1511
msgid "The flag is set when the code object is a nested function."
msgstr "L'option est définie lorsque le code est une fonction imbriquée."

#: library/inspect.rst:1515
msgid ""
"The flag is set when the code object is a generator function, i.e. a "
"generator object is returned when the code object is executed."
msgstr ""
"L'option est définie lorsque l'objet code est une fonction génératrice, "
"c'est-à-dire qu'un objet générateur est renvoyé lorsque le code objet est "
"exécuté."

#: library/inspect.rst:1520
msgid ""
"The flag is set when the code object is a coroutine function. When the code "
"object is executed it returns a coroutine object. See :pep:`492` for more "
"details."
msgstr ""
"L'option est définie lorsque le code objet est une fonction coroutine. Lors "
"que le code objet est exécuté, il renvoie un objet coroutine. Voir :pep:"
"`492` pour plus de détails."

#: library/inspect.rst:1528
msgid ""
"The flag is used to transform generators into generator-based coroutines.  "
"Generator objects with this flag can be used in ``await`` expression, and "
"can ``yield from`` coroutine objects. See :pep:`492` for more details."
msgstr ""
"L'option est utilisée pour transformer un générateur en une coroutine basée "
"sur un générateur. Les objets générateurs avec cette option peuvent être "
"utilisés dans une expression ``await`` et un objet coroutine ``yield from``. "
"Voir :pep:`492` pour plus de détails."

#: library/inspect.rst:1537
msgid ""
"The flag is set when the code object is an asynchronous generator function.  "
"When the code object is executed it returns an asynchronous generator "
"object.  See :pep:`525` for more details."
msgstr ""
"L'option est définie lorsque l'objet code est une fonction génératrice "
"asynchrone. Lorsque l'objet code est exécuté, il renvoie un objet générateur "
"asynchrone. Voir :pep:`525` pour les détails."

#: library/inspect.rst:1544
msgid ""
"The flags are specific to CPython, and may not be defined in other Python "
"implementations.  Furthermore, the flags are an implementation detail, and "
"can be removed or deprecated in future Python releases. It's recommended to "
"use public APIs from the :mod:`inspect` module for any introspection needs."
msgstr ""
"Ces options sont spécifiques à CPython et pourraient ne pas être définies "
"dans d'autres implémentations Python. De plus, les options constituent des "
"détails d'implémentation et pourraient être enlevées ou dépréciées dans des "
"versions ultérieures. Il est recommandé d'utiliser les APIs publiques de :"
"mod:`inspect` pour tous les besoins d'introspection."

#: library/inspect.rst:1554
msgid "Command Line Interface"
msgstr "Interface en ligne de commande"

#: library/inspect.rst:1556
msgid ""
"The :mod:`inspect` module also provides a basic introspection capability "
"from the command line."
msgstr ""
"Le module :mod:`inspect` fournit également des capacités d'introspection de "
"base en ligne de commande."

#: library/inspect.rst:1561
msgid ""
"By default, accepts the name of a module and prints the source of that "
"module. A class or function within the module can be printed instead by "
"appended a colon and the qualified name of the target object."
msgstr ""
"Par défaut, il accepte le nom d'un module et affiche la source de ce module. "
"Une classe ou fonction à l'intérieur du module peut également être affichée "
"en ajoutant un \":\" et le nom qualifié de l'objet désiré."

#: library/inspect.rst:1567
msgid ""
"Print information about the specified object rather than the source code"
msgstr ""
"Affiche de l'information à propos de l'objet spécifié plutôt que du code "
"source."

#~ msgid "For example:"
#~ msgstr "Par exemple :"
