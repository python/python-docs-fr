# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-12-24 14:22+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/http.client.rst:2
msgid ":mod:`http.client` --- HTTP protocol client"
msgstr ""

#: ../Doc/library/http.client.rst:7
msgid "**Source code:** :source:`Lib/http/client.py`"
msgstr "**Code source :** :source:`Lib/http/client.py`"

#: ../Doc/library/http.client.rst:17
msgid ""
"This module defines classes which implement the client side of the HTTP and "
"HTTPS protocols.  It is normally not used directly --- the module :mod:"
"`urllib.request` uses it to handle URLs that use HTTP and HTTPS."
msgstr ""

#: ../Doc/library/http.client.rst:23
msgid ""
"The `Requests package <http://docs.python-requests.org/>`_ is recommended "
"for a higher-level HTTP client interface."
msgstr ""

#: ../Doc/library/http.client.rst:28
msgid ""
"HTTPS support is only available if Python was compiled with SSL support "
"(through the :mod:`ssl` module)."
msgstr ""

#: ../Doc/library/http.client.rst:31
msgid "The module provides the following classes:"
msgstr ""

#: ../Doc/library/http.client.rst:37
msgid ""
"An :class:`HTTPConnection` instance represents one transaction with an HTTP "
"server.  It should be instantiated passing it a host and optional port "
"number.  If no port number is passed, the port is extracted from the host "
"string if it has the form ``host:port``, else the default HTTP port (80) is "
"used.  If the optional *timeout* parameter is given, blocking operations "
"(like connection attempts) will timeout after that many seconds (if it is "
"not given, the global default timeout setting is used). The optional "
"*source_address* parameter may be a tuple of a (host, port) to use as the "
"source address the HTTP connection is made from. The optional *blocksize* "
"parameter sets the buffer size in bytes for sending a file-like message body."
msgstr ""

#: ../Doc/library/http.client.rst:49
msgid ""
"For example, the following calls all create instances that connect to the "
"server at the same host and port::"
msgstr ""

#: ../Doc/library/http.client.rst:57
msgid "*source_address* was added."
msgstr ""

#: ../Doc/library/http.client.rst:60
msgid ""
"The  *strict* parameter was removed. HTTP 0.9-style \"Simple Responses\" are "
"not longer supported."
msgstr ""

#: ../Doc/library/http.client.rst:64
msgid "*blocksize* parameter was added."
msgstr ""

#: ../Doc/library/http.client.rst:73
msgid ""
"A subclass of :class:`HTTPConnection` that uses SSL for communication with "
"secure servers.  Default port is ``443``.  If *context* is specified, it "
"must be a :class:`ssl.SSLContext` instance describing the various SSL "
"options."
msgstr ""

#: ../Doc/library/http.client.rst:78
msgid "Please read :ref:`ssl-security` for more information on best practices."
msgstr ""

#: ../Doc/library/http.client.rst:80
msgid "*source_address*, *context* and *check_hostname* were added."
msgstr ""

#: ../Doc/library/http.client.rst:83
msgid ""
"This class now supports HTTPS virtual hosts if possible (that is, if :data:"
"`ssl.HAS_SNI` is true)."
msgstr ""

#: ../Doc/library/http.client.rst:87
msgid ""
"The *strict* parameter was removed. HTTP 0.9-style \"Simple Responses\" are "
"no longer supported."
msgstr ""

#: ../Doc/library/http.client.rst:91
msgid ""
"This class now performs all the necessary certificate and hostname checks by "
"default. To revert to the previous, unverified, behavior :func:`ssl."
"_create_unverified_context` can be passed to the *context* parameter."
msgstr ""

#: ../Doc/library/http.client.rst:99
msgid ""
"*key_file* and *cert_file* are deprecated in favor of *context*. Please use :"
"meth:`ssl.SSLContext.load_cert_chain` instead, or let :func:`ssl."
"create_default_context` select the system's trusted CA certificates for you."
msgstr ""

#: ../Doc/library/http.client.rst:104
msgid ""
"The *check_hostname* parameter is also deprecated; the :attr:`ssl.SSLContext."
"check_hostname` attribute of *context* should be used instead."
msgstr ""

#: ../Doc/library/http.client.rst:111
msgid ""
"Class whose instances are returned upon successful connection.  Not "
"instantiated directly by user."
msgstr ""

#: ../Doc/library/http.client.rst:114
msgid ""
"The *strict* parameter was removed. HTTP 0.9 style \"Simple Responses\" are "
"no longer supported."
msgstr ""

#: ../Doc/library/http.client.rst:119
msgid "The following exceptions are raised as appropriate:"
msgstr ""

#: ../Doc/library/http.client.rst:124
msgid ""
"The base class of the other exceptions in this module.  It is a subclass of :"
"exc:`Exception`."
msgstr ""

#: ../Doc/library/http.client.rst:130 ../Doc/library/http.client.rst:141
#: ../Doc/library/http.client.rst:146 ../Doc/library/http.client.rst:151
#: ../Doc/library/http.client.rst:156 ../Doc/library/http.client.rst:161
msgid "A subclass of :exc:`HTTPException`."
msgstr ""

#: ../Doc/library/http.client.rst:135
msgid ""
"A subclass of :exc:`HTTPException`, raised if a port is given and is either "
"non-numeric or empty."
msgstr ""

#: ../Doc/library/http.client.rst:166 ../Doc/library/http.client.rst:171
#: ../Doc/library/http.client.rst:176
msgid "A subclass of :exc:`ImproperConnectionState`."
msgstr ""

#: ../Doc/library/http.client.rst:181
msgid ""
"A subclass of :exc:`HTTPException`.  Raised if a server responds with a HTTP "
"status code that we don't understand."
msgstr ""

#: ../Doc/library/http.client.rst:187
msgid ""
"A subclass of :exc:`HTTPException`.  Raised if an excessively long line is "
"received in the HTTP protocol from the server."
msgstr ""

#: ../Doc/library/http.client.rst:193
msgid ""
"A subclass of :exc:`ConnectionResetError` and :exc:`BadStatusLine`.  Raised "
"by :meth:`HTTPConnection.getresponse` when the attempt to read the response "
"results in no data read from the connection, indicating that the remote end "
"has closed the connection."
msgstr ""

#: ../Doc/library/http.client.rst:198
msgid "Previously, :exc:`BadStatusLine`\\ ``('')`` was raised."
msgstr ""

#: ../Doc/library/http.client.rst:202
msgid "The constants defined in this module are:"
msgstr "Les constantes définies dans ce module sont :"

#: ../Doc/library/http.client.rst:206
msgid "The default port for the HTTP protocol (always ``80``)."
msgstr ""

#: ../Doc/library/http.client.rst:210
msgid "The default port for the HTTPS protocol (always ``443``)."
msgstr ""

#: ../Doc/library/http.client.rst:214
msgid "This dictionary maps the HTTP 1.1 status codes to the W3C names."
msgstr ""

#: ../Doc/library/http.client.rst:216
msgid ""
"Example: ``http.client.responses[http.client.NOT_FOUND]`` is ``'Not Found'``."
msgstr ""

#: ../Doc/library/http.client.rst:218
msgid ""
"See :ref:`http-status-codes` for a list of HTTP status codes that are "
"available in this module as constants."
msgstr ""

#: ../Doc/library/http.client.rst:225
msgid "HTTPConnection Objects"
msgstr ""

#: ../Doc/library/http.client.rst:227
msgid ":class:`HTTPConnection` instances have the following methods:"
msgstr ""

#: ../Doc/library/http.client.rst:233
msgid ""
"This will send a request to the server using the HTTP request method "
"*method* and the selector *url*."
msgstr ""

#: ../Doc/library/http.client.rst:236
msgid ""
"If *body* is specified, the specified data is sent after the headers are "
"finished.  It may be a :class:`str`, a :term:`bytes-like object`, an open :"
"term:`file object`, or an iterable of :class:`bytes`.  If *body* is a "
"string, it is encoded as ISO-8859-1, the default for HTTP.  If it is a bytes-"
"like object, the bytes are sent as is.  If it is a :term:`file object`, the "
"contents of the file is sent; this file object should support at least the "
"``read()`` method.  If the file object is an instance of :class:`io."
"TextIOBase`, the data returned by the ``read()`` method will be encoded as "
"ISO-8859-1, otherwise the data returned by ``read()`` is sent as is.  If "
"*body* is an iterable, the elements of the iterable are sent as is until the "
"iterable is exhausted."
msgstr ""

#: ../Doc/library/http.client.rst:248
msgid ""
"The *headers* argument should be a mapping of extra HTTP headers to send "
"with the request."
msgstr ""

#: ../Doc/library/http.client.rst:251
msgid ""
"If *headers* contains neither Content-Length nor Transfer-Encoding, but "
"there is a request body, one of those header fields will be added "
"automatically.  If *body* is ``None``, the Content-Length header is set to "
"``0`` for methods that expect a body (``PUT``, ``POST``, and ``PATCH``).  If "
"*body* is a string or a bytes-like object that is not also a :term:`file "
"<file object>`, the Content-Length header is set to its length.  Any other "
"type of *body* (files and iterables in general) will be chunk-encoded, and "
"the Transfer-Encoding header will automatically be set instead of Content-"
"Length."
msgstr ""

#: ../Doc/library/http.client.rst:263
msgid ""
"The *encode_chunked* argument is only relevant if Transfer-Encoding is "
"specified in *headers*.  If *encode_chunked* is ``False``, the "
"HTTPConnection object assumes that all encoding is handled by the calling "
"code.  If it is ``True``, the body will be chunk-encoded."
msgstr ""

#: ../Doc/library/http.client.rst:269
msgid ""
"Chunked transfer encoding has been added to the HTTP protocol version 1.1.  "
"Unless the HTTP server is known to handle HTTP 1.1, the caller must either "
"specify the Content-Length, or must pass a :class:`str` or bytes-like object "
"that is not also a file as the body representation."
msgstr ""

#: ../Doc/library/http.client.rst:275
msgid "*body* can now be an iterable."
msgstr ""

#: ../Doc/library/http.client.rst:278
msgid ""
"If neither Content-Length nor Transfer-Encoding are set in *headers*, file "
"and iterable *body* objects are now chunk-encoded. The *encode_chunked* "
"argument was added. No attempt is made to determine the Content-Length for "
"file objects."
msgstr ""

#: ../Doc/library/http.client.rst:287
msgid ""
"Should be called after a request is sent to get the response from the "
"server. Returns an :class:`HTTPResponse` instance."
msgstr ""

#: ../Doc/library/http.client.rst:292
msgid ""
"Note that you must have read the whole response before you can send a new "
"request to the server."
msgstr ""

#: ../Doc/library/http.client.rst:295
msgid ""
"If a :exc:`ConnectionError` or subclass is raised, the :class:"
"`HTTPConnection` object will be ready to reconnect when a new request is "
"sent."
msgstr ""

#: ../Doc/library/http.client.rst:303
msgid ""
"Set the debugging level.  The default debug level is ``0``, meaning no "
"debugging output is printed.  Any value greater than ``0`` will cause all "
"currently defined debug output to be printed to stdout.  The ``debuglevel`` "
"is passed to any new :class:`HTTPResponse` objects that are created."
msgstr ""

#: ../Doc/library/http.client.rst:313
msgid ""
"Set the host and the port for HTTP Connect Tunnelling. This allows running "
"the connection through a proxy server."
msgstr ""

#: ../Doc/library/http.client.rst:316
msgid ""
"The host and port arguments specify the endpoint of the tunneled connection "
"(i.e. the address included in the CONNECT request, *not* the address of the "
"proxy server)."
msgstr ""

#: ../Doc/library/http.client.rst:320
msgid ""
"The headers argument should be a mapping of extra HTTP headers to send with "
"the CONNECT request."
msgstr ""

#: ../Doc/library/http.client.rst:323
msgid ""
"For example, to tunnel through a HTTPS proxy server running locally on port "
"8080, we would pass the address of the proxy to the :class:`HTTPSConnection` "
"constructor, and the address of the host that we eventually want to reach to "
"the :meth:`~HTTPConnection.set_tunnel` method::"
msgstr ""

#: ../Doc/library/http.client.rst:338
msgid ""
"Connect to the server specified when the object was created.  By default, "
"this is called automatically when making a request if the client does not "
"already have a connection."
msgstr ""

#: ../Doc/library/http.client.rst:345
msgid "Close the connection to the server."
msgstr ""

#: ../Doc/library/http.client.rst:350
msgid "Buffer size in bytes for sending a file-like message body."
msgstr ""

#: ../Doc/library/http.client.rst:355
msgid ""
"As an alternative to using the :meth:`request` method described above, you "
"can also send your request step by step, by using the four functions below."
msgstr ""

#: ../Doc/library/http.client.rst:362
msgid ""
"This should be the first call after the connection to the server has been "
"made. It sends a line to the server consisting of the *method* string, the "
"*url* string, and the HTTP version (``HTTP/1.1``).  To disable automatic "
"sending of ``Host:`` or ``Accept-Encoding:`` headers (for example to accept "
"additional content encodings), specify *skip_host* or *skip_accept_encoding* "
"with non-False values."
msgstr ""

#: ../Doc/library/http.client.rst:372
msgid ""
"Send an :rfc:`822`\\ -style header to the server.  It sends a line to the "
"server consisting of the header, a colon and a space, and the first "
"argument.  If more arguments are given, continuation lines are sent, each "
"consisting of a tab and an argument."
msgstr ""

#: ../Doc/library/http.client.rst:380
msgid ""
"Send a blank line to the server, signalling the end of the headers. The "
"optional *message_body* argument can be used to pass a message body "
"associated with the request."
msgstr ""

#: ../Doc/library/http.client.rst:384
msgid ""
"If *encode_chunked* is ``True``, the result of each iteration of "
"*message_body* will be chunk-encoded as specified in :rfc:`7230`, Section "
"3.3.1.  How the data is encoded is dependent on the type of *message_body*.  "
"If *message_body* implements the :ref:`buffer interface <bufferobjects>` the "
"encoding will result in a single chunk. If *message_body* is a :class:"
"`collections.abc.Iterable`, each iteration of *message_body* will result in "
"a chunk.  If *message_body* is a :term:`file object`, each call to ``."
"read()`` will result in a chunk. The method automatically signals the end of "
"the chunk-encoded data immediately after *message_body*."
msgstr ""

#: ../Doc/library/http.client.rst:395
msgid ""
"Due to the chunked encoding specification, empty chunks yielded by an "
"iterator body will be ignored by the chunk-encoder. This is to avoid "
"premature termination of the read of the request by the target server due to "
"malformed encoding."
msgstr ""

#: ../Doc/library/http.client.rst:400
msgid "Chunked encoding support.  The *encode_chunked* parameter was added."
msgstr ""

#: ../Doc/library/http.client.rst:407
msgid ""
"Send data to the server.  This should be used directly only after the :meth:"
"`endheaders` method has been called and before :meth:`getresponse` is called."
msgstr ""

#: ../Doc/library/http.client.rst:415
msgid "HTTPResponse Objects"
msgstr ""

#: ../Doc/library/http.client.rst:417
msgid ""
"An :class:`HTTPResponse` instance wraps the HTTP response from the server.  "
"It provides access to the request headers and the entity body.  The response "
"is an iterable object and can be used in a with statement."
msgstr ""

#: ../Doc/library/http.client.rst:422
msgid ""
"The :class:`io.BufferedIOBase` interface is now implemented and all of its "
"reader operations are supported."
msgstr ""

#: ../Doc/library/http.client.rst:429
msgid "Reads and returns the response body, or up to the next *amt* bytes."
msgstr ""

#: ../Doc/library/http.client.rst:433
msgid ""
"Reads up to the next len(b) bytes of the response body into the buffer *b*. "
"Returns the number of bytes read."
msgstr ""

#: ../Doc/library/http.client.rst:440
msgid ""
"Return the value of the header *name*, or *default* if there is no header "
"matching *name*.  If there is more than one  header with the name *name*, "
"return all of the values joined by ', '.  If 'default' is any iterable other "
"than a single string, its elements are similarly returned joined by commas."
msgstr ""

#: ../Doc/library/http.client.rst:447
msgid "Return a list of (header, value) tuples."
msgstr ""

#: ../Doc/library/http.client.rst:451
msgid "Return the ``fileno`` of the underlying socket."
msgstr ""

#: ../Doc/library/http.client.rst:455
msgid ""
"A :class:`http.client.HTTPMessage` instance containing the response "
"headers.  :class:`http.client.HTTPMessage` is a subclass of :class:`email."
"message.Message`."
msgstr ""

#: ../Doc/library/http.client.rst:461
msgid ""
"HTTP protocol version used by server.  10 for HTTP/1.0, 11 for HTTP/1.1."
msgstr ""

#: ../Doc/library/http.client.rst:465
msgid "Status code returned by server."
msgstr ""

#: ../Doc/library/http.client.rst:469
msgid "Reason phrase returned by server."
msgstr ""

#: ../Doc/library/http.client.rst:473
msgid ""
"A debugging hook.  If :attr:`debuglevel` is greater than zero, messages will "
"be printed to stdout as the response is read and parsed."
msgstr ""

#: ../Doc/library/http.client.rst:478
msgid "Is ``True`` if the stream is closed."
msgstr ""

#: ../Doc/library/http.client.rst:481
msgid "Examples"
msgstr "Exemples"

#: ../Doc/library/http.client.rst:483
msgid "Here is an example session that uses the ``GET`` method::"
msgstr ""

#: ../Doc/library/http.client.rst:508
msgid ""
"Here is an example session that uses the ``HEAD`` method.  Note that the "
"``HEAD`` method never returns any data. ::"
msgstr ""

#: ../Doc/library/http.client.rst:523
msgid "Here is an example session that shows how to ``POST`` requests::"
msgstr ""

#: ../Doc/library/http.client.rst:539
msgid ""
"Client side ``HTTP PUT`` requests are very similar to ``POST`` requests. The "
"difference lies only the server side where HTTP server will allow resources "
"to be created via ``PUT`` request. It should be noted that custom HTTP "
"methods +are also handled in :class:`urllib.request.Request` by sending the "
"appropriate +method attribute.Here is an example session that shows how to "
"do ``PUT`` request using http.client::"
msgstr ""

#: ../Doc/library/http.client.rst:561
msgid "HTTPMessage Objects"
msgstr ""

#: ../Doc/library/http.client.rst:563
msgid ""
"An :class:`http.client.HTTPMessage` instance holds the headers from an HTTP "
"response.  It is implemented using the :class:`email.message.Message` class."
msgstr ""
