# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-29 16:06+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/ossaudiodev.rst:2
msgid ":mod:`ossaudiodev` --- Access to OSS-compatible audio devices"
msgstr ""

#: ../Doc/library/ossaudiodev.rst:10
msgid ""
"This module allows you to access the OSS (Open Sound System) audio "
"interface. OSS is available for a wide range of open-source and commercial "
"Unices, and is the standard audio interface for Linux and recent versions of "
"FreeBSD."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:42
msgid ""
"Operations in this module now raise :exc:`OSError` where :exc:`IOError` was "
"raised."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:50
msgid ""
"`Open Sound System Programmer's Guide <http://www.opensound.com/pguide/oss."
"pdf>`_"
msgstr ""

#: ../Doc/library/ossaudiodev.rst:50
msgid "the official documentation for the OSS C API"
msgstr ""

#: ../Doc/library/ossaudiodev.rst:52
msgid ""
"The module defines a large number of constants supplied by the OSS device "
"driver; see ``<sys/soundcard.h>`` on either Linux or FreeBSD for a listing."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:55
msgid ":mod:`ossaudiodev` defines the following variables and functions:"
msgstr ""

#: ../Doc/library/ossaudiodev.rst:60
msgid ""
"This exception is raised on certain errors.  The argument is a string "
"describing what went wrong."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:63
msgid ""
"(If :mod:`ossaudiodev` receives an error from a system call such as :c:func:"
"`open`, :c:func:`write`, or :c:func:`ioctl`, it raises :exc:`OSError`. "
"Errors detected directly by :mod:`ossaudiodev` result in :exc:"
"`OSSAudioError`.)"
msgstr ""

#: ../Doc/library/ossaudiodev.rst:67
msgid ""
"(For backwards compatibility, the exception class is also available as "
"``ossaudiodev.error``.)"
msgstr ""

#: ../Doc/library/ossaudiodev.rst:74
msgid ""
"Open an audio device and return an OSS audio device object.  This object "
"supports many file-like methods, such as :meth:`read`, :meth:`write`, and :"
"meth:`fileno` (although there are subtle differences between conventional "
"Unix read/write semantics and those of OSS audio devices).  It also supports "
"a number of audio-specific methods; see below for the complete list of "
"methods."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:80
msgid ""
"*device* is the audio device filename to use.  If it is not specified, this "
"module first looks in the environment variable :envvar:`AUDIODEV` for a "
"device to use.  If not found, it falls back to :file:`/dev/dsp`."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:84
msgid ""
"*mode* is one of ``'r'`` for read-only (record) access, ``'w'`` for write-"
"only (playback) access and ``'rw'`` for both. Since many sound cards only "
"allow one process to have the recorder or player open at a time, it is a "
"good idea to open the device only for the activity needed.  Further, some "
"sound cards are half-duplex: they can be opened for reading or writing, but "
"not both at once."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:91
msgid ""
"Note the unusual calling syntax: the *first* argument is optional, and the "
"second is required.  This is a historical artifact for compatibility with "
"the older :mod:`linuxaudiodev` module which :mod:`ossaudiodev` supersedes."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:102
msgid ""
"Open a mixer device and return an OSS mixer device object.   *device* is the "
"mixer device filename to use.  If it is not specified, this module first "
"looks in the environment variable :envvar:`MIXERDEV` for a device to use.  "
"If not found, it falls back to :file:`/dev/mixer`."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:111
msgid "Audio Device Objects"
msgstr ""

#: ../Doc/library/ossaudiodev.rst:113
msgid ""
"Before you can write to or read from an audio device, you must call three "
"methods in the correct order:"
msgstr ""

#: ../Doc/library/ossaudiodev.rst:116
msgid ":meth:`setfmt` to set the output format"
msgstr ""

#: ../Doc/library/ossaudiodev.rst:118
msgid ":meth:`channels` to set the number of channels"
msgstr ""

#: ../Doc/library/ossaudiodev.rst:120
msgid ":meth:`speed` to set the sample rate"
msgstr ""

#: ../Doc/library/ossaudiodev.rst:122
msgid ""
"Alternately, you can use the :meth:`setparameters` method to set all three "
"audio parameters at once.  This is more convenient, but may not be as "
"flexible in all cases."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:126
msgid ""
"The audio device objects returned by :func:`.open` define the following "
"methods and (read-only) attributes:"
msgstr ""

#: ../Doc/library/ossaudiodev.rst:132
msgid ""
"Explicitly close the audio device.  When you are done writing to or reading "
"from an audio device, you should explicitly close it.  A closed device "
"cannot be used again."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:139
msgid "Return the file descriptor associated with the device."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:144
msgid ""
"Read *size* bytes from the audio input and return them as a Python string. "
"Unlike most Unix device drivers, OSS audio devices in blocking mode (the "
"default) will block :func:`read` until the entire requested amount of data "
"is available."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:152
msgid ""
"Write a :term:`bytes-like object` *data* to the audio device and return the "
"number of bytes written.  If the audio device is in blocking mode (the "
"default), the entire data is always written (again, this is different from "
"usual Unix device semantics).  If the device is in non-blocking mode, some "
"data may not be written---see :meth:`writeall`."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:158 ../Doc/library/ossaudiodev.rst:172
msgid "Writable :term:`bytes-like object` is now accepted."
msgstr "N'importe quel :term:`bytes-like object` est maintenant accept√©."

#: ../Doc/library/ossaudiodev.rst:164
msgid ""
"Write a :term:`bytes-like object` *data* to the audio device: waits until "
"the audio device is able to accept data, writes as much data as it will "
"accept, and repeats until *data* has been completely written. If the device "
"is in blocking mode (the default), this has the same effect as :meth:"
"`write`; :meth:`writeall` is only useful in non-blocking mode.  Has no "
"return value, since the amount of data written is always equal to the amount "
"of data supplied."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:176
msgid ""
"Audio device objects also support the context management protocol, i.e. they "
"can be used in a :keyword:`with` statement."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:181
msgid ""
"The following methods each map to exactly one :c:func:`ioctl` system call.  "
"The correspondence is obvious: for example, :meth:`setfmt` corresponds to "
"the ``SNDCTL_DSP_SETFMT`` ioctl, and :meth:`sync` to ``SNDCTL_DSP_SYNC`` "
"(this can be useful when consulting the OSS documentation).  If the "
"underlying :c:func:`ioctl` fails, they all raise :exc:`OSError`."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:190
msgid ""
"Put the device into non-blocking mode.  Once in non-blocking mode, there is "
"no way to return it to blocking mode."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:196
msgid ""
"Return a bitmask of the audio output formats supported by the soundcard.  "
"Some of the formats supported by OSS are:"
msgstr ""

#: ../Doc/library/ossaudiodev.rst:200
msgid "Format"
msgstr "Format"

#: ../Doc/library/ossaudiodev.rst:200 ../Doc/library/ossaudiodev.rst:254
msgid "Description"
msgstr "Description"

#: ../Doc/library/ossaudiodev.rst:202
msgid ":const:`AFMT_MU_LAW`"
msgstr ":const:`AFMT_MU_LAW`"

#: ../Doc/library/ossaudiodev.rst:202
msgid ""
"a logarithmic encoding (used by Sun ``.au`` files and :file:`/dev/audio`)"
msgstr ""

#: ../Doc/library/ossaudiodev.rst:205
msgid ":const:`AFMT_A_LAW`"
msgstr ":const:`AFMT_A_LAW`"

#: ../Doc/library/ossaudiodev.rst:205
msgid "a logarithmic encoding"
msgstr ""

#: ../Doc/library/ossaudiodev.rst:207
msgid ":const:`AFMT_IMA_ADPCM`"
msgstr ":const:`AFMT_IMA_ADPCM`"

#: ../Doc/library/ossaudiodev.rst:207
msgid ""
"a 4:1 compressed format defined by the Interactive Multimedia Association"
msgstr ""

#: ../Doc/library/ossaudiodev.rst:210
msgid ":const:`AFMT_U8`"
msgstr ":const:`AFMT_U8`"

#: ../Doc/library/ossaudiodev.rst:210
msgid "Unsigned, 8-bit audio"
msgstr ""

#: ../Doc/library/ossaudiodev.rst:212
msgid ":const:`AFMT_S16_LE`"
msgstr ":const:`AFMT_S16_LE`"

#: ../Doc/library/ossaudiodev.rst:212
msgid ""
"Signed, 16-bit audio, little-endian byte order (as used by Intel processors)"
msgstr ""

#: ../Doc/library/ossaudiodev.rst:215
msgid ":const:`AFMT_S16_BE`"
msgstr ":const:`AFMT_S16_BE`"

#: ../Doc/library/ossaudiodev.rst:215
msgid ""
"Signed, 16-bit audio, big-endian byte order (as used by 68k, PowerPC, Sparc)"
msgstr ""

#: ../Doc/library/ossaudiodev.rst:218
msgid ":const:`AFMT_S8`"
msgstr ":const:`AFMT_S8`"

#: ../Doc/library/ossaudiodev.rst:218
msgid "Signed, 8 bit audio"
msgstr ""

#: ../Doc/library/ossaudiodev.rst:220
msgid ":const:`AFMT_U16_LE`"
msgstr ":const:`AFMT_U16_LE`"

#: ../Doc/library/ossaudiodev.rst:220
msgid "Unsigned, 16-bit little-endian audio"
msgstr ""

#: ../Doc/library/ossaudiodev.rst:222
msgid ":const:`AFMT_U16_BE`"
msgstr ":const:`AFMT_U16_BE`"

#: ../Doc/library/ossaudiodev.rst:222
msgid "Unsigned, 16-bit big-endian audio"
msgstr ""

#: ../Doc/library/ossaudiodev.rst:225
msgid ""
"Consult the OSS documentation for a full list of audio formats, and note "
"that most devices support only a subset of these formats.  Some older "
"devices only support :const:`AFMT_U8`; the most common format used today is :"
"const:`AFMT_S16_LE`."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:233
msgid ""
"Try to set the current audio format to *format*---see :meth:`getfmts` for a "
"list.  Returns the audio format that the device was set to, which may not be "
"the requested format.  May also be used to return the current audio format---"
"do this by passing an \"audio format\" of :const:`AFMT_QUERY`."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:241
msgid ""
"Set the number of output channels to *nchannels*.  A value of 1 indicates "
"monophonic sound, 2 stereophonic.  Some devices may have more than 2 "
"channels, and some high-end devices may not support mono. Returns the number "
"of channels the device was set to."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:249
msgid ""
"Try to set the audio sampling rate to *samplerate* samples per second.  "
"Returns the rate actually set.  Most sound devices don't support arbitrary "
"sampling rates.  Common rates are:"
msgstr ""

#: ../Doc/library/ossaudiodev.rst:254
msgid "Rate"
msgstr ""

#: ../Doc/library/ossaudiodev.rst:256
msgid "8000"
msgstr "8000"

#: ../Doc/library/ossaudiodev.rst:256
msgid "default rate for :file:`/dev/audio`"
msgstr ""

#: ../Doc/library/ossaudiodev.rst:258
msgid "11025"
msgstr "11025"

#: ../Doc/library/ossaudiodev.rst:258
msgid "speech recording"
msgstr ""

#: ../Doc/library/ossaudiodev.rst:260
msgid "22050"
msgstr "22050"

#: ../Doc/library/ossaudiodev.rst:262
msgid "44100"
msgstr "44100"

#: ../Doc/library/ossaudiodev.rst:262
msgid "CD quality audio (at 16 bits/sample and 2 channels)"
msgstr ""

#: ../Doc/library/ossaudiodev.rst:265
msgid "96000"
msgstr "96000"

#: ../Doc/library/ossaudiodev.rst:265
msgid "DVD quality audio (at 24 bits/sample)"
msgstr ""

#: ../Doc/library/ossaudiodev.rst:271
msgid ""
"Wait until the sound device has played every byte in its buffer.  (This "
"happens implicitly when the device is closed.)  The OSS documentation "
"recommends closing and re-opening the device rather than using :meth:`sync`."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:278
msgid ""
"Immediately stop playing or recording and return the device to a state where "
"it can accept commands.  The OSS documentation recommends closing and re-"
"opening the device after calling :meth:`reset`."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:285
msgid ""
"Tell the driver that there is likely to be a pause in the output, making it "
"possible for the device to handle the pause more intelligently.  You might "
"use this after playing a spot sound effect, before waiting for user input, "
"or before doing disk I/O."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:290
msgid ""
"The following convenience methods combine several ioctls, or one ioctl and "
"some simple calculations."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:296
msgid ""
"Set the key audio sampling parameters---sample format, number of channels, "
"and sampling rate---in one method call.  *format*,  *nchannels*, and "
"*samplerate* should be as specified in the :meth:`setfmt`, :meth:`channels`, "
"and :meth:`speed`  methods.  If *strict* is true, :meth:`setparameters` "
"checks to see if each parameter was actually set to the requested value, and "
"raises :exc:`OSSAudioError` if not.  Returns a tuple (*format*, *nchannels*, "
"*samplerate*) indicating the parameter values that were actually set by the "
"device driver (i.e., the same as the return values of :meth:`setfmt`, :meth:"
"`channels`, and :meth:`speed`)."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:306
#, fuzzy
msgid "For example,  ::"
msgstr "Par exemple ::"

#: ../Doc/library/ossaudiodev.rst:310
#, fuzzy
msgid "is equivalent to  ::"
msgstr "est √©quivalente √† ::"

#: ../Doc/library/ossaudiodev.rst:319
msgid "Returns the size of the hardware buffer, in samples."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:324
msgid ""
"Returns the number of samples that are in the hardware buffer yet to be "
"played."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:329
msgid ""
"Returns the number of samples that could be queued into the hardware buffer "
"to be played without blocking."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:332
msgid "Audio device objects also support several read-only attributes:"
msgstr ""

#: ../Doc/library/ossaudiodev.rst:337
msgid "Boolean indicating whether the device has been closed."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:342
msgid "String containing the name of the device file."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:347
msgid "The I/O mode for the file, either ``\"r\"``, ``\"rw\"``, or ``\"w\"``."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:353
msgid "Mixer Device Objects"
msgstr ""

#: ../Doc/library/ossaudiodev.rst:355
msgid "The mixer object provides two file-like methods:"
msgstr ""

#: ../Doc/library/ossaudiodev.rst:360
msgid ""
"This method closes the open mixer device file.  Any further attempts to use "
"the mixer after this file is closed will raise an :exc:`OSError`."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:366
msgid "Returns the file handle number of the open mixer device file."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:368
msgid "Mixer objects also support the context management protocol."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:372
msgid "The remaining methods are specific to audio mixing:"
msgstr ""

#: ../Doc/library/ossaudiodev.rst:377
msgid ""
"This method returns a bitmask specifying the available mixer controls "
"(\"Control\" being a specific mixable \"channel\", such as :const:"
"`SOUND_MIXER_PCM` or :const:`SOUND_MIXER_SYNTH`).  This bitmask indicates a "
"subset of all available mixer controls---the :const:`SOUND_MIXER_\\*` "
"constants defined at module level. To determine if, for example, the current "
"mixer object supports a PCM mixer, use the following Python code::"
msgstr ""

#: ../Doc/library/ossaudiodev.rst:389
msgid ""
"For most purposes, the :const:`SOUND_MIXER_VOLUME` (master volume) and :"
"const:`SOUND_MIXER_PCM` controls should suffice---but code that uses the "
"mixer should be flexible when it comes to choosing mixer controls.  On the "
"Gravis Ultrasound, for example, :const:`SOUND_MIXER_VOLUME` does not exist."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:397
msgid ""
"Returns a bitmask indicating stereo mixer controls.  If a bit is set, the "
"corresponding control is stereo; if it is unset, the control is either "
"monophonic or not supported by the mixer (use in combination with :meth:"
"`controls` to determine which)."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:402
msgid ""
"See the code example for the :meth:`controls` function for an example of "
"getting data from a bitmask."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:408
msgid ""
"Returns a bitmask specifying the mixer controls that may be used to record.  "
"See the code example for :meth:`controls` for an example of reading from a "
"bitmask."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:414
msgid ""
"Returns the volume of a given mixer control.  The returned volume is a 2-"
"tuple ``(left_volume,right_volume)``.  Volumes are specified as numbers from "
"0 (silent) to 100 (full volume).  If the control is monophonic, a 2-tuple is "
"still returned, but both volumes are the same."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:419
msgid ""
"Raises :exc:`OSSAudioError` if an invalid control is specified, or :exc:"
"`OSError` if an unsupported control is specified."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:425
msgid ""
"Sets the volume for a given mixer control to ``(left,right)``. ``left`` and "
"``right`` must be ints and between 0 (silent) and 100 (full volume).  On "
"success, the new volume is returned as a 2-tuple. Note that this may not be "
"exactly the same as the volume specified, because of the limited resolution "
"of some soundcard's mixers."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:431
msgid ""
"Raises :exc:`OSSAudioError` if an invalid mixer control was specified, or if "
"the specified volumes were out-of-range."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:437
msgid ""
"This method returns a bitmask indicating which control(s) are currently "
"being used as a recording source."
msgstr ""

#: ../Doc/library/ossaudiodev.rst:443
msgid ""
"Call this function to specify a recording source.  Returns a bitmask "
"indicating the new recording source (or sources) if successful; raises :exc:"
"`OSError` if an invalid source was specified.  To set the current recording "
"source to the microphone input::"
msgstr ""
