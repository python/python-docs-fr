# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-29 21:40+0100\n"
"PO-Revision-Date: 2024-03-15 22:55+0100\n"
"Last-Translator: Christophe Nanteuil <christophe.nanteuil@gmail.com>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.2.2\n"

#: library/email.mime.rst:2
#, fuzzy
msgid ":mod:`!email.mime`: Creating email and MIME objects from scratch"
msgstr ":mod:`email.mime` : création d'objets e-mail et MIME à partir de zéro"

#: library/email.mime.rst:7
msgid "**Source code:** :source:`Lib/email/mime/`"
msgstr "**Code source :** :source:`Lib/email/mime/`"

#: library/email.mime.rst:11
msgid ""
"This module is part of the legacy (``Compat32``) email API.  Its "
"functionality is partially replaced by the :mod:`~email.contentmanager` in "
"the new API, but in certain applications these classes may still be useful, "
"even in non-legacy code."
msgstr ""
"Ce module fait partie de l'ancienne API de messagerie (``Compat32``). Sa "
"fonctionnalité est partiellement remplacée par le :mod:`~email."
"contentmanager` dans la nouvelle API mais, dans certaines applications, ces "
"classes peuvent toujours être utiles, même dans du code pas si ancien."

#: library/email.mime.rst:16
msgid ""
"Ordinarily, you get a message object structure by passing a file or some "
"text to a parser, which parses the text and returns the root message "
"object.  However you can also build a complete message structure from "
"scratch, or even individual :class:`~email.message.Message` objects by "
"hand.  In fact, you can also take an existing structure and add new :class:"
"`~email.message.Message` objects, move them around, etc.  This makes a very "
"convenient interface for slicing-and-dicing MIME messages."
msgstr ""
"Habituellement, vous obtenez une structure d'objet message en passant un "
"fichier ou du texte à un analyseur, qui analyse le texte et renvoie l'objet "
"message racine. Cependant, vous pouvez également créer une structure de "
"message complète à partir de zéro, ou même des objets individuels :class:"
"`~email.message.Message` à la main. En fait, vous pouvez également prendre "
"une structure existante et ajouter de nouveaux objets :class:`~email.message."
"Message`, les déplacer, etc. Cela crée une interface très pratique pour "
"découper et manipuler chaque morceau de messages MIME."

#: library/email.mime.rst:24
msgid ""
"You can create a new object structure by creating :class:`~email.message."
"Message` instances, adding attachments and all the appropriate headers "
"manually.  For MIME messages though, the :mod:`email` package provides some "
"convenient subclasses to make things easier."
msgstr ""
"Vous pouvez créer une nouvelle structure d'objet en créant des instances :"
"class:`~email.message.Message`, en ajoutant manuellement les pièces jointes "
"et tous les en-têtes appropriés. Pour les messages MIME cependant, le "
"paquet :mod:`email` fournit quelques sous-classes pratiques pour faciliter "
"les choses."

#: library/email.mime.rst:29
msgid "Here are the classes:"
msgstr "Voici les classes :"

#: library/email.mime.rst:35
msgid "Module: :mod:`email.mime.base`"
msgstr "Module : :mod:`email.mime.base`"

#: library/email.mime.rst:37
msgid ""
"This is the base class for all the MIME-specific subclasses of :class:"
"`~email.message.Message`.  Ordinarily you won't create instances "
"specifically of :class:`MIMEBase`, although you could.  :class:`MIMEBase` is "
"provided primarily as a convenient base class for more specific MIME-aware "
"subclasses."
msgstr ""
"C'est la classe mère pour toutes les sous-classes spécifiques à MIME de :"
"class:`~email.message.Message`. Normalement, vous ne créerez pas d'instances "
"spécifiques de :class:`MIMEBase`, bien que cela soit possible. :class:"
"`MIMEBase` est fourni principalement comme une classe mère pratique pour des "
"sous-classes plus spécifiques compatibles MIME."

#: library/email.mime.rst:43
msgid ""
"*_maintype* is the :mailheader:`Content-Type` major type (e.g. :mimetype:"
"`text` or :mimetype:`image`), and *_subtype* is the :mailheader:`Content-"
"Type` minor type  (e.g. :mimetype:`plain` or :mimetype:`gif`).  *_params* is "
"a parameter key/value dictionary and is passed directly to :meth:`Message."
"add_header <email.message.Message.add_header>`."
msgstr ""
"*_maintype* est le type majeur du :mailheader:`Content-Type` (par exemple :"
"mimetype:`text` ou :mimetype:`image`) et *_subtype* est le type mineur du :"
"mailheader:`Content-Type` (par exemple, :mimetype:`plain` ou :mimetype:"
"`gif`). *_params* est un paramètre dictionnaire clé-valeur et est transmis "
"directement à :meth:`Message.add_header <email.message.Message.add_header>`."

#: library/email.mime.rst:49
msgid ""
"If *policy* is specified, (defaults to the :class:`compat32 <email.policy."
"Compat32>` policy) it will be passed to :class:`~email.message.Message`."
msgstr ""
"Si *policy* est spécifiée, (par défaut la politique :class:`compat32 <email."
"policy.Compat32>`) elle est passée à :class:`~email.message.Message`."

#: library/email.mime.rst:53
msgid ""
"The :class:`MIMEBase` class always adds a :mailheader:`Content-Type` header "
"(based on *_maintype*, *_subtype*, and *_params*), and a :mailheader:`MIME-"
"Version` header (always set to ``1.0``)."
msgstr ""
"La classe :class:`MIMEBase` ajoute toujours un en-tête :mailheader:`Content-"
"Type` (basé sur *_maintype*, *_subtype* et *_params*) et un en-tête :"
"mailheader:`MIME-Version` (toujours défini à ``1.0``)."

# suit un :
#: library/email.mime.rst:104 library/email.mime.rst:169
#: library/email.mime.rst:225 library/email.mime.rst:259
msgid "Added *policy* keyword-only parameter."
msgstr "ajout du paramètre nommé *policy*."

#: library/email.mime.rst:65
msgid "Module: :mod:`email.mime.nonmultipart`"
msgstr "Module : :mod:`email.mime.nonmultipart`"

#: library/email.mime.rst:67
msgid ""
"A subclass of :class:`~email.mime.base.MIMEBase`, this is an intermediate "
"base class for MIME messages that are not :mimetype:`multipart`.  The "
"primary purpose of this class is to prevent the use of the :meth:`~email."
"message.Message.attach` method, which only makes sense for :mimetype:"
"`multipart` messages.  If :meth:`~email.message.Message.attach` is called, "
"a :exc:`~email.errors.MultipartConversionError` exception is raised."
msgstr ""
"Sous-classe de :class:`~email.mime.base.MIMEBase`, c'est une classe mère "
"intermédiaire pour les messages MIME qui ne sont pas :mimetype:`multipart`. "
"Le but principal de cette classe est d'empêcher l'utilisation de la méthode :"
"meth:`~email.message.Message.attach`, qui n'a de sens que pour les messages :"
"mimetype:`multipart`. Si :meth:`~email.message.Message.attach` est appelée, "
"une exception :exc:`~email.errors.MultipartConversionError` est levée."

#: library/email.mime.rst:80
msgid "Module: :mod:`email.mime.multipart`"
msgstr "Module : :mod:`email.mime.multipart`"

#: library/email.mime.rst:82
msgid ""
"A subclass of :class:`~email.mime.base.MIMEBase`, this is an intermediate "
"base class for MIME messages that are :mimetype:`multipart`.  Optional "
"*_subtype* defaults to :mimetype:`mixed`, but can be used to specify the "
"subtype of the message.  A :mailheader:`Content-Type` header of :mimetype:"
"`multipart/_subtype` will be added to the message object.  A :mailheader:"
"`MIME-Version` header will also be added."
msgstr ""
"Sous-classe de :class:`~email.mime.base.MIMEBase`, c'est une classe mère "
"intermédiaire pour les messages MIME qui sont :mimetype:`multipart`. "
"*_subtype* (facultatif) est par défaut :mimetype:`mixed`, mais peut être "
"utilisé pour spécifier le sous-type du message. Un en-tête :mailheader:"
"`Content-Type` de :mimetype:`multipart/_subtype` sera ajouté à l'objet "
"message. Un en-tête :mailheader:`MIME-Version` sera également ajouté."

#: library/email.mime.rst:89
msgid ""
"Optional *boundary* is the multipart boundary string.  When ``None`` (the "
"default), the boundary is calculated when needed (for example, when the "
"message is serialized)."
msgstr ""
"*boundary* (facultatif) est la chaîne de délimitation en plusieurs parties. "
"Si elle vaut ``None`` (la valeur par défaut), la délimitation est calculée "
"au besoin (par exemple, lorsque le message est sérialisé)."

#: library/email.mime.rst:93
msgid ""
"*_subparts* is a sequence of initial subparts for the payload.  It must be "
"possible to convert this sequence to a list.  You can always attach new "
"subparts to the message by using the :meth:`Message.attach <email.message."
"Message.attach>` method."
msgstr ""
"*_subparts* est une séquence de sous-parties initiales pour la charge utile. "
"Il doit être possible de convertir cette séquence en une liste. Vous pouvez "
"toujours joindre de nouvelles sous-parties au message en utilisant la "
"méthode :meth:`Message.attach <email.message.Message.attach>`."

#: library/email.mime.rst:131 library/email.mime.rst:200
#: library/email.mime.rst:254
msgid ""
"Optional *policy* argument defaults to :class:`compat32 <email.policy."
"Compat32>`."
msgstr ""
"L'argument facultatif *policy* est par défaut :class:`compat32 <email.policy."
"Compat32>`."

#: library/email.mime.rst:100
msgid ""
"Additional parameters for the :mailheader:`Content-Type` header are taken "
"from the keyword arguments, or passed into the *_params* argument, which is "
"a keyword dictionary."
msgstr ""
"Des paramètres supplémentaires pour l'en-tête :mailheader:`Content-Type` "
"sont extraits des arguments nommés ou passés à l'argument *_params*, qui est "
"un dictionnaire de mots-clés."

#: library/email.mime.rst:113
msgid "Module: :mod:`email.mime.application`"
msgstr "Module : :mod:`email.mime.application`"

#: library/email.mime.rst:115
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the :class:"
"`MIMEApplication` class is used to represent MIME message objects of major "
"type :mimetype:`application`.  *_data* contains the bytes for the raw "
"application data.  Optional *_subtype* specifies the MIME subtype and "
"defaults to :mimetype:`octet-stream`."
msgstr ""
"Sous-classe de :class:`~email.mime.nonmultipart.MIMENonMultipart`, la "
"classe :class:`MIMEApplication` est utilisée pour représenter les objets de "
"message MIME de type principal :mimetype:`application`. *_data* contient les "
"octets pour les données d'application brutes. L'option *_subtype* spécifie "
"le sous-type MIME et la valeur par défaut est :mimetype:`octet-stream`."

#: library/email.mime.rst:121
msgid ""
"Optional *_encoder* is a callable (i.e. function) which will perform the "
"actual encoding of the data for transport.  This callable takes one "
"argument, which is the :class:`MIMEApplication` instance. It should use :"
"meth:`~email.message.Message.get_payload` and :meth:`~email.message.Message."
"set_payload` to change the payload to encoded form.  It should also add any :"
"mailheader:`Content-Transfer-Encoding` or other headers to the message "
"object as necessary.  The default encoding is base64.  See the :mod:`email."
"encoders` module for a list of the built-in encoders."
msgstr ""
"*_encoder* (facultatif) est un appelable (c'est-à-dire une fonction) qui "
"effectue le codage réel des données pour le transport. Cet appelable prend "
"un argument, qui est l'instance :class:`MIMEApplication`. Il doit utiliser :"
"meth:`~email.message.Message.get_payload` et :meth:`~email.message.Message."
"set_payload` pour modifier la charge utile sous forme codée. Il doit "
"également ajouter n'importe quel :mailheader:`Content-Transfer-Encoding` ou "
"d'autres en-têtes à l'objet message si nécessaire. L'encodage par défaut est "
"base64. Voir le module :mod:`email.encoders` pour une liste des encodeurs "
"intégrés."

#: library/email.mime.rst:167
msgid "*_params* are passed straight through to the base class constructor."
msgstr ""
"Les *_params* sont transmis directement au constructeur de la classe mère."

#: library/email.mime.rst:144
msgid "Module: :mod:`email.mime.audio`"
msgstr "Module : :mod:`email.mime.audio`"

#: library/email.mime.rst:146
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the :class:"
"`MIMEAudio` class is used to create MIME message objects of major type :"
"mimetype:`audio`. *_audiodata* contains the bytes for the raw audio data.  "
"If this data can be decoded as au, wav, aiff, or aifc, then the subtype will "
"be automatically included in the :mailheader:`Content-Type` header. "
"Otherwise you can explicitly specify the audio subtype via the *_subtype* "
"argument.  If the minor type could not be guessed and *_subtype* was not "
"given, then :exc:`TypeError` is raised."
msgstr ""
"Sous-classe de :class:`~email.mime.nonmultipart.MIMENonMultipart`, la "
"classe :class:`MIMEAudio` est utilisée pour créer des objets de message MIME "
"de type majeur :mimetype:`audio`. *_audiodata* contient les octets pour les "
"données audio brutes. Si ces données peuvent être décodées au format *au*, "
"*wav*, *aiff* ou *aifc*, alors le sous-type est automatiquement inclus dans "
"l'en-tête :mailheader:`Content-Type`. Sinon, vous pouvez spécifier "
"explicitement le sous-type audio via l'argument *_subtype*. Si le type "
"mineur n'a pas pu être deviné et que *_subtype* n'a pas été donné, alors "
"une :exc:`TypeError` est levée."

#: library/email.mime.rst:155
msgid ""
"Optional *_encoder* is a callable (i.e. function) which will perform the "
"actual encoding of the audio data for transport.  This callable takes one "
"argument, which is the :class:`MIMEAudio` instance. It should use :meth:"
"`~email.message.Message.get_payload` and :meth:`~email.message.Message."
"set_payload` to change the payload to encoded form.  It should also add any :"
"mailheader:`Content-Transfer-Encoding` or other headers to the message "
"object as necessary.  The default encoding is base64.  See the :mod:`email."
"encoders` module for a list of the built-in encoders."
msgstr ""
"*_encoder* (facultatif) est un appelable (c'est-à-dire une fonction) qui "
"effectue le codage réel des données audio pour le transport. Cet appelable "
"prend un argument, qui est l'instance :class:`MIMEAudio`. Il doit utiliser :"
"meth:`~email.message.Message.get_payload` et :meth:`~email.message.Message."
"set_payload` pour modifier la charge utile sous forme codée. Il doit "
"également ajouter n'importe quel :mailheader:`Content-Transfer-Encoding` ou "
"d'autres en-têtes à l'objet message si nécessaire. L'encodage par défaut est "
"base64. Voir le module :mod:`email.encoders` pour une liste des encodeurs "
"intégrés."

#: library/email.mime.rst:178
msgid "Module: :mod:`email.mime.image`"
msgstr "Module : :mod:`email.mime.image`"

#: library/email.mime.rst:180
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the :class:"
"`MIMEImage` class is used to create MIME message objects of major type :"
"mimetype:`image`. *_imagedata* contains the bytes for the raw image data.  "
"If this data type can be detected (jpeg, png, gif, tiff, rgb, pbm, pgm, ppm, "
"rast, xbm, bmp, webp, and exr attempted), then the subtype will be "
"automatically included in the :mailheader:`Content-Type` header. Otherwise "
"you can explicitly specify the image subtype via the *_subtype* argument. If "
"the minor type could not be guessed and *_subtype* was not given, then :exc:"
"`TypeError` is raised."
msgstr ""
"Sous-classe de :class:`~email.mime.nonmultipart.MIMENonMultipart`, la "
"classe :class:`MIMEImage` est utilisée pour créer des objets de message MIME "
"de type principal :mimetype:`image`. *_imagedata* contient les octets pour "
"les données d'image brutes. Si ce type de données peut être détecté (*jpeg*, "
"*png*, *gif*, *tiff*, *rgb*, *pbm*, *pgm*, *ppm*, *rast*, *xbm*, *bmp*, "
"*webp* et *exr* sont essayés), alors le sous-type est automatiquement inclus "
"dans l'en-tête :mailheader:`Content-Type`. Sinon, vous pouvez spécifier "
"explicitement le sous-type d'image via l'argument *_subtype*. Si le type "
"mineur n'a pas pu être deviné et que *_subtype* n'a pas été donné, alors "
"une :exc:`TypeError` est levée."

#: library/email.mime.rst:190
msgid ""
"Optional *_encoder* is a callable (i.e. function) which will perform the "
"actual encoding of the image data for transport.  This callable takes one "
"argument, which is the :class:`MIMEImage` instance. It should use :meth:"
"`~email.message.Message.get_payload` and :meth:`~email.message.Message."
"set_payload` to change the payload to encoded form.  It should also add any :"
"mailheader:`Content-Transfer-Encoding` or other headers to the message "
"object as necessary.  The default encoding is base64.  See the :mod:`email."
"encoders` module for a list of the built-in encoders."
msgstr ""
"*_encoder* (facultatif) est un appelable (c'est-à-dire une fonction) qui "
"effectue le codage réel des données d'image pour le transport. Cet appelable "
"prend un argument, qui est l'instance :class:`MIMEImage`. Il doit utiliser :"
"meth:`~email.message.Message.get_payload` et :meth:`~email.message.Message."
"set_payload` pour modifier la charge utile sous forme codée. Il doit "
"également ajouter n'importe quel :mailheader:`Content-Transfer-Encoding` ou "
"d'autres en-têtes à l'objet message si nécessaire. L'encodage par défaut est "
"base64. Voir le module :mod:`email.encoders` pour une liste des encodeurs "
"intégrés."

#: library/email.mime.rst:202
msgid ""
"*_params* are passed straight through to the :class:`~email.mime.base."
"MIMEBase` constructor."
msgstr ""
"Les *_params* sont transmis directement au constructeur :class:`~email.mime."
"base.MIMEBase`."

#: library/email.mime.rst:212
msgid "Module: :mod:`email.mime.message`"
msgstr "Module : :mod:`email.mime.message`"

#: library/email.mime.rst:214
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the :class:"
"`MIMEMessage` class is used to create MIME objects of main type :mimetype:"
"`message`. *_msg* is used as the payload, and must be an instance of class :"
"class:`~email.message.Message` (or a subclass thereof), otherwise a :exc:"
"`TypeError` is raised."
msgstr ""
"Sous-classe de :class:`~email.mime.nonmultipart.MIMENonMultipart`, la "
"classe :class:`MIMEMessage` est utilisée pour créer des objets MIME de type "
"principal :mimetype:`message`. *_msg* est utilisé comme charge utile et doit "
"être une instance de la classe :class:`~email.message.Message` (ou une sous-"
"classe de celle-ci), sinon une :exc:`TypeError` est levée."

#: library/email.mime.rst:220
msgid ""
"Optional *_subtype* sets the subtype of the message; it defaults to :"
"mimetype:`rfc822`."
msgstr ""
"L'option *_subtype* définit le sous-type du message ; par défaut c'est :"
"mimetype:`rfc822`."

#: library/email.mime.rst:232
msgid "Module: :mod:`email.mime.text`"
msgstr "Module : :mod:`email.mime.text`"

#: library/email.mime.rst:234
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the :class:"
"`MIMEText` class is used to create MIME objects of major type :mimetype:"
"`text`. *_text* is the string for the payload.  *_subtype* is the minor type "
"and defaults to :mimetype:`plain`.  *_charset* is the character set of the "
"text and is passed as an argument to the :class:`~email.mime.nonmultipart."
"MIMENonMultipart` constructor; it defaults to ``us-ascii`` if the string "
"contains only ``ascii`` code points, and ``utf-8`` otherwise.  The "
"*_charset* parameter accepts either a string or a :class:`~email.charset."
"Charset` instance."
msgstr ""
"Sous-classe de :class:`~email.mime.nonmultipart.MIMENonMultipart`, la "
"classe :class:`MIMEText` est utilisée pour créer des objets MIME de type "
"principal :mimetype:`text`. *_text* est la chaîne de la charge utile. "
"*_subtype* est le type mineur et par défaut est :mimetype:`plain`. "
"*_charset* est le jeu de caractères du texte et est passé en argument au "
"constructeur :class:`~email.mime.nonmultipart.MIMENonMultipart` ; sa valeur "
"par défaut est ``us-ascii`` si la chaîne ne contient que des points de code "
"``ascii``, et ``utf-8`` sinon. Le paramètre *_charset* accepte soit une "
"chaîne soit une instance :class:`~email.charset.Charset`."

#: library/email.mime.rst:244
msgid ""
"Unless the *_charset* argument is explicitly set to ``None``, the MIMEText "
"object created will have both a :mailheader:`Content-Type` header with a "
"``charset`` parameter, and a :mailheader:`Content-Transfer-Encoding` "
"header.  This means that a subsequent ``set_payload`` call will not result "
"in an encoded payload, even if a charset is passed in the ``set_payload`` "
"command.  You can \"reset\" this behavior by deleting the ``Content-Transfer-"
"Encoding`` header, after which a ``set_payload`` call will automatically "
"encode the new payload (and add a new :mailheader:`Content-Transfer-"
"Encoding` header)."
msgstr ""
"À moins que l'argument *_charset* ne soit explicitement défini sur ``None``, "
"l'objet *MIMEText* créé possède à la fois un en-tête :mailheader:`Content-"
"Type` avec un paramètre ``charset`` et un en-tête :mailheader:`Content-"
"Transfer-Encoding`. Cela signifie qu'un appel ultérieur à ``set_payload`` "
"n'entraîne pas l'encodage de la charge utile, même si un jeu de caractères "
"est passé dans la commande ``set_payload``. Vous pouvez « réinitialiser » ce "
"comportement en supprimant l'en-tête ``Content-Transfer-Encoding``, après "
"quoi un appel ``set_payload`` encodera automatiquement la nouvelle charge "
"utile (et ajoutera un nouvel en-tête :mailheader:`Content-Transfer-"
"Encoding`)."

#: library/email.mime.rst:256
msgid "*_charset* also accepts :class:`~email.charset.Charset` instances."
msgstr ""
"*_charset* accepte également les instances :class:`~email.charset.Charset`."
