# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-04-14 13:19+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: library/traceback.rst:2
msgid ":mod:`traceback` --- Print or retrieve a stack traceback"
msgstr ""

#: library/traceback.rst:7
#, fuzzy
msgid "**Source code:** :source:`Lib/traceback.py`"
msgstr "**Code source :** :source:`Lib/abc.py`"

#: library/traceback.rst:11
msgid ""
"This module provides a standard interface to extract, format and print stack "
"traces of Python programs.  It exactly mimics the behavior of the Python "
"interpreter when it prints a stack trace.  This is useful when you want to "
"print stack traces under program control, such as in a \"wrapper\" around "
"the interpreter."
msgstr ""

#: library/traceback.rst:19
msgid ""
"The module uses traceback objects --- these are objects of type :class:"
"`types.TracebackType`, which are assigned to the ``__traceback__`` field of :"
"class:`BaseException` instances."
msgstr ""

#: library/traceback.rst:25
msgid "Module :mod:`faulthandler`"
msgstr ""

#: library/traceback.rst:25
msgid ""
"Used to dump Python tracebacks explicitly, on a fault, after a timeout, or "
"on a user signal."
msgstr ""

#: library/traceback.rst:27
msgid "Module :mod:`pdb`"
msgstr ""

#: library/traceback.rst:28
msgid "Interactive source code debugger for Python programs."
msgstr ""

#: library/traceback.rst:30
msgid "The module defines the following functions:"
msgstr "Le module définit les fonctions suivantes :"

#: library/traceback.rst:34
msgid ""
"Print up to *limit* stack trace entries from traceback object *tb* (starting "
"from the caller's frame) if *limit* is positive.  Otherwise, print the last "
"``abs(limit)`` entries.  If *limit* is omitted or ``None``, all entries are "
"printed.  If *file* is omitted or ``None``, the output goes to ``sys."
"stderr``; otherwise it should be an open file or file-like object to receive "
"the output."
msgstr ""

#: library/traceback.rst:104
msgid "Added negative *limit* support."
msgstr ""

#: library/traceback.rst:48
msgid ""
"Print exception information and stack trace entries from traceback object "
"*tb* to *file*. This differs from :func:`print_tb` in the following ways:"
msgstr ""

#: library/traceback.rst:52
msgid ""
"if *tb* is not ``None``, it prints a header ``Traceback (most recent call "
"last):``"
msgstr ""

#: library/traceback.rst:55
msgid "it prints the exception type and *value* after the stack trace"
msgstr ""

#: library/traceback.rst:59
msgid ""
"if *type(value)* is :exc:`SyntaxError` and *value* has the appropriate "
"format, it prints the line where the syntax error occurred with a caret "
"indicating the approximate position of the error."
msgstr ""

#: library/traceback.rst:63
msgid ""
"Since Python 3.10, instead of passing *value* and *tb*, an exception object "
"can be passed as the first argument. If *value* and *tb* are provided, the "
"first argument is ignored in order to provide backwards compatibility."
msgstr ""

#: library/traceback.rst:67
msgid ""
"The optional *limit* argument has the same meaning as for :func:`print_tb`. "
"If *chain* is true (the default), then chained exceptions (the :attr:"
"`__cause__` or :attr:`__context__` attributes of the exception) will be "
"printed as well, like the interpreter itself does when printing an unhandled "
"exception."
msgstr ""

#: library/traceback.rst:166
msgid "The *etype* argument is ignored and inferred from the type of *value*."
msgstr ""

#: library/traceback.rst:153
msgid ""
"The *etype* parameter has been renamed to *exc* and is now positional-only."
msgstr ""

#: library/traceback.rst:83
msgid ""
"This is a shorthand for ``print_exception(sys.exception(), limit, file, "
"chain)``."
msgstr ""

#: library/traceback.rst:89
msgid ""
"This is a shorthand for ``print_exception(sys.last_type, sys.last_value, sys."
"last_traceback, limit, file, chain)``.  In general it will work only after "
"an exception has reached an interactive prompt (see :data:`sys.last_type`)."
msgstr ""

#: library/traceback.rst:97
msgid ""
"Print up to *limit* stack trace entries (starting from the invocation point) "
"if *limit* is positive.  Otherwise, print the last ``abs(limit)`` entries.  "
"If *limit* is omitted or ``None``, all entries are printed. The optional *f* "
"argument can be used to specify an alternate stack frame to start.  The "
"optional *file* argument has the same meaning as for :func:`print_tb`."
msgstr ""

#: library/traceback.rst:110
msgid ""
"Return a :class:`StackSummary` object representing a list of \"pre-"
"processed\" stack trace entries extracted from the traceback object *tb*.  "
"It is useful for alternate formatting of stack traces.  The optional *limit* "
"argument has the same meaning as for :func:`print_tb`.  A \"pre-processed\" "
"stack trace entry is a :class:`FrameSummary` object containing attributes :"
"attr:`~FrameSummary.filename`, :attr:`~FrameSummary.lineno`, :attr:"
"`~FrameSummary.name`, and :attr:`~FrameSummary.line` representing the "
"information that is usually printed for a stack trace.  The :attr:"
"`~FrameSummary.line` is a string with leading and trailing whitespace "
"stripped; if the source is not available it is ``None``."
msgstr ""

#: library/traceback.rst:124
msgid ""
"Extract the raw traceback from the current stack frame.  The return value "
"has the same format as for :func:`extract_tb`.  The optional *f* and *limit* "
"arguments have the same meaning as for :func:`print_stack`."
msgstr ""

#: library/traceback.rst:131
msgid ""
"Given a list of tuples or :class:`FrameSummary` objects as returned by :func:"
"`extract_tb` or :func:`extract_stack`, return a list of strings ready for "
"printing.  Each string in the resulting list corresponds to the item with "
"the same index in the argument list.  Each string ends in a newline; the "
"strings may contain internal newlines as well, for those items whose source "
"text line is not ``None``."
msgstr ""

#: library/traceback.rst:141
msgid ""
"Format the exception part of a traceback using an exception value such as "
"given by ``sys.last_value``.  The return value is a list of strings, each "
"ending in a newline.  Normally, the list contains a single string; however, "
"for :exc:`SyntaxError` exceptions, it contains several lines that (when "
"printed) display detailed information about where the syntax error occurred. "
"The message indicating which exception occurred is the always last string in "
"the list."
msgstr ""

#: library/traceback.rst:149
msgid ""
"Since Python 3.10, instead of passing *value*, an exception object can be "
"passed as the first argument.  If *value* is provided, the first argument is "
"ignored in order to provide backwards compatibility."
msgstr ""

#: library/traceback.rst:160
msgid ""
"Format a stack trace and the exception information.  The arguments  have the "
"same meaning as the corresponding arguments to :func:`print_exception`.  The "
"return value is a list of strings, each ending in a newline and some "
"containing internal newlines.  When these lines are concatenated and "
"printed, exactly the same text is printed as does :func:`print_exception`."
msgstr ""

#: library/traceback.rst:169
msgid ""
"This function's behavior and signature were modified to match :func:"
"`print_exception`."
msgstr ""

#: library/traceback.rst:176
msgid ""
"This is like ``print_exc(limit)`` but returns a string instead of printing "
"to a file."
msgstr ""

#: library/traceback.rst:182
msgid "A shorthand for ``format_list(extract_tb(tb, limit))``."
msgstr ""

#: library/traceback.rst:187
msgid "A shorthand for ``format_list(extract_stack(f, limit))``."
msgstr ""

#: library/traceback.rst:191
msgid ""
"Clears the local variables of all the stack frames in a traceback *tb* by "
"calling the :meth:`clear` method of each frame object."
msgstr ""

#: library/traceback.rst:198
msgid ""
"Walk a stack following ``f.f_back`` from the given frame, yielding the frame "
"and line number for each frame. If *f* is ``None``, the current stack is "
"used. This helper is used with :meth:`StackSummary.extract`."
msgstr ""

#: library/traceback.rst:206
msgid ""
"Walk a traceback following ``tb_next`` yielding the frame and line number "
"for each frame. This helper is used with :meth:`StackSummary.extract`."
msgstr ""

#: library/traceback.rst:211
msgid "The module also defines the following classes:"
msgstr ""

#: library/traceback.rst:214
msgid ":class:`TracebackException` Objects"
msgstr ""

#: library/traceback.rst:218
msgid ""
":class:`TracebackException` objects are created from actual exceptions to "
"capture data for later printing in a lightweight fashion."
msgstr ""

#: library/traceback.rst:283
msgid ""
"Capture an exception for later rendering. *limit*, *lookup_lines* and "
"*capture_locals* are as for the :class:`StackSummary` class."
msgstr ""

#: library/traceback.rst:226
msgid ""
"If *compact* is true, only data that is required by :class:"
"`TracebackException`'s ``format`` method is saved in the class attributes. "
"In particular, the ``__context__`` field is calculated only if ``__cause__`` "
"is ``None`` and ``__suppress_context__`` is false."
msgstr ""

#: library/traceback.rst:286
msgid ""
"Note that when locals are captured, they are also shown in the traceback."
msgstr ""

#: library/traceback.rst:235
msgid "A :class:`TracebackException` of the original ``__cause__``."
msgstr ""

#: library/traceback.rst:239
msgid "A :class:`TracebackException` of the original ``__context__``."
msgstr ""

#: library/traceback.rst:243
msgid "The ``__suppress_context__`` value from the original exception."
msgstr ""

#: library/traceback.rst:247
msgid ""
"The ``__notes__`` value from the original exception, or ``None`` if the "
"exception does not have any notes. If it is not ``None`` is it formatted in "
"the traceback after the exception string."
msgstr ""

#: library/traceback.rst:255
msgid "A :class:`StackSummary` representing the traceback."
msgstr ""

#: library/traceback.rst:259
msgid "The class of the original traceback."
msgstr ""

#: library/traceback.rst:263
msgid "For syntax errors - the file name where the error occurred."
msgstr ""

#: library/traceback.rst:267
msgid "For syntax errors - the line number where the error occurred."
msgstr ""

#: library/traceback.rst:271
msgid "For syntax errors - the text where the error occurred."
msgstr ""

#: library/traceback.rst:275
msgid "For syntax errors - the offset into the text where the error occurred."
msgstr ""

#: library/traceback.rst:279
msgid "For syntax errors - the compiler error message."
msgstr ""

#: library/traceback.rst:290
msgid ""
"Print to *file* (default ``sys.stderr``) the exception information returned "
"by :meth:`format`."
msgstr ""

#: library/traceback.rst:297
msgid "Format the exception."
msgstr ""

#: library/traceback.rst:299
msgid ""
"If *chain* is not ``True``, ``__cause__`` and ``__context__`` will not be "
"formatted."
msgstr ""

#: library/traceback.rst:302
msgid ""
"The return value is a generator of strings, each ending in a newline and "
"some containing internal newlines. :func:`~traceback.print_exception` is a "
"wrapper around this method which just prints the lines to a file."
msgstr ""

#: library/traceback.rst:320
msgid ""
"The message indicating which exception occurred is always the last string in "
"the output."
msgstr ""

#: library/traceback.rst:311
msgid "Format the exception part of the traceback."
msgstr ""

#: library/traceback.rst:313
msgid "The return value is a generator of strings, each ending in a newline."
msgstr ""

#: library/traceback.rst:315
msgid ""
"Normally, the generator emits a single string; however, for :exc:"
"`SyntaxError` exceptions, it emits several lines that (when printed) display "
"detailed information about where the syntax error occurred."
msgstr ""

#: library/traceback.rst:323
msgid "Added the *compact* parameter."
msgstr ""

#: library/traceback.rst:328
msgid ":class:`StackSummary` Objects"
msgstr ""

#: library/traceback.rst:332
msgid ""
":class:`StackSummary` objects represent a call stack ready for formatting."
msgstr ""

#: library/traceback.rst:338
msgid ""
"Construct a :class:`StackSummary` object from a frame generator (such as is "
"returned by :func:`~traceback.walk_stack` or :func:`~traceback.walk_tb`)."
msgstr ""

#: library/traceback.rst:342
msgid ""
"If *limit* is supplied, only this many frames are taken from *frame_gen*. If "
"*lookup_lines* is ``False``, the returned :class:`FrameSummary` objects will "
"not have read their lines in yet, making the cost of creating the :class:"
"`StackSummary` cheaper (which may be valuable if it may not actually get "
"formatted). If *capture_locals* is ``True`` the local variables in each :"
"class:`FrameSummary` are captured as object representations."
msgstr ""

#: library/traceback.rst:352
msgid ""
"Construct a :class:`StackSummary` object from a supplied list of :class:"
"`FrameSummary` objects or old-style list of tuples.  Each tuple should be a "
"4-tuple with filename, lineno, name, line as the elements."
msgstr ""

#: library/traceback.rst:358
msgid ""
"Returns a list of strings ready for printing.  Each string in the resulting "
"list corresponds to a single frame from the stack. Each string ends in a "
"newline; the strings may contain internal newlines as well, for those items "
"with source text lines."
msgstr ""

#: library/traceback.rst:363
msgid ""
"For long sequences of the same frame and line, the first few repetitions are "
"shown, followed by a summary line stating the exact number of further "
"repetitions."
msgstr ""

#: library/traceback.rst:367
msgid "Long sequences of repeated frames are now abbreviated."
msgstr ""

#: library/traceback.rst:372
msgid ""
"Returns a string for printing one of the frames involved in the stack. This "
"method is called for each :class:`FrameSummary` object to be printed by :"
"meth:`StackSummary.format`. If it returns ``None``, the frame is omitted "
"from the output."
msgstr ""

#: library/traceback.rst:381
msgid ":class:`FrameSummary` Objects"
msgstr ""

#: library/traceback.rst:385
msgid ""
"A :class:`FrameSummary` object represents a single frame in a traceback."
msgstr ""

#: library/traceback.rst:389
msgid ""
"Represent a single frame in the traceback or stack that is being formatted "
"or printed. It may optionally have a stringified version of the frames "
"locals included in it. If *lookup_line* is ``False``, the source code is not "
"looked up until the :class:`FrameSummary` has the :attr:`~FrameSummary.line` "
"attribute accessed (which also happens when casting it to a tuple). :attr:"
"`~FrameSummary.line` may be directly provided, and will prevent line lookups "
"happening at all. *locals* is an optional local variable dictionary, and if "
"supplied the variable representations are stored in the summary for later "
"display."
msgstr ""

#: library/traceback.rst:402
msgid "Traceback Examples"
msgstr ""

#: library/traceback.rst:404
msgid ""
"This simple example implements a basic read-eval-print loop, similar to (but "
"less useful than) the standard Python interactive interpreter loop.  For a "
"more complete implementation of the interpreter loop, refer to the :mod:"
"`code` module. ::"
msgstr ""

#: library/traceback.rst:426
msgid ""
"The following example demonstrates the different ways to print and format "
"the exception and traceback:"
msgstr ""

#: library/traceback.rst:461
msgid "The output for the example would look similar to this:"
msgstr ""

#: library/traceback.rst:503
msgid ""
"The following example shows the different ways to print and format the "
"stack::"
msgstr ""

#: library/traceback.rst:529
msgid "This last example demonstrates the final few formatting functions:"
msgstr ""
