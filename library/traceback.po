# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-29 22:40+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: library/traceback.rst:2
msgid ":mod:`!traceback` --- Print or retrieve a stack traceback"
msgstr ""

#: library/traceback.rst:7
#, fuzzy
msgid "**Source code:** :source:`Lib/traceback.py`"
msgstr "**Code source :** :source:`Lib/abc.py`"

#: library/traceback.rst:11
msgid ""
"This module provides a standard interface to extract, format and print stack "
"traces of Python programs. It is more flexible than the interpreter's "
"default traceback display, and therefore makes it possible to configure "
"certain aspects of the output. Finally, it contains a utility for capturing "
"enough information about an exception to print it later, without the need to "
"save a reference to the actual exception. Since exceptions can be the roots "
"of large objects graph, this utility can significantly improve memory "
"management."
msgstr ""

#: library/traceback.rst:23
msgid ""
"The module uses :ref:`traceback objects <traceback-objects>` --- these are "
"objects of type :class:`types.TracebackType`, which are assigned to the :"
"attr:`~BaseException.__traceback__` field of :class:`BaseException` "
"instances."
msgstr ""

#: library/traceback.rst:30
msgid "Module :mod:`faulthandler`"
msgstr ""

#: library/traceback.rst:31
msgid ""
"Used to dump Python tracebacks explicitly, on a fault, after a timeout, or "
"on a user signal."
msgstr ""

#: library/traceback.rst:33
msgid "Module :mod:`pdb`"
msgstr ""

#: library/traceback.rst:34
msgid "Interactive source code debugger for Python programs."
msgstr ""

#: library/traceback.rst:36
msgid "The module's API can be divided into two parts:"
msgstr ""

#: library/traceback.rst:38
msgid ""
"Module-level functions offering basic functionality, which are useful for "
"interactive inspection of exceptions and tracebacks."
msgstr ""

#: library/traceback.rst:41
msgid ""
":class:`TracebackException` class and its helper classes :class:"
"`StackSummary` and :class:`FrameSummary`. These offer both more flexibility "
"in the output generated and the ability to store the information necessary "
"for later formatting without holding references to actual exception and "
"traceback objects."
msgstr ""

#: library/traceback.rst:49
msgid "Module-Level Functions"
msgstr ""

#: library/traceback.rst:53
msgid ""
"Print up to *limit* stack trace entries from :ref:`traceback object "
"<traceback-objects>` *tb* (starting from the caller's frame) if *limit* is "
"positive.  Otherwise, print the last ``abs(limit)`` entries.  If *limit* is "
"omitted or ``None``, all entries are printed.  If *file* is omitted or "
"``None``, the output goes to :data:`sys.stderr`; otherwise it should be an "
"open :term:`file <file object>` or :term:`file-like object` to receive the "
"output."
msgstr ""

#: library/traceback.rst:64
msgid ""
"The meaning of the *limit* parameter is different than the meaning of :const:"
"`sys.tracebacklimit`. A negative *limit* value corresponds to a positive "
"value of :const:`!sys.tracebacklimit`, whereas the behaviour of a positive "
"*limit* value cannot be achieved with :const:`!sys.tracebacklimit`."
msgstr ""

#: library/traceback.rst:135
msgid "Added negative *limit* support."
msgstr ""

#: library/traceback.rst:77
msgid ""
"Print exception information and stack trace entries from :ref:`traceback "
"object <traceback-objects>` *tb* to *file*. This differs from :func:"
"`print_tb` in the following ways:"
msgstr ""

#: library/traceback.rst:82
msgid ""
"if *tb* is not ``None``, it prints a header ``Traceback (most recent call "
"last):``"
msgstr ""

#: library/traceback.rst:85
msgid "it prints the exception type and *value* after the stack trace"
msgstr ""

#: library/traceback.rst:89
msgid ""
"if *type(value)* is :exc:`SyntaxError` and *value* has the appropriate "
"format, it prints the line where the syntax error occurred with a caret "
"indicating the approximate position of the error."
msgstr ""

#: library/traceback.rst:93
msgid ""
"Since Python 3.10, instead of passing *value* and *tb*, an exception object "
"can be passed as the first argument. If *value* and *tb* are provided, the "
"first argument is ignored in order to provide backwards compatibility."
msgstr ""

#: library/traceback.rst:97
msgid ""
"The optional *limit* argument has the same meaning as for :func:`print_tb`. "
"If *chain* is true (the default), then chained exceptions (the :attr:"
"`~BaseException.__cause__` or :attr:`~BaseException.__context__` attributes "
"of the exception) will be printed as well, like the interpreter itself does "
"when printing an unhandled exception."
msgstr ""

#: library/traceback.rst:208
msgid "The *etype* argument is ignored and inferred from the type of *value*."
msgstr ""

#: library/traceback.rst:188
msgid ""
"The *etype* parameter has been renamed to *exc* and is now positional-only."
msgstr ""

#: library/traceback.rst:114
msgid ""
"This is a shorthand for ``print_exception(sys.exception(), limit, file, "
"chain)``."
msgstr ""

#: library/traceback.rst:120
msgid ""
"This is a shorthand for ``print_exception(sys.last_exc, limit, file, "
"chain)``.  In general it will work only after an exception has reached an "
"interactive prompt (see :data:`sys.last_exc`)."
msgstr ""

#: library/traceback.rst:127
msgid ""
"Print up to *limit* stack trace entries (starting from the invocation point) "
"if *limit* is positive.  Otherwise, print the last ``abs(limit)`` entries.  "
"If *limit* is omitted or ``None``, all entries are printed. The optional *f* "
"argument can be used to specify an alternate :ref:`stack frame <frame-"
"objects>` to start.  The optional *file* argument has the same meaning as "
"for :func:`print_tb`."
msgstr ""

#: library/traceback.rst:141
msgid ""
"Return a :class:`StackSummary` object representing a list of \"pre-"
"processed\" stack trace entries extracted from the :ref:`traceback object "
"<traceback-objects>` *tb*.  It is useful for alternate formatting of stack "
"traces.  The optional *limit* argument has the same meaning as for :func:"
"`print_tb`.  A \"pre-processed\" stack trace entry is a :class:"
"`FrameSummary` object containing attributes :attr:`~FrameSummary.filename`, :"
"attr:`~FrameSummary.lineno`, :attr:`~FrameSummary.name`, and :attr:"
"`~FrameSummary.line` representing the information that is usually printed "
"for a stack trace."
msgstr ""

#: library/traceback.rst:154
msgid ""
"Extract the raw traceback from the current :ref:`stack frame <frame-"
"objects>`.  The return value has the same format as for :func:`extract_tb`.  "
"The optional *f* and *limit* arguments have the same meaning as for :func:"
"`print_stack`."
msgstr ""

#: library/traceback.rst:162
msgid ""
"Given a list of tuples or :class:`FrameSummary` objects as returned by :func:"
"`extract_tb` or :func:`extract_stack`, return a list of strings ready for "
"printing.  Each string in the resulting list corresponds to the item with "
"the same index in the argument list.  Each string ends in a newline; the "
"strings may contain internal newlines as well, for those items whose source "
"text line is not ``None``."
msgstr ""

#: library/traceback.rst:172
msgid ""
"Format the exception part of a traceback using an exception value such as "
"given by :data:`sys.last_value`.  The return value is a list of strings, "
"each ending in a newline.  The list contains the exception's message, which "
"is normally a single string; however, for :exc:`SyntaxError` exceptions, it "
"contains several lines that (when printed) display detailed information "
"about where the syntax error occurred. Following the message, the list "
"contains the exception's :attr:`notes <BaseException.__notes__>`."
msgstr ""

#: library/traceback.rst:180
msgid ""
"Since Python 3.10, instead of passing *value*, an exception object can be "
"passed as the first argument.  If *value* is provided, the first argument is "
"ignored in order to provide backwards compatibility."
msgstr ""

#: library/traceback.rst:415
msgid ""
"When *show_group* is ``True``, and the exception is an instance of :exc:"
"`BaseExceptionGroup`, the nested exceptions are included as well, "
"recursively, with indentation relative to their nesting depth."
msgstr ""

#: library/traceback.rst:192
msgid ""
"The returned list now includes any :attr:`notes <BaseException.__notes__>` "
"attached to the exception."
msgstr ""

#: library/traceback.rst:196
msgid "*show_group* parameter was added."
msgstr ""

#: library/traceback.rst:202
msgid ""
"Format a stack trace and the exception information.  The arguments  have the "
"same meaning as the corresponding arguments to :func:`print_exception`.  The "
"return value is a list of strings, each ending in a newline and some "
"containing internal newlines.  When these lines are concatenated and "
"printed, exactly the same text is printed as does :func:`print_exception`."
msgstr ""

#: library/traceback.rst:211
msgid ""
"This function's behavior and signature were modified to match :func:"
"`print_exception`."
msgstr ""

#: library/traceback.rst:218
msgid ""
"This is like ``print_exc(limit)`` but returns a string instead of printing "
"to a file."
msgstr ""

#: library/traceback.rst:224
msgid "A shorthand for ``format_list(extract_tb(tb, limit))``."
msgstr ""

#: library/traceback.rst:229
msgid "A shorthand for ``format_list(extract_stack(f, limit))``."
msgstr ""

#: library/traceback.rst:233
msgid ""
"Clears the local variables of all the stack frames in a :ref:`traceback "
"<traceback-objects>` *tb* by calling the :meth:`~frame.clear` method of "
"each :ref:`frame object <frame-objects>`."
msgstr ""

#: library/traceback.rst:242
msgid ""
"Walk a stack following :attr:`f.f_back <frame.f_back>` from the given frame, "
"yielding the frame and line number for each frame. If *f* is ``None``, the "
"current stack is used. This helper is used with :meth:`StackSummary.extract`."
msgstr ""

#: library/traceback.rst:251
msgid ""
"Walk a traceback following :attr:`~traceback.tb_next` yielding the frame and "
"line number for each frame. This helper is used with :meth:`StackSummary."
"extract`."
msgstr ""

#: library/traceback.rst:259
msgid ":class:`!TracebackException` Objects"
msgstr ""

#: library/traceback.rst:263
msgid ""
":class:`!TracebackException` objects are created from actual exceptions to "
"capture data for later printing.  They offer a more lightweight method of "
"storing this information by avoiding holding references to :ref:"
"`traceback<traceback-objects>` and :ref:`frame<frame-objects>` objects In "
"addition, they expose more options to configure the output compared to the "
"module-level functions described above."
msgstr ""

#: library/traceback.rst:272
msgid ""
"Capture an exception for later rendering. The meaning of *limit*, "
"*lookup_lines* and *capture_locals* are as for the :class:`StackSummary` "
"class."
msgstr ""

#: library/traceback.rst:276
msgid ""
"If *compact* is true, only data that is required by :class:`!"
"TracebackException`'s :meth:`format` method is saved in the class "
"attributes. In particular, the :attr:`__context__` field is calculated only "
"if :attr:`__cause__` is ``None`` and :attr:`__suppress_context__` is false."
msgstr ""

#: library/traceback.rst:383
msgid ""
"Note that when locals are captured, they are also shown in the traceback."
msgstr ""

#: library/traceback.rst:284
msgid ""
"*max_group_width* and *max_group_depth* control the formatting of exception "
"groups (see :exc:`BaseExceptionGroup`). The depth refers to the nesting "
"level of the group, and the width refers to the size of a single exception "
"group's exceptions array. The formatted output is truncated when either "
"limit is exceeded."
msgstr ""

#: library/traceback.rst:290
msgid "Added the *compact* parameter."
msgstr ""

#: library/traceback.rst:293
msgid "Added the *max_group_width* and *max_group_depth* parameters."
msgstr ""

#: library/traceback.rst:298
msgid ""
"A :class:`!TracebackException` of the original :attr:`~BaseException."
"__cause__`."
msgstr ""

#: library/traceback.rst:303
msgid ""
"A :class:`!TracebackException` of the original :attr:`~BaseException."
"__context__`."
msgstr ""

#: library/traceback.rst:308
msgid ""
"If ``self`` represents an :exc:`ExceptionGroup`, this field holds a list of :"
"class:`!TracebackException` instances representing the nested exceptions. "
"Otherwise it is ``None``."
msgstr ""

#: library/traceback.rst:316
msgid ""
"The :attr:`~BaseException.__suppress_context__` value from the original "
"exception."
msgstr ""

#: library/traceback.rst:321
msgid ""
"The :attr:`~BaseException.__notes__` value from the original exception, or "
"``None`` if the exception does not have any notes. If it is not ``None`` is "
"it formatted in the traceback after the exception string."
msgstr ""

#: library/traceback.rst:330
msgid "A :class:`StackSummary` representing the traceback."
msgstr ""

#: library/traceback.rst:334
msgid "The class of the original traceback."
msgstr ""

#: library/traceback.rst:340
msgid "String display of the class of the original exception."
msgstr ""

#: library/traceback.rst:346
msgid "For syntax errors - the file name where the error occurred."
msgstr ""

#: library/traceback.rst:350
msgid "For syntax errors - the line number where the error occurred."
msgstr ""

#: library/traceback.rst:354
msgid ""
"For syntax errors - the end line number where the error occurred. Can be "
"``None`` if not present."
msgstr ""

#: library/traceback.rst:361
msgid "For syntax errors - the text where the error occurred."
msgstr ""

#: library/traceback.rst:365
msgid "For syntax errors - the offset into the text where the error occurred."
msgstr ""

#: library/traceback.rst:369
msgid ""
"For syntax errors - the end offset into the text where the error occurred. "
"Can be ``None`` if not present."
msgstr ""

#: library/traceback.rst:376
msgid "For syntax errors - the compiler error message."
msgstr ""

#: library/traceback.rst:380
msgid ""
"Capture an exception for later rendering. *limit*, *lookup_lines* and "
"*capture_locals* are as for the :class:`StackSummary` class."
msgstr ""

#: library/traceback.rst:387
msgid ""
"Print to *file* (default ``sys.stderr``) the exception information returned "
"by :meth:`format`."
msgstr ""

#: library/traceback.rst:394
msgid "Format the exception."
msgstr ""

#: library/traceback.rst:396
msgid ""
"If *chain* is not ``True``, :attr:`__cause__` and :attr:`__context__` will "
"not be formatted."
msgstr ""

#: library/traceback.rst:399
msgid ""
"The return value is a generator of strings, each ending in a newline and "
"some containing internal newlines. :func:`~traceback.print_exception` is a "
"wrapper around this method which just prints the lines to a file."
msgstr ""

#: library/traceback.rst:405
msgid "Format the exception part of the traceback."
msgstr ""

#: library/traceback.rst:407
msgid "The return value is a generator of strings, each ending in a newline."
msgstr ""

#: library/traceback.rst:409
msgid ""
"When *show_group* is ``False``, the generator emits the exception's message "
"followed by its notes (if it has any). The exception message is normally a "
"single string; however, for :exc:`SyntaxError` exceptions, it consists of "
"several lines that (when printed) display detailed information about where "
"the syntax error occurred."
msgstr ""

#: library/traceback.rst:419
msgid ""
"The exception's :attr:`notes <BaseException.__notes__>` are now included in "
"the output."
msgstr ""

#: library/traceback.rst:423
msgid "Added the *show_group* parameter."
msgstr ""

#: library/traceback.rst:428
msgid ":class:`!StackSummary` Objects"
msgstr ""

#: library/traceback.rst:432
msgid ""
":class:`!StackSummary` objects represent a call stack ready for formatting."
msgstr ""

#: library/traceback.rst:438
msgid ""
"Construct a :class:`!StackSummary` object from a frame generator (such as is "
"returned by :func:`~traceback.walk_stack` or :func:`~traceback.walk_tb`)."
msgstr ""

#: library/traceback.rst:442
msgid ""
"If *limit* is supplied, only this many frames are taken from *frame_gen*. If "
"*lookup_lines* is ``False``, the returned :class:`FrameSummary` objects will "
"not have read their lines in yet, making the cost of creating the :class:`!"
"StackSummary` cheaper (which may be valuable if it may not actually get "
"formatted). If *capture_locals* is ``True`` the local variables in each :"
"class:`!FrameSummary` are captured as object representations."
msgstr ""

#: library/traceback.rst:450
msgid ""
"Exceptions raised from :func:`repr` on a local variable (when "
"*capture_locals* is ``True``) are no longer propagated to the caller."
msgstr ""

#: library/traceback.rst:456
msgid ""
"Construct a :class:`!StackSummary` object from a supplied list of :class:"
"`FrameSummary` objects or old-style list of tuples.  Each tuple should be a "
"4-tuple with *filename*, *lineno*, *name*, *line* as the elements."
msgstr ""

#: library/traceback.rst:463
msgid ""
"Returns a list of strings ready for printing.  Each string in the resulting "
"list corresponds to a single :ref:`frame <frame-objects>` from the stack. "
"Each string ends in a newline; the strings may contain internal newlines as "
"well, for those items with source text lines."
msgstr ""

#: library/traceback.rst:469
msgid ""
"For long sequences of the same frame and line, the first few repetitions are "
"shown, followed by a summary line stating the exact number of further "
"repetitions."
msgstr ""

#: library/traceback.rst:473
msgid "Long sequences of repeated frames are now abbreviated."
msgstr ""

#: library/traceback.rst:478
msgid ""
"Returns a string for printing one of the :ref:`frames <frame-objects>` "
"involved in the stack. This method is called for each :class:`FrameSummary` "
"object to be printed by :meth:`StackSummary.format`. If it returns ``None``, "
"the frame is omitted from the output."
msgstr ""

#: library/traceback.rst:488
msgid ":class:`!FrameSummary` Objects"
msgstr ""

#: library/traceback.rst:492
msgid ""
"A :class:`!FrameSummary` object represents a single :ref:`frame <frame-"
"objects>` in a :ref:`traceback <traceback-objects>`."
msgstr ""

#: library/traceback.rst:497
msgid ""
"Represents a single :ref:`frame <frame-objects>` in the :ref:`traceback "
"<traceback-objects>` or stack that is being formatted or printed. It may "
"optionally have a stringified version of the frame's locals included in it. "
"If *lookup_line* is ``False``, the source code is not looked up until the :"
"class:`!FrameSummary` has the :attr:`~FrameSummary.line` attribute accessed "
"(which also happens when casting it to a :class:`tuple`). :attr:"
"`~FrameSummary.line` may be directly provided, and will prevent line lookups "
"happening at all. *locals* is an optional local variable mapping, and if "
"supplied the variable representations are stored in the summary for later "
"display."
msgstr ""

#: library/traceback.rst:508
msgid ":class:`!FrameSummary` instances have the following attributes:"
msgstr ""

#: library/traceback.rst:512
msgid ""
"The filename of the source code for this frame. Equivalent to accessing :"
"attr:`f.f_code.co_filename <codeobject.co_filename>` on a :ref:`frame object "
"<frame-objects>` *f*."
msgstr ""

#: library/traceback.rst:518
msgid "The line number of the source code for this frame."
msgstr ""

#: library/traceback.rst:522
msgid ""
"Equivalent to accessing :attr:`f.f_code.co_name <codeobject.co_name>` on a :"
"ref:`frame object <frame-objects>` *f*."
msgstr ""

#: library/traceback.rst:527
msgid ""
"A string representing the source code for this frame, with leading and "
"trailing whitespace stripped. If the source is not available, it is ``None``."
msgstr ""

#: library/traceback.rst:534
msgid "Examples of Using the Module-Level Functions"
msgstr ""

#: library/traceback.rst:536
msgid ""
"This simple example implements a basic read-eval-print loop, similar to (but "
"less useful than) the standard Python interactive interpreter loop.  For a "
"more complete implementation of the interpreter loop, refer to the :mod:"
"`code` module. ::"
msgstr ""

#: library/traceback.rst:541
msgid ""
"import sys, traceback\n"
"\n"
"def run_user_code(envdir):\n"
"    source = input(\">>> \")\n"
"    try:\n"
"        exec(source, envdir)\n"
"    except Exception:\n"
"        print(\"Exception in user code:\")\n"
"        print(\"-\"*60)\n"
"        traceback.print_exc(file=sys.stdout)\n"
"        print(\"-\"*60)\n"
"\n"
"envdir = {}\n"
"while True:\n"
"    run_user_code(envdir)"
msgstr ""

#: library/traceback.rst:558
msgid ""
"The following example demonstrates the different ways to print and format "
"the exception and traceback:"
msgstr ""

#: library/traceback.rst:561
msgid ""
"import sys, traceback\n"
"\n"
"def lumberjack():\n"
"    bright_side_of_life()\n"
"\n"
"def bright_side_of_life():\n"
"    return tuple()[0]\n"
"\n"
"try:\n"
"    lumberjack()\n"
"except IndexError as exc:\n"
"    print(\"*** print_tb:\")\n"
"    traceback.print_tb(exc.__traceback__, limit=1, file=sys.stdout)\n"
"    print(\"*** print_exception:\")\n"
"    traceback.print_exception(exc, limit=2, file=sys.stdout)\n"
"    print(\"*** print_exc:\")\n"
"    traceback.print_exc(limit=2, file=sys.stdout)\n"
"    print(\"*** format_exc, first and last line:\")\n"
"    formatted_lines = traceback.format_exc().splitlines()\n"
"    print(formatted_lines[0])\n"
"    print(formatted_lines[-1])\n"
"    print(\"*** format_exception:\")\n"
"    print(repr(traceback.format_exception(exc)))\n"
"    print(\"*** extract_tb:\")\n"
"    print(repr(traceback.extract_tb(exc.__traceback__)))\n"
"    print(\"*** format_tb:\")\n"
"    print(repr(traceback.format_tb(exc.__traceback__)))\n"
"    print(\"*** tb_lineno:\", exc.__traceback__.tb_lineno)"
msgstr ""

#: library/traceback.rst:592
msgid "The output for the example would look similar to this:"
msgstr ""

#: library/traceback.rst:594
msgid ""
"*** print_tb:\n"
"  File \"<doctest...>\", line 10, in <module>\n"
"    lumberjack()\n"
"    ~~~~~~~~~~^^\n"
"*** print_exception:\n"
"Traceback (most recent call last):\n"
"  File \"<doctest...>\", line 10, in <module>\n"
"    lumberjack()\n"
"    ~~~~~~~~~~^^\n"
"  File \"<doctest...>\", line 4, in lumberjack\n"
"    bright_side_of_life()\n"
"    ~~~~~~~~~~~~~~~~~~~^^\n"
"IndexError: tuple index out of range\n"
"*** print_exc:\n"
"Traceback (most recent call last):\n"
"  File \"<doctest...>\", line 10, in <module>\n"
"    lumberjack()\n"
"    ~~~~~~~~~~^^\n"
"  File \"<doctest...>\", line 4, in lumberjack\n"
"    bright_side_of_life()\n"
"    ~~~~~~~~~~~~~~~~~~~^^\n"
"IndexError: tuple index out of range\n"
"*** format_exc, first and last line:\n"
"Traceback (most recent call last):\n"
"IndexError: tuple index out of range\n"
"*** format_exception:\n"
"['Traceback (most recent call last):\\n',\n"
" '  File \"<doctest default[0]>\", line 10, in <module>\\n    "
"lumberjack()\\n    ~~~~~~~~~~^^\\n',\n"
" '  File \"<doctest default[0]>\", line 4, in lumberjack\\n    "
"bright_side_of_life()\\n    ~~~~~~~~~~~~~~~~~~~^^\\n',\n"
" '  File \"<doctest default[0]>\", line 7, in bright_side_of_life\\n    "
"return tuple()[0]\\n           ~~~~~~~^^^\\n',\n"
" 'IndexError: tuple index out of range\\n']\n"
"*** extract_tb:\n"
"[<FrameSummary file <doctest...>, line 10 in <module>>,\n"
" <FrameSummary file <doctest...>, line 4 in lumberjack>,\n"
" <FrameSummary file <doctest...>, line 7 in bright_side_of_life>]\n"
"*** format_tb:\n"
"['  File \"<doctest default[0]>\", line 10, in <module>\\n    "
"lumberjack()\\n    ~~~~~~~~~~^^\\n',\n"
" '  File \"<doctest default[0]>\", line 4, in lumberjack\\n    "
"bright_side_of_life()\\n    ~~~~~~~~~~~~~~~~~~~^^\\n',\n"
" '  File \"<doctest default[0]>\", line 7, in bright_side_of_life\\n    "
"return tuple()[0]\\n           ~~~~~~~^^^\\n']\n"
"*** tb_lineno: 10"
msgstr ""

#: library/traceback.rst:639
msgid ""
"The following example shows the different ways to print and format the "
"stack::"
msgstr ""

#: library/traceback.rst:641
msgid ""
">>> import traceback\n"
">>> def another_function():\n"
"...     lumberstack()\n"
"...\n"
">>> def lumberstack():\n"
"...     traceback.print_stack()\n"
"...     print(repr(traceback.extract_stack()))\n"
"...     print(repr(traceback.format_stack()))\n"
"...\n"
">>> another_function()\n"
"  File \"<doctest>\", line 10, in <module>\n"
"    another_function()\n"
"  File \"<doctest>\", line 3, in another_function\n"
"    lumberstack()\n"
"  File \"<doctest>\", line 6, in lumberstack\n"
"    traceback.print_stack()\n"
"[('<doctest>', 10, '<module>', 'another_function()'),\n"
" ('<doctest>', 3, 'another_function', 'lumberstack()'),\n"
" ('<doctest>', 7, 'lumberstack', 'print(repr(traceback.extract_stack()))')]\n"
"['  File \"<doctest>\", line 10, in <module>\\n    another_function()\\n',\n"
" '  File \"<doctest>\", line 3, in another_function\\n    "
"lumberstack()\\n',\n"
" '  File \"<doctest>\", line 8, in lumberstack\\n    print(repr(traceback."
"format_stack()))\\n']"
msgstr ""

#: library/traceback.rst:665
msgid "This last example demonstrates the final few formatting functions:"
msgstr ""

#: library/traceback.rst:667
msgid ""
">>> import traceback\n"
">>> traceback.format_list([('spam.py', 3, '<module>', 'spam.eggs()'),\n"
"...                        ('eggs.py', 42, 'eggs', 'return \"bacon\"')])\n"
"['  File \"spam.py\", line 3, in <module>\\n    spam.eggs()\\n',\n"
" '  File \"eggs.py\", line 42, in eggs\\n    return \"bacon\"\\n']\n"
">>> an_error = IndexError('tuple index out of range')\n"
">>> traceback.format_exception_only(an_error)\n"
"['IndexError: tuple index out of range\\n']"
msgstr ""

#: library/traceback.rst:681
msgid "Examples of Using :class:`TracebackException`"
msgstr ""

#: library/traceback.rst:683
msgid "With the helper class, we have more options::"
msgstr ""

#: library/traceback.rst:685
msgid ""
">>> import sys\n"
">>> from traceback import TracebackException\n"
">>>\n"
">>> def lumberjack():\n"
"...     bright_side_of_life()\n"
"...\n"
">>> def bright_side_of_life():\n"
"...     t = \"bright\", \"side\", \"of\", \"life\"\n"
"...     return t[5]\n"
"...\n"
">>> try:\n"
"...     lumberjack()\n"
"... except IndexError as e:\n"
"...     exc = e\n"
"...\n"
">>> try:\n"
"...     try:\n"
"...         lumberjack()\n"
"...     except:\n"
"...         1/0\n"
"... except Exception as e:\n"
"...     chained_exc = e\n"
"...\n"
">>> # limit works as with the module-level functions\n"
">>> TracebackException.from_exception(exc, limit=-2).print()\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-1>\", line 6, in lumberjack\n"
"    bright_side_of_life()\n"
"    ~~~~~~~~~~~~~~~~~~~^^\n"
"  File \"<python-input-1>\", line 10, in bright_side_of_life\n"
"    return t[5]\n"
"           ~^^^\n"
"IndexError: tuple index out of range\n"
"\n"
">>> # capture_locals adds local variables in frames\n"
">>> TracebackException.from_exception(exc, limit=-2, capture_locals=True)."
"print()\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-1>\", line 6, in lumberjack\n"
"    bright_side_of_life()\n"
"    ~~~~~~~~~~~~~~~~~~~^^\n"
"  File \"<python-input-1>\", line 10, in bright_side_of_life\n"
"    return t[5]\n"
"           ~^^^\n"
"    t = (\"bright\", \"side\", \"of\", \"life\")\n"
"IndexError: tuple index out of range\n"
"\n"
">>> # The *chain* kwarg to print() controls whether chained\n"
">>> # exceptions are displayed\n"
">>> TracebackException.from_exception(chained_exc).print()\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-19>\", line 4, in <module>\n"
"    lumberjack()\n"
"    ~~~~~~~~~~^^\n"
"  File \"<python-input-8>\", line 7, in lumberjack\n"
"    bright_side_of_life()\n"
"    ~~~~~~~~~~~~~~~~~~~^^\n"
"  File \"<python-input-8>\", line 11, in bright_side_of_life\n"
"    return t[5]\n"
"           ~^^^\n"
"IndexError: tuple index out of range\n"
"\n"
"During handling of the above exception, another exception occurred:\n"
"\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-19>\", line 6, in <module>\n"
"    1/0\n"
"    ~^~\n"
"ZeroDivisionError: division by zero\n"
"\n"
">>> TracebackException.from_exception(chained_exc).print(chain=False)\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-19>\", line 6, in <module>\n"
"    1/0\n"
"    ~^~\n"
"ZeroDivisionError: division by zero"
msgstr ""

#: library/traceback.rst:21
msgid "object"
msgstr ""

#: library/traceback.rst:21
msgid "traceback"
msgstr ""

#: library/traceback.rst:87
msgid "^ (caret)"
msgstr ""

#: library/traceback.rst:87
msgid "marker"
msgstr ""

#~ msgid "The module defines the following functions:"
#~ msgstr "Le module définit les fonctions suivantes :"
