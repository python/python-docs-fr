# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-28 15:29+0200\n"
"PO-Revision-Date: 2018-07-27 23:16+0200\n"
"Last-Translator: Julien Palard <julien@palard.fr>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/asyncio-eventloops.rst:4
msgid "Event loops"
msgstr "Boucles d'évènements"

#: ../Doc/library/asyncio-eventloops.rst:6
msgid "**Source code:** :source:`Lib/asyncio/events.py`"
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:9
msgid "Event loop functions"
msgstr "Fonctions des boucles d'évènements"

#: ../Doc/library/asyncio-eventloops.rst:11
msgid ""
"The following functions are convenient shortcuts to accessing the methods of "
"the global policy. Note that this provides access to the default policy, "
"unless an alternative policy was set by calling :func:"
"`set_event_loop_policy` earlier in the execution of the process."
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:18
msgid "Equivalent to calling ``get_event_loop_policy().get_event_loop()``."
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:22
msgid "Equivalent to calling ``get_event_loop_policy().set_event_loop(loop)``."
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:26
msgid "Equivalent to calling ``get_event_loop_policy().new_event_loop()``."
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:30
msgid ""
"Return the running event loop in the current OS thread.  If there is no "
"running event loop a :exc:`RuntimeError` is raised."
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:39
msgid "Available event loops"
msgstr "Boucles d'évènements disponibles"

#: ../Doc/library/asyncio-eventloops.rst:41
msgid ""
"asyncio currently provides two implementations of event loops: :class:"
"`SelectorEventLoop` and :class:`ProactorEventLoop`."
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:46
msgid ""
"Event loop based on the :mod:`selectors` module. Subclass of :class:"
"`AbstractEventLoop`."
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:49
msgid "Use the most efficient selector available on the platform."
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:51
msgid ""
"On Windows, only sockets are supported (ex: pipes are not supported): see "
"the `MSDN documentation of select <https://msdn.microsoft.com/en-us/library/"
"windows/desktop/ms740141%28v=vs.85%29.aspx>`_."
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:57
msgid ""
"Proactor event loop for Windows using \"I/O Completion Ports\" aka IOCP. "
"Subclass of :class:`AbstractEventLoop`."
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:60
msgid "Availability: Windows."
msgstr "Disponibilité : Windows."

#: ../Doc/library/asyncio-eventloops.rst:64
msgid ""
"`MSDN documentation on I/O Completion Ports <https://msdn.microsoft.com/en-"
"us/library/windows/desktop/aa365198%28v=vs.85%29.aspx>`_."
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:67
msgid "Example to use a :class:`ProactorEventLoop` on Windows::"
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:78
msgid "Platform support"
msgstr "Support des plateformes"

#: ../Doc/library/asyncio-eventloops.rst:80
msgid ""
"The :mod:`asyncio` module has been designed to be portable, but each "
"platform still has subtle differences and may not support all :mod:`asyncio` "
"features."
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:84
msgid "Windows"
msgstr "Windows"

#: ../Doc/library/asyncio-eventloops.rst:86
msgid "Common limits of Windows event loops:"
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:88
msgid ""
":meth:`~AbstractEventLoop.create_unix_connection` and :meth:"
"`~AbstractEventLoop.create_unix_server` are not supported: the socket "
"family :data:`socket.AF_UNIX` is specific to UNIX"
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:91
msgid ""
":meth:`~AbstractEventLoop.add_signal_handler` and :meth:`~AbstractEventLoop."
"remove_signal_handler` are not supported"
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:93
msgid ""
":meth:`EventLoopPolicy.set_child_watcher` is not supported. :class:"
"`ProactorEventLoop` supports subprocesses. It has only one implementation to "
"watch child processes, there is no need to configure it."
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:97
msgid ":class:`SelectorEventLoop` specific limits:"
msgstr "Limites spécifiques à :class:`SelectorEventLoop` :"

#: ../Doc/library/asyncio-eventloops.rst:99
msgid ""
":class:`~selectors.SelectSelector` is used which only supports sockets and "
"is limited to 512 sockets."
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:101
msgid ""
":meth:`~AbstractEventLoop.add_reader` and :meth:`~AbstractEventLoop."
"add_writer` only accept file descriptors of sockets"
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:103
msgid ""
"Pipes are not supported (ex: :meth:`~AbstractEventLoop.connect_read_pipe`, :"
"meth:`~AbstractEventLoop.connect_write_pipe`)"
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:106
msgid ""
":ref:`Subprocesses <asyncio-subprocess>` are not supported (ex: :meth:"
"`~AbstractEventLoop.subprocess_exec`, :meth:`~AbstractEventLoop."
"subprocess_shell`)"
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:110
msgid ":class:`ProactorEventLoop` specific limits:"
msgstr "Limites spécifiques à :class:`ProactorEventLoop` :"

#: ../Doc/library/asyncio-eventloops.rst:112
msgid ""
":meth:`~AbstractEventLoop.create_datagram_endpoint` (UDP) is not supported"
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:113
msgid ""
":meth:`~AbstractEventLoop.add_reader` and :meth:`~AbstractEventLoop."
"add_writer` are not supported"
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:116
msgid ""
"The resolution of the monotonic clock on Windows is usually around 15.6 "
"msec. The best resolution is 0.5 msec. The resolution depends on the "
"hardware (availability of `HPET <https://en.wikipedia.org/wiki/"
"High_Precision_Event_Timer>`_) and on the Windows configuration. See :ref:"
"`asyncio delayed calls <asyncio-delayed-calls>`."
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:124
msgid ":class:`ProactorEventLoop` now supports SSL."
msgstr "La classe :class:`ProactorEventLoop` gère maintenant le SSL."

#: ../Doc/library/asyncio-eventloops.rst:128
msgid "Mac OS X"
msgstr "Mac OS X"

#: ../Doc/library/asyncio-eventloops.rst:130
msgid ""
"Character devices like PTY are only well supported since Mavericks (Mac OS "
"10.9). They are not supported at all on Mac OS 10.5 and older."
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:133
msgid ""
"On Mac OS 10.6, 10.7 and 10.8, the default event loop is :class:"
"`SelectorEventLoop` which uses :class:`selectors.KqueueSelector`. :class:"
"`selectors.KqueueSelector` does not support character devices on these "
"versions.  The :class:`SelectorEventLoop` can be used with :class:"
"`~selectors.SelectSelector` or :class:`~selectors.PollSelector` to support "
"character devices on these versions of Mac OS X. Example::"
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:149
msgid "Event loop policies and the default policy"
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:151
msgid ""
"Event loop management is abstracted with a *policy* pattern, to provide "
"maximal flexibility for custom platforms and frameworks. Throughout the "
"execution of a process, a single global policy object manages the event "
"loops available to the process based on the calling context. A policy is an "
"object implementing the :class:`AbstractEventLoopPolicy` interface."
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:157
msgid ""
"For most users of :mod:`asyncio`, policies never have to be dealt with "
"explicitly, since the default global policy is sufficient (see below)."
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:160
msgid ""
"The module-level functions :func:`get_event_loop` and :func:`set_event_loop` "
"provide convenient access to event loops managed by the default policy."
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:166
msgid "Event loop policy interface"
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:168
msgid "An event loop policy must implement the following interface:"
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:172
msgid "Event loop policy."
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:176
msgid "Get the event loop for the current context."
msgstr "Récupère la boucle d'évènements pour le contexte actuel."

#: ../Doc/library/asyncio-eventloops.rst:178
msgid ""
"Returns an event loop object implementing the :class:`AbstractEventLoop` "
"interface. In case called from coroutine, it returns the currently running "
"event loop."
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:182
msgid ""
"Raises an exception in case no event loop has been set for the current "
"context and the current policy does not specify to create one. It must never "
"return ``None``."
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:190
msgid "Set the event loop for the current context to *loop*."
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:194
msgid ""
"Create and return a new event loop object according to this policy's rules."
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:197
msgid ""
"If there's need to set this loop as the event loop for the current context, :"
"meth:`set_event_loop` must be called explicitly."
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:201
msgid ""
"The default policy defines context as the current thread, and manages an "
"event loop per thread that interacts with :mod:`asyncio`. An exception to "
"this rule happens when :meth:`~AbstractEventLoopPolicy.get_event_loop` is "
"called from a running future/coroutine, in which case it will return the "
"current loop running that future/coroutine."
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:207
msgid ""
"If the current thread doesn't already have an event loop associated with it, "
"the default policy's :meth:`~AbstractEventLoopPolicy.get_event_loop` method "
"creates one when called from the main thread, but raises :exc:`RuntimeError` "
"otherwise."
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:214
msgid "Access to the global loop policy"
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:218
msgid "Get the current event loop policy."
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:222
msgid ""
"Set the current event loop policy. If *policy* is ``None``, the default "
"policy is restored."
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:227
msgid "Customizing the event loop policy"
msgstr ""

#: ../Doc/library/asyncio-eventloops.rst:229
msgid ""
"To implement a new event loop policy, it is recommended you subclass the "
"concrete default event loop policy :class:`DefaultEventLoopPolicy` and "
"override the methods for which you want to change behavior, for example::"
msgstr ""
