# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-12 18:59+0200\n"
"PO-Revision-Date: 2018-10-13 09:30+0200\n"
"Last-Translator: Julien Palard <julien@palard.fr>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.0.6\n"

#: ../Doc/library/atexit.rst:2
msgid ":mod:`atexit` --- Exit handlers"
msgstr ":mod:`atexit` — Gestionnaire de fin de programme"

#: ../Doc/library/atexit.rst:12
msgid ""
"The :mod:`atexit` module defines functions to register and unregister "
"cleanup functions.  Functions thus registered are automatically executed "
"upon normal interpreter termination.  :mod:`atexit` runs these functions in "
"the *reverse* order in which they were registered; if you register ``A``, "
"``B``, and ``C``, at interpreter termination time they will be run in the "
"order ``C``, ``B``, ``A``."
msgstr ""
"Le module :mod:`atexit` définit des fonctions pour inscrire et désinscrire "
"des fonctions de nettoyage. Les fonctions ainsi inscrites sont "
"automatiquement exécutées au moment de l'arrêt normal de l'interpréteur. :"
"mod:`atexit` exécute ces fonctions dans l'ordre inverse dans lequel elles "
"ont été inscrites ; si vous inscrivez ``A``, ``B``, et ``C``, au moment de "
"l'arrêt de l'interpréteur elles seront exécutées dans l'ordre ``C``, ``B``, "
"``A``."

#: ../Doc/library/atexit.rst:19
msgid ""
"**Note:** The functions registered via this module are not called when the "
"program is killed by a signal not handled by Python, when a Python fatal "
"internal error is detected, or when :func:`os._exit` is called."
msgstr ""
"**Note:** Les fonctions inscrites via ce module ne sont pas appelées quand "
"le programme est tué par un signal non géré par Python, quand une erreur "
"fatale interne de Python est détectée, ou quand  :func:`os._exit` est appelé."

#: ../Doc/library/atexit.rst:23
msgid ""
"When used with C-API subinterpreters, registered functions are local to the "
"interpreter they were registered in."
msgstr ""
"Quand elles sont utilisées avec des sous-interpréteurs de l'API C, les "
"fonctions inscrites sont locales à l'interpréteur dans lequel elles ont été "
"inscrites."

#: ../Doc/library/atexit.rst:29
msgid ""
"Register *func* as a function to be executed at termination.  Any optional "
"arguments that are to be passed to *func* must be passed as arguments to :"
"func:`register`.  It is possible to register the same function and arguments "
"more than once."
msgstr ""
"Inscrit *func* comme une fonction à exécuter au moment de l'arrêt de "
"l'interpréteur. Tout argument optionnel qui doit être passé à *func* doit "
"être passé comme argument à :func:`register`. Il est possible d'inscrire les "
"mêmes fonctions et arguments plus d'une fois."

#: ../Doc/library/atexit.rst:34
msgid ""
"At normal program termination (for instance, if :func:`sys.exit` is called "
"or the main module's execution completes), all functions registered are "
"called in last in, first out order.  The assumption is that lower level "
"modules will normally be imported before higher level modules and thus must "
"be cleaned up later."
msgstr ""
"Lors d'un arrêt normal du programme (par exemple, si :func:`sys.exit` est "
"appelée ou l’exécution du module principal se termine), toutes les fonctions "
"inscrites sont appelées, dans l'ordre de la dernière arrivée, première "
"servie. La supposition est que les modules les plus bas niveau vont "
"normalement être importés avant les modules haut niveau et ainsi être "
"nettoyés en dernier."

#: ../Doc/library/atexit.rst:40
msgid ""
"If an exception is raised during execution of the exit handlers, a traceback "
"is printed (unless :exc:`SystemExit` is raised) and the exception "
"information is saved.  After all exit handlers have had a chance to run the "
"last exception to be raised is re-raised."
msgstr ""
"Si une exception est levée durant l'exécution du gestionnaire de fin de "
"programme, une trace d'appels est affichée (à moins que :exc:`SystemExit` "
"ait été levée) et les informations de l'exception sont sauvegardées. Une "
"fois que tous les gestionnaires de fin de programme ont eu une chance de "
"s'exécuter, la dernière exception à avoir été levée l'est de nouveau."

#: ../Doc/library/atexit.rst:45
msgid ""
"This function returns *func*, which makes it possible to use it as a "
"decorator."
msgstr ""
"Cette fonction renvoie *func*, ce qui rend possible de l'utiliser en tant "
"que décorateur."

#: ../Doc/library/atexit.rst:51
msgid ""
"Remove *func* from the list of functions to be run at interpreter shutdown.  "
"After calling :func:`unregister`, *func* is guaranteed not to be called when "
"the interpreter shuts down, even if it was registered more than once.  :func:"
"`unregister` silently does nothing if *func* was not previously registered."
msgstr ""
"Retire *func* de la liste des fonctions à exécuter à l'arrêt de "
"l’interpréteur. Après avoir appelé :func:`unregister`, *func* est garantie "
"de ne pas être appelée à l'arrêt de l’interpréteur, même si elle a été "
"inscrite plus d'une fois. :func:`unregister` ne fait rien et reste muette "
"dans le cas où *func* n'a pas été inscrite précédemment."

#: ../Doc/library/atexit.rst:61
msgid "Module :mod:`readline`"
msgstr "Module :mod:`readline`"

#: ../Doc/library/atexit.rst:61
msgid ""
"Useful example of :mod:`atexit` to read and write :mod:`readline` history "
"files."
msgstr ""
"Un exemple utile de l'usage de :mod:`atexit` pour lire et écrire des "
"fichiers d'historique :mod:`readline`."

#: ../Doc/library/atexit.rst:68
msgid ":mod:`atexit` Example"
msgstr "Exemple avec :mod:`atexit`"

#: ../Doc/library/atexit.rst:70
msgid ""
"The following simple example demonstrates how a module can initialize a "
"counter from a file when it is imported and save the counter's updated value "
"automatically when the program terminates without relying on the application "
"making an explicit call into this module at termination. ::"
msgstr ""
"Le simple exemple suivant démontre comment un module peut initialiser un "
"compteur depuis un fichier quand il est importé, et sauver le valeur mise à "
"jour du compteur automatiquement quand le programme se termine, sans avoir "
"besoin que l'application fasse un appel explicite dans ce module au moment "
"de l'arrêt de l'interpréteur. ::"

#: ../Doc/library/atexit.rst:92
msgid ""
"Positional and keyword arguments may also be passed to :func:`register` to "
"be passed along to the registered function when it is called::"
msgstr ""
"Les arguments positionnels et par mot-clé peuvent aussi être passés à :func:"
"`register` afin d'être repassés à la fonction inscrite lors de son appel ::"

#: ../Doc/library/atexit.rst:104
msgid "Usage as a :term:`decorator`::"
msgstr "Utilisation en tant que :term:`décorateur <decorator>` ::"

#: ../Doc/library/atexit.rst:112
msgid "This only works with functions that can be called without arguments."
msgstr ""
"Ceci fonctionne uniquement avec des fonctions qui peuvent être appelées sans "
"argument."
