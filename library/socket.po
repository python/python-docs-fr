# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-29 16:06+0100\n"
"PO-Revision-Date: 2018-11-29 18:24+0100\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/socket.rst:2
msgid ":mod:`socket` --- Low-level networking interface"
msgstr ""

#: ../Doc/library/socket.rst:7
msgid "**Source code:** :source:`Lib/socket.py`"
msgstr ""

#: ../Doc/library/socket.rst:11
msgid ""
"This module provides access to the BSD *socket* interface. It is available "
"on all modern Unix systems, Windows, MacOS, and probably additional "
"platforms."
msgstr ""

#: ../Doc/library/socket.rst:16
msgid ""
"Some behavior may be platform dependent, since calls are made to the "
"operating system socket APIs."
msgstr ""

#: ../Doc/library/socket.rst:21
msgid ""
"The Python interface is a straightforward transliteration of the Unix system "
"call and library interface for sockets to Python's object-oriented style: "
"the :func:`.socket` function returns a :dfn:`socket object` whose methods "
"implement the various socket system calls.  Parameter types are somewhat "
"higher-level than in the C interface: as with :meth:`read` and :meth:`write` "
"operations on Python files, buffer allocation on receive operations is "
"automatic, and buffer length is implicit on send operations."
msgstr ""

#: ../Doc/library/socket.rst:33
msgid "Module :mod:`socketserver`"
msgstr ""

#: ../Doc/library/socket.rst:33
msgid "Classes that simplify writing network servers."
msgstr ""

#: ../Doc/library/socket.rst:35
msgid "Module :mod:`ssl`"
msgstr ""

#: ../Doc/library/socket.rst:36
msgid "A TLS/SSL wrapper for socket objects."
msgstr ""

#: ../Doc/library/socket.rst:40
msgid "Socket families"
msgstr ""

#: ../Doc/library/socket.rst:42
msgid ""
"Depending on the system and the build options, various socket families are "
"supported by this module."
msgstr ""

#: ../Doc/library/socket.rst:45
msgid ""
"The address format required by a particular socket object is automatically "
"selected based on the address family specified when the socket object was "
"created.  Socket addresses are represented as follows:"
msgstr ""

#: ../Doc/library/socket.rst:49
msgid ""
"The address of an :const:`AF_UNIX` socket bound to a file system node is "
"represented as a string, using the file system encoding and the "
"``'surrogateescape'`` error handler (see :pep:`383`).  An address in Linux's "
"abstract namespace is returned as a :term:`bytes-like object` with an "
"initial null byte; note that sockets in this namespace can communicate with "
"normal file system sockets, so programs intended to run on Linux may need to "
"deal with both types of address.  A string or bytes-like object can be used "
"for either type of address when passing it as an argument."
msgstr ""

#: ../Doc/library/socket.rst:59
msgid ""
"Previously, :const:`AF_UNIX` socket paths were assumed to use UTF-8 encoding."
msgstr ""

#: ../Doc/library/socket.rst:63 ../Doc/library/socket.rst:837
#: ../Doc/library/socket.rst:879 ../Doc/library/socket.rst:1543
msgid "Writable :term:`bytes-like object` is now accepted."
msgstr "N'importe quel :term:`bytes-like object` est maintenant accept√©."

#: ../Doc/library/socket.rst:68
msgid ""
"A pair ``(host, port)`` is used for the :const:`AF_INET` address family, "
"where *host* is a string representing either a hostname in Internet domain "
"notation like ``'daring.cwi.nl'`` or an IPv4 address like "
"``'100.50.200.5'``, and *port* is an integer."
msgstr ""

#: ../Doc/library/socket.rst:73
msgid ""
"For IPv4 addresses, two special forms are accepted instead of a host "
"address: ``''`` represents :const:`INADDR_ANY`, which is used to bind to all "
"interfaces, and the string ``'<broadcast>'`` represents :const:"
"`INADDR_BROADCAST`.  This behavior is not compatible with IPv6, therefore, "
"you may want to avoid these if you intend to support IPv6 with your Python "
"programs."
msgstr ""

#: ../Doc/library/socket.rst:80
msgid ""
"For :const:`AF_INET6` address family, a four-tuple ``(host, port, flowinfo, "
"scopeid)`` is used, where *flowinfo* and *scopeid* represent the "
"``sin6_flowinfo`` and ``sin6_scope_id`` members in :const:`struct "
"sockaddr_in6` in C.  For :mod:`socket` module methods, *flowinfo* and "
"*scopeid* can be omitted just for backward compatibility.  Note, however, "
"omission of *scopeid* can cause problems in manipulating scoped IPv6 "
"addresses."
msgstr ""

#: ../Doc/library/socket.rst:87
msgid ""
"For multicast addresses (with *scopeid* meaningful) *address* may not "
"contain ``%scope`` (or ``zone id``) part. This information is superfluous "
"and may be safely omitted (recommended)."
msgstr ""

#: ../Doc/library/socket.rst:92
msgid ":const:`AF_NETLINK` sockets are represented as pairs ``(pid, groups)``."
msgstr ""

#: ../Doc/library/socket.rst:94
msgid ""
"Linux-only support for TIPC is available using the :const:`AF_TIPC` address "
"family.  TIPC is an open, non-IP based networked protocol designed for use "
"in clustered computer environments.  Addresses are represented by a tuple, "
"and the fields depend on the address type. The general tuple form is "
"``(addr_type, v1, v2, v3 [, scope])``, where:"
msgstr ""

#: ../Doc/library/socket.rst:100
msgid ""
"*addr_type* is one of :const:`TIPC_ADDR_NAMESEQ`, :const:`TIPC_ADDR_NAME`, "
"or :const:`TIPC_ADDR_ID`."
msgstr ""

#: ../Doc/library/socket.rst:102
msgid ""
"*scope* is one of :const:`TIPC_ZONE_SCOPE`, :const:`TIPC_CLUSTER_SCOPE`, "
"and :const:`TIPC_NODE_SCOPE`."
msgstr ""

#: ../Doc/library/socket.rst:104
msgid ""
"If *addr_type* is :const:`TIPC_ADDR_NAME`, then *v1* is the server type, "
"*v2* is the port identifier, and *v3* should be 0."
msgstr ""

#: ../Doc/library/socket.rst:107
msgid ""
"If *addr_type* is :const:`TIPC_ADDR_NAMESEQ`, then *v1* is the server type, "
"*v2* is the lower port number, and *v3* is the upper port number."
msgstr ""

#: ../Doc/library/socket.rst:110
msgid ""
"If *addr_type* is :const:`TIPC_ADDR_ID`, then *v1* is the node, *v2* is the "
"reference, and *v3* should be set to 0."
msgstr ""

#: ../Doc/library/socket.rst:113
msgid ""
"A tuple ``(interface, )`` is used for the :const:`AF_CAN` address family, "
"where *interface* is a string representing a network interface name like "
"``'can0'``. The network interface name ``''`` can be used to receive packets "
"from all network interfaces of this family."
msgstr ""

#: ../Doc/library/socket.rst:118
msgid ""
":const:`CAN_ISOTP` protocol require a tuple ``(interface, rx_addr, "
"tx_addr)`` where both additional parameters are unsigned long integer that "
"represent a CAN identifier (standard or extended)."
msgstr ""

#: ../Doc/library/socket.rst:122
msgid ""
"A string or a tuple ``(id, unit)`` is used for the :const:`SYSPROTO_CONTROL` "
"protocol of the :const:`PF_SYSTEM` family. The string is the name of a "
"kernel control using a dynamically-assigned ID. The tuple can be used if ID "
"and unit number of the kernel control are known or if a registered ID is "
"used."
msgstr ""

#: ../Doc/library/socket.rst:130
msgid ""
":const:`AF_BLUETOOTH` supports the following protocols and address formats:"
msgstr ""

#: ../Doc/library/socket.rst:133
msgid ""
":const:`BTPROTO_L2CAP` accepts ``(bdaddr, psm)`` where ``bdaddr`` is the "
"Bluetooth address as a string and ``psm`` is an integer."
msgstr ""

#: ../Doc/library/socket.rst:136
msgid ""
":const:`BTPROTO_RFCOMM` accepts ``(bdaddr, channel)`` where ``bdaddr`` is "
"the Bluetooth address as a string and ``channel`` is an integer."
msgstr ""

#: ../Doc/library/socket.rst:139
msgid ""
":const:`BTPROTO_HCI` accepts ``(device_id,)`` where ``device_id`` is either "
"an integer or a string with the Bluetooth address of the interface. (This "
"depends on your OS; NetBSD and DragonFlyBSD expect a Bluetooth address while "
"everything else expects an integer.)"
msgstr ""

#: ../Doc/library/socket.rst:144
msgid "NetBSD and DragonFlyBSD support added."
msgstr ""

#: ../Doc/library/socket.rst:147
msgid ""
":const:`BTPROTO_SCO` accepts ``bdaddr`` where ``bdaddr`` is a :class:`bytes` "
"object containing the Bluetooth address in a string format. (ex. "
"``b'12:23:34:45:56:67'``) This protocol is not supported under FreeBSD."
msgstr ""

#: ../Doc/library/socket.rst:152
msgid ""
":const:`AF_ALG` is a Linux-only socket based interface to Kernel "
"cryptography. An algorithm socket is configured with a tuple of two to four "
"elements ``(type, name [, feat [, mask]])``, where:"
msgstr ""

#: ../Doc/library/socket.rst:156
msgid ""
"*type* is the algorithm type as string, e.g. ``aead``, ``hash``, "
"``skcipher`` or ``rng``."
msgstr ""

#: ../Doc/library/socket.rst:159
msgid ""
"*name* is the algorithm name and operation mode as string, e.g. ``sha256``, "
"``hmac(sha256)``, ``cbc(aes)`` or ``drbg_nopr_ctr_aes256``."
msgstr ""

#: ../Doc/library/socket.rst:162
msgid "*feat* and *mask* are unsigned 32bit integers."
msgstr ""

#: ../Doc/library/socket.rst:168
msgid ""
":const:`AF_VSOCK` allows communication between virtual machines and their "
"hosts. The sockets are represented as a ``(CID, port)`` tuple where the "
"context ID or CID and port are integers."
msgstr ""

#: ../Doc/library/socket.rst:176
msgid ""
":const:`AF_PACKET` is a low-level interface directly to network devices. The "
"packets are represented by the tuple ``(ifname, proto[, pkttype[, hatype[, "
"addr]]])`` where:"
msgstr ""

#: ../Doc/library/socket.rst:180
msgid "*ifname* - String specifying the device name."
msgstr ""

#: ../Doc/library/socket.rst:181
msgid ""
"*proto* - An in network-byte-order integer specifying the Ethernet protocol "
"number."
msgstr ""

#: ../Doc/library/socket.rst:183
msgid "*pkttype* - Optional integer specifying the packet type:"
msgstr ""

#: ../Doc/library/socket.rst:185
msgid "``PACKET_HOST`` (the default) - Packet addressed to the local host."
msgstr ""

#: ../Doc/library/socket.rst:186
msgid "``PACKET_BROADCAST`` - Physical-layer broadcast packet."
msgstr ""

#: ../Doc/library/socket.rst:187
msgid ""
"``PACKET_MULTIHOST`` - Packet sent to a physical-layer multicast address."
msgstr ""

#: ../Doc/library/socket.rst:188
msgid ""
"``PACKET_OTHERHOST`` - Packet to some other host that has been caught by a "
"device driver in promiscuous mode."
msgstr ""

#: ../Doc/library/socket.rst:190
msgid ""
"``PACKET_OUTGOING`` - Packet originating from the local host that is looped "
"back to a packet socket."
msgstr ""

#: ../Doc/library/socket.rst:192
msgid "*hatype* - Optional integer specifying the ARP hardware address type."
msgstr ""

#: ../Doc/library/socket.rst:193
msgid ""
"*addr* - Optional bytes-like object specifying the hardware physical "
"address, whose interpretation depends on the device."
msgstr ""

#: ../Doc/library/socket.rst:196
msgid ""
"If you use a hostname in the *host* portion of IPv4/v6 socket address, the "
"program may show a nondeterministic behavior, as Python uses the first "
"address returned from the DNS resolution.  The socket address will be "
"resolved differently into an actual IPv4/v6 address, depending on the "
"results from DNS resolution and/or the host configuration.  For "
"deterministic behavior use a numeric address in *host* portion."
msgstr ""

#: ../Doc/library/socket.rst:203
msgid ""
"All errors raise exceptions.  The normal exceptions for invalid argument "
"types and out-of-memory conditions can be raised; starting from Python 3.3, "
"errors related to socket or address semantics raise :exc:`OSError` or one of "
"its subclasses (they used to raise :exc:`socket.error`)."
msgstr ""

#: ../Doc/library/socket.rst:208
msgid ""
"Non-blocking mode is supported through :meth:`~socket.setblocking`.  A "
"generalization of this based on timeouts is supported through :meth:`~socket."
"settimeout`."
msgstr ""

#: ../Doc/library/socket.rst:214
msgid "Module contents"
msgstr ""

#: ../Doc/library/socket.rst:216
msgid "The module :mod:`socket` exports the following elements."
msgstr ""

#: ../Doc/library/socket.rst:220
msgid "Exceptions"
msgstr "Exceptions"

#: ../Doc/library/socket.rst:224
msgid "A deprecated alias of :exc:`OSError`."
msgstr ""

#: ../Doc/library/socket.rst:226
msgid "Following :pep:`3151`, this class was made an alias of :exc:`OSError`."
msgstr ""

#: ../Doc/library/socket.rst:232
msgid ""
"A subclass of :exc:`OSError`, this exception is raised for address-related "
"errors, i.e. for functions that use *h_errno* in the POSIX C API, including :"
"func:`gethostbyname_ex` and :func:`gethostbyaddr`. The accompanying value is "
"a pair ``(h_errno, string)`` representing an error returned by a library "
"call.  *h_errno* is a numeric value, while *string* represents the "
"description of *h_errno*, as returned by the :c:func:`hstrerror` C function."
msgstr ""

#: ../Doc/library/socket.rst:240 ../Doc/library/socket.rst:253
#: ../Doc/library/socket.rst:264
msgid "This class was made a subclass of :exc:`OSError`."
msgstr ""

#: ../Doc/library/socket.rst:245
msgid ""
"A subclass of :exc:`OSError`, this exception is raised for address-related "
"errors by :func:`getaddrinfo` and :func:`getnameinfo`. The accompanying "
"value is a pair ``(error, string)`` representing an error returned by a "
"library call.  *string* represents the description of *error*, as returned "
"by the :c:func:`gai_strerror` C function.  The numeric *error* value will "
"match one of the :const:`EAI_\\*` constants defined in this module."
msgstr ""

#: ../Doc/library/socket.rst:258
msgid ""
"A subclass of :exc:`OSError`, this exception is raised when a timeout occurs "
"on a socket which has had timeouts enabled via a prior call to :meth:"
"`~socket.settimeout` (or implicitly through :func:`~socket."
"setdefaulttimeout`).  The accompanying value is a string whose value is "
"currently always \"timed out\"."
msgstr ""

#: ../Doc/library/socket.rst:269
msgid "Constants"
msgstr "Constantes"

#: ../Doc/library/socket.rst:271
msgid ""
"The AF_* and SOCK_* constants are now :class:`AddressFamily` and :class:"
"`SocketKind` :class:`.IntEnum` collections."
msgstr ""

#: ../Doc/library/socket.rst:280
msgid ""
"These constants represent the address (and protocol) families, used for the "
"first argument to :func:`.socket`.  If the :const:`AF_UNIX` constant is not "
"defined then this protocol is unsupported.  More constants may be available "
"depending on the system."
msgstr ""

#: ../Doc/library/socket.rst:292
msgid ""
"These constants represent the socket types, used for the second argument to :"
"func:`.socket`.  More constants may be available depending on the system. "
"(Only :const:`SOCK_STREAM` and :const:`SOCK_DGRAM` appear to be generally "
"useful.)"
msgstr ""

#: ../Doc/library/socket.rst:300
msgid ""
"These two constants, if defined, can be combined with the socket types and "
"allow you to set some flags atomically (thus avoiding possible race "
"conditions and the need for separate calls)."
msgstr ""

#: ../Doc/library/socket.rst:306
msgid ""
"`Secure File Descriptor Handling <http://udrepper.livejournal.com/20407."
"html>`_ for a more thorough explanation."
msgstr ""

#: ../Doc/library/socket.rst:310
msgid ":ref:`Availability <availability>`: Linux >= 2.6.27."
msgstr ":ref:`Disponibilit√© <availability>`¬†: Linux >= 2.6.27"

#: ../Doc/library/socket.rst:328
msgid ""
"Many constants of these forms, documented in the Unix documentation on "
"sockets and/or the IP protocol, are also defined in the socket module. They "
"are generally used in arguments to the :meth:`setsockopt` and :meth:"
"`getsockopt` methods of socket objects.  In most cases, only those symbols "
"that are defined in the Unix header files are defined; for a few symbols, "
"default values are provided."
msgstr ""

#: ../Doc/library/socket.rst:335
msgid ""
"``SO_DOMAIN``, ``SO_PROTOCOL``, ``SO_PEERSEC``, ``SO_PASSSEC``, "
"``TCP_USER_TIMEOUT``, ``TCP_CONGESTION`` were added."
msgstr ""

#: ../Doc/library/socket.rst:339
msgid ""
"On Windows, ``TCP_FASTOPEN``, ``TCP_KEEPCNT`` appear if run-time Windows "
"supports."
msgstr ""

#: ../Doc/library/socket.rst:343
msgid "``TCP_NOTSENT_LOWAT`` was added."
msgstr ""

#: ../Doc/library/socket.rst:346
msgid ""
"On Windows, ``TCP_KEEPIDLE``, ``TCP_KEEPINTVL`` appear if run-time Windows "
"supports."
msgstr ""

#: ../Doc/library/socket.rst:354 ../Doc/library/socket.rst:398
#: ../Doc/library/socket.rst:409
msgid ""
"Many constants of these forms, documented in the Linux documentation, are "
"also defined in the socket module."
msgstr ""

#: ../Doc/library/socket.rst:358 ../Doc/library/socket.rst:369
#: ../Doc/library/socket.rst:390
msgid ":ref:`Availability <availability>`: Linux >= 2.6.25."
msgstr ":ref:`Disponibilit√© <availability>`¬†: Linux >= 2.6.25"

#: ../Doc/library/socket.rst:364
msgid ""
"CAN_BCM, in the CAN protocol family, is the broadcast manager (BCM) "
"protocol. Broadcast manager constants, documented in the Linux "
"documentation, are also defined in the socket module."
msgstr ""

#: ../Doc/library/socket.rst:374
msgid ""
"Enables CAN FD support in a CAN_RAW socket. This is disabled by default. "
"This allows your application to send both CAN and CAN FD frames; however, "
"you one must accept both CAN and CAN FD frames when reading from the socket."
msgstr ""

#: ../Doc/library/socket.rst:378
msgid "This constant is documented in the Linux documentation."
msgstr ""

#: ../Doc/library/socket.rst:381
msgid ":ref:`Availability <availability>`: Linux >= 3.6."
msgstr ":ref:`Disponibilit√© <availability>`¬†: Linux >= 3.6."

#: ../Doc/library/socket.rst:386
msgid ""
"CAN_ISOTP, in the CAN protocol family, is the ISO-TP (ISO 15765-2) protocol. "
"ISO-TP constants, documented in the Linux documentation."
msgstr ""

#: ../Doc/library/socket.rst:401
msgid ":ref:`Availability <availability>`: Linux >= 2.2."
msgstr ":ref:`Disponibilit√© <availability>`¬†: Linux >= 2.2."

#: ../Doc/library/socket.rst:413
msgid ":ref:`Availability <availability>`: Linux >= 2.6.30."
msgstr ":ref:`Disponibilit√© <availability>`¬†: Linux >= 2.6.30."

#: ../Doc/library/socket.rst:422
msgid ""
"Constants for Windows' WSAIoctl(). The constants are used as arguments to "
"the :meth:`~socket.socket.ioctl` method of socket objects."
msgstr ""

#: ../Doc/library/socket.rst:425 ../Doc/library/socket.rst:1171
msgid "``SIO_LOOPBACK_FAST_PATH`` was added."
msgstr ""

#: ../Doc/library/socket.rst:431
msgid ""
"TIPC related constants, matching the ones exported by the C socket API. See "
"the TIPC documentation for more information."
msgstr ""

#: ../Doc/library/socket.rst:438
msgid "Constants for Linux Kernel cryptography."
msgstr ""

#: ../Doc/library/socket.rst:441 ../Doc/library/socket.rst:1467
msgid ":ref:`Availability <availability>`: Linux >= 2.6.38."
msgstr ":ref:`Disponibilit√© <availability>`¬†: Linux >= 2.6.38."

#: ../Doc/library/socket.rst:450
msgid "Constants for Linux host/guest communication."
msgstr ""

#: ../Doc/library/socket.rst:453
msgid ":ref:`Availability <availability>`: Linux >= 4.8."
msgstr ":ref:`Disponibilit√© <availability>`¬†: Linux >= 4.8."

#: ../Doc/library/socket.rst:459
msgid ":ref:`Availability <availability>`: BSD, OSX."
msgstr ":ref:`Disponibilit√© <availability>`¬†: BSD, OSX."

#: ../Doc/library/socket.rst:464
msgid ""
"This constant contains a boolean value which indicates if IPv6 is supported "
"on this platform."
msgstr ""

#: ../Doc/library/socket.rst:470
msgid ""
"These are string constants containing Bluetooth addresses with special "
"meanings. For example, :const:`BDADDR_ANY` can be used to indicate any "
"address when specifying the binding socket with :const:`BTPROTO_RFCOMM`."
msgstr ""

#: ../Doc/library/socket.rst:479
msgid ""
"For use with :const:`BTPROTO_HCI`. :const:`HCI_FILTER` is not available for "
"NetBSD or DragonFlyBSD. :const:`HCI_TIME_STAMP` and :const:`HCI_DATA_DIR` "
"are not available for FreeBSD, NetBSD, or DragonFlyBSD."
msgstr ""

#: ../Doc/library/socket.rst:485
msgid "Functions"
msgstr "Fonctions"

#: ../Doc/library/socket.rst:488
msgid "Creating sockets"
msgstr ""

#: ../Doc/library/socket.rst:490
msgid ""
"The following functions all create :ref:`socket objects <socket-objects>`."
msgstr ""

#: ../Doc/library/socket.rst:495
msgid ""
"Create a new socket using the given address family, socket type and protocol "
"number.  The address family should be :const:`AF_INET` (the default), :const:"
"`AF_INET6`, :const:`AF_UNIX`, :const:`AF_CAN`, :const:`AF_PACKET`, or :const:"
"`AF_RDS`. The socket type should be :const:`SOCK_STREAM` (the default), :"
"const:`SOCK_DGRAM`, :const:`SOCK_RAW` or perhaps one of the other ``SOCK_`` "
"constants. The protocol number is usually zero and may be omitted or in the "
"case where the address family is :const:`AF_CAN` the protocol should be one "
"of :const:`CAN_RAW`, :const:`CAN_BCM` or :const:`CAN_ISOTP`."
msgstr ""

#: ../Doc/library/socket.rst:504
msgid ""
"If *fileno* is specified, the values for *family*, *type*, and *proto* are "
"auto-detected from the specified file descriptor.  Auto-detection can be "
"overruled by calling the function with explicit *family*, *type*, or *proto* "
"arguments.  This only affects how Python represents e.g. the return value "
"of :meth:`socket.getpeername` but not the actual OS resource.  Unlike :func:"
"`socket.fromfd`, *fileno* will return the same socket and not a duplicate. "
"This may help close a detached socket using :meth:`socket.close()`."
msgstr ""

#: ../Doc/library/socket.rst:513 ../Doc/library/socket.rst:596
#: ../Doc/library/socket.rst:1005 ../Doc/library/socket.rst:1088
msgid "The newly created socket is :ref:`non-inheritable <fd_inheritance>`."
msgstr ""
"Il n'est :ref:`pas possible d'h√©riter <fd_inheritance>` de la *socket* "
"nouvellement cr√©√©."

#: ../Doc/library/socket.rst:515
msgid "The AF_CAN family was added. The AF_RDS family was added."
msgstr ""

#: ../Doc/library/socket.rst:519
msgid "The CAN_BCM protocol was added."
msgstr ""

#: ../Doc/library/socket.rst:522 ../Doc/library/socket.rst:598
msgid "The returned socket is now non-inheritable."
msgstr ""

#: ../Doc/library/socket.rst:525
msgid "The CAN_ISOTP protocol was added."
msgstr ""

#: ../Doc/library/socket.rst:528
msgid ""
"When :const:`SOCK_NONBLOCK` or :const:`SOCK_CLOEXEC` bit flags are applied "
"to *type* they are cleared, and :attr:`socket.type` will not reflect them.  "
"They are still passed to the underlying system `socket()` call.  Therefore::"
msgstr ""

#: ../Doc/library/socket.rst:536
msgid "sock = socket.socket("
msgstr ""

#: ../Doc/library/socket.rst:535
msgid "socket.AF_INET, socket.SOCK_STREAM | socket.SOCK_NONBLOCK)"
msgstr ""

#: ../Doc/library/socket.rst:538
msgid ""
"will still create a non-blocking socket on OSes that support "
"``SOCK_NONBLOCK``, but ``sock.type`` will be set to ``socket.SOCK_STREAM``."
msgstr ""

#: ../Doc/library/socket.rst:544
msgid ""
"Build a pair of connected socket objects using the given address family, "
"socket type, and protocol number.  Address family, socket type, and protocol "
"number are as for the :func:`.socket` function above. The default family is :"
"const:`AF_UNIX` if defined on the platform; otherwise, the default is :const:"
"`AF_INET`."
msgstr ""

#: ../Doc/library/socket.rst:549
msgid "The newly created sockets are :ref:`non-inheritable <fd_inheritance>`."
msgstr ""

#: ../Doc/library/socket.rst:551
msgid ""
"The returned socket objects now support the whole socket API, rather than a "
"subset."
msgstr ""

#: ../Doc/library/socket.rst:555
msgid "The returned sockets are now non-inheritable."
msgstr ""

#: ../Doc/library/socket.rst:558
msgid "Windows support added."
msgstr ""

#: ../Doc/library/socket.rst:564
msgid ""
"Connect to a TCP service listening on the Internet *address* (a 2-tuple "
"``(host, port)``), and return the socket object.  This is a higher-level "
"function than :meth:`socket.connect`: if *host* is a non-numeric hostname, "
"it will try to resolve it for both :data:`AF_INET` and :data:`AF_INET6`, and "
"then try to connect to all possible addresses in turn until a connection "
"succeeds.  This makes it easy to write clients that are compatible to both "
"IPv4 and IPv6."
msgstr ""

#: ../Doc/library/socket.rst:572
msgid ""
"Passing the optional *timeout* parameter will set the timeout on the socket "
"instance before attempting to connect.  If no *timeout* is supplied, the "
"global default timeout setting returned by :func:`getdefaulttimeout` is used."
msgstr ""

#: ../Doc/library/socket.rst:577
msgid ""
"If supplied, *source_address* must be a 2-tuple ``(host, port)`` for the "
"socket to bind to as its source address before connecting.  If host or port "
"are '' or 0 respectively the OS default behavior will be used."
msgstr ""

#: ../Doc/library/socket.rst:581
msgid "*source_address* was added."
msgstr ""

#: ../Doc/library/socket.rst:587
msgid ""
"Duplicate the file descriptor *fd* (an integer as returned by a file "
"object's :meth:`fileno` method) and build a socket object from the result.  "
"Address family, socket type and protocol number are as for the :func:`."
"socket` function above. The file descriptor should refer to a socket, but "
"this is not checked --- subsequent operations on the object may fail if the "
"file descriptor is invalid. This function is rarely needed, but can be used "
"to get or set socket options on a socket passed to a program as standard "
"input or output (such as a server started by the Unix inet daemon).  The "
"socket is assumed to be in blocking mode."
msgstr ""

#: ../Doc/library/socket.rst:604
msgid ""
"Instantiate a socket from data obtained from the :meth:`socket.share` "
"method.  The socket is assumed to be in blocking mode."
msgstr ""

#: ../Doc/library/socket.rst:608 ../Doc/library/socket.rst:1568
msgid ":ref:`Availability <availability>`: Windows."
msgstr ":ref:`Disponibilit√© <availability>`¬†: Windows."

#: ../Doc/library/socket.rst:614
msgid ""
"This is a Python type object that represents the socket object type. It is "
"the same as ``type(socket(...))``."
msgstr ""

#: ../Doc/library/socket.rst:619
msgid "Other functions"
msgstr ""

#: ../Doc/library/socket.rst:621
msgid "The :mod:`socket` module also offers various network-related services:"
msgstr ""

#: ../Doc/library/socket.rst:626
msgid ""
"Close a socket file descriptor. This is like :func:`os.close`, but for "
"sockets. On some platforms (most noticeable Windows) :func:`os.close` does "
"not work for socket file descriptors."
msgstr ""

#: ../Doc/library/socket.rst:634
msgid ""
"Translate the *host*/*port* argument into a sequence of 5-tuples that "
"contain all the necessary arguments for creating a socket connected to that "
"service. *host* is a domain name, a string representation of an IPv4/v6 "
"address or ``None``. *port* is a string service name such as ``'http'``, a "
"numeric port number or ``None``.  By passing ``None`` as the value of *host* "
"and *port*, you can pass ``NULL`` to the underlying C API."
msgstr ""

#: ../Doc/library/socket.rst:641
msgid ""
"The *family*, *type* and *proto* arguments can be optionally specified in "
"order to narrow the list of addresses returned.  Passing zero as a value for "
"each of these arguments selects the full range of results. The *flags* "
"argument can be one or several of the ``AI_*`` constants, and will influence "
"how results are computed and returned. For example, :const:`AI_NUMERICHOST` "
"will disable domain name resolution and will raise an error if *host* is a "
"domain name."
msgstr ""

#: ../Doc/library/socket.rst:649
msgid "The function returns a list of 5-tuples with the following structure:"
msgstr ""

#: ../Doc/library/socket.rst:651
msgid "``(family, type, proto, canonname, sockaddr)``"
msgstr ""

#: ../Doc/library/socket.rst:653
msgid ""
"In these tuples, *family*, *type*, *proto* are all integers and are meant to "
"be passed to the :func:`.socket` function.  *canonname* will be a string "
"representing the canonical name of the *host* if :const:`AI_CANONNAME` is "
"part of the *flags* argument; else *canonname* will be empty.  *sockaddr* is "
"a tuple describing a socket address, whose format depends on the returned "
"*family* (a ``(address, port)`` 2-tuple for :const:`AF_INET`, a ``(address, "
"port, flow info, scope id)`` 4-tuple for :const:`AF_INET6`), and is meant to "
"be passed to the :meth:`socket.connect` method."
msgstr ""

#: ../Doc/library/socket.rst:663
msgid ""
"The following example fetches address information for a hypothetical TCP "
"connection to ``example.org`` on port 80 (results may differ on your system "
"if IPv6 isn't enabled)::"
msgstr ""

#: ../Doc/library/socket.rst:673
msgid "parameters can now be passed using keyword arguments."
msgstr ""

#: ../Doc/library/socket.rst:676
msgid ""
"for IPv6 multicast addresses, string representing an address will not "
"contain ``%scope`` part."
msgstr ""

#: ../Doc/library/socket.rst:682
msgid ""
"Return a fully qualified domain name for *name*. If *name* is omitted or "
"empty, it is interpreted as the local host.  To find the fully qualified "
"name, the hostname returned by :func:`gethostbyaddr` is checked, followed by "
"aliases for the host, if available.  The first name which includes a period "
"is selected.  In case no fully qualified domain name is available, the "
"hostname as returned by :func:`gethostname` is returned."
msgstr ""

#: ../Doc/library/socket.rst:692
msgid ""
"Translate a host name to IPv4 address format.  The IPv4 address is returned "
"as a string, such as  ``'100.50.200.5'``.  If the host name is an IPv4 "
"address itself it is returned unchanged.  See :func:`gethostbyname_ex` for a "
"more complete interface. :func:`gethostbyname` does not support IPv6 name "
"resolution, and :func:`getaddrinfo` should be used instead for IPv4/v6 dual "
"stack support."
msgstr ""

#: ../Doc/library/socket.rst:701
msgid ""
"Translate a host name to IPv4 address format, extended interface. Return a "
"triple ``(hostname, aliaslist, ipaddrlist)`` where *hostname* is the primary "
"host name responding to the given *ip_address*, *aliaslist* is a (possibly "
"empty) list of alternative host names for the same address, and *ipaddrlist* "
"is a list of IPv4 addresses for the same interface on the same host (often "
"but not always a single address). :func:`gethostbyname_ex` does not support "
"IPv6 name resolution, and :func:`getaddrinfo` should be used instead for "
"IPv4/v6 dual stack support."
msgstr ""

#: ../Doc/library/socket.rst:713
msgid ""
"Return a string containing the hostname of the machine where  the Python "
"interpreter is currently executing."
msgstr ""

#: ../Doc/library/socket.rst:716
msgid ""
"Note: :func:`gethostname` doesn't always return the fully qualified domain "
"name; use :func:`getfqdn` for that."
msgstr ""

#: ../Doc/library/socket.rst:722
msgid ""
"Return a triple ``(hostname, aliaslist, ipaddrlist)`` where *hostname* is "
"the primary host name responding to the given *ip_address*, *aliaslist* is a "
"(possibly empty) list of alternative host names for the same address, and "
"*ipaddrlist* is a list of IPv4/v6 addresses for the same interface on the "
"same host (most likely containing only a single address). To find the fully "
"qualified domain name, use the function :func:`getfqdn`. :func:"
"`gethostbyaddr` supports both IPv4 and IPv6."
msgstr ""

#: ../Doc/library/socket.rst:733
msgid ""
"Translate a socket address *sockaddr* into a 2-tuple ``(host, port)``. "
"Depending on the settings of *flags*, the result can contain a fully-"
"qualified domain name or numeric address representation in *host*.  "
"Similarly, *port* can contain a string port name or a numeric port number."
msgstr ""

#: ../Doc/library/socket.rst:738
msgid ""
"For IPv6 addresses, ``%scope`` is appended to the host part if *sockaddr* "
"contains meaningful *scopeid*. Usually this happens for multicast addresses."
msgstr ""

#: ../Doc/library/socket.rst:743
msgid ""
"Translate an Internet protocol name (for example, ``'icmp'``) to a constant "
"suitable for passing as the (optional) third argument to the :func:`.socket` "
"function.  This is usually only needed for sockets opened in \"raw\" mode (:"
"const:`SOCK_RAW`); for the normal socket modes, the correct protocol is "
"chosen automatically if the protocol is omitted or zero."
msgstr ""

#: ../Doc/library/socket.rst:752
msgid ""
"Translate an Internet service name and protocol name to a port number for "
"that service.  The optional protocol name, if given, should be ``'tcp'`` or "
"``'udp'``, otherwise any protocol will match."
msgstr ""

#: ../Doc/library/socket.rst:759
msgid ""
"Translate an Internet port number and protocol name to a service name for "
"that service.  The optional protocol name, if given, should be ``'tcp'`` or "
"``'udp'``, otherwise any protocol will match."
msgstr ""

#: ../Doc/library/socket.rst:766
msgid ""
"Convert 32-bit positive integers from network to host byte order.  On "
"machines where the host byte order is the same as network byte order, this "
"is a no-op; otherwise, it performs a 4-byte swap operation."
msgstr ""

#: ../Doc/library/socket.rst:773
msgid ""
"Convert 16-bit positive integers from network to host byte order.  On "
"machines where the host byte order is the same as network byte order, this "
"is a no-op; otherwise, it performs a 2-byte swap operation."
msgstr ""

#: ../Doc/library/socket.rst:777 ../Doc/library/socket.rst:797
msgid ""
"In case *x* does not fit in 16-bit unsigned integer, but does fit in a "
"positive C int, it is silently truncated to 16-bit unsigned integer. This "
"silent truncation feature is deprecated, and will raise an exception in "
"future versions of Python."
msgstr ""

#: ../Doc/library/socket.rst:786
msgid ""
"Convert 32-bit positive integers from host to network byte order.  On "
"machines where the host byte order is the same as network byte order, this "
"is a no-op; otherwise, it performs a 4-byte swap operation."
msgstr ""

#: ../Doc/library/socket.rst:793
msgid ""
"Convert 16-bit positive integers from host to network byte order.  On "
"machines where the host byte order is the same as network byte order, this "
"is a no-op; otherwise, it performs a 2-byte swap operation."
msgstr ""

#: ../Doc/library/socket.rst:806
msgid ""
"Convert an IPv4 address from dotted-quad string format (for example, "
"'123.45.67.89') to 32-bit packed binary format, as a bytes object four "
"characters in length.  This is useful when conversing with a program that "
"uses the standard C library and needs objects of type :c:type:`struct "
"in_addr`, which is the C type for the 32-bit packed binary this function "
"returns."
msgstr ""

#: ../Doc/library/socket.rst:812
msgid ""
":func:`inet_aton` also accepts strings with less than three dots; see the "
"Unix manual page :manpage:`inet(3)` for details."
msgstr ""

#: ../Doc/library/socket.rst:815
msgid ""
"If the IPv4 address string passed to this function is invalid, :exc:"
"`OSError` will be raised. Note that exactly what is valid depends on the "
"underlying C implementation of :c:func:`inet_aton`."
msgstr ""

#: ../Doc/library/socket.rst:819
msgid ""
":func:`inet_aton` does not support IPv6, and :func:`inet_pton` should be "
"used instead for IPv4/v6 dual stack support."
msgstr ""

#: ../Doc/library/socket.rst:825
msgid ""
"Convert a 32-bit packed IPv4 address (a :term:`bytes-like object` four bytes "
"in length) to its standard dotted-quad string representation (for example, "
"'123.45.67.89').  This is useful when conversing with a program that uses "
"the standard C library and needs objects of type :c:type:`struct in_addr`, "
"which is the C type for the 32-bit packed binary data this function takes as "
"an argument."
msgstr ""

#: ../Doc/library/socket.rst:832
msgid ""
"If the byte sequence passed to this function is not exactly 4 bytes in "
"length, :exc:`OSError` will be raised. :func:`inet_ntoa` does not support "
"IPv6, and :func:`inet_ntop` should be used instead for IPv4/v6 dual stack "
"support."
msgstr ""

#: ../Doc/library/socket.rst:843
msgid ""
"Convert an IP address from its family-specific string format to a packed, "
"binary format. :func:`inet_pton` is useful when a library or network "
"protocol calls for an object of type :c:type:`struct in_addr` (similar to :"
"func:`inet_aton`) or :c:type:`struct in6_addr`."
msgstr ""

#: ../Doc/library/socket.rst:848
msgid ""
"Supported values for *address_family* are currently :const:`AF_INET` and :"
"const:`AF_INET6`. If the IP address string *ip_string* is invalid, :exc:"
"`OSError` will be raised. Note that exactly what is valid depends on both "
"the value of *address_family* and the underlying implementation of :c:func:"
"`inet_pton`."
msgstr ""

#: ../Doc/library/socket.rst:855 ../Doc/library/socket.rst:875
msgid ""
":ref:`Availability <availability>`: Unix (maybe not all platforms), Windows."
msgstr ""

#: ../Doc/library/socket.rst:856 ../Doc/library/socket.rst:876
msgid "Windows support added"
msgstr "Ajout de la gestion de Windows."

#: ../Doc/library/socket.rst:862
msgid ""
"Convert a packed IP address (a :term:`bytes-like object` of some number of "
"bytes) to its standard, family-specific string representation (for example, "
"``'7.10.0.5'`` or ``'5aef:2b::8'``). :func:`inet_ntop` is useful when a "
"library or network protocol returns an object of type :c:type:`struct "
"in_addr` (similar to :func:`inet_ntoa`) or :c:type:`struct in6_addr`."
msgstr ""

#: ../Doc/library/socket.rst:869
msgid ""
"Supported values for *address_family* are currently :const:`AF_INET` and :"
"const:`AF_INET6`. If the bytes object *packed_ip* is not the correct length "
"for the specified address family, :exc:`ValueError` will be raised. :exc:"
"`OSError` is raised for errors from the call to :func:`inet_ntop`."
msgstr ""

#: ../Doc/library/socket.rst:891
msgid ""
"Return the total length, without trailing padding, of an ancillary data item "
"with associated data of the given *length*.  This value can often be used as "
"the buffer size for :meth:`~socket.recvmsg` to receive a single item of "
"ancillary data, but :rfc:`3542` requires portable applications to use :func:"
"`CMSG_SPACE` and thus include space for padding, even when the item will be "
"the last in the buffer.  Raises :exc:`OverflowError` if *length* is outside "
"the permissible range of values."
msgstr ""

#: ../Doc/library/socket.rst:901 ../Doc/library/socket.rst:922
#: ../Doc/library/socket.rst:1307 ../Doc/library/socket.rst:1349
#: ../Doc/library/socket.rst:1453
msgid ""
":ref:`Availability <availability>`: most Unix platforms, possibly others."
msgstr ""

#: ../Doc/library/socket.rst:907
msgid ""
"Return the buffer size needed for :meth:`~socket.recvmsg` to receive an "
"ancillary data item with associated data of the given *length*, along with "
"any trailing padding.  The buffer space needed to receive multiple items is "
"the sum of the :func:`CMSG_SPACE` values for their associated data lengths.  "
"Raises :exc:`OverflowError` if *length* is outside the permissible range of "
"values."
msgstr ""

#: ../Doc/library/socket.rst:915
msgid ""
"Note that some systems might support ancillary data without providing this "
"function.  Also note that setting the buffer size using the results of this "
"function may not precisely limit the amount of ancillary data that can be "
"received, since additional data may be able to fit into the padding area."
msgstr ""

#: ../Doc/library/socket.rst:928
msgid ""
"Return the default timeout in seconds (float) for new socket objects. A "
"value of ``None`` indicates that new socket objects have no timeout. When "
"the socket module is first imported, the default is ``None``."
msgstr ""

#: ../Doc/library/socket.rst:935
msgid ""
"Set the default timeout in seconds (float) for new socket objects.  When the "
"socket module is first imported, the default is ``None``.  See :meth:"
"`~socket.settimeout` for possible values and their respective meanings."
msgstr ""

#: ../Doc/library/socket.rst:943
msgid ""
"Set the machine's hostname to *name*.  This will raise an :exc:`OSError` if "
"you don't have enough rights."
msgstr ""

#: ../Doc/library/socket.rst:947 ../Doc/library/socket.rst:958
#: ../Doc/library/socket.rst:969 ../Doc/library/socket.rst:980
msgid ":ref:`Availability <availability>`: Unix."
msgstr ":ref:`Disponibilit√© <availability>`¬†: Unix."

#: ../Doc/library/socket.rst:953
msgid ""
"Return a list of network interface information (index int, name string) "
"tuples. :exc:`OSError` if the system call fails."
msgstr ""

#: ../Doc/library/socket.rst:964
msgid ""
"Return a network interface index number corresponding to an interface name. :"
"exc:`OSError` if no interface with the given name exists."
msgstr ""

#: ../Doc/library/socket.rst:975
msgid ""
"Return a network interface name corresponding to an interface index number. :"
"exc:`OSError` if no interface with the given index exists."
msgstr ""

#: ../Doc/library/socket.rst:987
msgid "Socket Objects"
msgstr ""

#: ../Doc/library/socket.rst:989
msgid ""
"Socket objects have the following methods.  Except for :meth:`~socket."
"makefile`, these correspond to Unix system calls applicable to sockets."
msgstr ""

#: ../Doc/library/socket.rst:993
msgid ""
"Support for the :term:`context manager` protocol was added.  Exiting the "
"context manager is equivalent to calling :meth:`~socket.close`."
msgstr ""

#: ../Doc/library/socket.rst:1000
msgid ""
"Accept a connection. The socket must be bound to an address and listening "
"for connections. The return value is a pair ``(conn, address)`` where *conn* "
"is a *new* socket object usable to send and receive data on the connection, "
"and *address* is the address bound to the socket on the other end of the "
"connection."
msgstr ""

#: ../Doc/library/socket.rst:1007 ../Doc/library/socket.rst:1090
msgid "The socket is now non-inheritable."
msgstr ""

#: ../Doc/library/socket.rst:1010 ../Doc/library/socket.rst:1221
#: ../Doc/library/socket.rst:1235 ../Doc/library/socket.rst:1310
#: ../Doc/library/socket.rst:1381 ../Doc/library/socket.rst:1400
#: ../Doc/library/socket.rst:1415 ../Doc/library/socket.rst:1456
msgid ""
"If the system call is interrupted and the signal handler does not raise an "
"exception, the method now retries the system call instead of raising an :exc:"
"`InterruptedError` exception (see :pep:`475` for the rationale)."
msgstr ""
"Si l'appel syst√®me est interrompu et que le gestionnaire de signal ne l√®ve "
"aucune exception, la fonction r√©essaye l'appel syst√®me au lieu de lever une :"
"exc:`InterruptedError` (voir la :pep:`475` √† propos du raisonnement)."

#: ../Doc/library/socket.rst:1018
msgid ""
"Bind the socket to *address*.  The socket must not already be bound. (The "
"format of *address* depends on the address family --- see above.)"
msgstr ""

#: ../Doc/library/socket.rst:1024
msgid ""
"Mark the socket closed.  The underlying system resource (e.g. a file "
"descriptor) is also closed when all file objects from :meth:`makefile()` are "
"closed.  Once that happens, all future operations on the socket object will "
"fail. The remote end will receive no more data (after queued data is "
"flushed)."
msgstr ""

#: ../Doc/library/socket.rst:1030
msgid ""
"Sockets are automatically closed when they are garbage-collected, but it is "
"recommended to :meth:`close` them explicitly, or to use a :keyword:`with` "
"statement around them."
msgstr ""

#: ../Doc/library/socket.rst:1034
msgid ""
":exc:`OSError` is now raised if an error occurs when the underlying :c:func:"
"`close` call is made."
msgstr ""

#: ../Doc/library/socket.rst:1040
msgid ""
":meth:`close()` releases the resource associated with a connection but does "
"not necessarily close the connection immediately.  If you want to close the "
"connection in a timely fashion, call :meth:`shutdown()` before :meth:"
"`close()`."
msgstr ""

#: ../Doc/library/socket.rst:1048
msgid ""
"Connect to a remote socket at *address*. (The format of *address* depends on "
"the address family --- see above.)"
msgstr ""

#: ../Doc/library/socket.rst:1051
msgid ""
"If the connection is interrupted by a signal, the method waits until the "
"connection completes, or raise a :exc:`socket.timeout` on timeout, if the "
"signal handler doesn't raise an exception and the socket is blocking or has "
"a timeout. For non-blocking sockets, the method raises an :exc:"
"`InterruptedError` exception if the connection is interrupted by a signal "
"(or the exception raised by the signal handler)."
msgstr ""

#: ../Doc/library/socket.rst:1058
msgid ""
"The method now waits until the connection completes instead of raising an :"
"exc:`InterruptedError` exception if the connection is interrupted by a "
"signal, the signal handler doesn't raise an exception and the socket is "
"blocking or has a timeout (see the :pep:`475` for the rationale)."
msgstr ""

#: ../Doc/library/socket.rst:1067
msgid ""
"Like ``connect(address)``, but return an error indicator instead of raising "
"an exception for errors returned by the C-level :c:func:`connect` call "
"(other problems, such as \"host not found,\" can still raise exceptions).  "
"The error indicator is ``0`` if the operation succeeded, otherwise the value "
"of the :c:data:`errno` variable.  This is useful to support, for example, "
"asynchronous connects."
msgstr ""

#: ../Doc/library/socket.rst:1077
msgid ""
"Put the socket object into closed state without actually closing the "
"underlying file descriptor.  The file descriptor is returned, and can be "
"reused for other purposes."
msgstr ""

#: ../Doc/library/socket.rst:1086
msgid "Duplicate the socket."
msgstr ""

#: ../Doc/library/socket.rst:1096
msgid ""
"Return the socket's file descriptor (a small integer), or -1 on failure. "
"This is useful with :func:`select.select`."
msgstr ""

#: ../Doc/library/socket.rst:1099
msgid ""
"Under Windows the small integer returned by this method cannot be used where "
"a file descriptor can be used (such as :func:`os.fdopen`).  Unix does not "
"have this limitation."
msgstr ""

#: ../Doc/library/socket.rst:1105
msgid ""
"Get the :ref:`inheritable flag <fd_inheritance>` of the socket's file "
"descriptor or socket's handle: ``True`` if the socket can be inherited in "
"child processes, ``False`` if it cannot."
msgstr ""

#: ../Doc/library/socket.rst:1114
msgid ""
"Return the remote address to which the socket is connected.  This is useful "
"to find out the port number of a remote IPv4/v6 socket, for instance. (The "
"format of the address returned depends on the address family --- see "
"above.)  On some systems this function is not supported."
msgstr ""

#: ../Doc/library/socket.rst:1122
msgid ""
"Return the socket's own address.  This is useful to find out the port number "
"of an IPv4/v6 socket, for instance. (The format of the address returned "
"depends on the address family --- see above.)"
msgstr ""

#: ../Doc/library/socket.rst:1129
msgid ""
"Return the value of the given socket option (see the Unix man page :manpage:"
"`getsockopt(2)`).  The needed symbolic constants (:const:`SO_\\*` etc.) are "
"defined in this module.  If *buflen* is absent, an integer option is assumed "
"and its integer value is returned by the function.  If *buflen* is present, "
"it specifies the maximum length of the buffer used to receive the option in, "
"and this buffer is returned as a bytes object.  It is up to the caller to "
"decode the contents of the buffer (see the optional built-in module :mod:"
"`struct` for a way to decode C structures encoded as byte strings)."
msgstr ""

#: ../Doc/library/socket.rst:1141
msgid ""
"Return ``True`` if socket is in blocking mode, ``False`` if in non-blocking."
msgstr ""

#: ../Doc/library/socket.rst:1144
msgid "This is equivalent to checking ``socket.gettimeout() == 0``."
msgstr ""

#: ../Doc/library/socket.rst:1151
msgid ""
"Return the timeout in seconds (float) associated with socket operations, or "
"``None`` if no timeout is set.  This reflects the last call to :meth:"
"`setblocking` or :meth:`settimeout`."
msgstr ""

#: ../Doc/library/socket.rst:0
msgid "platform"
msgstr ""

#: ../Doc/library/socket.rst:1158
msgid "Windows"
msgstr "Windows"

#: ../Doc/library/socket.rst:1160
msgid ""
"The :meth:`ioctl` method is a limited interface to the WSAIoctl system "
"interface.  Please refer to the `Win32 documentation <https://msdn.microsoft."
"com/en-us/library/ms741621%28VS.85%29.aspx>`_ for more information."
msgstr ""

#: ../Doc/library/socket.rst:1165
msgid ""
"On other platforms, the generic :func:`fcntl.fcntl` and :func:`fcntl.ioctl` "
"functions may be used; they accept a socket object as their first argument."
msgstr ""

#: ../Doc/library/socket.rst:1168
msgid ""
"Currently only the following control codes are supported: ``SIO_RCVALL``, "
"``SIO_KEEPALIVE_VALS``, and ``SIO_LOOPBACK_FAST_PATH``."
msgstr ""

#: ../Doc/library/socket.rst:1176
msgid ""
"Enable a server to accept connections.  If *backlog* is specified, it must "
"be at least 0 (if it is lower, it is set to 0); it specifies the number of "
"unaccepted connections that the system will allow before refusing new "
"connections. If not specified, a default reasonable value is chosen."
msgstr ""

#: ../Doc/library/socket.rst:1181
msgid "The *backlog* parameter is now optional."
msgstr ""

#: ../Doc/library/socket.rst:1189
msgid ""
"Return a :term:`file object` associated with the socket.  The exact returned "
"type depends on the arguments given to :meth:`makefile`.  These arguments "
"are interpreted the same way as by the built-in :func:`open` function, "
"except the only supported *mode* values are ``'r'`` (default), ``'w'`` and "
"``'b'``."
msgstr ""

#: ../Doc/library/socket.rst:1194
msgid ""
"The socket must be in blocking mode; it can have a timeout, but the file "
"object's internal buffer may end up in an inconsistent state if a timeout "
"occurs."
msgstr ""

#: ../Doc/library/socket.rst:1198
msgid ""
"Closing the file object returned by :meth:`makefile` won't close the "
"original socket unless all other file objects have been closed and :meth:"
"`socket.close` has been called on the socket object."
msgstr ""

#: ../Doc/library/socket.rst:1204
msgid ""
"On Windows, the file-like object created by :meth:`makefile` cannot be used "
"where a file object with a file descriptor is expected, such as the stream "
"arguments of :meth:`subprocess.Popen`."
msgstr ""

#: ../Doc/library/socket.rst:1211
msgid ""
"Receive data from the socket.  The return value is a bytes object "
"representing the data received.  The maximum amount of data to be received "
"at once is specified by *bufsize*.  See the Unix manual page :manpage:"
"`recv(2)` for the meaning of the optional argument *flags*; it defaults to "
"zero."
msgstr ""

#: ../Doc/library/socket.rst:1218
msgid ""
"For best match with hardware and network realities, the value of  *bufsize* "
"should be a relatively small power of 2, for example, 4096."
msgstr ""

#: ../Doc/library/socket.rst:1229
msgid ""
"Receive data from the socket.  The return value is a pair ``(bytes, "
"address)`` where *bytes* is a bytes object representing the data received "
"and *address* is the address of the socket sending the data.  See the Unix "
"manual page :manpage:`recv(2)` for the meaning of the optional argument "
"*flags*; it defaults to zero. (The format of *address* depends on the "
"address family --- see above.)"
msgstr ""

#: ../Doc/library/socket.rst:1240
msgid ""
"For multicast IPv6 address, first item of *address* does not contain ``"
"%scope`` part anymore. In order to get full IPv6 address use :func:"
"`getnameinfo`."
msgstr ""

#: ../Doc/library/socket.rst:1247
msgid ""
"Receive normal data (up to *bufsize* bytes) and ancillary data from the "
"socket.  The *ancbufsize* argument sets the size in bytes of the internal "
"buffer used to receive the ancillary data; it defaults to 0, meaning that no "
"ancillary data will be received.  Appropriate buffer sizes for ancillary "
"data can be calculated using :func:`CMSG_SPACE` or :func:`CMSG_LEN`, and "
"items which do not fit into the buffer might be truncated or discarded.  The "
"*flags* argument defaults to 0 and has the same meaning as for :meth:`recv`."
msgstr ""

#: ../Doc/library/socket.rst:1257
msgid ""
"The return value is a 4-tuple: ``(data, ancdata, msg_flags, address)``.  The "
"*data* item is a :class:`bytes` object holding the non-ancillary data "
"received.  The *ancdata* item is a list of zero or more tuples "
"``(cmsg_level, cmsg_type, cmsg_data)`` representing the ancillary data "
"(control messages) received: *cmsg_level* and *cmsg_type* are integers "
"specifying the protocol level and protocol-specific type respectively, and "
"*cmsg_data* is a :class:`bytes` object holding the associated data.  The "
"*msg_flags* item is the bitwise OR of various flags indicating conditions on "
"the received message; see your system documentation for details. If the "
"receiving socket is unconnected, *address* is the address of the sending "
"socket, if available; otherwise, its value is unspecified."
msgstr ""

#: ../Doc/library/socket.rst:1271
msgid ""
"On some systems, :meth:`sendmsg` and :meth:`recvmsg` can be used to pass "
"file descriptors between processes over an :const:`AF_UNIX` socket.  When "
"this facility is used (it is often restricted to :const:`SOCK_STREAM` "
"sockets), :meth:`recvmsg` will return, in its ancillary data, items of the "
"form ``(socket.SOL_SOCKET, socket.SCM_RIGHTS, fds)``, where *fds* is a :"
"class:`bytes` object representing the new file descriptors as a binary array "
"of the native C :c:type:`int` type.  If :meth:`recvmsg` raises an exception "
"after the system call returns, it will first attempt to close any file "
"descriptors received via this mechanism."
msgstr ""

#: ../Doc/library/socket.rst:1282
msgid ""
"Some systems do not indicate the truncated length of ancillary data items "
"which have been only partially received.  If an item appears to extend "
"beyond the end of the buffer, :meth:`recvmsg` will issue a :exc:"
"`RuntimeWarning`, and will return the part of it which is inside the buffer "
"provided it has not been truncated before the start of its associated data."
msgstr ""

#: ../Doc/library/socket.rst:1289
msgid ""
"On systems which support the :const:`SCM_RIGHTS` mechanism, the following "
"function will receive up to *maxfds* file descriptors, returning the message "
"data and a list containing the descriptors (while ignoring unexpected "
"conditions such as unrelated control messages being received).  See also :"
"meth:`sendmsg`. ::"
msgstr ""

#: ../Doc/library/socket.rst:1318
msgid ""
"Receive normal data and ancillary data from the socket, behaving as :meth:"
"`recvmsg` would, but scatter the non-ancillary data into a series of buffers "
"instead of returning a new bytes object.  The *buffers* argument must be an "
"iterable of objects that export writable buffers (e.g. :class:`bytearray` "
"objects); these will be filled with successive chunks of the non-ancillary "
"data until it has all been written or there are no more buffers.  The "
"operating system may set a limit (:func:`~os.sysconf` value ``SC_IOV_MAX``) "
"on the number of buffers that can be used.  The *ancbufsize* and *flags* "
"arguments have the same meaning as for :meth:`recvmsg`."
msgstr ""

#: ../Doc/library/socket.rst:1329
msgid ""
"The return value is a 4-tuple: ``(nbytes, ancdata, msg_flags, address)``, "
"where *nbytes* is the total number of bytes of non-ancillary data written "
"into the buffers, and *ancdata*, *msg_flags* and *address* are the same as "
"for :meth:`recvmsg`."
msgstr ""

#: ../Doc/library/socket.rst:1334
msgid "Example::"
msgstr "Exemple¬†::"

#: ../Doc/library/socket.rst:1355
msgid ""
"Receive data from the socket, writing it into *buffer* instead of creating a "
"new bytestring.  The return value is a pair ``(nbytes, address)`` where "
"*nbytes* is the number of bytes received and *address* is the address of the "
"socket sending the data.  See the Unix manual page :manpage:`recv(2)` for "
"the meaning of the optional argument *flags*; it defaults to zero.  (The "
"format of *address* depends on the address family --- see above.)"
msgstr ""

#: ../Doc/library/socket.rst:1365
msgid ""
"Receive up to *nbytes* bytes from the socket, storing the data into a buffer "
"rather than creating a new bytestring.  If *nbytes* is not specified (or 0), "
"receive up to the size available in the given buffer.  Returns the number of "
"bytes received.  See the Unix manual page :manpage:`recv(2)` for the meaning "
"of the optional argument *flags*; it defaults to zero."
msgstr ""

#: ../Doc/library/socket.rst:1374
msgid ""
"Send data to the socket.  The socket must be connected to a remote socket.  "
"The optional *flags* argument has the same meaning as for :meth:`recv` "
"above. Returns the number of bytes sent. Applications are responsible for "
"checking that all data has been sent; if only some of the data was "
"transmitted, the application needs to attempt delivery of the remaining "
"data. For further information on this topic, consult the :ref:`socket-howto`."
msgstr ""

#: ../Doc/library/socket.rst:1389
msgid ""
"Send data to the socket.  The socket must be connected to a remote socket.  "
"The optional *flags* argument has the same meaning as for :meth:`recv` "
"above. Unlike :meth:`send`, this method continues to send data from *bytes* "
"until either all data has been sent or an error occurs.  ``None`` is "
"returned on success.  On error, an exception is raised, and there is no way "
"to determine how much data, if any, was successfully sent."
msgstr ""

#: ../Doc/library/socket.rst:1396
msgid ""
"The socket timeout is no more reset each time data is sent successfully. The "
"socket timeout is now the maximum total duration to send all data."
msgstr ""

#: ../Doc/library/socket.rst:1409
msgid ""
"Send data to the socket.  The socket should not be connected to a remote "
"socket, since the destination socket is specified by *address*.  The "
"optional *flags* argument has the same meaning as for :meth:`recv` above.  "
"Return the number of bytes sent. (The format of *address* depends on the "
"address family --- see above.)"
msgstr ""

#: ../Doc/library/socket.rst:1423
msgid ""
"Send normal and ancillary data to the socket, gathering the non-ancillary "
"data from a series of buffers and concatenating it into a single message.  "
"The *buffers* argument specifies the non-ancillary data as an iterable of :"
"term:`bytes-like objects <bytes-like object>` (e.g. :class:`bytes` objects); "
"the operating system may set a limit (:func:`~os.sysconf` value "
"``SC_IOV_MAX``) on the number of buffers that can be used.  The *ancdata* "
"argument specifies the ancillary data (control messages) as an iterable of "
"zero or more tuples ``(cmsg_level, cmsg_type, cmsg_data)``, where "
"*cmsg_level* and *cmsg_type* are integers specifying the protocol level and "
"protocol-specific type respectively, and *cmsg_data* is a bytes-like object "
"holding the associated data.  Note that some systems (in particular, systems "
"without :func:`CMSG_SPACE`) might support sending only one control message "
"per call.  The *flags* argument defaults to 0 and has the same meaning as "
"for :meth:`send`.  If *address* is supplied and not ``None``, it sets a "
"destination address for the message.  The return value is the number of "
"bytes of non-ancillary data sent."
msgstr ""

#: ../Doc/library/socket.rst:1443
msgid ""
"The following function sends the list of file descriptors *fds* over an :"
"const:`AF_UNIX` socket, on systems which support the :const:`SCM_RIGHTS` "
"mechanism.  See also :meth:`recvmsg`. ::"
msgstr ""

#: ../Doc/library/socket.rst:1463
msgid ""
"Specialized version of :meth:`~socket.sendmsg` for :const:`AF_ALG` socket. "
"Set mode, IV, AEAD associated data length and flags for :const:`AF_ALG` "
"socket."
msgstr ""

#: ../Doc/library/socket.rst:1472
msgid ""
"Send a file until EOF is reached by using high-performance :mod:`os."
"sendfile` and return the total number of bytes which were sent. *file* must "
"be a regular file object opened in binary mode. If :mod:`os.sendfile` is not "
"available (e.g. Windows) or *file* is not a regular file :meth:`send` will "
"be used instead. *offset* tells from where to start reading the file. If "
"specified, *count* is the total number of bytes to transmit as opposed to "
"sending the file until EOF is reached. File position is updated on return or "
"also in case of error in which case :meth:`file.tell() <io.IOBase.tell>` can "
"be used to figure out the number of bytes which were sent. The socket must "
"be of :const:`SOCK_STREAM` type. Non-blocking sockets are not supported."
msgstr ""

#: ../Doc/library/socket.rst:1488
msgid ""
"Set the :ref:`inheritable flag <fd_inheritance>` of the socket's file "
"descriptor or socket's handle."
msgstr ""

#: ../Doc/library/socket.rst:1496
msgid ""
"Set blocking or non-blocking mode of the socket: if *flag* is false, the "
"socket is set to non-blocking, else to blocking mode."
msgstr ""

#: ../Doc/library/socket.rst:1499
msgid ""
"This method is a shorthand for certain :meth:`~socket.settimeout` calls:"
msgstr ""

#: ../Doc/library/socket.rst:1501
msgid "``sock.setblocking(True)`` is equivalent to ``sock.settimeout(None)``"
msgstr ""

#: ../Doc/library/socket.rst:1503
msgid "``sock.setblocking(False)`` is equivalent to ``sock.settimeout(0.0)``"
msgstr ""

#: ../Doc/library/socket.rst:1505
msgid ""
"The method no longer applies :const:`SOCK_NONBLOCK` flag on :attr:`socket."
"type`."
msgstr ""

#: ../Doc/library/socket.rst:1512
msgid ""
"Set a timeout on blocking socket operations.  The *value* argument can be a "
"nonnegative floating point number expressing seconds, or ``None``. If a non-"
"zero value is given, subsequent socket operations will raise a :exc:"
"`timeout` exception if the timeout period *value* has elapsed before the "
"operation has completed.  If zero is given, the socket is put in non-"
"blocking mode. If ``None`` is given, the socket is put in blocking mode."
msgstr ""

#: ../Doc/library/socket.rst:1519
msgid ""
"For further information, please consult the :ref:`notes on socket timeouts "
"<socket-timeouts>`."
msgstr ""

#: ../Doc/library/socket.rst:1521
msgid ""
"The method no longer toggles :const:`SOCK_NONBLOCK` flag on :attr:`socket."
"type`."
msgstr ""

#: ../Doc/library/socket.rst:1532
msgid ""
"Set the value of the given socket option (see the Unix manual page :manpage:"
"`setsockopt(2)`).  The needed symbolic constants are defined in the :mod:"
"`socket` module (:const:`SO_\\*` etc.).  The value can be an integer, "
"``None`` or a :term:`bytes-like object` representing a buffer. In the later "
"case it is up to the caller to ensure that the bytestring contains the "
"proper bits (see the optional built-in module :mod:`struct` for a way to "
"encode C structures as bytestrings). When value is set to ``None``, optlen "
"argument is required. It's equivalent to call setsockopt C function with "
"optval=NULL and optlen=optlen."
msgstr ""

#: ../Doc/library/socket.rst:1546
msgid "setsockopt(level, optname, None, optlen: int) form added."
msgstr ""

#: ../Doc/library/socket.rst:1552
msgid ""
"Shut down one or both halves of the connection.  If *how* is :const:"
"`SHUT_RD`, further receives are disallowed.  If *how* is :const:`SHUT_WR`, "
"further sends are disallowed.  If *how* is :const:`SHUT_RDWR`, further sends "
"and receives are disallowed."
msgstr ""

#: ../Doc/library/socket.rst:1560
msgid ""
"Duplicate a socket and prepare it for sharing with a target process.  The "
"target process must be provided with *process_id*.  The resulting bytes "
"object can then be passed to the target process using some form of "
"interprocess communication and the socket can be recreated there using :func:"
"`fromshare`. Once this method has been called, it is safe to close the "
"socket since the operating system has already duplicated it for the target "
"process."
msgstr ""

#: ../Doc/library/socket.rst:1572
msgid ""
"Note that there are no methods :meth:`read` or :meth:`write`; use :meth:"
"`~socket.recv` and :meth:`~socket.send` without *flags* argument instead."
msgstr ""

#: ../Doc/library/socket.rst:1575
msgid ""
"Socket objects also have these (read-only) attributes that correspond to the "
"values given to the :class:`~socket.socket` constructor."
msgstr ""

#: ../Doc/library/socket.rst:1581
msgid "The socket family."
msgstr ""

#: ../Doc/library/socket.rst:1586
msgid "The socket type."
msgstr ""

#: ../Doc/library/socket.rst:1591
msgid "The socket protocol."
msgstr ""

#: ../Doc/library/socket.rst:1598
msgid "Notes on socket timeouts"
msgstr ""

#: ../Doc/library/socket.rst:1600
msgid ""
"A socket object can be in one of three modes: blocking, non-blocking, or "
"timeout.  Sockets are by default always created in blocking mode, but this "
"can be changed by calling :func:`setdefaulttimeout`."
msgstr ""

#: ../Doc/library/socket.rst:1604
msgid ""
"In *blocking mode*, operations block until complete or the system returns an "
"error (such as connection timed out)."
msgstr ""

#: ../Doc/library/socket.rst:1607
msgid ""
"In *non-blocking mode*, operations fail (with an error that is unfortunately "
"system-dependent) if they cannot be completed immediately: functions from "
"the :mod:`select` can be used to know when and whether a socket is available "
"for reading or writing."
msgstr ""

#: ../Doc/library/socket.rst:1612
msgid ""
"In *timeout mode*, operations fail if they cannot be completed within the "
"timeout specified for the socket (they raise a :exc:`timeout` exception) or "
"if the system returns an error."
msgstr ""

#: ../Doc/library/socket.rst:1617
msgid ""
"At the operating system level, sockets in *timeout mode* are internally set "
"in non-blocking mode.  Also, the blocking and timeout modes are shared "
"between file descriptors and socket objects that refer to the same network "
"endpoint. This implementation detail can have visible consequences if e.g. "
"you decide to use the :meth:`~socket.fileno()` of a socket."
msgstr ""

#: ../Doc/library/socket.rst:1624
msgid "Timeouts and the ``connect`` method"
msgstr ""

#: ../Doc/library/socket.rst:1626
msgid ""
"The :meth:`~socket.connect` operation is also subject to the timeout "
"setting, and in general it is recommended to call :meth:`~socket.settimeout` "
"before calling :meth:`~socket.connect` or pass a timeout parameter to :meth:"
"`create_connection`.  However, the system network stack may also return a "
"connection timeout error of its own regardless of any Python socket timeout "
"setting."
msgstr ""

#: ../Doc/library/socket.rst:1634
msgid "Timeouts and the ``accept`` method"
msgstr ""

#: ../Doc/library/socket.rst:1636
msgid ""
"If :func:`getdefaulttimeout` is not :const:`None`, sockets returned by the :"
"meth:`~socket.accept` method inherit that timeout.  Otherwise, the behaviour "
"depends on settings of the listening socket:"
msgstr ""

#: ../Doc/library/socket.rst:1640
msgid ""
"if the listening socket is in *blocking mode* or in *timeout mode*, the "
"socket returned by :meth:`~socket.accept` is in *blocking mode*;"
msgstr ""

#: ../Doc/library/socket.rst:1643
msgid ""
"if the listening socket is in *non-blocking mode*, whether the socket "
"returned by :meth:`~socket.accept` is in blocking or non-blocking mode is "
"operating system-dependent.  If you want to ensure cross-platform behaviour, "
"it is recommended you manually override this setting."
msgstr ""

#: ../Doc/library/socket.rst:1652
msgid "Example"
msgstr "Exemple"

#: ../Doc/library/socket.rst:1654
msgid ""
"Here are four minimal example programs using the TCP/IP protocol: a server "
"that echoes all data that it receives back (servicing only one client), and "
"a client using it.  Note that a server must perform the sequence :func:`."
"socket`, :meth:`~socket.bind`, :meth:`~socket.listen`, :meth:`~socket."
"accept` (possibly repeating the :meth:`~socket.accept` to service more than "
"one client), while a client only needs the sequence :func:`.socket`, :meth:"
"`~socket.connect`.  Also note that the server does not :meth:`~socket."
"sendall`/:meth:`~socket.recv` on the socket it is listening on but on the "
"new socket returned by :meth:`~socket.accept`."
msgstr ""

#: ../Doc/library/socket.rst:1664
msgid "The first two examples support IPv4 only. ::"
msgstr ""

#: ../Doc/library/socket.rst:1695
msgid ""
"The next two examples are identical to the above two, but support both IPv4 "
"and IPv6. The server side will listen to the first address family available "
"(it should listen to both instead). On most of IPv6-ready systems, IPv6 will "
"take precedence and the server may not accept IPv4 traffic. The client side "
"will try to connect to the all addresses returned as a result of the name "
"resolution, and sends traffic to the first one connected successfully. ::"
msgstr ""

#: ../Doc/library/socket.rst:1768
msgid ""
"The next example shows how to write a very simple network sniffer with raw "
"sockets on Windows. The example requires administrator privileges to modify "
"the interface::"
msgstr ""

#: ../Doc/library/socket.rst:1793
msgid ""
"The next example shows how to use the socket interface to communicate to a "
"CAN network using the raw socket protocol. To use CAN with the broadcast "
"manager protocol instead, open a socket with::"
msgstr ""

#: ../Doc/library/socket.rst:1799
msgid ""
"After binding (:const:`CAN_RAW`) or connecting (:const:`CAN_BCM`) the "
"socket, you can use the :meth:`socket.send`, and the :meth:`socket.recv` "
"operations (and their counterparts) on the socket object as usual."
msgstr ""

#: ../Doc/library/socket.rst:1803
msgid "This last example might require special privileges::"
msgstr ""

#: ../Doc/library/socket.rst:1843
msgid ""
"Running an example several times with too small delay between executions, "
"could lead to this error::"
msgstr ""

#: ../Doc/library/socket.rst:1848
msgid ""
"This is because the previous execution has left the socket in a "
"``TIME_WAIT`` state, and can't be immediately reused."
msgstr ""

#: ../Doc/library/socket.rst:1851
msgid ""
"There is a :mod:`socket` flag to set, in order to prevent this, :data:"
"`socket.SO_REUSEADDR`::"
msgstr ""

#: ../Doc/library/socket.rst:1858
msgid ""
"the :data:`SO_REUSEADDR` flag tells the kernel to reuse a local socket in "
"``TIME_WAIT`` state, without waiting for its natural timeout to expire."
msgstr ""

#: ../Doc/library/socket.rst:1864
msgid ""
"For an introduction to socket programming (in C), see the following papers:"
msgstr ""

#: ../Doc/library/socket.rst:1866
msgid ""
"*An Introductory 4.3BSD Interprocess Communication Tutorial*, by Stuart "
"Sechrest"
msgstr ""

#: ../Doc/library/socket.rst:1868
msgid ""
"*An Advanced 4.3BSD Interprocess Communication Tutorial*, by Samuel J.  "
"Leffler et al,"
msgstr ""

#: ../Doc/library/socket.rst:1871
msgid ""
"both in the UNIX Programmer's Manual, Supplementary Documents 1 (sections "
"PS1:7 and PS1:8).  The platform-specific reference material for the various "
"socket-related system calls are also a valuable source of information on the "
"details of socket semantics.  For Unix, refer to the manual pages; for "
"Windows, see the WinSock (or Winsock 2) specification.  For IPv6-ready APIs, "
"readers may want to refer to :rfc:`3493` titled Basic Socket Interface "
"Extensions for IPv6."
msgstr ""
