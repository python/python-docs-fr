# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-02 22:11+0200\n"
"PO-Revision-Date: 2018-07-29 01:03+0200\n"
"Last-Translator: Julien Palard <julien@palard.fr>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/bisect.rst:2
msgid ":mod:`bisect` --- Array bisection algorithm"
msgstr ":mod:`bisect` — Algorithme de bissection de listes"

#: ../Doc/library/bisect.rst:10
msgid "**Source code:** :source:`Lib/bisect.py`"
msgstr "**Code source :** :source:`Lib/bisect.py`"

#: ../Doc/library/bisect.rst:14
msgid ""
"This module provides support for maintaining a list in sorted order without "
"having to sort the list after each insertion.  For long lists of items with "
"expensive comparison operations, this can be an improvement over the more "
"common approach.  The module is called :mod:`bisect` because it uses a basic "
"bisection algorithm to do its work.  The source code may be most useful as a "
"working example of the algorithm (the boundary conditions are already "
"right!)."
msgstr ""
"Ce module fournit des outils pour maintenir une liste triée sans avoir à la "
"trier à chaque insertion. Il pourrait être plus rapide que l'approche "
"classique pour de longues listes d'éléments dont les opérations de "
"comparaison sont lourdes. Le module se nomme :mod:`bisect` car il utilise "
"une approche simple par bissection. Si vous voulez un exemple de cet "
"algorithme, le mieux est d'aller lire le code source de ce module (les "
"conditions sur les limites y étant justes !)."

#: ../Doc/library/bisect.rst:21
msgid "The following functions are provided:"
msgstr "Les fonctions suivantes sont fournies :"

#: ../Doc/library/bisect.rst:26
msgid ""
"Locate the insertion point for *x* in *a* to maintain sorted order. The "
"parameters *lo* and *hi* may be used to specify a subset of the list which "
"should be considered; by default the entire list is used.  If *x* is already "
"present in *a*, the insertion point will be before (to the left of) any "
"existing entries.  The return value is suitable for use as the first "
"parameter to ``list.insert()`` assuming that *a* is already sorted."
msgstr ""
"Trouve le point d'insertion de *x* dans *a* permettant de conserver l'ordre. "
"Les paramètres *lo* et *hi* permettent de limiter les emplacements à "
"vérifier dans la liste, par défaut toute la liste est utilisée. Si *x* est "
"déjà présent dans *a*, le point d'insertion proposé sera avant (à gauche) de "
"l'entrée existante. Si *a* est déjà triée, la valeur renvoyée peut "
"directement être utilisée comme premier paramètre de ``list.insert()``."

#: ../Doc/library/bisect.rst:33
msgid ""
"The returned insertion point *i* partitions the array *a* into two halves so "
"that ``all(val < x for val in a[lo:i])`` for the left side and ``all(val >= "
"x for val in a[i:hi])`` for the right side."
msgstr ""
"Le point d'insertion renvoyé, *i*, coupe la liste *a* en deux moitiés telles "
"que, pour la moitié de gauche : ``all(val < x for val in a[lo:i])``, et pour "
"la partie de droite : ``all(val >= x for val in a[i:hi])``."

#: ../Doc/library/bisect.rst:40
msgid ""
"Similar to :func:`bisect_left`, but returns an insertion point which comes "
"after (to the right of) any existing entries of *x* in *a*."
msgstr ""
"Semblable à :func:`bisect_left`, mais renvoie un point d'insertion après (à "
"droite) d'une potentielle entrée existante valant *x* dans *a*."

#: ../Doc/library/bisect.rst:43
msgid ""
"The returned insertion point *i* partitions the array *a* into two halves so "
"that ``all(val <= x for val in a[lo:i])`` for the left side and ``all(val > "
"x for val in a[i:hi])`` for the right side."
msgstr ""
"Le point d'insertion renvoyé, *i*, coupe la liste *a* en deux moitiés telles "
"que, pour la moitié de gauche : ``all(val <= x for val in a[lo:i])`` et pour "
"la moitié de droite : ``all(val > x for val in a[i:hi])``."

#: ../Doc/library/bisect.rst:49
msgid ""
"Insert *x* in *a* in sorted order.  This is equivalent to ``a.insert(bisect."
"bisect_left(a, x, lo, hi), x)`` assuming that *a* is already sorted.  Keep "
"in mind that the O(log n) search is dominated by the slow O(n) insertion "
"step."
msgstr ""
"Insère *x* dans *a* en conservant le tri.  C'est l'équivalent de ``a."
"insert(bisect.bisect_left(a, x, lo, hi), x)``, tant que *a* est déjà triée. "
"Gardez en tête que bien que la recherche ne coûte que O(log n), l'insertion "
"coûte O(n)."

#: ../Doc/library/bisect.rst:57
msgid ""
"Similar to :func:`insort_left`, but inserting *x* in *a* after any existing "
"entries of *x*."
msgstr ""
"Similaire à :func:`insort_left`, mais en insérant *x* dans *a* après une "
"potentielle entrée existante égale à *x*."

#: ../Doc/library/bisect.rst:62
msgid ""
"`SortedCollection recipe <https://code.activestate.com/recipes/577197-"
"sortedcollection/>`_ that uses bisect to build a full-featured collection "
"class with straight-forward search methods and support for a key-function.  "
"The keys are precomputed to save unnecessary calls to the key function "
"during searches."
msgstr ""
"`SortedCollection recipe <https://code.activestate.com/recipes/577197-"
"sortedcollection/>`_ utilise le module *bisect* pour construire une classe "
"collection exposant des méthodes de recherches naturelles et gérant une "
"fonction clef.  Les clefs sont pré-calculées pour économiser des appels "
"inutiles à la fonction clef durant les recherches."

#: ../Doc/library/bisect.rst:70
msgid "Searching Sorted Lists"
msgstr "Chercher dans des listes triées"

#: ../Doc/library/bisect.rst:72
msgid ""
"The above :func:`bisect` functions are useful for finding insertion points "
"but can be tricky or awkward to use for common searching tasks. The "
"following five functions show how to transform them into the standard "
"lookups for sorted lists::"
msgstr ""
"Les fonctions :func:`bisect` ci-dessus sont utiles pour insérer des "
"éléments, mais peuvent être étranges et peu naturelles à utiliser pour "
"rechercher des éléments. Les cinq fonctions suivantes montrent comment les "
"transformer en recherche plus classique pour les listes triées ::"

#: ../Doc/library/bisect.rst:114
msgid "Other Examples"
msgstr "Autres Exemples"

#: ../Doc/library/bisect.rst:118
msgid ""
"The :func:`bisect` function can be useful for numeric table lookups. This "
"example uses :func:`bisect` to look up a letter grade for an exam score "
"(say) based on a set of ordered numeric breakpoints: 90 and up is an 'A', 80 "
"to 89 is a 'B', and so on::"
msgstr ""
"La fonction :func:`bisect` peut être utile pour des recherches dans des "
"tableaux de nombres. Cet exemple utilise :func:`bisect` pour rechercher la "
"note (sous forme de lettre) correspondant à un note sous forme de points, en "
"se basant sur une échelle prédéfinie : plus de 90 vaut 'A', de 80 à 89 vaut "
"'B', etc… ::"

#: ../Doc/library/bisect.rst:130
msgid ""
"Unlike the :func:`sorted` function, it does not make sense for the :func:"
"`bisect` functions to have *key* or *reversed* arguments because that would "
"lead to an inefficient design (successive calls to bisect functions would "
"not \"remember\" all of the previous key lookups)."
msgstr ""
"Contrairement à la fonction :func:`sorted`, ça n'aurait pas de sens pour la "
"fonction :func:`bisect` d'avoir un paramètre *key* ou *reversed*, qui "
"conduiraient à une utilisation inefficace (des appels successifs à la "
"fonction *bisect* n'auraient aucun moyen de se \"souvenir\" des recherches "
"de clef précédentes)."

#: ../Doc/library/bisect.rst:135
msgid ""
"Instead, it is better to search a list of precomputed keys to find the index "
"of the record in question::"
msgstr ""
"Il est préférable d'utiliser une liste de clefs pré-calculée pour chercher "
"l'index de l'enregistrement en question ::"
