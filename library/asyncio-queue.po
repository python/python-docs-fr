# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-12 18:59+0200\n"
"PO-Revision-Date: 2018-10-13 17:37+0200\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/asyncio-queue.rst:7
msgid "Queues"
msgstr ""

#: ../Doc/library/asyncio-queue.rst:9
msgid ""
"asyncio queues are designed to be similar to classes of the :mod:`queue` "
"module.  Although asyncio queues are not thread-safe, they are designed to "
"be used specifically in async/await code."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:13
msgid ""
"Note that methods of asyncio queues don't have a *timeout* parameter; use :"
"func:`asyncio.wait_for` function to do queue operations with a timeout."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:17
msgid "See also the `Examples`_ section below."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:20
msgid "Queue"
msgstr ""

#: ../Doc/library/asyncio-queue.rst:24
msgid "A first in, first out (FIFO) queue."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:26
msgid ""
"If *maxsize* is less than or equal to zero, the queue size is infinite.  If "
"it is an integer greater than ``0``, then ``await put()`` blocks when the "
"queue reaches *maxsize* until an item is removed by :meth:`get`."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:31
msgid ""
"Unlike the standard library threading :mod:`queue`, the size of the queue is "
"always known and can be returned by calling the :meth:`qsize` method."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:35
msgid "This class is :ref:`not thread safe <asyncio-multithreading>`."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:39
msgid "Number of items allowed in the queue."
msgstr "Nombre d'éléments autorisés dans la queue."

#: ../Doc/library/asyncio-queue.rst:43
msgid "Return ``True`` if the queue is empty, ``False`` otherwise."
msgstr "Renvoie ``True`` si la queue est vide, ``False`` sinon."

#: ../Doc/library/asyncio-queue.rst:47
msgid "Return ``True`` if there are :attr:`maxsize` items in the queue."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:49
msgid ""
"If the queue was initialized with ``maxsize=0`` (the default), then :meth:"
"`full()` never returns ``True``."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:54
msgid ""
"Remove and return an item from the queue. If queue is empty, wait until an "
"item is available."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:59
msgid ""
"Return an item if one is immediately available, else raise :exc:`QueueEmpty`."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:64
msgid "Block until all items in the queue have been received and processed."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:66
msgid ""
"The count of unfinished tasks goes up whenever an item is added to the "
"queue. The count goes down whenever a consumer thread calls :meth:"
"`task_done` to indicate that the item was retrieved and all work on it is "
"complete.  When the count of unfinished tasks drops to zero, :meth:`join` "
"unblocks."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:74
msgid ""
"Put an item into the queue. If the queue is full, wait until a free slot is "
"available before adding the item."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:79
msgid "Put an item into the queue without blocking."
msgstr "Ajoute un élément dans la queue sans bloquer."

#: ../Doc/library/asyncio-queue.rst:81
msgid "If no free slot is immediately available, raise :exc:`QueueFull`."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:85
msgid "Return the number of items in the queue."
msgstr "Renvoie le nombre d'éléments dans la queue."

#: ../Doc/library/asyncio-queue.rst:89
msgid "Indicate that a formerly enqueued task is complete."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:91
msgid ""
"Used by queue consumers. For each :meth:`~Queue.get` used to fetch a task, a "
"subsequent call to :meth:`task_done` tells the queue that the processing on "
"the task is complete."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:95
msgid ""
"If a :meth:`join` is currently blocking, it will resume when all items have "
"been processed (meaning that a :meth:`task_done` call was received for every "
"item that had been :meth:`~Queue.put` into the queue)."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:100
msgid ""
"Raises :exc:`ValueError` if called more times than there were items placed "
"in the queue."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:105
msgid "Priority Queue"
msgstr "File de priorité"

#: ../Doc/library/asyncio-queue.rst:109
msgid ""
"A variant of :class:`Queue`; retrieves entries in priority order (lowest "
"first)."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:112
msgid "Entries are typically tuples of the form ``(priority_number, data)``."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:117
msgid "LIFO Queue"
msgstr ""

#: ../Doc/library/asyncio-queue.rst:121
msgid ""
"A variant of :class:`Queue` that retrieves most recently added entries first "
"(last in, first out)."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:126
msgid "Exceptions"
msgstr "Exceptions"

#: ../Doc/library/asyncio-queue.rst:130
msgid ""
"This exception is raised when the :meth:`~Queue.get_nowait` method is called "
"on an empty queue."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:136
msgid ""
"Exception raised when the :meth:`~Queue.put_nowait` method is called on a "
"queue that has reached its *maxsize*."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:141
msgid "Examples"
msgstr "Exemples"

#: ../Doc/library/asyncio-queue.rst:145
msgid ""
"Queues can be used to distribute workload between several concurrent tasks::"
msgstr ""

#~ msgid ":class:`Queue`"
#~ msgstr ":class:`Queue`"

#~ msgid ":class:`PriorityQueue`"
#~ msgstr ":class:`PriorityQueue`"

#~ msgid ":class:`LifoQueue`"
#~ msgstr ":class:`LifoQueue`"

#~ msgid "New :meth:`join` and :meth:`task_done` methods."
#~ msgstr "Les nouvelles méthodes :meth:`join` et :meth:`task_done`."

#~ msgid "This method is a :ref:`coroutine <coroutine>`."
#~ msgstr "Cette méthode est une :ref:`coroutine <coroutine>`."

#~ msgid "The :meth:`empty` method."
#~ msgstr "La méthode :meth:`empty`."

#~ msgid "Remove and return an item from the queue."
#~ msgstr "Supprime et donne un élément de la queue."

#~ msgid "The :meth:`full` method."
#~ msgstr "La méthode :meth:`full`."
