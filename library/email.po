# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-24 09:01+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: library/email.rst:2
msgid ":mod:`email` --- An email and MIME handling package"
msgstr ":mod:`email` — Un paquet de gestion des e-mails et MIME"

#: library/email.rst:11
msgid "**Source code:** :source:`Lib/email/__init__.py`"
msgstr "**Code source:** :source:`Lib/email/__init__.py`"

#: library/email.rst:15
msgid ""
"The :mod:`email` package is a library for managing email messages.  It is "
"specifically *not* designed to do any sending of email messages to SMTP (:"
"rfc:`2821`), NNTP, or other servers; those are functions of modules such as :"
"mod:`smtplib` and :mod:`nntplib`.  The :mod:`email` package attempts to be "
"as RFC-compliant as possible, supporting :rfc:`5233` and :rfc:`6532`, as "
"well as such MIME-related RFCs as :rfc:`2045`, :rfc:`2046`, :rfc:`2047`, :"
"rfc:`2183`, and :rfc:`2231`."
msgstr ""
"Le paquet :mod:`email` est une bibliothèque pour gérer les e-mails. Il est "
"spécifiquement conçu pour ne pas gérer les envois d'e-mails vers SMTP (:rfc:"
"`2821`), NNTP, ou autres serveurs ; ces fonctions sont du ressort "
"des modules comme :mod:`smtplib` et :mod:`nntplib`. Le paquet :mod:`email` "
"tente de respecter les RFC autant que possible, il gère :rfc:`5233` et :rfc:"
"`6532`, ainsi que les RFCs en rapport avec les MIME comme :rfc:`2045`, :rfc:"
"`2046`, :rfc:`2047`, :rfc:`2183`, et :rfc:`2231`."

#: library/email.rst:23
msgid ""
"The overall structure of the email package can be divided into three major "
"components, plus a fourth component that controls the behavior of the other "
"components."
msgstr ""
"Ce paquet peut être divisé entre trois composants majeurs, et un quatrième "
"composant qui contrôle le comportement des trois autres."

#: library/email.rst:27
msgid ""
"The central component of the package is an \"object model\" that represents "
"email messages.  An application interacts with the package primarily through "
"the object model interface defined in the :mod:`~email.message` sub-module.  "
"The application can use this API to ask questions about an existing email, "
"to construct a new email, or to add or remove email subcomponents that "
"themselves use the same object model interface.  That is, following the "
"nature of email messages and their MIME subcomponents, the email object "
"model is a tree structure of objects that all provide the :class:`~email."
"message.EmailMessage` API."
msgstr ""
"Le composant central du paquet est un \"modèle d'objet\" qui représente les "
"messages. Une application interagit avec le paquet, dans un premier temps, à "
"travers l'interface de modèle d'objet définie dans le sous-module :mod:"
"`~email.message`. L'application peut utiliser cette API pour poser des "
"questions à propos d'un mail existant, pour créer un nouvel e-mail, ou "
"ajouter ou retirer des sous-composants d'e-mail qui utilisent la même "
"interface de modèle d'objet. Suivant la nature des messages et leurs sous-"
"composants MIME, le modèle d'objet d'e-mail est une structure arborescente "
"d'objets qui fournit tout à l'API de :class:`~email.message.EmailMessage`."

#: library/email.rst:37
msgid ""
"The other two major components of the package are the :mod:`~email.parser` "
"and the :mod:`~email.generator`.  The parser takes the serialized version of "
"an email message (a stream of bytes) and converts it into a tree of :class:"
"`~email.message.EmailMessage` objects.  The generator takes an :class:"
"`~email.message.EmailMessage` and turns it back into a serialized byte "
"stream.  (The parser and generator also handle streams of text characters, "
"but this usage is discouraged as it is too easy to end up with messages that "
"are not valid in one way or another.)"
msgstr ""
"Les deux autres composants majeurs de ce paquet sont l'analyseur (:mod:"
"`~email.parser`) et le générateur (:mod:`~email.generator`). L'analyseur "
"prend la version sérialisée d'un e-mail (un flux d'octets) et le convertit "
"en une arborescence d'objets :class:`~email.message.EmailMessage`. Le "
"générateur prend un objet :class:`~email.message.EmailMessage` et le "
"retransforme en un flux d'octets sérialisé (l'analyseur et le générateur "
"gèrent aussi des suites de caractères textuels, mais cette utilisation est "
"déconseillée car il est très facile de finir avec des messages invalides "
"d'une manière ou d'une autre)."

#: library/email.rst:46
msgid ""
"The control component is the :mod:`~email.policy` module.  Every :class:"
"`~email.message.EmailMessage`, every :mod:`~email.generator`, and every :mod:"
"`~email.parser` has an associated :mod:`~email.policy` object that controls "
"its behavior.  Usually an application only needs to specify the policy when "
"an :class:`~email.message.EmailMessage` is created, either by directly "
"instantiating an :class:`~email.message.EmailMessage`  to create a new "
"email, or by parsing an input stream using a :mod:`~email.parser`.  But the "
"policy can be changed when the message is serialized using a :mod:`~email."
"generator`. This allows, for example, a generic email message to be parsed "
"from disk, but to serialize it using standard SMTP settings when sending it "
"to an email server."
msgstr ""
"Le composant de contrôle est le module :mod:`~email.policy`. Chaque :class:"
"`~email.message.EmailMessage`, chaque :mod:`~email.generator` et chaque :mod:"
"`~email.parser` possède un objet associé :mod:`~email.policy` qui contrôle "
"son comportement. Habituellement une application n'a besoin de spécifier la "
"politique que quand un :class:`~email.message.EmailMessage` est créé, soit "
"en instanciant directement un :class:`~email.message.EmailMessage` pour "
"créer un nouvel e-mail, soit lors de l'analyse d'un flux entrant en "
"utilisant un :mod:`~email.parser`. Mais la politique peut être changée quand "
"le message est sérialisé en utilisant un :mod:`~email.generator`. Cela "
"permet, par exemple, d'analyser un message e-mail générique du disque, puis "
"de le sérialiser en utilisant une configuration SMTP standard quand on "
"l'envoie vers un serveur d'e-mail."

#: library/email.rst:58
msgid ""
"The email package does its best to hide the details of the various governing "
"RFCs from the application.  Conceptually the application should be able to "
"treat the email message as a structured tree of unicode text and binary "
"attachments, without having to worry about how these are represented when "
"serialized.  In practice, however, it is often necessary to be aware of at "
"least some of the rules governing MIME messages and their structure, "
"specifically the names and nature of the MIME \"content types\" and how they "
"identify multipart documents.  For the most part this knowledge should only "
"be required for more complex applications, and even then it should only be "
"the high level structure in question, and not the details of how those "
"structures are represented.  Since MIME content types are used widely in "
"modern internet software (not just email), this will be a familiar concept "
"to many programmers."
msgstr ""
"Le paquet *email* fait son maximum pour cacher les détails des différentes "
"RFCs de référence à l'application. Conceptuellement, l'application doit être "
"capable de traiter l'e-mail comme une arborescence structurée de texte "
"Unicode et de pièces jointes binaires, sans avoir à se préoccuper de leur "
"représentation sérialisée. Dans la pratique, cependant, il est souvent "
"nécessaire d'être conscient d'au moins quelques règles relatives aux "
"messages MIME et à leur structure, en particulier les noms et natures des "
"\"types de contenus\" et comment ils identifient les documents à plusieurs "
"parties. Pour la plupart, cette connaissance devrait seulement être "
"nécessaire pour des applications plus complexes, et même là, il devrait être "
"question des structures de haut niveau et non des détails sur la manière "
"dont elles sont représentées. Comme les types de contenus MIME sont "
"couramment utilisés dans les logiciels internet modernes (et non uniquement "
"les e-mails), les développeurs sont généralement familiers de ce concept."

#: library/email.rst:71
msgid ""
"The following sections describe the functionality of the :mod:`email` "
"package. We start with the :mod:`~email.message` object model, which is the "
"primary interface an application will use, and follow that with the :mod:"
"`~email.parser` and :mod:`~email.generator` components.  Then we cover the :"
"mod:`~email.policy` controls, which completes the treatment of the main "
"components of the library."
msgstr ""
"La section suivante décrit les fonctionnalités du paquet :mod:`email`. Nous "
"commençons avec le modèle d'objet :mod:`~email.message`, qui est la "
"principale interface qu'une application utilise, et continuons avec les "
"composants :mod:`~email.parser` et :mod:`~email.generator`. Ensuite, nous "
"couvrons les contrôles :mod:`~email.policy`, qui complètent le traitement "
"des principaux composants de la bibliothèque."

#: library/email.rst:78
msgid ""
"The next three sections cover the exceptions the package may raise and the "
"defects (non-compliance with the RFCs) that the :mod:`~email.parser` may "
"detect.  Then we cover the :mod:`~email.headerregistry` and the :mod:`~email."
"contentmanager` sub-components, which provide tools for doing more detailed "
"manipulation of headers and payloads, respectively.  Both of these "
"components contain features relevant to consuming and producing non-trivial "
"messages, but also document their extensibility APIs, which will be of "
"interest to advanced applications."
msgstr ""
"Les trois prochaines sections couvrent les exceptions que le paquet peut "
"rencontrer et les imperfections (non-respect des RFCs) que le module :mod:"
"`~email.parser` peut détecter. Ensuite nous couvrons les sous-composants :"
"mod:`~email.headerregistry` et :mod:`~email.contentmanager`, qui fournissent "
"des outils pour faire des manipulations plus détaillées des en-têtes et du "
"contenu, respectivement. Les deux composants contiennent des fonctionnalités "
"adaptées pour traiter et produire des messages qui sortent de l'ordinaire, "
"et elles documentent aussi leurs API pour pouvoir les étendre, ce qui ne "
"manquera pas d'intéresser les applications avancées."

#: library/email.rst:87
msgid ""
"Following those is a set of examples of using the fundamental parts of the "
"APIs covered in the preceding sections."
msgstr ""
"Ci-dessous se trouve un ensemble d'exemples d'utilisations des éléments "
"fondamentaux des API couvertes dans les sections précédentes."

#: library/email.rst:90
msgid ""
"The foregoing represent the modern (unicode friendly) API of the email "
"package. The remaining sections, starting with the :class:`~email.message."
"Message` class, cover the legacy :data:`~email.policy.compat32` API that "
"deals much more directly with the details of how email messages are "
"represented.  The :data:`~email.policy.compat32` API does *not* hide the "
"details of the RFCs from the application, but for applications that need to "
"operate at that level, they can be useful tools.  This documentation is also "
"relevant for applications that are still using the :mod:`~email.policy."
"compat32` API for backward compatibility reasons."
msgstr ""
"Ce que nous venons d'aborder constitue l'API moderne (compatible Unicode) du "
"paquet *email*. Les sections restantes, commençant par la classe :class:"
"`~email.message.Message`, couvrent l'API héritée :data:`~email.policy."
"compat32` qui traite beaucoup plus directement des détails sur la manière "
"dont les e-mails sont représentés. L'API :data:`~email.policy.compat32` ne "
"cache *pas* les détails des RFCs à l'application, mais pour les applications "
"qui requièrent d'opérer à ce niveau, elle peut être un outil pratique. Cette "
"documentation est aussi pertinente pour les applications qui utilisent "
"toujours l'API :mod:`~email.policy.compat32` pour des raisons de "
"rétrocompatibilité."

#: library/email.rst:100
msgid ""
"Docs reorganized and rewritten to promote the new :class:`~email.message."
"EmailMessage`/:class:`~email.policy.EmailPolicy` API."
msgstr ""
"Documents réorganisés et réécrits pour promouvoir la nouvelle API :class:"
"`~email.message.EmailMessage`/:class:`~email.policy.EmailPolicy`."

#: library/email.rst:105
msgid "Contents of the :mod:`email` package documentation:"
msgstr "Contenus de la documentation du paquet :mod:`email` :"

#: library/email.rst:120
msgid "Legacy API:"
msgstr "API héritée :"

#: library/email.rst:136
msgid "Module :mod:`smtplib`"
msgstr "Module :mod:`smtplib`"

#: library/email.rst:136
msgid "SMTP (Simple Mail Transport Protocol) client"
msgstr "Client SMTP (*Simple Mail Transport Protocol*)"

#: library/email.rst:139
msgid "Module :mod:`poplib`"
msgstr "Module :mod:`poplib`"

#: library/email.rst:139
msgid "POP (Post Office Protocol) client"
msgstr "Client POP (*Post Office Protocol*)"

#: library/email.rst:142
msgid "Module :mod:`imaplib`"
msgstr "Module :mod:`imaplib`"

#: library/email.rst:142
msgid "IMAP (Internet Message Access Protocol) client"
msgstr "Client IMAP (*Internet Message Access Protocol*)"

#: library/email.rst:145
msgid "Module :mod:`nntplib`"
msgstr "Module :mod:`nntplib`"

#: library/email.rst:145
msgid "NNTP (Net News Transport Protocol) client"
msgstr "Client NNTP (*Net News Transport Protocol*)"

#: library/email.rst:149
msgid "Module :mod:`mailbox`"
msgstr "Module :mod:`mailbox`"

#: library/email.rst:148
msgid ""
"Tools for creating, reading, and managing collections of messages on disk "
"using a variety standard formats."
msgstr ""
"Outils pour créer, lire et gérer des messages regroupés sur disque en "
"utilisant des formats standards variés."

#: library/email.rst:151
msgid "Module :mod:`smtpd`"
msgstr "Module :mod:`smtpd`"

#: library/email.rst:152
msgid "SMTP server framework (primarily useful for testing)"
msgstr "Cadriciel pour serveur SMTP (principalement utile pour tester)"
