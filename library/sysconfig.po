# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-27 10:27+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: library/sysconfig.rst:2
msgid ""
":mod:`sysconfig` --- Provide access to Python's configuration information"
msgstr ""

#: library/sysconfig.rst:12
msgid "**Source code:** :source:`Lib/sysconfig.py`"
msgstr ""

#: library/sysconfig.rst:19
msgid ""
"The :mod:`sysconfig` module provides access to Python's configuration "
"information like the list of installation paths and the configuration "
"variables relevant for the current platform."
msgstr ""

#: library/sysconfig.rst:24
msgid "Configuration variables"
msgstr ""

#: library/sysconfig.rst:26
msgid ""
"A Python distribution contains a :file:`Makefile` and a :file:`pyconfig.h` "
"header file that are necessary to build both the Python binary itself and "
"third-party C extensions compiled using :mod:`distutils`."
msgstr ""

#: library/sysconfig.rst:30
msgid ""
":mod:`sysconfig` puts all variables found in these files in a dictionary "
"that can be accessed using :func:`get_config_vars` or :func:`get_config_var`."
msgstr ""

#: library/sysconfig.rst:33
msgid "Notice that on Windows, it's a much smaller set."
msgstr ""

#: library/sysconfig.rst:37
msgid ""
"With no arguments, return a dictionary of all configuration variables "
"relevant for the current platform."
msgstr ""

#: library/sysconfig.rst:40
msgid ""
"With arguments, return a list of values that result from looking up each "
"argument in the configuration variable dictionary."
msgstr ""

#: library/sysconfig.rst:43
msgid "For each argument, if the value is not found, return ``None``."
msgstr ""

#: library/sysconfig.rst:48
#, fuzzy
msgid ""
"Return the value of a single variable *name*. Equivalent to "
"``get_config_vars().get(name)``."
msgstr ""
"Retourne la valeur d'une seule variable.  C'est l'équivalent de "
"``get_config_vars().get(name)``."

#: library/sysconfig.rst:51
msgid "If *name* is not found, return ``None``."
msgstr ""

#: library/sysconfig.rst:53
#, fuzzy
msgid "Example of usage::"
msgstr "Exemples d'utilisation ::"

#: library/sysconfig.rst:66
msgid "Installation paths"
msgstr ""

#: library/sysconfig.rst:68
msgid ""
"Python uses an installation scheme that differs depending on the platform "
"and on the installation options.  These schemes are stored in :mod:"
"`sysconfig` under unique identifiers based on the value returned by :const:"
"`os.name`."
msgstr ""

#: library/sysconfig.rst:72
msgid ""
"Every new component that is installed using :mod:`distutils` or a Distutils-"
"based system will follow the same scheme to copy its file in the right "
"places."
msgstr ""

#: library/sysconfig.rst:76
msgid "Python currently supports six schemes:"
msgstr ""

#: library/sysconfig.rst:78
msgid ""
"*posix_prefix*: scheme for POSIX platforms like Linux or macOS.  This is the "
"default scheme used when Python or a component is installed."
msgstr ""

#: library/sysconfig.rst:80
msgid ""
"*posix_home*: scheme for POSIX platforms used when a *home* option is used "
"upon installation.  This scheme is used when a component is installed "
"through Distutils with a specific home prefix."
msgstr ""

#: library/sysconfig.rst:83
msgid ""
"*posix_user*: scheme for POSIX platforms used when a component is installed "
"through Distutils and the *user* option is used.  This scheme defines paths "
"located under the user home directory."
msgstr ""

#: library/sysconfig.rst:86
msgid "*nt*: scheme for NT platforms like Windows."
msgstr ""

#: library/sysconfig.rst:87
msgid "*nt_user*: scheme for NT platforms, when the *user* option is used."
msgstr ""

#: library/sysconfig.rst:88
msgid "*osx_framework_user*: scheme for macOS, when the *user* option is used."
msgstr ""

#: library/sysconfig.rst:90
msgid ""
"Each scheme is itself composed of a series of paths and each path has a "
"unique identifier.  Python currently uses eight paths:"
msgstr ""

#: library/sysconfig.rst:93
msgid ""
"*stdlib*: directory containing the standard Python library files that are "
"not platform-specific."
msgstr ""

#: library/sysconfig.rst:95
msgid ""
"*platstdlib*: directory containing the standard Python library files that "
"are platform-specific."
msgstr ""

#: library/sysconfig.rst:97
msgid "*platlib*: directory for site-specific, platform-specific files."
msgstr ""

#: library/sysconfig.rst:98
msgid "*purelib*: directory for site-specific, non-platform-specific files."
msgstr ""

#: library/sysconfig.rst:99
msgid "*include*: directory for non-platform-specific header files."
msgstr ""

#: library/sysconfig.rst:100
msgid "*platinclude*: directory for platform-specific header files."
msgstr ""

#: library/sysconfig.rst:101
msgid "*scripts*: directory for script files."
msgstr ""

#: library/sysconfig.rst:102
msgid "*data*: directory for data files."
msgstr ""

#: library/sysconfig.rst:104
msgid ":mod:`sysconfig` provides some functions to determine these paths."
msgstr ""

#: library/sysconfig.rst:108
msgid ""
"Return a tuple containing all schemes currently supported in :mod:"
"`sysconfig`."
msgstr ""

#: library/sysconfig.rst:114
msgid "Return the default scheme name for the current platform."
msgstr ""

#: library/sysconfig.rst:116
msgid ""
"This function was previously named ``_get_default_scheme()`` and considered "
"an implementation detail."
msgstr ""

#: library/sysconfig.rst:123
msgid ""
"Return a preferred scheme name for an installation layout specified by *key*."
msgstr ""

#: library/sysconfig.rst:125
msgid "*key* must be either ``\"prefix\"``, ``\"home\"``, or ``\"user\"``."
msgstr ""

#: library/sysconfig.rst:127
msgid ""
"The return value is a scheme name listed in :func:`get_scheme_names`. It can "
"be passed to :mod:`sysconfig` functions that take a *scheme* argument, such "
"as :func:`get_paths`."
msgstr ""

#: library/sysconfig.rst:136
msgid ""
"Return a dict containing preferred scheme names on the current platform. "
"Python implementers and redistributors may add their preferred schemes to "
"the ``_INSTALL_SCHEMES`` module-level global value, and modify this function "
"to return those scheme names, to e.g. provide different schemes for system "
"and language package managers to use, so packages installed by either do not "
"mix with those by the other."
msgstr ""

#: library/sysconfig.rst:143
msgid ""
"End users should not use this function, but :func:`get_default_scheme` and :"
"func:`get_preferred_scheme()` instead."
msgstr ""

#: library/sysconfig.rst:151
msgid ""
"Return a tuple containing all path names currently supported in :mod:"
"`sysconfig`."
msgstr ""

#: library/sysconfig.rst:157
msgid ""
"Return an installation path corresponding to the path *name*, from the "
"install scheme named *scheme*."
msgstr ""

#: library/sysconfig.rst:160
msgid ""
"*name* has to be a value from the list returned by :func:`get_path_names`."
msgstr ""

#: library/sysconfig.rst:162
msgid ""
":mod:`sysconfig` stores installation paths corresponding to each path name, "
"for each platform, with variables to be expanded.  For instance the *stdlib* "
"path for the *nt* scheme is: ``{base}/Lib``."
msgstr ""

#: library/sysconfig.rst:166
msgid ""
":func:`get_path` will use the variables returned by :func:`get_config_vars` "
"to expand the path.  All variables have default values for each platform so "
"one may call this function and get the default value."
msgstr ""

#: library/sysconfig.rst:170
msgid ""
"If *scheme* is provided, it must be a value from the list returned by :func:"
"`get_scheme_names`.  Otherwise, the default scheme for the current platform "
"is used."
msgstr ""

#: library/sysconfig.rst:174
msgid ""
"If *vars* is provided, it must be a dictionary of variables that will update "
"the dictionary return by :func:`get_config_vars`."
msgstr ""

#: library/sysconfig.rst:177
msgid ""
"If *expand* is set to ``False``, the path will not be expanded using the "
"variables."
msgstr ""

#: library/sysconfig.rst:180
msgid "If *name* is not found, raise a :exc:`KeyError`."
msgstr ""

#: library/sysconfig.rst:185
msgid ""
"Return a dictionary containing all installation paths corresponding to an "
"installation scheme. See :func:`get_path` for more information."
msgstr ""

#: library/sysconfig.rst:188
msgid ""
"If *scheme* is not provided, will use the default scheme for the current "
"platform."
msgstr ""

#: library/sysconfig.rst:191
msgid ""
"If *vars* is provided, it must be a dictionary of variables that will update "
"the dictionary used to expand the paths."
msgstr ""

#: library/sysconfig.rst:194
msgid "If *expand* is set to false, the paths will not be expanded."
msgstr ""

#: library/sysconfig.rst:196
msgid ""
"If *scheme* is not an existing scheme, :func:`get_paths` will raise a :exc:"
"`KeyError`."
msgstr ""

#: library/sysconfig.rst:201
msgid "Other functions"
msgstr "Autres fonctions"

#: library/sysconfig.rst:205
msgid ""
"Return the ``MAJOR.MINOR`` Python version number as a string.  Similar to "
"``'%d.%d' % sys.version_info[:2]``."
msgstr ""

#: library/sysconfig.rst:211
msgid "Return a string that identifies the current platform."
msgstr ""

#: library/sysconfig.rst:213
msgid ""
"This is used mainly to distinguish platform-specific build directories and "
"platform-specific built distributions.  Typically includes the OS name and "
"version and the architecture (as supplied by 'os.uname()'), although the "
"exact information included depends on the OS; e.g., on Linux, the kernel "
"version isn't particularly important."
msgstr ""

#: library/sysconfig.rst:219
msgid "Examples of returned values:"
msgstr "Exemples de valeurs renvoyées :"

#: library/sysconfig.rst:221
msgid "linux-i586"
msgstr "linux-i586"

#: library/sysconfig.rst:222
msgid "linux-alpha (?)"
msgstr "linux-alpha (?)"

#: library/sysconfig.rst:223
msgid "solaris-2.6-sun4u"
msgstr "solaris-2.6-sun4u"

#: library/sysconfig.rst:225
msgid "Windows will return one of:"
msgstr ""

#: library/sysconfig.rst:227
msgid "win-amd64 (64bit Windows on AMD64, aka x86_64, Intel64, and EM64T)"
msgstr ""

#: library/sysconfig.rst:228
msgid "win32 (all others - specifically, sys.platform is returned)"
msgstr ""

#: library/sysconfig.rst:230
msgid "macOS can return:"
msgstr ""

#: library/sysconfig.rst:232
msgid "macosx-10.6-ppc"
msgstr "macosx-10.6-ppc"

#: library/sysconfig.rst:233
msgid "macosx-10.4-ppc64"
msgstr "macosx-10.4-ppc64"

#: library/sysconfig.rst:234
msgid "macosx-10.3-i386"
msgstr "macosx-10.3-i386"

#: library/sysconfig.rst:235
msgid "macosx-10.4-fat"
msgstr "macosx-10.4-fat"

#: library/sysconfig.rst:237
msgid ""
"For other non-POSIX platforms, currently just returns :data:`sys.platform`."
msgstr ""

#: library/sysconfig.rst:242
msgid ""
"Return ``True`` if the running Python interpreter was built from source and "
"is being run from its built location, and not from a location resulting from "
"e.g. running ``make install`` or installing via a binary installer."
msgstr ""

#: library/sysconfig.rst:249
msgid "Parse a :file:`config.h`\\-style file."
msgstr ""

#: library/sysconfig.rst:251
msgid ""
"*fp* is a file-like object pointing to the :file:`config.h`\\-like file."
msgstr ""

#: library/sysconfig.rst:253
msgid ""
"A dictionary containing name/value pairs is returned.  If an optional "
"dictionary is passed in as the second argument, it is used instead of a new "
"dictionary, and updated with the values read in the file."
msgstr ""

#: library/sysconfig.rst:260
msgid "Return the path of :file:`pyconfig.h`."
msgstr ""

#: library/sysconfig.rst:264
msgid "Return the path of :file:`Makefile`."
msgstr ""

#: library/sysconfig.rst:268
msgid "Using :mod:`sysconfig` as a script"
msgstr ""

#: library/sysconfig.rst:270
msgid "You can use :mod:`sysconfig` as a script with Python's *-m* option:"
msgstr ""

#: library/sysconfig.rst:296
msgid ""
"This call will print in the standard output the information returned by :"
"func:`get_platform`, :func:`get_python_version`, :func:`get_path` and :func:"
"`get_config_vars`."
msgstr ""
