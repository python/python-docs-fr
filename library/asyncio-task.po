# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-03 16:57+0100\n"
"PO-Revision-Date: 2018-10-13 11:37+0200\n"
"Last-Translator: Julien Palard <julien@palard.fr>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/asyncio-task.rst:6
msgid "Coroutines and Tasks"
msgstr "Coroutines et tâches"

#: ../Doc/library/asyncio-task.rst:8
msgid ""
"This section outlines high-level asyncio APIs to work with coroutines and "
"Tasks."
msgstr ""

#: ../Doc/library/asyncio-task.rst:19 ../Doc/library/asyncio-task.rst:121
msgid "Coroutines"
msgstr "Coroutines"

#: ../Doc/library/asyncio-task.rst:21
msgid ""
"Coroutines declared with async/await syntax is the preferred way of writing "
"asyncio applications.  For example, the following snippet of code (requires "
"Python 3.7+) prints \"hello\", waits 1 second, and then prints \"world\"::"
msgstr ""

#: ../Doc/library/asyncio-task.rst:37
msgid ""
"Note that simply calling a coroutine will not schedule it to be executed::"
msgstr ""

#: ../Doc/library/asyncio-task.rst:43
msgid "To actually run a coroutine asyncio provides three main mechanisms:"
msgstr ""

#: ../Doc/library/asyncio-task.rst:45
msgid ""
"The :func:`asyncio.run` function to run the top-level entry point \"main()\" "
"function (see the above example.)"
msgstr ""

#: ../Doc/library/asyncio-task.rst:48
msgid ""
"Awaiting on a coroutine.  The following snippet of code will print \"hello\" "
"after waiting for 1 second, and then print \"world\" after waiting for "
"*another* 2 seconds::"
msgstr ""

#: ../Doc/library/asyncio-task.rst:69
msgid "Expected output::"
msgstr ""

#: ../Doc/library/asyncio-task.rst:76
msgid ""
"The :func:`asyncio.create_task` function to run coroutines concurrently as "
"asyncio :class:`Tasks <Task>`."
msgstr ""

#: ../Doc/library/asyncio-task.rst:79
msgid ""
"Let's modify the above example and run two ``say_after`` coroutines "
"*concurrently*::"
msgstr ""

#: ../Doc/library/asyncio-task.rst:98
msgid ""
"Note that expected output now shows that the snippet runs 1 second faster "
"than before::"
msgstr ""

#: ../Doc/library/asyncio-task.rst:110
msgid "Awaitables"
msgstr ""

#: ../Doc/library/asyncio-task.rst:112
msgid ""
"We say that an object is an **awaitable** object if it can be used in an :"
"keyword:`await` expression.  Many asyncio APIs are designed to accept "
"awaitables."
msgstr ""

#: ../Doc/library/asyncio-task.rst:116
msgid ""
"There are three main types of *awaitable* objects: **coroutines**, "
"**Tasks**, and **Futures**."
msgstr ""

#: ../Doc/library/asyncio-task.rst:122
msgid ""
"Python coroutines are *awaitables* and therefore can be awaited from other "
"coroutines::"
msgstr ""

#: ../Doc/library/asyncio-task.rst:143
msgid ""
"In this documentation the term \"coroutine\" can be used for two closely "
"related concepts:"
msgstr ""

#: ../Doc/library/asyncio-task.rst:146
msgid "a *coroutine function*: an :keyword:`async def` function;"
msgstr ""

#: ../Doc/library/asyncio-task.rst:148
msgid ""
"a *coroutine object*: an object returned by calling a *coroutine function*."
msgstr ""

#: ../Doc/library/asyncio-task.rst:151
msgid ""
"asyncio also supports legacy :ref:`generator-based "
"<asyncio_generator_based_coro>` coroutines."
msgstr ""

#: ../Doc/library/asyncio-task.rst:156
msgid "Tasks"
msgstr "Tâches"

#: ../Doc/library/asyncio-task.rst:157
msgid "*Tasks* are used to schedule coroutines *concurrently*."
msgstr ""

#: ../Doc/library/asyncio-task.rst:159
msgid ""
"When a coroutine is wrapped into a *Task* with functions like :func:`asyncio."
"create_task` the coroutine is automatically scheduled to run soon::"
msgstr ""

#: ../Doc/library/asyncio-task.rst:181
msgid "Futures"
msgstr ""

#: ../Doc/library/asyncio-task.rst:182
msgid ""
"A :class:`Future` is a special **low-level** awaitable object that "
"represents an **eventual result** of an asynchronous operation."
msgstr ""

#: ../Doc/library/asyncio-task.rst:185
msgid ""
"When a Future object is *awaited* it means that the coroutine will wait "
"until the Future is resolved in some other place."
msgstr ""

#: ../Doc/library/asyncio-task.rst:188
msgid ""
"Future objects in asyncio are needed to allow callback-based code to be used "
"with async/await."
msgstr ""

#: ../Doc/library/asyncio-task.rst:191
msgid ""
"Normally **there is no need** to create Future objects at the application "
"level code."
msgstr ""

#: ../Doc/library/asyncio-task.rst:194
msgid ""
"Future objects, sometimes exposed by libraries and some asyncio APIs, can be "
"awaited::"
msgstr ""

#: ../Doc/library/asyncio-task.rst:206
msgid ""
"A good example of a low-level function that returns a Future object is :meth:"
"`loop.run_in_executor`."
msgstr ""

#: ../Doc/library/asyncio-task.rst:211
msgid "Running an asyncio Program"
msgstr ""

#: ../Doc/library/asyncio-task.rst:215
msgid ""
"This function runs the passed coroutine, taking care of managing the asyncio "
"event loop and *finalizing asynchronous generators*."
msgstr ""

#: ../Doc/library/asyncio-task.rst:219
msgid ""
"This function cannot be called when another asyncio event loop is running in "
"the same thread."
msgstr ""

#: ../Doc/library/asyncio-task.rst:222
msgid "If *debug* is ``True``, the event loop will be run in debug mode."
msgstr ""

#: ../Doc/library/asyncio-task.rst:224
msgid ""
"This function always creates a new event loop and closes it at the end.  It "
"should be used as a main entry point for asyncio programs, and should "
"ideally only be called once."
msgstr ""

#: ../Doc/library/asyncio-task.rst:228
msgid ""
"**Important:** this function has been added to asyncio in Python 3.7 on a :"
"term:`provisional basis <provisional api>`."
msgstr ""

#: ../Doc/library/asyncio-task.rst:234
msgid "Creating Tasks"
msgstr ""

#: ../Doc/library/asyncio-task.rst:238
msgid ""
"Wrap the *coro* :ref:`coroutine <coroutine>` into a :class:`Task` and "
"schedule its execution.  Return the Task object."
msgstr ""

#: ../Doc/library/asyncio-task.rst:241
msgid ""
"The task is executed in the loop returned by :func:`get_running_loop`, :exc:"
"`RuntimeError` is raised if there is no running loop in current thread."
msgstr ""

#: ../Doc/library/asyncio-task.rst:245
msgid ""
"This function has been **added in Python 3.7**.  Prior to Python 3.7, the "
"low-level :func:`asyncio.ensure_future` function can be used instead::"
msgstr ""

#: ../Doc/library/asyncio-task.rst:264
msgid "Sleeping"
msgstr ""

#: ../Doc/library/asyncio-task.rst:268
msgid "Block for *delay* seconds."
msgstr ""

#: ../Doc/library/asyncio-task.rst:270
msgid ""
"If *result* is provided, it is returned to the caller when the coroutine "
"completes."
msgstr ""

#: ../Doc/library/asyncio-task.rst:273
msgid ""
"``sleep()`` always suspends the current task, allowing other tasks to run."
msgstr ""

#: ../Doc/library/asyncio-task.rst:276 ../Doc/library/asyncio-task.rst:434
#: ../Doc/library/asyncio-task.rst:486
msgid ""
"The *loop* argument is deprecated and scheduled for removal in Python 3.10."
msgstr ""

#: ../Doc/library/asyncio-task.rst:281
msgid ""
"Example of coroutine displaying the current date every second for 5 seconds::"
msgstr ""
"Exemple d'une coroutine affichant la date toutes les secondes pendant 5 "
"secondes ::"

#: ../Doc/library/asyncio-task.rst:300
msgid "Running Tasks Concurrently"
msgstr ""

#: ../Doc/library/asyncio-task.rst:304
msgid ""
"Run :ref:`awaitable objects <asyncio-awaitables>` in the *aws* sequence "
"*concurrently*."
msgstr ""

#: ../Doc/library/asyncio-task.rst:307
msgid ""
"If any awaitable in *aws* is a coroutine, it is automatically scheduled as a "
"Task."
msgstr ""

#: ../Doc/library/asyncio-task.rst:310
msgid ""
"If all awaitables are completed successfully, the result is an aggregate "
"list of returned values.  The order of result values corresponds to the "
"order of awaitables in *aws*."
msgstr ""

#: ../Doc/library/asyncio-task.rst:314
msgid ""
"If *return_exceptions* is ``False`` (default), the first raised exception is "
"immediately propagated to the task that awaits on ``gather()``.  Other "
"awaitables in the *aws* sequence **won't be cancelled** and will continue to "
"run."
msgstr ""

#: ../Doc/library/asyncio-task.rst:319
msgid ""
"If *return_exceptions* is ``True``, exceptions are treated the same as "
"successful results, and aggregated in the result list."
msgstr ""

#: ../Doc/library/asyncio-task.rst:322
msgid ""
"If ``gather()`` is *cancelled*, all submitted awaitables (that have not "
"completed yet) are also *cancelled*."
msgstr ""

#: ../Doc/library/asyncio-task.rst:325
msgid ""
"If any Task or Future from the *aws* sequence is *cancelled*, it is treated "
"as if it raised :exc:`CancelledError` -- the ``gather()`` call is **not** "
"cancelled in this case.  This is to prevent the cancellation of one "
"submitted Task/Future to cause other Tasks/Futures to be cancelled."
msgstr ""

#: ../Doc/library/asyncio-task.rst:333 ../Doc/library/asyncio-task.rst:439
#: ../Doc/library/asyncio-task.rst:561
msgid "Example::"
msgstr "Exemple ::"

#: ../Doc/library/asyncio-task.rst:367
msgid ""
"If the *gather* itself is cancelled, the cancellation is propagated "
"regardless of *return_exceptions*."
msgstr ""

#: ../Doc/library/asyncio-task.rst:373
msgid "Shielding From Cancellation"
msgstr "Protection contre l'annulation"

#: ../Doc/library/asyncio-task.rst:377
msgid ""
"Protect an :ref:`awaitable object <asyncio-awaitables>` from being :meth:"
"`cancelled <Task.cancel>`."
msgstr ""

#: ../Doc/library/asyncio-task.rst:380 ../Doc/library/asyncio-task.rst:417
msgid "If *aw* is a coroutine it is automatically scheduled as a Task."
msgstr ""

#: ../Doc/library/asyncio-task.rst:382
msgid "The statement::"
msgstr "L'instruction : ::"

#: ../Doc/library/asyncio-task.rst:386
msgid "is equivalent to::"
msgstr "est équivalente à ::"

#: ../Doc/library/asyncio-task.rst:390
msgid ""
"*except* that if the coroutine containing it is cancelled, the Task running "
"in ``something()`` is not cancelled.  From the point of view of "
"``something()``, the cancellation did not happen. Although its caller is "
"still cancelled, so the \"await\" expression still raises a :exc:"
"`CancelledError`."
msgstr ""

#: ../Doc/library/asyncio-task.rst:396
msgid ""
"If ``something()`` is cancelled by other means (i.e. from within itself) "
"that would also cancel ``shield()``."
msgstr ""

#: ../Doc/library/asyncio-task.rst:399
msgid ""
"If it is desired to completely ignore cancellation (not recommended) the "
"``shield()`` function should be combined with a try/except clause, as "
"follows::"
msgstr ""

#: ../Doc/library/asyncio-task.rst:410
msgid "Timeouts"
msgstr "Délais d'attente"

#: ../Doc/library/asyncio-task.rst:414
msgid ""
"Wait for the *aw* :ref:`awaitable <asyncio-awaitables>` to complete with a "
"timeout."
msgstr ""

#: ../Doc/library/asyncio-task.rst:419
msgid ""
"*timeout* can either be ``None`` or a float or int number of seconds to wait "
"for.  If *timeout* is ``None``, block until the future completes."
msgstr ""

#: ../Doc/library/asyncio-task.rst:423
msgid ""
"If a timeout occurs, it cancels the task and raises :exc:`asyncio."
"TimeoutError`."
msgstr ""

#: ../Doc/library/asyncio-task.rst:426
msgid ""
"To avoid the task :meth:`cancellation <Task.cancel>`, wrap it in :func:"
"`shield`."
msgstr ""

#: ../Doc/library/asyncio-task.rst:429
msgid ""
"The function will wait until the future is actually cancelled, so the total "
"wait time may exceed the *timeout*."
msgstr ""

#: ../Doc/library/asyncio-task.rst:432
msgid "If the wait is cancelled, the future *aw* is also cancelled."
msgstr ""

#: ../Doc/library/asyncio-task.rst:459
msgid ""
"When *aw* is cancelled due to a timeout, ``wait_for`` waits for *aw* to be "
"cancelled.  Previously, it raised :exc:`asyncio.TimeoutError` immediately."
msgstr ""

#: ../Doc/library/asyncio-task.rst:466
msgid "Waiting Primitives"
msgstr ""

#: ../Doc/library/asyncio-task.rst:471
msgid ""
"Run :ref:`awaitable objects <asyncio-awaitables>` in the *aws* set "
"concurrently and block until the condition specified by *return_when*."
msgstr ""

#: ../Doc/library/asyncio-task.rst:475
msgid ""
"If any awaitable in *aws* is a coroutine, it is automatically scheduled as a "
"Task.  Passing coroutines objects to ``wait()`` directly is deprecated as it "
"leads to :ref:`confusing behavior <asyncio_example_wait_coroutine>`."
msgstr ""

#: ../Doc/library/asyncio-task.rst:480
msgid "Returns two sets of Tasks/Futures: ``(done, pending)``."
msgstr ""

#: ../Doc/library/asyncio-task.rst:482
msgid "Usage::"
msgstr "Utilisation ::"

#: ../Doc/library/asyncio-task.rst:489
msgid ""
"*timeout* (a float or int), if specified, can be used to control the maximum "
"number of seconds to wait before returning."
msgstr ""

#: ../Doc/library/asyncio-task.rst:492
msgid ""
"Note that this function does not raise :exc:`asyncio.TimeoutError`. Futures "
"or Tasks that aren't done when the timeout occurs are simply returned in the "
"second set."
msgstr ""

#: ../Doc/library/asyncio-task.rst:496
msgid ""
"*return_when* indicates when this function should return.  It must be one of "
"the following constants:"
msgstr ""

#: ../Doc/library/asyncio-task.rst:502
msgid "Constant"
msgstr "Constante"

#: ../Doc/library/asyncio-task.rst:502
msgid "Description"
msgstr "Description"

#: ../Doc/library/asyncio-task.rst:504
msgid ":const:`FIRST_COMPLETED`"
msgstr ":const:`FIRST_COMPLETED`"

#: ../Doc/library/asyncio-task.rst:504
msgid "The function will return when any future finishes or is cancelled."
msgstr ""

#: ../Doc/library/asyncio-task.rst:507
msgid ":const:`FIRST_EXCEPTION`"
msgstr ":const:`FIRST_EXCEPTION`"

#: ../Doc/library/asyncio-task.rst:507
msgid ""
"The function will return when any future finishes by raising an exception.  "
"If no future raises an exception then it is equivalent to :const:"
"`ALL_COMPLETED`."
msgstr ""

#: ../Doc/library/asyncio-task.rst:513
msgid ":const:`ALL_COMPLETED`"
msgstr ":const:`ALL_COMPLETED`"

#: ../Doc/library/asyncio-task.rst:513
msgid "The function will return when all futures finish or are cancelled."
msgstr ""

#: ../Doc/library/asyncio-task.rst:517
msgid ""
"Unlike :func:`~asyncio.wait_for`, ``wait()`` does not cancel the futures "
"when a timeout occurs."
msgstr ""

#: ../Doc/library/asyncio-task.rst:523
msgid ""
"``wait()`` schedules coroutines as Tasks automatically and later returns "
"those implicitly created Task objects in ``(done, pending)`` sets.  "
"Therefore the following code won't work as expected::"
msgstr ""

#: ../Doc/library/asyncio-task.rst:536
msgid "Here is how the above snippet can be fixed::"
msgstr ""

#: ../Doc/library/asyncio-task.rst:547
msgid "Passing coroutine objects to ``wait()`` directly is deprecated."
msgstr ""

#: ../Doc/library/asyncio-task.rst:553
msgid ""
"Run :ref:`awaitable objects <asyncio-awaitables>` in the *aws* set "
"concurrently.  Return an iterator of :class:`Future` objects. Each Future "
"object returned represents the earliest result from the set of the remaining "
"awaitables."
msgstr ""

#: ../Doc/library/asyncio-task.rst:558
msgid ""
"Raises :exc:`asyncio.TimeoutError` if the timeout occurs before all Futures "
"are done."
msgstr ""

#: ../Doc/library/asyncio-task.rst:569
msgid "Scheduling From Other Threads"
msgstr ""

#: ../Doc/library/asyncio-task.rst:573
msgid "Submit a coroutine to the given event loop.  Thread-safe."
msgstr ""

#: ../Doc/library/asyncio-task.rst:575
msgid ""
"Return a :class:`concurrent.futures.Future` to wait for the result from "
"another OS thread."
msgstr ""

#: ../Doc/library/asyncio-task.rst:578
msgid ""
"This function is meant to be called from a different OS thread than the one "
"where the event loop is running.  Example::"
msgstr ""

#: ../Doc/library/asyncio-task.rst:590
msgid ""
"If an exception is raised in the coroutine, the returned Future will be "
"notified.  It can also be used to cancel the task in the event loop::"
msgstr ""

#: ../Doc/library/asyncio-task.rst:604
msgid ""
"See the :ref:`concurrency and multithreading <asyncio-multithreading>` "
"section of the documentation."
msgstr ""

#: ../Doc/library/asyncio-task.rst:607
msgid ""
"Unlike other asyncio functions this function requires the *loop* argument to "
"be passed explicitly."
msgstr ""

#: ../Doc/library/asyncio-task.rst:614
msgid "Introspection"
msgstr ""

#: ../Doc/library/asyncio-task.rst:619
msgid ""
"Return the currently running :class:`Task` instance, or ``None`` if no task "
"is running."
msgstr ""

#: ../Doc/library/asyncio-task.rst:622
msgid ""
"If *loop* is ``None`` :func:`get_running_loop` is used to get the current "
"loop."
msgstr ""

#: ../Doc/library/asyncio-task.rst:630
msgid "Return a set of not yet finished :class:`Task` objects run by the loop."
msgstr ""
"Donne l'ensemble des :class:`Task` non terminées exécutées par la boucle."

#: ../Doc/library/asyncio-task.rst:633
msgid ""
"If *loop* is ``None``, :func:`get_running_loop` is used for getting current "
"loop."
msgstr ""

#: ../Doc/library/asyncio-task.rst:640
msgid "Task Object"
msgstr ""

#: ../Doc/library/asyncio-task.rst:644
msgid ""
"A :class:`Future-like <Future>` object that runs a Python :ref:`coroutine "
"<coroutine>`.  Not thread-safe."
msgstr ""

#: ../Doc/library/asyncio-task.rst:647
msgid ""
"Tasks are used to run coroutines in event loops. If a coroutine awaits on a "
"Future, the Task suspends the execution of the coroutine and waits for the "
"completion of the Future.  When the Future is *done*, the execution of the "
"wrapped coroutine resumes."
msgstr ""

#: ../Doc/library/asyncio-task.rst:653
msgid ""
"Event loops use cooperative scheduling: an event loop runs one Task at a "
"time.  While a Task awaits for the completion of a Future, the event loop "
"runs other Tasks, callbacks, or performs IO operations."
msgstr ""

#: ../Doc/library/asyncio-task.rst:658
msgid ""
"Use the high-level :func:`asyncio.create_task` function to create Tasks, or "
"the low-level :meth:`loop.create_task` or :func:`ensure_future` functions.  "
"Manual instantiation of Tasks is discouraged."
msgstr ""

#: ../Doc/library/asyncio-task.rst:663
msgid ""
"To cancel a running Task use the :meth:`cancel` method.  Calling it will "
"cause the Task to throw a :exc:`CancelledError` exception into the wrapped "
"coroutine.  If a coroutine is awaiting on a Future object during "
"cancellation, the Future object will be cancelled."
msgstr ""

#: ../Doc/library/asyncio-task.rst:668
msgid ""
":meth:`cancelled` can be used to check if the Task was cancelled. The method "
"returns ``True`` if the wrapped coroutine did not suppress the :exc:"
"`CancelledError` exception and was actually cancelled."
msgstr ""

#: ../Doc/library/asyncio-task.rst:673
msgid ""
":class:`asyncio.Task` inherits from :class:`Future` all of its APIs except :"
"meth:`Future.set_result` and :meth:`Future.set_exception`."
msgstr ""

#: ../Doc/library/asyncio-task.rst:677
msgid ""
"Tasks support the :mod:`contextvars` module.  When a Task is created it "
"copies the current context and later runs its coroutine in the copied "
"context."
msgstr ""

#: ../Doc/library/asyncio-task.rst:681
msgid "Added support for the :mod:`contextvars` module."
msgstr ""

#: ../Doc/library/asyncio-task.rst:686
msgid "Request the Task to be cancelled."
msgstr "Demande à ce qu'une tâche soit annulée."

#: ../Doc/library/asyncio-task.rst:688
msgid ""
"This arranges for a :exc:`CancelledError` exception to be thrown into the "
"wrapped coroutine on the next cycle of the event loop."
msgstr ""

#: ../Doc/library/asyncio-task.rst:691
msgid ""
"The coroutine then has a chance to clean up or even deny the request by "
"suppressing the exception with a :keyword:`try` ... ... ``except "
"CancelledError`` ... :keyword:`finally` block. Therefore, unlike :meth:"
"`Future.cancel`, :meth:`Task.cancel` does not guarantee that the Task will "
"be cancelled, although suppressing cancellation completely is not common and "
"is actively discouraged."
msgstr ""

#: ../Doc/library/asyncio-task.rst:701
msgid ""
"The following example illustrates how coroutines can intercept the "
"cancellation request::"
msgstr ""

#: ../Doc/library/asyncio-task.rst:740
msgid "Return ``True`` if the Task is *cancelled*."
msgstr ""

#: ../Doc/library/asyncio-task.rst:742
msgid ""
"The Task is *cancelled* when the cancellation was requested with :meth:"
"`cancel` and the wrapped coroutine propagated the :exc:`CancelledError` "
"exception thrown into it."
msgstr ""

#: ../Doc/library/asyncio-task.rst:748
msgid "Return ``True`` if the Task is *done*."
msgstr ""

#: ../Doc/library/asyncio-task.rst:750
msgid ""
"A Task is *done* when the wrapped coroutine either returned a value, raised "
"an exception, or the Task was cancelled."
msgstr ""

#: ../Doc/library/asyncio-task.rst:755
msgid "Return the result of the Task."
msgstr ""

#: ../Doc/library/asyncio-task.rst:757
msgid ""
"If the Task is *done*, the result of the wrapped coroutine is returned (or "
"if the coroutine raised an exception, that exception is re-raised.)"
msgstr ""

#: ../Doc/library/asyncio-task.rst:761 ../Doc/library/asyncio-task.rst:775
msgid ""
"If the Task has been *cancelled*, this method raises a :exc:`CancelledError` "
"exception."
msgstr ""

#: ../Doc/library/asyncio-task.rst:764
msgid ""
"If the Task's result isn't yet available, this method raises a :exc:"
"`InvalidStateError` exception."
msgstr ""

#: ../Doc/library/asyncio-task.rst:769
msgid "Return the exception of the Task."
msgstr ""

#: ../Doc/library/asyncio-task.rst:771
msgid ""
"If the wrapped coroutine raised an exception that exception is returned.  If "
"the wrapped coroutine returned normally this method returns ``None``."
msgstr ""

#: ../Doc/library/asyncio-task.rst:778
msgid ""
"If the Task isn't *done* yet, this method raises an :exc:`InvalidStateError` "
"exception."
msgstr ""

#: ../Doc/library/asyncio-task.rst:783
msgid "Add a callback to be run when the Task is *done*."
msgstr ""

#: ../Doc/library/asyncio-task.rst:785 ../Doc/library/asyncio-task.rst:794
msgid "This method should only be used in low-level callback-based code."
msgstr ""

#: ../Doc/library/asyncio-task.rst:787
msgid ""
"See the documentation of :meth:`Future.add_done_callback` for more details."
msgstr ""

#: ../Doc/library/asyncio-task.rst:792
msgid "Remove *callback* from the callbacks list."
msgstr ""

#: ../Doc/library/asyncio-task.rst:796
msgid ""
"See the documentation of :meth:`Future.remove_done_callback` for more "
"details."
msgstr ""

#: ../Doc/library/asyncio-task.rst:801
msgid "Return the list of stack frames for this Task."
msgstr ""

#: ../Doc/library/asyncio-task.rst:803
msgid ""
"If the wrapped coroutine is not done, this returns the stack where it is "
"suspended.  If the coroutine has completed successfully or was cancelled, "
"this returns an empty list. If the coroutine was terminated by an exception, "
"this returns the list of traceback frames."
msgstr ""

#: ../Doc/library/asyncio-task.rst:809
msgid "The frames are always ordered from oldest to newest."
msgstr ""

#: ../Doc/library/asyncio-task.rst:811
msgid "Only one stack frame is returned for a suspended coroutine."
msgstr ""

#: ../Doc/library/asyncio-task.rst:813
msgid ""
"The optional *limit* argument sets the maximum number of frames to return; "
"by default all available frames are returned. The ordering of the returned "
"list differs depending on whether a stack or a traceback is returned: the "
"newest frames of a stack are returned, but the oldest frames of a traceback "
"are returned.  (This matches the behavior of the traceback module.)"
msgstr ""

#: ../Doc/library/asyncio-task.rst:822
msgid "Print the stack or traceback for this Task."
msgstr ""

#: ../Doc/library/asyncio-task.rst:824
msgid ""
"This produces output similar to that of the traceback module for the frames "
"retrieved by :meth:`get_stack`."
msgstr ""

#: ../Doc/library/asyncio-task.rst:827
msgid "The *limit* argument is passed to :meth:`get_stack` directly."
msgstr ""

#: ../Doc/library/asyncio-task.rst:829
msgid ""
"The *file* argument is an I/O stream to which the output is written; by "
"default output is written to :data:`sys.stderr`."
msgstr ""

#: ../Doc/library/asyncio-task.rst:834
msgid "Return a set of all tasks for an event loop."
msgstr "Donne l'ensemble des tâches d'une boucle d'évènements."

#: ../Doc/library/asyncio-task.rst:836
msgid ""
"By default all tasks for the current event loop are returned. If *loop* is "
"``None``, the :func:`get_event_loop` function is used to get the current "
"loop."
msgstr ""

#: ../Doc/library/asyncio-task.rst:840
msgid ""
"This method is **deprecated** and will be removed in Python 3.9.  Use the :"
"func:`asyncio.all_tasks` function instead."
msgstr ""

#: ../Doc/library/asyncio-task.rst:845
msgid "Return the currently running task or ``None``."
msgstr ""

#: ../Doc/library/asyncio-task.rst:847
msgid ""
"If *loop* is ``None``, the :func:`get_event_loop` function is used to get "
"the current loop."
msgstr ""

#: ../Doc/library/asyncio-task.rst:850
msgid ""
"This method is **deprecated** and will be removed in Python 3.9.  Use the :"
"func:`asyncio.current_task` function instead."
msgstr ""

#: ../Doc/library/asyncio-task.rst:858
msgid "Generator-based Coroutines"
msgstr ""

#: ../Doc/library/asyncio-task.rst:862
msgid ""
"Support for generator-based coroutines is **deprecated** and is scheduled "
"for removal in Python 3.10."
msgstr ""

#: ../Doc/library/asyncio-task.rst:865
msgid ""
"Generator-based coroutines predate async/await syntax.  They are Python "
"generators that use ``yield from`` expressions to await on Futures and other "
"coroutines."
msgstr ""

#: ../Doc/library/asyncio-task.rst:869
msgid ""
"Generator-based coroutines should be decorated with :func:`@asyncio."
"coroutine <asyncio.coroutine>`, although this is not enforced."
msgstr ""

#: ../Doc/library/asyncio-task.rst:876
msgid "Decorator to mark generator-based coroutines."
msgstr ""

#: ../Doc/library/asyncio-task.rst:878
msgid ""
"This decorator enables legacy generator-based coroutines to be compatible "
"with async/await code::"
msgstr ""

#: ../Doc/library/asyncio-task.rst:888
msgid ""
"This decorator is **deprecated** and is scheduled for removal in Python 3.10."
msgstr ""

#: ../Doc/library/asyncio-task.rst:891
msgid "This decorator should not be used for :keyword:`async def` coroutines."
msgstr ""

#: ../Doc/library/asyncio-task.rst:896
msgid "Return ``True`` if *obj* is a :ref:`coroutine object <coroutine>`."
msgstr "Renvoie ``True`` si *obj* est un :ref:`objet coroutine <coroutine>`."

#: ../Doc/library/asyncio-task.rst:898
msgid ""
"This method is different from :func:`inspect.iscoroutine` because it returns "
"``True`` for generator-based coroutines."
msgstr ""

#: ../Doc/library/asyncio-task.rst:903
msgid "Return ``True`` if *func* is a :ref:`coroutine function <coroutine>`."
msgstr ""
"Renvoie ``True`` si *func* est une :ref:`fonction coroutine <coroutine>`."

#: ../Doc/library/asyncio-task.rst:906
msgid ""
"This method is different from :func:`inspect.iscoroutinefunction` because it "
"returns ``True`` for generator-based coroutine functions decorated with :"
"func:`@coroutine <coroutine>`."
msgstr ""

#~ msgid "Tasks and coroutines"
#~ msgstr "Tâches et coroutines"

#~ msgid "Things a coroutine can do:"
#~ msgstr "Les choses que les coroutines peuvent faire :"

#~ msgid "Example: Hello World coroutine"
#~ msgstr "Exemple : Coroutine \"Hello World\""

#~ msgid "Example: Chain coroutines"
#~ msgstr "Exemple : Chaîner des coroutines"

#~ msgid "InvalidStateError"
#~ msgstr "InvalidStateError"

#~ msgid "The operation is not allowed in this state."
#~ msgstr "L'opération n'est pas autorisée dans cet état."

#~ msgid "The operation exceeded the given deadline."
#~ msgstr "L'opération a dépassé le délai donné."

#~ msgid "Differences:"
#~ msgstr "Différences :"

#~ msgid "Returns the number of callbacks removed."
#~ msgstr "Donne le nombre de fonctions de rappel supprimées."

#~ msgid "Mark the future done and set its result."
#~ msgstr "Marque le futur comme terminé et définit son résultat."

#~ msgid "Mark the future done and set an exception."
#~ msgstr "Marque le futur comme terminé et définit une exception."

#~ msgid "Example: Future with run_until_complete()"
#~ msgstr "Exemple : Futur avec ``run_until_complete()``"

#~ msgid "Example: Future with run_forever()"
#~ msgstr "Exemple : Futur avec ``run_forever()``"

#~ msgid "Example: Parallel execution of tasks"
#~ msgstr "Exemple : Exécution parallèle de tâches"

#~ msgid "Example executing 3 tasks (A, B, C) in parallel::"
#~ msgstr "Exemple d'exécution de trois tâches (A, B, C) en parallèle : ::"

#~ msgid "Output::"
#~ msgstr "Sortie ::"

#~ msgid "The function accepts any :term:`awaitable` object."
#~ msgstr "La fonction accepte n'importe quel objet :term:`awaitable`."

#~ msgid "This function is a :ref:`coroutine <coroutine>`, usage::"
#~ msgstr ""
#~ "Cette fonction est une :ref:`coroutine <coroutine>`, utilisation : ::"

#~ msgid "A deprecated alias to :func:`ensure_future`."
#~ msgstr "Un alias obsolète de :func:`ensure_future`."

#~ msgid "The same coroutine implemented using a generator::"
#~ msgstr "La même coroutine implémentée en utilisant un générateur : ::"
