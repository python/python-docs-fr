# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-24 09:01+0200\n"
"PO-Revision-Date: 2019-09-04 11:42+0200\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: library/importlib.metadata.rst:5
msgid "Using :mod:`!importlib.metadata`"
msgstr ""

#: library/importlib.metadata.rst:8
msgid ""
"This functionality is provisional and may deviate from the usual version "
"semantics of the standard library."
msgstr ""

#: library/importlib.metadata.rst:11
msgid ""
"``importlib.metadata`` is a library that provides for access to installed "
"package metadata.  Built in part on Python's import system, this library "
"intends to replace similar functionality in the `entry point API`_ and "
"`metadata API`_ of ``pkg_resources``.  Along with :mod:`importlib.resources` "
"in Python 3.7 and newer (backported as `importlib_resources`_ for older "
"versions of Python), this can eliminate the need to use the older and less "
"efficient ``pkg_resources`` package."
msgstr ""

#: library/importlib.metadata.rst:20
msgid ""
"By \"installed package\" we generally mean a third-party package installed "
"into Python's ``site-packages`` directory via tools such as `pip <https://"
"pypi.org/project/pip/>`_.  Specifically, it means a package with either a "
"discoverable ``dist-info`` or ``egg-info`` directory, and metadata defined "
"by :pep:`566` or its older specifications. By default, package metadata can "
"live on the file system or in zip archives on :data:`sys.path`.  Through an "
"extension mechanism, the metadata can live almost anywhere."
msgstr ""

#: library/importlib.metadata.rst:31
msgid "Overview"
msgstr "Aper√ßu"

#: library/importlib.metadata.rst:33
msgid ""
"Let's say you wanted to get the version string for a package you've "
"installed using ``pip``.  We start by creating a virtual environment and "
"installing something into it:"
msgstr ""

#: library/importlib.metadata.rst:43
msgid "You can get the version string for ``wheel`` by running the following:"
msgstr ""

#: library/importlib.metadata.rst:52
msgid ""
"You can also get the set of entry points keyed by group, such as "
"``console_scripts``, ``distutils.commands`` and others.  Each group contains "
"a sequence of :ref:`EntryPoint <entry-points>` objects."
msgstr ""

#: library/importlib.metadata.rst:56
msgid "You can get the :ref:`metadata for a distribution <metadata>`::"
msgstr ""

#: library/importlib.metadata.rst:61
msgid ""
"You can also get a :ref:`distribution's version number <version>`, list its :"
"ref:`constituent files <files>`, and get a list of the distribution's :ref:"
"`requirements`."
msgstr ""

#: library/importlib.metadata.rst:67
msgid "Functional API"
msgstr "API par fonction"

#: library/importlib.metadata.rst:69
msgid "This package provides the following functionality via its public API."
msgstr ""

#: library/importlib.metadata.rst:75
msgid "Entry points"
msgstr ""

#: library/importlib.metadata.rst:77
msgid ""
"The ``entry_points()`` function returns a dictionary of all entry points, "
"keyed by group.  Entry points are represented by ``EntryPoint`` instances; "
"each ``EntryPoint`` has a ``.name``, ``.group``, and ``.value`` attributes "
"and a ``.load()`` method to resolve the value.  There are also ``.module``, "
"``.attr``, and ``.extras`` attributes for getting the components of the ``."
"value`` attribute::"
msgstr ""

#: library/importlib.metadata.rst:101
msgid ""
"The ``group`` and ``name`` are arbitrary values defined by the package "
"author and usually a client will wish to resolve all entry points for a "
"particular group.  Read `the setuptools docs <https://setuptools.readthedocs."
"io/en/latest/setuptools.html#dynamic-discovery-of-services-and-plugins>`_ "
"for more information on entry points, their definition, and usage."
msgstr ""

#: library/importlib.metadata.rst:111
msgid "Distribution metadata"
msgstr ""

#: library/importlib.metadata.rst:113
msgid ""
"Every distribution includes some metadata, which you can extract using the "
"``metadata()`` function::"
msgstr ""

#: library/importlib.metadata.rst:118
msgid ""
"The keys of the returned data structure [#f1]_ name the metadata keywords, "
"and their values are returned unparsed from the distribution metadata::"
msgstr ""

#: library/importlib.metadata.rst:128
msgid "Distribution versions"
msgstr ""

#: library/importlib.metadata.rst:130
msgid ""
"The ``version()`` function is the quickest way to get a distribution's "
"version number, as a string::"
msgstr ""

#: library/importlib.metadata.rst:140
msgid "Distribution files"
msgstr ""

#: library/importlib.metadata.rst:142
msgid ""
"You can also get the full set of files contained within a distribution.  The "
"``files()`` function takes a distribution package name and returns all of "
"the files installed by this distribution.  Each file object returned is a "
"``PackagePath``, a :class:`pathlib.Path` derived object with additional "
"``dist``, ``size``, and ``hash`` properties as indicated by the metadata.  "
"For example::"
msgstr ""

#: library/importlib.metadata.rst:158
msgid "Once you have the file, you can also read its contents::"
msgstr ""

#: library/importlib.metadata.rst:169
msgid ""
"In the case where the metadata file listing files (RECORD or SOURCES.txt) is "
"missing, ``files()`` will return ``None``. The caller may wish to wrap calls "
"to ``files()`` in `always_iterable <https://more-itertools.readthedocs.io/en/"
"stable/api.html#more_itertools.always_iterable>`_ or otherwise guard against "
"this condition if the target distribution is not known to have the metadata "
"present."
msgstr ""

#: library/importlib.metadata.rst:180
msgid "Distribution requirements"
msgstr ""

#: library/importlib.metadata.rst:182
msgid ""
"To get the full set of requirements for a distribution, use the "
"``requires()`` function::"
msgstr ""

#: library/importlib.metadata.rst:190
#, fuzzy
msgid "Distributions"
msgstr "Distribution"

#: library/importlib.metadata.rst:192
msgid ""
"While the above API is the most common and convenient usage, you can get all "
"of that information from the ``Distribution`` class.  A ``Distribution`` is "
"an abstract object that represents the metadata for a Python package.  You "
"can get the ``Distribution`` instance::"
msgstr ""

#: library/importlib.metadata.rst:200
msgid ""
"Thus, an alternative way to get the version number is through the "
"``Distribution`` instance::"
msgstr ""

#: library/importlib.metadata.rst:206
msgid ""
"There are all kinds of additional metadata available on the ``Distribution`` "
"instance::"
msgstr ""

#: library/importlib.metadata.rst:214
msgid ""
"The full set of available metadata is not described here.  See :pep:`566` "
"for additional details."
msgstr ""

#: library/importlib.metadata.rst:219
msgid "Extending the search algorithm"
msgstr ""

#: library/importlib.metadata.rst:221
msgid ""
"Because package metadata is not available through :data:`sys.path` searches, "
"or package loaders directly, the metadata for a package is found through "
"import system :ref:`finders <finders-and-loaders>`.  To find a distribution "
"package's metadata, ``importlib.metadata`` queries the list of :term:`meta "
"path finders <meta path finder>` on :data:`sys.meta_path`."
msgstr ""

#: library/importlib.metadata.rst:227
msgid ""
"The default ``PathFinder`` for Python includes a hook that calls into "
"``importlib.metadata.MetadataPathFinder`` for finding distributions loaded "
"from typical file-system-based paths."
msgstr ""

#: library/importlib.metadata.rst:231
msgid ""
"The abstract class :py:class:`importlib.abc.MetaPathFinder` defines the "
"interface expected of finders by Python's import system. ``importlib."
"metadata`` extends this protocol by looking for an optional "
"``find_distributions`` callable on the finders from :data:`sys.meta_path` "
"and presents this extended interface as the ``DistributionFinder`` abstract "
"base class, which defines this abstract method::"
msgstr ""

#: library/importlib.metadata.rst:245
msgid ""
"The ``DistributionFinder.Context`` object provides ``.path`` and ``.name`` "
"properties indicating the path to search and name to match and may supply "
"other relevant context."
msgstr ""

#: library/importlib.metadata.rst:249
msgid ""
"What this means in practice is that to support finding distribution package "
"metadata in locations other than the file system, subclass ``Distribution`` "
"and implement the abstract methods. Then from a custom finder, return "
"instances of this derived ``Distribution`` in the ``find_distributions()`` "
"method."
msgstr ""

#: library/importlib.metadata.rst:262
msgid "Footnotes"
msgstr "Notes"

#: library/importlib.metadata.rst:263
msgid ""
"Technically, the returned distribution metadata object is an :class:`email."
"message.EmailMessage` instance, but this is an implementation detail, and "
"not part of the stable API.  You should only use dictionary-like methods and "
"syntax to access the metadata contents."
msgstr ""
