# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-23 11:38+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/tracemalloc.rst:2
msgid ":mod:`tracemalloc` --- Trace memory allocations"
msgstr ""

#: ../Doc/library/tracemalloc.rst:9
#, fuzzy
msgid "**Source code:** :source:`Lib/tracemalloc.py`"
msgstr "**Code source :** :source:`Lib/abc.py`"

#: ../Doc/library/tracemalloc.rst:13
msgid ""
"The tracemalloc module is a debug tool to trace memory blocks allocated by "
"Python. It provides the following information:"
msgstr ""

#: ../Doc/library/tracemalloc.rst:16
msgid "Traceback where an object was allocated"
msgstr ""

#: ../Doc/library/tracemalloc.rst:17
msgid ""
"Statistics on allocated memory blocks per filename and per line number: "
"total size, number and average size of allocated memory blocks"
msgstr ""

#: ../Doc/library/tracemalloc.rst:19
msgid "Compute the differences between two snapshots to detect memory leaks"
msgstr ""

#: ../Doc/library/tracemalloc.rst:21
msgid ""
"To trace most memory blocks allocated by Python, the module should be "
"started as early as possible by setting the :envvar:`PYTHONTRACEMALLOC` "
"environment variable to ``1``, or by using :option:`-X` ``tracemalloc`` "
"command line option. The :func:`tracemalloc.start` function can be called at "
"runtime to start tracing Python memory allocations."
msgstr ""

#: ../Doc/library/tracemalloc.rst:27
msgid ""
"By default, a trace of an allocated memory block only stores the most recent "
"frame (1 frame). To store 25 frames at startup: set the :envvar:"
"`PYTHONTRACEMALLOC` environment variable to ``25``, or use the :option:`-X` "
"``tracemalloc=25`` command line option."
msgstr ""

#: ../Doc/library/tracemalloc.rst:34
msgid "Examples"
msgstr "Exemples"

#: ../Doc/library/tracemalloc.rst:37
msgid "Display the top 10"
msgstr ""

#: ../Doc/library/tracemalloc.rst:39
msgid "Display the 10 files allocating the most memory::"
msgstr ""

#: ../Doc/library/tracemalloc.rst:55 ../Doc/library/tracemalloc.rst:225
msgid "Example of output of the Python test suite::"
msgstr ""

#: ../Doc/library/tracemalloc.rst:69
msgid ""
"We can see that Python loaded ``4855 KiB`` data (bytecode and constants) "
"from modules and that the :mod:`collections` module allocated ``244 KiB`` to "
"build :class:`~collections.namedtuple` types."
msgstr ""

#: ../Doc/library/tracemalloc.rst:73 ../Doc/library/tracemalloc.rst:250
msgid "See :meth:`Snapshot.statistics` for more options."
msgstr ""

#: ../Doc/library/tracemalloc.rst:77
msgid "Compute differences"
msgstr ""

#: ../Doc/library/tracemalloc.rst:79
msgid "Take two snapshots and display the differences::"
msgstr ""

#: ../Doc/library/tracemalloc.rst:95
msgid ""
"Example of output before/after running some tests of the Python test suite::"
msgstr ""

#: ../Doc/library/tracemalloc.rst:109
msgid ""
"We can see that Python has loaded ``8173 KiB`` of module data (bytecode and "
"constants), and that this is ``4428 KiB`` more than had been loaded before "
"the tests, when the previous snapshot was taken. Similarly, the :mod:"
"`linecache` module has cached ``940 KiB`` of Python source code to format "
"tracebacks, all of it since the previous snapshot."
msgstr ""

#: ../Doc/library/tracemalloc.rst:115
msgid ""
"If the system has little free memory, snapshots can be written on disk using "
"the :meth:`Snapshot.dump` method to analyze the snapshot offline. Then use "
"the :meth:`Snapshot.load` method reload the snapshot."
msgstr ""

#: ../Doc/library/tracemalloc.rst:121
msgid "Get the traceback of a memory block"
msgstr ""

#: ../Doc/library/tracemalloc.rst:123
msgid "Code to display the traceback of the biggest memory block::"
msgstr ""

#: ../Doc/library/tracemalloc.rst:141
msgid ""
"Example of output of the Python test suite (traceback limited to 25 frames)::"
msgstr ""

#: ../Doc/library/tracemalloc.rst:178
msgid ""
"We can see that the most memory was allocated in the :mod:`importlib` module "
"to load data (bytecode and constants) from modules: ``870.1 KiB``. The "
"traceback is where the :mod:`importlib` loaded data most recently: on the "
"``import pdb`` line of the :mod:`doctest` module. The traceback may change "
"if a new module is loaded."
msgstr ""

#: ../Doc/library/tracemalloc.rst:186
msgid "Pretty top"
msgstr ""

#: ../Doc/library/tracemalloc.rst:188
msgid ""
"Code to display the 10 lines allocating the most memory with a pretty "
"output, ignoring ``<frozen importlib._bootstrap>`` and ``<unknown>`` files::"
msgstr ""

#: ../Doc/library/tracemalloc.rst:254
msgid "API"
msgstr "API"

#: ../Doc/library/tracemalloc.rst:257
msgid "Functions"
msgstr "Fonctions"

#: ../Doc/library/tracemalloc.rst:261
msgid "Clear traces of memory blocks allocated by Python."
msgstr ""

#: ../Doc/library/tracemalloc.rst:263
msgid "See also :func:`stop`."
msgstr ""

#: ../Doc/library/tracemalloc.rst:268
msgid ""
"Get the traceback where the Python object *obj* was allocated. Return a :"
"class:`Traceback` instance, or ``None`` if the :mod:`tracemalloc` module is "
"not tracing memory allocations or did not trace the allocation of the object."
msgstr ""

#: ../Doc/library/tracemalloc.rst:273
msgid "See also :func:`gc.get_referrers` and :func:`sys.getsizeof` functions."
msgstr ""

#: ../Doc/library/tracemalloc.rst:278
msgid "Get the maximum number of frames stored in the traceback of a trace."
msgstr ""

#: ../Doc/library/tracemalloc.rst:280
msgid ""
"The :mod:`tracemalloc` module must be tracing memory allocations to get the "
"limit, otherwise an exception is raised."
msgstr ""

#: ../Doc/library/tracemalloc.rst:283
msgid "The limit is set by the :func:`start` function."
msgstr ""

#: ../Doc/library/tracemalloc.rst:288
msgid ""
"Get the current size and peak size of memory blocks traced by the :mod:"
"`tracemalloc` module as a tuple: ``(current: int, peak: int)``."
msgstr ""

#: ../Doc/library/tracemalloc.rst:294
msgid ""
"Get the memory usage in bytes of the :mod:`tracemalloc` module used to store "
"traces of memory blocks. Return an :class:`int`."
msgstr ""

#: ../Doc/library/tracemalloc.rst:301
msgid ""
"``True`` if the :mod:`tracemalloc` module is tracing Python memory "
"allocations, ``False`` otherwise."
msgstr ""

#: ../Doc/library/tracemalloc.rst:304
msgid "See also :func:`start` and :func:`stop` functions."
msgstr ""

#: ../Doc/library/tracemalloc.rst:309
msgid ""
"Start tracing Python memory allocations: install hooks on Python memory "
"allocators. Collected tracebacks of traces will be limited to *nframe* "
"frames. By default, a trace of a memory block only stores the most recent "
"frame: the limit is ``1``. *nframe* must be greater or equal to ``1``."
msgstr ""

#: ../Doc/library/tracemalloc.rst:314
msgid ""
"Storing more than ``1`` frame is only useful to compute statistics grouped "
"by ``'traceback'`` or to compute cumulative statistics: see the :meth:"
"`Snapshot.compare_to` and :meth:`Snapshot.statistics` methods."
msgstr ""

#: ../Doc/library/tracemalloc.rst:318
msgid ""
"Storing more frames increases the memory and CPU overhead of the :mod:"
"`tracemalloc` module. Use the :func:`get_tracemalloc_memory` function to "
"measure how much memory is used by the :mod:`tracemalloc` module."
msgstr ""

#: ../Doc/library/tracemalloc.rst:322
msgid ""
"The :envvar:`PYTHONTRACEMALLOC` environment variable "
"(``PYTHONTRACEMALLOC=NFRAME``) and the :option:`-X` ``tracemalloc=NFRAME`` "
"command line option can be used to start tracing at startup."
msgstr ""

#: ../Doc/library/tracemalloc.rst:326
msgid ""
"See also :func:`stop`, :func:`is_tracing` and :func:`get_traceback_limit` "
"functions."
msgstr ""

#: ../Doc/library/tracemalloc.rst:332
msgid ""
"Stop tracing Python memory allocations: uninstall hooks on Python memory "
"allocators. Also clears all previously collected traces of memory blocks "
"allocated by Python."
msgstr ""

#: ../Doc/library/tracemalloc.rst:336
msgid ""
"Call :func:`take_snapshot` function to take a snapshot of traces before "
"clearing them."
msgstr ""

#: ../Doc/library/tracemalloc.rst:339
msgid ""
"See also :func:`start`, :func:`is_tracing` and :func:`clear_traces` "
"functions."
msgstr ""

#: ../Doc/library/tracemalloc.rst:345
msgid ""
"Take a snapshot of traces of memory blocks allocated by Python. Return a "
"new :class:`Snapshot` instance."
msgstr ""

#: ../Doc/library/tracemalloc.rst:348
msgid ""
"The snapshot does not include memory blocks allocated before the :mod:"
"`tracemalloc` module started to trace memory allocations."
msgstr ""

#: ../Doc/library/tracemalloc.rst:351
msgid ""
"Tracebacks of traces are limited to :func:`get_traceback_limit` frames. Use "
"the *nframe* parameter of the :func:`start` function to store more frames."
msgstr ""

#: ../Doc/library/tracemalloc.rst:354
msgid ""
"The :mod:`tracemalloc` module must be tracing memory allocations to take a "
"snapshot, see the :func:`start` function."
msgstr ""

#: ../Doc/library/tracemalloc.rst:357
msgid "See also the :func:`get_object_traceback` function."
msgstr ""

#: ../Doc/library/tracemalloc.rst:361
msgid "DomainFilter"
msgstr ""

#: ../Doc/library/tracemalloc.rst:365
msgid "Filter traces of memory blocks by their address space (domain)."
msgstr ""

#: ../Doc/library/tracemalloc.rst:371
msgid ""
"If *inclusive* is ``True`` (include), match memory blocks allocated in the "
"address space :attr:`domain`."
msgstr ""

#: ../Doc/library/tracemalloc.rst:374
msgid ""
"If *inclusive* is ``False`` (exclude), match memory blocks not allocated in "
"the address space :attr:`domain`."
msgstr ""

#: ../Doc/library/tracemalloc.rst:379 ../Doc/library/tracemalloc.rst:631
msgid "Address space of a memory block (``int``). Read-only property."
msgstr ""

#: ../Doc/library/tracemalloc.rst:383
msgid "Filter"
msgstr ""

#: ../Doc/library/tracemalloc.rst:387
msgid "Filter on traces of memory blocks."
msgstr ""

#: ../Doc/library/tracemalloc.rst:389
msgid ""
"See the :func:`fnmatch.fnmatch` function for the syntax of "
"*filename_pattern*. The ``'.pyc'`` file extension is replaced with ``'.py'``."
msgstr ""

#: ../Doc/library/tracemalloc.rst:393
msgid "Examples:"
msgstr "Exemples :"

#: ../Doc/library/tracemalloc.rst:395
msgid ""
"``Filter(True, subprocess.__file__)`` only includes traces of the :mod:"
"`subprocess` module"
msgstr ""

#: ../Doc/library/tracemalloc.rst:397
msgid ""
"``Filter(False, tracemalloc.__file__)`` excludes traces of the :mod:"
"`tracemalloc` module"
msgstr ""

#: ../Doc/library/tracemalloc.rst:399
msgid "``Filter(False, \"<unknown>\")`` excludes empty tracebacks"
msgstr ""

#: ../Doc/library/tracemalloc.rst:402
msgid "The ``'.pyo'`` file extension is no longer replaced with ``'.py'``."
msgstr ""

#: ../Doc/library/tracemalloc.rst:405 ../Doc/library/tracemalloc.rst:626
msgid "Added the :attr:`domain` attribute."
msgstr ""

#: ../Doc/library/tracemalloc.rst:411
msgid "Address space of a memory block (``int`` or ``None``)."
msgstr ""

#: ../Doc/library/tracemalloc.rst:413 ../Doc/library/tracemalloc.rst:633
msgid ""
"tracemalloc uses the domain ``0`` to trace memory allocations made by "
"Python. C extensions can use other domains to trace other resources."
msgstr ""

#: ../Doc/library/tracemalloc.rst:418
msgid ""
"If *inclusive* is ``True`` (include), only match memory blocks allocated in "
"a file with a name matching :attr:`filename_pattern` at line number :attr:"
"`lineno`."
msgstr ""

#: ../Doc/library/tracemalloc.rst:422
msgid ""
"If *inclusive* is ``False`` (exclude), ignore memory blocks allocated in a "
"file with a name matching :attr:`filename_pattern` at line number :attr:"
"`lineno`."
msgstr ""

#: ../Doc/library/tracemalloc.rst:428
msgid ""
"Line number (``int``) of the filter. If *lineno* is ``None``, the filter "
"matches any line number."
msgstr ""

#: ../Doc/library/tracemalloc.rst:433
msgid "Filename pattern of the filter (``str``). Read-only property."
msgstr ""

#: ../Doc/library/tracemalloc.rst:437
msgid ""
"If *all_frames* is ``True``, all frames of the traceback are checked. If "
"*all_frames* is ``False``, only the most recent frame is checked."
msgstr ""

#: ../Doc/library/tracemalloc.rst:440
msgid ""
"This attribute has no effect if the traceback limit is ``1``.  See the :func:"
"`get_traceback_limit` function and :attr:`Snapshot.traceback_limit` "
"attribute."
msgstr ""

#: ../Doc/library/tracemalloc.rst:446
msgid "Frame"
msgstr ""

#: ../Doc/library/tracemalloc.rst:450
msgid "Frame of a traceback."
msgstr ""

#: ../Doc/library/tracemalloc.rst:452
msgid "The :class:`Traceback` class is a sequence of :class:`Frame` instances."
msgstr ""

#: ../Doc/library/tracemalloc.rst:456
msgid "Filename (``str``)."
msgstr ""

#: ../Doc/library/tracemalloc.rst:460
msgid "Line number (``int``)."
msgstr ""

#: ../Doc/library/tracemalloc.rst:464
msgid "Snapshot"
msgstr ""

#: ../Doc/library/tracemalloc.rst:468
msgid "Snapshot of traces of memory blocks allocated by Python."
msgstr ""

#: ../Doc/library/tracemalloc.rst:470
msgid "The :func:`take_snapshot` function creates a snapshot instance."
msgstr ""

#: ../Doc/library/tracemalloc.rst:474
msgid ""
"Compute the differences with an old snapshot. Get statistics as a sorted "
"list of :class:`StatisticDiff` instances grouped by *key_type*."
msgstr ""

#: ../Doc/library/tracemalloc.rst:477
msgid ""
"See the :meth:`Snapshot.statistics` method for *key_type* and *cumulative* "
"parameters."
msgstr ""

#: ../Doc/library/tracemalloc.rst:480
msgid ""
"The result is sorted from the biggest to the smallest by: absolute value of :"
"attr:`StatisticDiff.size_diff`, :attr:`StatisticDiff.size`, absolute value "
"of :attr:`StatisticDiff.count_diff`, :attr:`Statistic.count` and then by :"
"attr:`StatisticDiff.traceback`."
msgstr ""

#: ../Doc/library/tracemalloc.rst:488
msgid "Write the snapshot into a file."
msgstr ""

#: ../Doc/library/tracemalloc.rst:490
msgid "Use :meth:`load` to reload the snapshot."
msgstr ""

#: ../Doc/library/tracemalloc.rst:495
msgid ""
"Create a new :class:`Snapshot` instance with a filtered :attr:`traces` "
"sequence, *filters* is a list of :class:`DomainFilter` and :class:`Filter` "
"instances.  If *filters* is an empty list, return a new :class:`Snapshot` "
"instance with a copy of the traces."
msgstr ""

#: ../Doc/library/tracemalloc.rst:500
msgid ""
"All inclusive filters are applied at once, a trace is ignored if no "
"inclusive filters match it. A trace is ignored if at least one exclusive "
"filter matches it."
msgstr ""

#: ../Doc/library/tracemalloc.rst:504
msgid ":class:`DomainFilter` instances are now also accepted in *filters*."
msgstr ""

#: ../Doc/library/tracemalloc.rst:510
msgid "Load a snapshot from a file."
msgstr ""

#: ../Doc/library/tracemalloc.rst:512
msgid "See also :meth:`dump`."
msgstr ""

#: ../Doc/library/tracemalloc.rst:517
msgid ""
"Get statistics as a sorted list of :class:`Statistic` instances grouped by "
"*key_type*:"
msgstr ""

#: ../Doc/library/tracemalloc.rst:521
msgid "key_type"
msgstr ""

#: ../Doc/library/tracemalloc.rst:521
msgid "description"
msgstr "description"

#: ../Doc/library/tracemalloc.rst:523
msgid "``'filename'``"
msgstr "``'filename'``"

#: ../Doc/library/tracemalloc.rst:523
msgid "filename"
msgstr "filename"

#: ../Doc/library/tracemalloc.rst:524
msgid "``'lineno'``"
msgstr "``'lineno'``"

#: ../Doc/library/tracemalloc.rst:524
msgid "filename and line number"
msgstr ""

#: ../Doc/library/tracemalloc.rst:525
msgid "``'traceback'``"
msgstr "``'traceback'``"

#: ../Doc/library/tracemalloc.rst:525
msgid "traceback"
msgstr "traceback"

#: ../Doc/library/tracemalloc.rst:528
msgid ""
"If *cumulative* is ``True``, cumulate size and count of memory blocks of all "
"frames of the traceback of a trace, not only the most recent frame. The "
"cumulative mode can only be used with *key_type* equals to ``'filename'`` "
"and ``'lineno'``."
msgstr ""

#: ../Doc/library/tracemalloc.rst:533
msgid ""
"The result is sorted from the biggest to the smallest by: :attr:`Statistic."
"size`, :attr:`Statistic.count` and then by :attr:`Statistic.traceback`."
msgstr ""

#: ../Doc/library/tracemalloc.rst:540
msgid ""
"Maximum number of frames stored in the traceback of :attr:`traces`: result "
"of the :func:`get_traceback_limit` when the snapshot was taken."
msgstr ""

#: ../Doc/library/tracemalloc.rst:545
msgid ""
"Traces of all memory blocks allocated by Python: sequence of :class:`Trace` "
"instances."
msgstr ""

#: ../Doc/library/tracemalloc.rst:548
msgid ""
"The sequence has an undefined order. Use the :meth:`Snapshot.statistics` "
"method to get a sorted list of statistics."
msgstr ""

#: ../Doc/library/tracemalloc.rst:553
msgid "Statistic"
msgstr ""

#: ../Doc/library/tracemalloc.rst:557
msgid "Statistic on memory allocations."
msgstr ""

#: ../Doc/library/tracemalloc.rst:559
msgid ""
":func:`Snapshot.statistics` returns a list of :class:`Statistic` instances."
msgstr ""

#: ../Doc/library/tracemalloc.rst:561
msgid "See also the :class:`StatisticDiff` class."
msgstr ""

#: ../Doc/library/tracemalloc.rst:565
msgid "Number of memory blocks (``int``)."
msgstr ""

#: ../Doc/library/tracemalloc.rst:569
msgid "Total size of memory blocks in bytes (``int``)."
msgstr ""

#: ../Doc/library/tracemalloc.rst:573 ../Doc/library/tracemalloc.rst:642
msgid ""
"Traceback where the memory block was allocated, :class:`Traceback` instance."
msgstr ""

#: ../Doc/library/tracemalloc.rst:578
msgid "StatisticDiff"
msgstr ""

#: ../Doc/library/tracemalloc.rst:582
msgid ""
"Statistic difference on memory allocations between an old and a new :class:"
"`Snapshot` instance."
msgstr ""

#: ../Doc/library/tracemalloc.rst:585
msgid ""
":func:`Snapshot.compare_to` returns a list of :class:`StatisticDiff` "
"instances. See also the :class:`Statistic` class."
msgstr ""

#: ../Doc/library/tracemalloc.rst:590
msgid ""
"Number of memory blocks in the new snapshot (``int``): ``0`` if the memory "
"blocks have been released in the new snapshot."
msgstr ""

#: ../Doc/library/tracemalloc.rst:595
msgid ""
"Difference of number of memory blocks between the old and the new snapshots "
"(``int``): ``0`` if the memory blocks have been allocated in the new "
"snapshot."
msgstr ""

#: ../Doc/library/tracemalloc.rst:601
msgid ""
"Total size of memory blocks in bytes in the new snapshot (``int``): ``0`` if "
"the memory blocks have been released in the new snapshot."
msgstr ""

#: ../Doc/library/tracemalloc.rst:606
msgid ""
"Difference of total size of memory blocks in bytes between the old and the "
"new snapshots (``int``): ``0`` if the memory blocks have been allocated in "
"the new snapshot."
msgstr ""

#: ../Doc/library/tracemalloc.rst:612
msgid ""
"Traceback where the memory blocks were allocated, :class:`Traceback` "
"instance."
msgstr ""

#: ../Doc/library/tracemalloc.rst:617
msgid "Trace"
msgstr ""

#: ../Doc/library/tracemalloc.rst:621
msgid "Trace of a memory block."
msgstr ""

#: ../Doc/library/tracemalloc.rst:623
msgid ""
"The :attr:`Snapshot.traces` attribute is a sequence of :class:`Trace` "
"instances."
msgstr ""

#: ../Doc/library/tracemalloc.rst:638
msgid "Size of the memory block in bytes (``int``)."
msgstr ""

#: ../Doc/library/tracemalloc.rst:647
msgid "Traceback"
msgstr ""

#: ../Doc/library/tracemalloc.rst:651
msgid ""
"Sequence of :class:`Frame` instances sorted from the oldest frame to the "
"most recent frame."
msgstr ""

#: ../Doc/library/tracemalloc.rst:654
msgid ""
"A traceback contains at least ``1`` frame. If the ``tracemalloc`` module "
"failed to get a frame, the filename ``\"<unknown>\"`` at line number ``0`` "
"is used."
msgstr ""

#: ../Doc/library/tracemalloc.rst:658
msgid ""
"When a snapshot is taken, tracebacks of traces are limited to :func:"
"`get_traceback_limit` frames. See the :func:`take_snapshot` function."
msgstr ""

#: ../Doc/library/tracemalloc.rst:661
msgid ""
"The :attr:`Trace.traceback` attribute is an instance of :class:`Traceback` "
"instance."
msgstr ""

#: ../Doc/library/tracemalloc.rst:664
msgid ""
"Frames are now sorted from the oldest to the most recent, instead of most "
"recent to oldest."
msgstr ""

#: ../Doc/library/tracemalloc.rst:669
msgid ""
"Format the traceback as a list of lines with newlines. Use the :mod:"
"`linecache` module to retrieve lines from the source code. If *limit* is "
"set, format the *limit* most recent frames if *limit* is positive. "
"Otherwise, format the ``abs(limit)`` oldest frames. If *most_recent_first* "
"is ``True``, the order of the formatted frames is reversed, returning the "
"most recent frame first instead of last."
msgstr ""

#: ../Doc/library/tracemalloc.rst:676
msgid ""
"Similar to the :func:`traceback.format_tb` function, except that :meth:`."
"format` does not include newlines."
msgstr ""

#: ../Doc/library/tracemalloc.rst:679
msgid "Example::"
msgstr "Exemple ::"

#: ../Doc/library/tracemalloc.rst:685
msgid "Output::"
msgstr "Sortie ::"
