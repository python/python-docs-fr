# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-29 16:06+0100\n"
"PO-Revision-Date: 2018-09-28 12:40+0200\n"
"Last-Translator: Julien VITARD <julienvitard@gmail.com>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 1.8.11\n"

#: ../Doc/library/glob.rst:2
msgid ":mod:`glob` --- Unix style pathname pattern expansion"
msgstr ""
":mod:`glob` --- Recherche de chemins de style Unix selon certains motifs"

#: ../Doc/library/glob.rst:7
msgid "**Source code:** :source:`Lib/glob.py`"
msgstr "**Code source :** :source:`Lib/glob.py`"

#: ../Doc/library/glob.rst:21
msgid ""
"The :mod:`glob` module finds all the pathnames matching a specified pattern "
"according to the rules used by the Unix shell, although results are returned "
"in arbitrary order.  No tilde expansion is done, but ``*``, ``?``, and "
"character ranges expressed with ``[]`` will be correctly matched.  This is "
"done by using the :func:`os.scandir` and :func:`fnmatch.fnmatch` functions "
"in concert, and not by actually invoking a subshell.  Note that unlike :func:"
"`fnmatch.fnmatch`, :mod:`glob` treats filenames beginning with a dot (``.``) "
"as special cases. (For tilde and shell variable expansion, use :func:`os."
"path.expanduser` and :func:`os.path.expandvars`.)"
msgstr ""
"Le module :mod:`glob` recherche tous les chemins correspondant à un motif "
"particulier selon les règles utilisées par le shell Unix, les résultats sont "
"renvoyés dans un ordre arbitraire. Aucun remplacement du tilde n'est "
"réalisé, mais les caractères ``*``, ``?``, et les caractères ``[]`` "
"exprimant un intervalle sont correctement renvoyés. Cette opération est "
"réalisée en utilisant les fonctions :func:`os.scandir` et :func:`fnmatch."
"fnmatch` de concert, et sans invoquer une sous-commande. Notons qu'à la "
"différence de :func:`fnmatch.fnmatch`, :mod:`glob` traite les noms de "
"fichiers commençant par un point (``.``) comme des cas spéciaux. (Pour "
"remplacer le tilde et les variables shell, nous vous conseillons d'utiliser "
"les fonctions :func:`os.path.expanduser` et :func:`os.path.expandvars`.)"

#: ../Doc/library/glob.rst:31
msgid ""
"For a literal match, wrap the meta-characters in brackets. For example, "
"``'[?]'`` matches the character ``'?'``."
msgstr ""
"Pour une correspondance littérale, il faut entourer le métacaractère par des "
"crochets. Par exemple, ``'[?]'`` reconnaît le caractère ``'?'``."

#: ../Doc/library/glob.rst:36
msgid "The :mod:`pathlib` module offers high-level path objects."
msgstr ""
"Le module :mod:`pathlib` offre une représentation objet de haut niveau des "
"chemins."

#: ../Doc/library/glob.rst:41
msgid ""
"Return a possibly-empty list of path names that match *pathname*, which must "
"be a string containing a path specification. *pathname* can be either "
"absolute (like :file:`/usr/src/Python-1.5/Makefile`) or relative (like :file:"
"`../../Tools/\\*/\\*.gif`), and can contain shell-style wildcards. Broken "
"symlinks are included in the results (as in the shell)."
msgstr ""
"Renvoie une liste, potentiellement vide, de chemins correspondant au motif "
"*pathname*, qui doit être une chaîne de caractères contenant la "
"spécification du chemin. *pathname* peut être soit absolu (comme :file:`/usr/"
"src/Python-1.5/Makefile`) soit relatif (comme :file:`../../Tools/\\*/\\*."
"gif`), et contenir un caractère de remplacement de style shell. Les liens "
"symboliques cassés sont aussi inclus dans les résultats (comme pour le "
"shell)."

#: ../Doc/library/glob.rst:50
msgid ""
"If *recursive* is true, the pattern \"``**``\" will match any files and zero "
"or more directories and subdirectories.  If the pattern is followed by an "
"``os.sep``, only directories and subdirectories match."
msgstr ""
"Si *recursive* est vrai, le motif \"``**``\" reconnaît tous les fichiers et, "
"zéro ou plus répertoires et sous-répertoires. Si le motif est suivi par un "
"caractère de séparation ``os.sep``, seuls les répertoires et sous-"
"répertoires sont reconnus."

#: ../Doc/library/glob.rst:55
msgid ""
"Using the \"``**``\" pattern in large directory trees may consume an "
"inordinate amount of time."
msgstr ""
"Utiliser le motif \"``**``\" dans de grandes arborescences de dossier peut "
"consommer une quantité de temps démesurée."

#: ../Doc/library/glob.rst:58
msgid "Support for recursive globs using \"``**``\"."
msgstr "Gestion des chemins récursifs utilisant le motif  \"``**``\"."

#: ../Doc/library/glob.rst:64
msgid ""
"Return an :term:`iterator` which yields the same values as :func:`glob` "
"without actually storing them all simultaneously."
msgstr ""
"Renvoie un :term:`iterator` qui produit les mêmes valeurs que :func:`glob`, "
"sans toutes les charger en mémoire simultanément."

#: ../Doc/library/glob.rst:70
msgid ""
"Escape all special characters (``'?'``, ``'*'`` and ``'['``). This is useful "
"if you want to match an arbitrary literal string that may have special "
"characters in it.  Special characters in drive/UNC sharepoints are not "
"escaped, e.g. on Windows ``escape('//?/c:/Quo vadis?.txt')`` returns ``'//?/"
"c:/Quo vadis[?].txt'``."
msgstr ""
"Échappe tous les caractères spéciaux (``'?'``, ``'*'`` et ``'['``). Cela est "
"utile pour reconnaître une chaîne de caractère littérale arbitraire qui "
"contiendrait ce type de caractères. Les caractères spéciaux dans les disques "
"et répertoires partagés (chemins UNC) ne sont pas échappés, e.g. sous "
"Windows ``escape('//?/c:/Quo vadis?.txt')`` renvoie ``'//?/c:/Quo vadis[?]."
"txt'``."

#: ../Doc/library/glob.rst:79
msgid ""
"For example, consider a directory containing the following files: :file:`1."
"gif`, :file:`2.txt`, :file:`card.gif` and a subdirectory :file:`sub` which "
"contains only the file :file:`3.txt`.  :func:`glob` will produce the "
"following results.  Notice how any leading components of the path are "
"preserved. ::"
msgstr ""
"Par exemple, considérons un répertoire contenant les fichiers suivants : :"
"file:`1.gif`, :file:`2.txt`, :file:`card.gif` et un sous-répertoire :file:"
"`sub` contenant seulement le fichier :file:`3.txt`. :func:`glob`  produit "
"les résultats suivants. Notons que les composantes principales des chemins "
"sont préservées. ::"

#: ../Doc/library/glob.rst:97
msgid ""
"If the directory contains files starting with ``.`` they won't be matched by "
"default. For example, consider a directory containing :file:`card.gif` and :"
"file:`.card.gif`::"
msgstr ""
"Si le répertoire contient des fichiers commençant par ``.``, ils ne sont pas "
"reconnus par défaut. Par exemple, considérons un répertoire contenant :file:"
"`card.gif` et :file:`.card.gif` : ::"

#: ../Doc/library/glob.rst:109
msgid "Module :mod:`fnmatch`"
msgstr "Module :mod:`fnmatch`"

#: ../Doc/library/glob.rst:110
msgid "Shell-style filename (not path) expansion"
msgstr ""
"Recherche de noms de fichiers de style shell (ne concerne pas les chemins)"
