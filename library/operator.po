# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-10-13 22:28+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/operator.rst:2
msgid ":mod:`operator` --- Standard operators as functions"
msgstr ""

#: ../Doc/library/operator.rst:9
msgid "**Source code:** :source:`Lib/operator.py`"
msgstr "**Code source :** :source:`Lib/operator.py`"

#: ../Doc/library/operator.rst:18
msgid ""
"The :mod:`operator` module exports a set of efficient functions "
"corresponding to the intrinsic operators of Python.  For example, ``operator."
"add(x, y)`` is equivalent to the expression ``x+y``. Many function names are "
"those used for special methods, without the double underscores.  For "
"backward compatibility, many of these have a variant with the double "
"underscores kept. The variants without the double underscores are preferred "
"for clarity."
msgstr ""

#: ../Doc/library/operator.rst:25
msgid ""
"The functions fall into categories that perform object comparisons, logical "
"operations, mathematical operations and sequence operations."
msgstr ""

#: ../Doc/library/operator.rst:28
msgid ""
"The object comparison functions are useful for all objects, and are named "
"after the rich comparison operators they support:"
msgstr ""

#: ../Doc/library/operator.rst:45
msgid ""
"Perform \"rich comparisons\" between *a* and *b*. Specifically, ``lt(a, b)`` "
"is equivalent to ``a < b``, ``le(a, b)`` is equivalent to ``a <= b``, "
"``eq(a, b)`` is equivalent to ``a == b``, ``ne(a, b)`` is equivalent to ``a !"
"= b``, ``gt(a, b)`` is equivalent to ``a > b`` and ``ge(a, b)`` is "
"equivalent to ``a >= b``.  Note that these functions can return any value, "
"which may or may not be interpretable as a Boolean value.  See :ref:"
"`comparisons` for more information about rich comparisons."
msgstr ""

#: ../Doc/library/operator.rst:54
msgid ""
"The logical operations are also generally applicable to all objects, and "
"support truth tests, identity tests, and boolean operations:"
msgstr ""

#: ../Doc/library/operator.rst:61
msgid ""
"Return the outcome of :keyword:`not` *obj*.  (Note that there is no :meth:"
"`__not__` method for object instances; only the interpreter core defines "
"this operation.  The result is affected by the :meth:`__bool__` and :meth:"
"`__len__` methods.)"
msgstr ""

#: ../Doc/library/operator.rst:69
msgid ""
"Return :const:`True` if *obj* is true, and :const:`False` otherwise.  This "
"is equivalent to using the :class:`bool` constructor."
msgstr ""

#: ../Doc/library/operator.rst:75
msgid "Return ``a is b``.  Tests object identity."
msgstr ""

#: ../Doc/library/operator.rst:80
msgid "Return ``a is not b``.  Tests object identity."
msgstr ""

#: ../Doc/library/operator.rst:83
msgid "The mathematical and bitwise operations are the most numerous:"
msgstr ""

#: ../Doc/library/operator.rst:89
msgid "Return the absolute value of *obj*."
msgstr "Renvoie la valeur absolue de *obj*."

#: ../Doc/library/operator.rst:95
msgid "Return ``a + b``, for *a* and *b* numbers."
msgstr ""

#: ../Doc/library/operator.rst:101
msgid "Return the bitwise and of *a* and *b*."
msgstr ""

#: ../Doc/library/operator.rst:107
msgid "Return ``a // b``."
msgstr ""

#: ../Doc/library/operator.rst:113
msgid "Return *a* converted to an integer.  Equivalent to ``a.__index__()``."
msgstr ""

#: ../Doc/library/operator.rst:121
msgid ""
"Return the bitwise inverse of the number *obj*.  This is equivalent to "
"``~obj``."
msgstr ""

#: ../Doc/library/operator.rst:127
msgid "Return *a* shifted left by *b*."
msgstr ""

#: ../Doc/library/operator.rst:133
msgid "Return ``a % b``."
msgstr ""

#: ../Doc/library/operator.rst:139
msgid "Return ``a * b``, for *a* and *b* numbers."
msgstr ""

#: ../Doc/library/operator.rst:145
msgid "Return ``a @ b``."
msgstr ""

#: ../Doc/library/operator.rst:153
msgid "Return *obj* negated (``-obj``)."
msgstr ""

#: ../Doc/library/operator.rst:159
msgid "Return the bitwise or of *a* and *b*."
msgstr ""

#: ../Doc/library/operator.rst:165
msgid "Return *obj* positive (``+obj``)."
msgstr ""

#: ../Doc/library/operator.rst:171
msgid "Return ``a ** b``, for *a* and *b* numbers."
msgstr ""

#: ../Doc/library/operator.rst:177
msgid "Return *a* shifted right by *b*."
msgstr ""

#: ../Doc/library/operator.rst:183
msgid "Return ``a - b``."
msgstr ""

#: ../Doc/library/operator.rst:189
msgid ""
"Return ``a / b`` where 2/3 is .66 rather than 0.  This is also known as "
"\"true\" division."
msgstr ""

#: ../Doc/library/operator.rst:196
msgid "Return the bitwise exclusive or of *a* and *b*."
msgstr ""

#: ../Doc/library/operator.rst:199
msgid ""
"Operations which work with sequences (some of them with mappings too) "
"include:"
msgstr ""

#: ../Doc/library/operator.rst:204
msgid "Return ``a + b`` for *a* and *b* sequences."
msgstr ""

#: ../Doc/library/operator.rst:210
msgid "Return the outcome of the test ``b in a``. Note the reversed operands."
msgstr ""

#: ../Doc/library/operator.rst:215
msgid "Return the number of occurrences of *b* in *a*."
msgstr ""

#: ../Doc/library/operator.rst:221
msgid "Remove the value of *a* at index *b*."
msgstr ""

#: ../Doc/library/operator.rst:227
msgid "Return the value of *a* at index *b*."
msgstr ""

#: ../Doc/library/operator.rst:232
msgid "Return the index of the first of occurrence of *b* in *a*."
msgstr ""

#: ../Doc/library/operator.rst:238
msgid "Set the value of *a* at index *b* to *c*."
msgstr ""

#: ../Doc/library/operator.rst:243
msgid ""
"Return an estimated length for the object *o*. First try to return its "
"actual length, then an estimate using :meth:`object.__length_hint__`, and "
"finally return the default value."
msgstr ""

#: ../Doc/library/operator.rst:249
msgid ""
"The :mod:`operator` module also defines tools for generalized attribute and "
"item lookups.  These are useful for making fast field extractors as "
"arguments for :func:`map`, :func:`sorted`, :meth:`itertools.groupby`, or "
"other functions that expect a function argument."
msgstr ""

#: ../Doc/library/operator.rst:258
msgid ""
"Return a callable object that fetches *attr* from its operand. If more than "
"one attribute is requested, returns a tuple of attributes. The attribute "
"names can also contain dots. For example:"
msgstr ""

#: ../Doc/library/operator.rst:262
msgid "After ``f = attrgetter('name')``, the call ``f(b)`` returns ``b.name``."
msgstr ""

#: ../Doc/library/operator.rst:264
msgid ""
"After ``f = attrgetter('name', 'date')``, the call ``f(b)`` returns ``(b."
"name, b.date)``."
msgstr ""

#: ../Doc/library/operator.rst:267
msgid ""
"After ``f = attrgetter('name.first', 'name.last')``, the call ``f(b)`` "
"returns ``(b.name.first, b.name.last)``."
msgstr ""

#: ../Doc/library/operator.rst:270 ../Doc/library/operator.rst:302
#: ../Doc/library/operator.rst:348
msgid "Equivalent to::"
msgstr "Équivalent à : ::"

#: ../Doc/library/operator.rst:293
msgid ""
"Return a callable object that fetches *item* from its operand using the "
"operand's :meth:`__getitem__` method.  If multiple items are specified, "
"returns a tuple of lookup values.  For example:"
msgstr ""

#: ../Doc/library/operator.rst:297
msgid "After ``f = itemgetter(2)``, the call ``f(r)`` returns ``r[2]``."
msgstr ""

#: ../Doc/library/operator.rst:299
msgid ""
"After ``g = itemgetter(2, 5, 3)``, the call ``g(r)`` returns ``(r[2], r[5], "
"r[3])``."
msgstr ""

#: ../Doc/library/operator.rst:314
msgid ""
"The items can be any type accepted by the operand's :meth:`__getitem__` "
"method.  Dictionaries accept any hashable value.  Lists, tuples, and strings "
"accept an index or a slice:"
msgstr ""

#: ../Doc/library/operator.rst:326
msgid ""
"Example of using :func:`itemgetter` to retrieve specific fields from a tuple "
"record:"
msgstr ""

#: ../Doc/library/operator.rst:339
msgid ""
"Return a callable object that calls the method *name* on its operand.  If "
"additional arguments and/or keyword arguments are given, they will be given "
"to the method as well.  For example:"
msgstr ""

#: ../Doc/library/operator.rst:343
msgid ""
"After ``f = methodcaller('name')``, the call ``f(b)`` returns ``b.name()``."
msgstr ""

#: ../Doc/library/operator.rst:345
msgid ""
"After ``f = methodcaller('name', 'foo', bar=1)``, the call ``f(b)`` returns "
"``b.name('foo', bar=1)``."
msgstr ""

#: ../Doc/library/operator.rst:359
msgid "Mapping Operators to Functions"
msgstr ""

#: ../Doc/library/operator.rst:361
msgid ""
"This table shows how abstract operations correspond to operator symbols in "
"the Python syntax and the functions in the :mod:`operator` module."
msgstr ""

#: ../Doc/library/operator.rst:365
msgid "Operation"
msgstr "Opération"

#: ../Doc/library/operator.rst:365
msgid "Syntax"
msgstr ""

#: ../Doc/library/operator.rst:365
msgid "Function"
msgstr "Fonction"

#: ../Doc/library/operator.rst:367
msgid "Addition"
msgstr ""

#: ../Doc/library/operator.rst:367
msgid "``a + b``"
msgstr "``a + b``"

#: ../Doc/library/operator.rst:367
msgid "``add(a, b)``"
msgstr "``add(a, b)``"

#: ../Doc/library/operator.rst:369
msgid "Concatenation"
msgstr ""

#: ../Doc/library/operator.rst:369
msgid "``seq1 + seq2``"
msgstr "``seq1 + seq2``"

#: ../Doc/library/operator.rst:369
msgid "``concat(seq1, seq2)``"
msgstr "``concat(seq1, seq2)``"

#: ../Doc/library/operator.rst:371
msgid "Containment Test"
msgstr ""

#: ../Doc/library/operator.rst:371
msgid "``obj in seq``"
msgstr "``obj in seq``"

#: ../Doc/library/operator.rst:371
msgid "``contains(seq, obj)``"
msgstr "``contains(seq, obj)``"

#: ../Doc/library/operator.rst:373 ../Doc/library/operator.rst:375
msgid "Division"
msgstr ""

#: ../Doc/library/operator.rst:373
msgid "``a / b``"
msgstr "``a / b``"

#: ../Doc/library/operator.rst:373
msgid "``truediv(a, b)``"
msgstr "``truediv(a, b)``"

#: ../Doc/library/operator.rst:375
msgid "``a // b``"
msgstr "``a // b``"

#: ../Doc/library/operator.rst:375
msgid "``floordiv(a, b)``"
msgstr "``floordiv(a, b)``"

#: ../Doc/library/operator.rst:377
msgid "Bitwise And"
msgstr ""

#: ../Doc/library/operator.rst:377
msgid "``a & b``"
msgstr "``a & b``"

#: ../Doc/library/operator.rst:377
msgid "``and_(a, b)``"
msgstr "``and_(a, b)``"

#: ../Doc/library/operator.rst:379
msgid "Bitwise Exclusive Or"
msgstr ""

#: ../Doc/library/operator.rst:379
msgid "``a ^ b``"
msgstr "``a ^ b``"

#: ../Doc/library/operator.rst:379
msgid "``xor(a, b)``"
msgstr "``xor(a, b)``"

#: ../Doc/library/operator.rst:381
msgid "Bitwise Inversion"
msgstr ""

#: ../Doc/library/operator.rst:381
msgid "``~ a``"
msgstr "``~ a``"

#: ../Doc/library/operator.rst:381
msgid "``invert(a)``"
msgstr "``invert(a)``"

#: ../Doc/library/operator.rst:383
msgid "Bitwise Or"
msgstr ""

#: ../Doc/library/operator.rst:383
msgid "``a | b``"
msgstr "``a | b``"

#: ../Doc/library/operator.rst:383
msgid "``or_(a, b)``"
msgstr "``or_(a, b)``"

#: ../Doc/library/operator.rst:385
msgid "Exponentiation"
msgstr ""

#: ../Doc/library/operator.rst:385
msgid "``a ** b``"
msgstr "``a ** b``"

#: ../Doc/library/operator.rst:385
msgid "``pow(a, b)``"
msgstr "``pow(a, b)``"

#: ../Doc/library/operator.rst:387 ../Doc/library/operator.rst:389
msgid "Identity"
msgstr ""

#: ../Doc/library/operator.rst:387
msgid "``a is b``"
msgstr "``a is b``"

#: ../Doc/library/operator.rst:387
msgid "``is_(a, b)``"
msgstr "``is_(a, b)``"

#: ../Doc/library/operator.rst:389
msgid "``a is not b``"
msgstr "``a is not b``"

#: ../Doc/library/operator.rst:389
msgid "``is_not(a, b)``"
msgstr "``is_not(a, b)``"

#: ../Doc/library/operator.rst:391
msgid "Indexed Assignment"
msgstr ""

#: ../Doc/library/operator.rst:391
msgid "``obj[k] = v``"
msgstr "``obj[k] = v``"

#: ../Doc/library/operator.rst:391
msgid "``setitem(obj, k, v)``"
msgstr "``setitem(obj, k, v)``"

#: ../Doc/library/operator.rst:393
msgid "Indexed Deletion"
msgstr ""

#: ../Doc/library/operator.rst:393
msgid "``del obj[k]``"
msgstr "``del obj[k]``"

#: ../Doc/library/operator.rst:393
msgid "``delitem(obj, k)``"
msgstr "``delitem(obj, k)``"

#: ../Doc/library/operator.rst:395
msgid "Indexing"
msgstr ""

#: ../Doc/library/operator.rst:395
msgid "``obj[k]``"
msgstr "``obj[k]``"

#: ../Doc/library/operator.rst:395
msgid "``getitem(obj, k)``"
msgstr "``getitem(obj, k)``"

#: ../Doc/library/operator.rst:397
msgid "Left Shift"
msgstr ""

#: ../Doc/library/operator.rst:397
msgid "``a << b``"
msgstr "``a << b``"

#: ../Doc/library/operator.rst:397
msgid "``lshift(a, b)``"
msgstr "``lshift(a, b)``"

#: ../Doc/library/operator.rst:399
msgid "Modulo"
msgstr ""

#: ../Doc/library/operator.rst:399
msgid "``a % b``"
msgstr "``a % b``"

#: ../Doc/library/operator.rst:399
msgid "``mod(a, b)``"
msgstr "``mod(a, b)``"

#: ../Doc/library/operator.rst:401
msgid "Multiplication"
msgstr ""

#: ../Doc/library/operator.rst:401
msgid "``a * b``"
msgstr "``a * b``"

#: ../Doc/library/operator.rst:401
msgid "``mul(a, b)``"
msgstr "``mul(a, b)``"

#: ../Doc/library/operator.rst:403
msgid "Matrix Multiplication"
msgstr ""

#: ../Doc/library/operator.rst:403
msgid "``a @ b``"
msgstr "``a @ b``"

#: ../Doc/library/operator.rst:403
msgid "``matmul(a, b)``"
msgstr "``matmul(a, b)``"

#: ../Doc/library/operator.rst:405
msgid "Negation (Arithmetic)"
msgstr ""

#: ../Doc/library/operator.rst:405
msgid "``- a``"
msgstr "``- a``"

#: ../Doc/library/operator.rst:405
msgid "``neg(a)``"
msgstr "``neg(a)``"

#: ../Doc/library/operator.rst:407
msgid "Negation (Logical)"
msgstr ""

#: ../Doc/library/operator.rst:407
msgid "``not a``"
msgstr "``not a``"

#: ../Doc/library/operator.rst:407
msgid "``not_(a)``"
msgstr "``not_(a)``"

#: ../Doc/library/operator.rst:409
msgid "Positive"
msgstr ""

#: ../Doc/library/operator.rst:409
msgid "``+ a``"
msgstr "``+ a``"

#: ../Doc/library/operator.rst:409
msgid "``pos(a)``"
msgstr "``pos(a)``"

#: ../Doc/library/operator.rst:411
msgid "Right Shift"
msgstr ""

#: ../Doc/library/operator.rst:411
msgid "``a >> b``"
msgstr "``a >> b``"

#: ../Doc/library/operator.rst:411
msgid "``rshift(a, b)``"
msgstr "``rshift(a, b)``"

#: ../Doc/library/operator.rst:413
msgid "Slice Assignment"
msgstr ""

#: ../Doc/library/operator.rst:413
msgid "``seq[i:j] = values``"
msgstr "``seq[i:j] = values``"

#: ../Doc/library/operator.rst:413
msgid "``setitem(seq, slice(i, j), values)``"
msgstr "``setitem(seq, slice(i, j), values)``"

#: ../Doc/library/operator.rst:415
msgid "Slice Deletion"
msgstr ""

#: ../Doc/library/operator.rst:415
msgid "``del seq[i:j]``"
msgstr "``del seq[i:j]``"

#: ../Doc/library/operator.rst:415
msgid "``delitem(seq, slice(i, j))``"
msgstr "``delitem(seq, slice(i, j))``"

#: ../Doc/library/operator.rst:417
msgid "Slicing"
msgstr ""

#: ../Doc/library/operator.rst:417
msgid "``seq[i:j]``"
msgstr "``seq[i:j]``"

#: ../Doc/library/operator.rst:417
msgid "``getitem(seq, slice(i, j))``"
msgstr "``getitem(seq, slice(i, j))``"

#: ../Doc/library/operator.rst:419
msgid "String Formatting"
msgstr ""

#: ../Doc/library/operator.rst:419
msgid "``s % obj``"
msgstr "``s % obj``"

#: ../Doc/library/operator.rst:419
msgid "``mod(s, obj)``"
msgstr "``mod(s, obj)``"

#: ../Doc/library/operator.rst:421
msgid "Subtraction"
msgstr ""

#: ../Doc/library/operator.rst:421
msgid "``a - b``"
msgstr "``a - b``"

#: ../Doc/library/operator.rst:421
msgid "``sub(a, b)``"
msgstr "``sub(a, b)``"

#: ../Doc/library/operator.rst:423
msgid "Truth Test"
msgstr ""

#: ../Doc/library/operator.rst:423
msgid "``obj``"
msgstr "``obj``"

#: ../Doc/library/operator.rst:423
msgid "``truth(obj)``"
msgstr "``truth(obj)``"

#: ../Doc/library/operator.rst:425 ../Doc/library/operator.rst:427
#: ../Doc/library/operator.rst:433 ../Doc/library/operator.rst:435
msgid "Ordering"
msgstr ""

#: ../Doc/library/operator.rst:425
msgid "``a < b``"
msgstr "``a < b``"

#: ../Doc/library/operator.rst:425
msgid "``lt(a, b)``"
msgstr "``lt(a, b)``"

#: ../Doc/library/operator.rst:427
msgid "``a <= b``"
msgstr "``a <= b``"

#: ../Doc/library/operator.rst:427
msgid "``le(a, b)``"
msgstr "``le(a, b)``"

#: ../Doc/library/operator.rst:429
msgid "Equality"
msgstr ""

#: ../Doc/library/operator.rst:429
msgid "``a == b``"
msgstr "``a == b``"

#: ../Doc/library/operator.rst:429
msgid "``eq(a, b)``"
msgstr "``eq(a, b)``"

#: ../Doc/library/operator.rst:431
msgid "Difference"
msgstr "Différence"

#: ../Doc/library/operator.rst:431
msgid "``a != b``"
msgstr "``a != b``"

#: ../Doc/library/operator.rst:431
msgid "``ne(a, b)``"
msgstr "``ne(a, b)``"

#: ../Doc/library/operator.rst:433
msgid "``a >= b``"
msgstr "``a >= b``"

#: ../Doc/library/operator.rst:433
msgid "``ge(a, b)``"
msgstr "``ge(a, b)``"

#: ../Doc/library/operator.rst:435
msgid "``a > b``"
msgstr "``a > b``"

#: ../Doc/library/operator.rst:435
msgid "``gt(a, b)``"
msgstr "``gt(a, b)``"

#: ../Doc/library/operator.rst:439
msgid "Inplace Operators"
msgstr ""

#: ../Doc/library/operator.rst:441
msgid ""
"Many operations have an \"in-place\" version.  Listed below are functions "
"providing a more primitive access to in-place operators than the usual "
"syntax does; for example, the :term:`statement` ``x += y`` is equivalent to "
"``x = operator.iadd(x, y)``.  Another way to put it is to say that ``z = "
"operator.iadd(x, y)`` is equivalent to the compound statement ``z = x; z += "
"y``."
msgstr ""

#: ../Doc/library/operator.rst:448
msgid ""
"In those examples, note that when an in-place method is called, the "
"computation and assignment are performed in two separate steps.  The in-"
"place functions listed below only do the first step, calling the in-place "
"method.  The second step, assignment, is not handled."
msgstr ""

#: ../Doc/library/operator.rst:453
msgid ""
"For immutable targets such as strings, numbers, and tuples, the updated "
"value is computed, but not assigned back to the input variable:"
msgstr ""

#: ../Doc/library/operator.rst:462
msgid ""
"For mutable targets such as lists and dictionaries, the inplace method will "
"perform the update, so no subsequent assignment is necessary:"
msgstr ""

#: ../Doc/library/operator.rst:474
msgid "``a = iadd(a, b)`` is equivalent to ``a += b``."
msgstr "``a = iadd(a, b)`` is equivalent to ``a += b``."

#: ../Doc/library/operator.rst:480
msgid "``a = iand(a, b)`` is equivalent to ``a &= b``."
msgstr "``a = iand(a, b)`` is equivalent to ``a &= b``."

#: ../Doc/library/operator.rst:486
msgid ""
"``a = iconcat(a, b)`` is equivalent to ``a += b`` for *a* and *b* sequences."
msgstr ""
"``a = iconcat(a, b)`` is equivalent to ``a += b`` for *a* and *b* sequences."

#: ../Doc/library/operator.rst:492
msgid "``a = ifloordiv(a, b)`` is equivalent to ``a //= b``."
msgstr "``a = ifloordiv(a, b)`` is equivalent to ``a //= b``."

#: ../Doc/library/operator.rst:498
msgid "``a = ilshift(a, b)`` is equivalent to ``a <<= b``."
msgstr "``a = ilshift(a, b)`` is equivalent to ``a <<= b``."

#: ../Doc/library/operator.rst:504
msgid "``a = imod(a, b)`` is equivalent to ``a %= b``."
msgstr "``a = imod(a, b)`` is equivalent to ``a %= b``."

#: ../Doc/library/operator.rst:510
msgid "``a = imul(a, b)`` is equivalent to ``a *= b``."
msgstr "``a = imul(a, b)`` is equivalent to ``a *= b``."

#: ../Doc/library/operator.rst:516
msgid "``a = imatmul(a, b)`` is equivalent to ``a @= b``."
msgstr "``a = imatmul(a, b)`` is equivalent to ``a @= b``."

#: ../Doc/library/operator.rst:524
msgid "``a = ior(a, b)`` is equivalent to ``a |= b``."
msgstr "``a = ior(a, b)`` is equivalent to ``a |= b``."

#: ../Doc/library/operator.rst:530
msgid "``a = ipow(a, b)`` is equivalent to ``a **= b``."
msgstr "``a = ipow(a, b)`` is equivalent to ``a **= b``."

#: ../Doc/library/operator.rst:536
msgid "``a = irshift(a, b)`` is equivalent to ``a >>= b``."
msgstr "``a = irshift(a, b)`` is equivalent to ``a >>= b``."

#: ../Doc/library/operator.rst:542
msgid "``a = isub(a, b)`` is equivalent to ``a -= b``."
msgstr "``a = isub(a, b)`` is equivalent to ``a -= b``."

#: ../Doc/library/operator.rst:548
msgid "``a = itruediv(a, b)`` is equivalent to ``a /= b``."
msgstr "``a = itruediv(a, b)`` is equivalent to ``a /= b``."

#: ../Doc/library/operator.rst:554
msgid "``a = ixor(a, b)`` is equivalent to ``a ^= b``."
msgstr "``a = ixor(a, b)`` is equivalent to ``a ^= b``."
