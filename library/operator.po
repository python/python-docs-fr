# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-24 09:01+0200\n"
"PO-Revision-Date: 2018-12-11 22:46+0100\n"
"Last-Translator: Antoine Wecxsteen\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.0.6\n"

#: library/operator.rst:2
msgid ":mod:`operator` --- Standard operators as functions"
msgstr ":mod:`operator` — Opérateurs standards en tant que fonctions"

#: library/operator.rst:9
msgid "**Source code:** :source:`Lib/operator.py`"
msgstr "**Code source :** :source:`Lib/operator.py`"

#: library/operator.rst:18
msgid ""
"The :mod:`operator` module exports a set of efficient functions "
"corresponding to the intrinsic operators of Python.  For example, ``operator."
"add(x, y)`` is equivalent to the expression ``x+y``. Many function names are "
"those used for special methods, without the double underscores.  For "
"backward compatibility, many of these have a variant with the double "
"underscores kept. The variants without the double underscores are preferred "
"for clarity."
msgstr ""
"Le module :mod:`operator` fournit un ensemble de fonctions correspondant aux "
"opérateurs natifs de Python.  Par exemple, ``operator.add(x, y)`` correspond "
"à l'expression ``x+y``. Les noms de la plupart de ces fonctions sont ceux "
"utilisés par les méthodes spéciales, sans les doubles tirets bas.  Pour "
"assurer la rétrocompatibilité, la plupart de ces noms ont une variante "
"*avec* les doubles tirets bas ; la forme simple est cependant à privilégier "
"pour des raisons de clarté."

#: library/operator.rst:25
msgid ""
"The functions fall into categories that perform object comparisons, logical "
"operations, mathematical operations and sequence operations."
msgstr ""
"Les fonctions sont divisées en différentes catégories selon l'opération "
"effectuée : comparaison entre objets, opérations logiques, opérations "
"mathématiques ou opérations sur séquences."

#: library/operator.rst:28
msgid ""
"The object comparison functions are useful for all objects, and are named "
"after the rich comparison operators they support:"
msgstr ""
"Les fonctions de comparaison s'appliquent à tous les objets, et leur nom "
"vient des opérateurs de comparaison qu'elles implémentent :"

#: library/operator.rst:45
msgid ""
"Perform \"rich comparisons\" between *a* and *b*. Specifically, ``lt(a, b)`` "
"is equivalent to ``a < b``, ``le(a, b)`` is equivalent to ``a <= b``, "
"``eq(a, b)`` is equivalent to ``a == b``, ``ne(a, b)`` is equivalent to ``a !"
"= b``, ``gt(a, b)`` is equivalent to ``a > b`` and ``ge(a, b)`` is "
"equivalent to ``a >= b``.  Note that these functions can return any value, "
"which may or may not be interpretable as a Boolean value.  See :ref:"
"`comparisons` for more information about rich comparisons."
msgstr ""
"Effectue une « comparaison riche » entre *a* et *b*. Plus précisément, "
"``lt(a, b)`` équivaut à ``a < b``, ``le(a, b)`` équivaut à ``a <= b``, "
"``eq(a, b)`` équivaut à ``a == b``, ``ne(a, b)`` équivaut à ``a != b``, "
"``gt(a, b)`` équivaut à ``a > b`` et ``ge(a, b)`` équivaut à ``a >= b``.  "
"Notez que ces fonctions peuvent renvoyer n'importe quelle valeur, "
"convertible ou non en booléen.  Voir :ref:`comparisons` pour plus "
"d'informations sur les méthodes de comparaison riches."

#: library/operator.rst:54
msgid ""
"The logical operations are also generally applicable to all objects, and "
"support truth tests, identity tests, and boolean operations:"
msgstr ""
"En général, les opérations logiques s'appliquent aussi à tous les objets et "
"implémentent les tests de vérité, d'identité et les opérations booléennes :"

#: library/operator.rst:61
msgid ""
"Return the outcome of :keyword:`not` *obj*.  (Note that there is no :meth:"
"`__not__` method for object instances; only the interpreter core defines "
"this operation.  The result is affected by the :meth:`__bool__` and :meth:"
"`__len__` methods.)"
msgstr ""
"Renvoie le résultat de :keyword:`not` *obj*.  (Notez qu'il n'existe pas de "
"méthode :meth:`__not__` pour les instances d'objet; seul le cœur de "
"l'interpréteur définit cette opération. Le résultat dépend des méthodes :"
"meth:`__bool__` et :meth:`__len__`.)"

#: library/operator.rst:69
msgid ""
"Return :const:`True` if *obj* is true, and :const:`False` otherwise.  This "
"is equivalent to using the :class:`bool` constructor."
msgstr ""
"Renvoie :const:`True` si *obj* est vrai, et :const:`False` dans le cas "
"contraire.  Équivaut à utiliser le constructeur de :class:`bool`."

#: library/operator.rst:75
msgid "Return ``a is b``.  Tests object identity."
msgstr ""
"Renvoie ``a is b``.  Vérifie si les deux paramètres sont le même objet."

#: library/operator.rst:80
msgid "Return ``a is not b``.  Tests object identity."
msgstr ""
"Renvoie ``a is not b``.  Vérifie si les deux paramètres sont deux objets "
"distincts."

#: library/operator.rst:83
msgid "The mathematical and bitwise operations are the most numerous:"
msgstr "Les opérations mathématiques ou bit à bit sont les plus nombreuses :"

#: library/operator.rst:89
msgid "Return the absolute value of *obj*."
msgstr "Renvoie la valeur absolue de *obj*."

#: library/operator.rst:95
msgid "Return ``a + b``, for *a* and *b* numbers."
msgstr "Renvoie ``a + b`` où *a* et *b* sont des nombres."

#: library/operator.rst:101
msgid "Return the bitwise and of *a* and *b*."
msgstr "Renvoie le *et* bit à bit de *a* et *b*."

#: library/operator.rst:107
msgid "Return ``a // b``."
msgstr "Renvoie ``a // b``."

#: library/operator.rst:113
msgid "Return *a* converted to an integer.  Equivalent to ``a.__index__()``."
msgstr "Renvoie *a* converti en entier. Équivaut à ``a.__index__()``."

#: library/operator.rst:121
msgid ""
"Return the bitwise inverse of the number *obj*.  This is equivalent to "
"``~obj``."
msgstr "Renvoie l'inverse bit à bit du nombre *obj*. Équivaut à ``~obj``."

#: library/operator.rst:127
msgid "Return *a* shifted left by *b*."
msgstr "Renvoie le décalage de *b* bits vers la gauche de *a*."

#: library/operator.rst:133
msgid "Return ``a % b``."
msgstr "Renvoie``a % b``."

#: library/operator.rst:139
msgid "Return ``a * b``, for *a* and *b* numbers."
msgstr "Renvoie ``a * b`` où *a* et *b* sont des nombres."

#: library/operator.rst:145
msgid "Return ``a @ b``."
msgstr "Renvoie ``a @ b``."

#: library/operator.rst:153
msgid "Return *obj* negated (``-obj``)."
msgstr "Renvoie l'opposé de *obj* (``-obj``)."

#: library/operator.rst:159
msgid "Return the bitwise or of *a* and *b*."
msgstr "Renvoie le *ou* bit à bit de *a* et *b*."

#: library/operator.rst:165
msgid "Return *obj* positive (``+obj``)."
msgstr "Renvoie la valeur positive de *obj* (``+obj``)."

#: library/operator.rst:171
msgid "Return ``a ** b``, for *a* and *b* numbers."
msgstr "Renvoie ``a ** b`` où *a* et *b* sont des nombres."

#: library/operator.rst:177
msgid "Return *a* shifted right by *b*."
msgstr "Renvoie le décalage de *b* bits vers la droite de *a*."

#: library/operator.rst:183
msgid "Return ``a - b``."
msgstr "Renvoie ``a - b``."

#: library/operator.rst:189
msgid ""
"Return ``a / b`` where 2/3 is .66 rather than 0.  This is also known as "
"\"true\" division."
msgstr ""
"Renvoie ``a / b`` où 2/3 est 0.66 et non 0.  Appelée aussi division « réelle "
"»."

#: library/operator.rst:196
msgid "Return the bitwise exclusive or of *a* and *b*."
msgstr "Renvoie le ou exclusif bit à bit de *a* et *b*."

#: library/operator.rst:199
msgid ""
"Operations which work with sequences (some of them with mappings too) "
"include:"
msgstr ""
"Les opérations sur séquences (et pour certaines, sur correspondances) sont :"

#: library/operator.rst:204
msgid "Return ``a + b`` for *a* and *b* sequences."
msgstr "Renvoie ``a + b`` où *a* et *b* sont des séquences."

#: library/operator.rst:210
msgid "Return the outcome of the test ``b in a``. Note the reversed operands."
msgstr ""
"Renvoie le résultat du test ``b in a``. Notez que les opérandes sont "
"inversées."

#: library/operator.rst:215
msgid "Return the number of occurrences of *b* in *a*."
msgstr "Renvoie le nombre d’occurrences de *b* dans *a*."

#: library/operator.rst:221
msgid "Remove the value of *a* at index *b*."
msgstr "Renvoie la valeur de *a* à l'indice *b*."

#: library/operator.rst:227
msgid "Return the value of *a* at index *b*."
msgstr "Renvoie la valeur de *a* à l'indice *b*."

#: library/operator.rst:232
msgid "Return the index of the first of occurrence of *b* in *a*."
msgstr "Renvoie l'indice de la première occurrence de *b* dans *a*."

#: library/operator.rst:238
msgid "Set the value of *a* at index *b* to *c*."
msgstr "Affecte *c* dans *a* à l'indice *b*."

#: library/operator.rst:243
msgid ""
"Return an estimated length for the object *o*. First try to return its "
"actual length, then an estimate using :meth:`object.__length_hint__`, and "
"finally return the default value."
msgstr ""
"Renvoie une estimation de la taille de l'objet *o*. Tente d'abord de "
"renvoyer la taille réelle, puis une estimation en appelant :meth:`object."
"__length_hint__`, ou sinon la valeur par défaut."

#: library/operator.rst:249
msgid ""
"The :mod:`operator` module also defines tools for generalized attribute and "
"item lookups.  These are useful for making fast field extractors as "
"arguments for :func:`map`, :func:`sorted`, :meth:`itertools.groupby`, or "
"other functions that expect a function argument."
msgstr ""
"Le module :mod:`operator` définit aussi des fonctions pour la recherche "
"générique d'attributs ou d'objets. Elles sont particulièrement utiles pour "
"construire rapidement des accesseurs d'attributs à passer en paramètre à :"
"func:`map`, :func:`sorted`, :meth:`itertools.groupby` ou à toute autre "
"fonction prenant une fonction en paramètre."

#: library/operator.rst:258
msgid ""
"Return a callable object that fetches *attr* from its operand. If more than "
"one attribute is requested, returns a tuple of attributes. The attribute "
"names can also contain dots. For example:"
msgstr ""
"Renvoie un objet appelable qui récupère *attr* de son opérande. Si plus d'un "
"attribut est demandé, renvoie un n-uplet d'attributs. Les noms des attributs "
"peuvent aussi comporter des points. Par exemple :"

#: library/operator.rst:262
msgid "After ``f = attrgetter('name')``, the call ``f(b)`` returns ``b.name``."
msgstr "Avec ``f = attrgetter('name')``, l'appel ``f(b)`` renvoie ``b.name``."

#: library/operator.rst:264
msgid ""
"After ``f = attrgetter('name', 'date')``, the call ``f(b)`` returns ``(b."
"name, b.date)``."
msgstr ""
"Avec ``f = attrgetter('name', 'date')``, l'appel ``f(b)`` renvoie ``(b.name, "
"b.date)``."

#: library/operator.rst:267
msgid ""
"After ``f = attrgetter('name.first', 'name.last')``, the call ``f(b)`` "
"returns ``(b.name.first, b.name.last)``."
msgstr ""
"Après ``f = attrgetter('name.first', 'name.last')``, l'appel ``f(b)`` "
"renvoie ``(b.name.first, b.name.last)``."

#: library/operator.rst:270 library/operator.rst:302 library/operator.rst:353
msgid "Equivalent to::"
msgstr "Équivalent à ::"

#: library/operator.rst:293
msgid ""
"Return a callable object that fetches *item* from its operand using the "
"operand's :meth:`__getitem__` method.  If multiple items are specified, "
"returns a tuple of lookup values.  For example:"
msgstr ""
"Renvoie un objet appelable qui récupère *item* de l'opérande en utilisant la "
"méthode :meth:`__getitem__`. Si plusieurs *item* sont passés en paramètre, "
"renvoie un n-uplet des valeurs récupérées. Par exemple :"

#: library/operator.rst:297
msgid "After ``f = itemgetter(2)``, the call ``f(r)`` returns ``r[2]``."
msgstr "Avec ``f = itemgetter(2)``, ``f(r)`` renvoie ``r[2]``."

#: library/operator.rst:299
msgid ""
"After ``g = itemgetter(2, 5, 3)``, the call ``g(r)`` returns ``(r[2], r[5], "
"r[3])``."
msgstr ""
"Avec ``g = itemgetter(2, 5, 3)``, ``g(r)`` renvoie ``(r[2], r[5], r[3])``."

#: library/operator.rst:314
msgid ""
"The items can be any type accepted by the operand's :meth:`__getitem__` "
"method.  Dictionaries accept any hashable value.  Lists, tuples, and strings "
"accept an index or a slice:"
msgstr ""
"Les *items* en entrée peuvent être de n'importe quel type tant que celui-ci "
"est géré par la méthode :meth:`__getitem__` de l'opérande. Les dictionnaires "
"acceptent toute valeur hachable. Les listes, n-uplets et chaînes de "
"caractères acceptent un index ou une tranche :"

#: library/operator.rst:331
msgid ""
"Example of using :func:`itemgetter` to retrieve specific fields from a tuple "
"record:"
msgstr ""
"Exemple d'utilisation de :func:`itemgetter` pour récupérer des champs "
"spécifiques d'un n-uplet :"

#: library/operator.rst:344
msgid ""
"Return a callable object that calls the method *name* on its operand.  If "
"additional arguments and/or keyword arguments are given, they will be given "
"to the method as well.  For example:"
msgstr ""
"Renvoie un objet appelable qui appelle la méthode *name* de son opérande. Si "
"des paramètres supplémentaires et/ou des paramètres nommés sont donnés, ils "
"seront aussi passés à la méthode. Par exemple :"

#: library/operator.rst:348
msgid ""
"After ``f = methodcaller('name')``, the call ``f(b)`` returns ``b.name()``."
msgstr "Avec  ``f = methodcaller('name')``, ``f(b)`` renvoie ``b.name()``."

#: library/operator.rst:350
msgid ""
"After ``f = methodcaller('name', 'foo', bar=1)``, the call ``f(b)`` returns "
"``b.name('foo', bar=1)``."
msgstr ""
"Avec ``f = methodcaller('name', 'foo', bar=1)``, ``f(b)`` renvoie ``b."
"name('foo', bar=1)``."

#: library/operator.rst:364
msgid "Mapping Operators to Functions"
msgstr "Correspondances entre opérateurs et fonctions"

#: library/operator.rst:366
msgid ""
"This table shows how abstract operations correspond to operator symbols in "
"the Python syntax and the functions in the :mod:`operator` module."
msgstr ""
"Le tableau montre la correspondance entre les symboles des opérateurs Python "
"et les fonctions du module :mod:`operator`."

#: library/operator.rst:370
msgid "Operation"
msgstr "Opération"

#: library/operator.rst:370
msgid "Syntax"
msgstr "Syntaxe"

#: library/operator.rst:370
msgid "Function"
msgstr "Fonction"

#: library/operator.rst:372
msgid "Addition"
msgstr "Addition"

#: library/operator.rst:372
msgid "``a + b``"
msgstr "``a + b``"

#: library/operator.rst:372
msgid "``add(a, b)``"
msgstr "``add(a, b)``"

#: library/operator.rst:374
msgid "Concatenation"
msgstr "Concaténation"

#: library/operator.rst:374
msgid "``seq1 + seq2``"
msgstr "``seq1 + seq2``"

#: library/operator.rst:374
msgid "``concat(seq1, seq2)``"
msgstr "``concat(seq1, seq2)``"

#: library/operator.rst:376
msgid "Containment Test"
msgstr "Test d'inclusion"

#: library/operator.rst:376
msgid "``obj in seq``"
msgstr "``obj in seq``"

#: library/operator.rst:376
msgid "``contains(seq, obj)``"
msgstr "``contains(seq, obj)``"

#: library/operator.rst:378 library/operator.rst:380
msgid "Division"
msgstr "Division"

#: library/operator.rst:378
msgid "``a / b``"
msgstr "``a / b``"

#: library/operator.rst:378
msgid "``truediv(a, b)``"
msgstr "``truediv(a, b)``"

#: library/operator.rst:380
msgid "``a // b``"
msgstr "``a // b``"

#: library/operator.rst:380
msgid "``floordiv(a, b)``"
msgstr "``floordiv(a, b)``"

#: library/operator.rst:382
msgid "Bitwise And"
msgstr "*Et* bit à bit"

#: library/operator.rst:382
msgid "``a & b``"
msgstr "``a & b``"

#: library/operator.rst:382
msgid "``and_(a, b)``"
msgstr "``and_(a, b)``"

#: library/operator.rst:384
msgid "Bitwise Exclusive Or"
msgstr "*Ou exclusif* bit à bit"

#: library/operator.rst:384
msgid "``a ^ b``"
msgstr "``a ^ b``"

#: library/operator.rst:384
msgid "``xor(a, b)``"
msgstr "``xor(a, b)``"

#: library/operator.rst:386
msgid "Bitwise Inversion"
msgstr "Inversion bit à bit"

#: library/operator.rst:386
msgid "``~ a``"
msgstr "``~ a``"

#: library/operator.rst:386
msgid "``invert(a)``"
msgstr "``invert(a)``"

#: library/operator.rst:388
msgid "Bitwise Or"
msgstr "*Ou* bit à bit"

#: library/operator.rst:388
msgid "``a | b``"
msgstr "``a | b``"

#: library/operator.rst:388
msgid "``or_(a, b)``"
msgstr "``or_(a, b)``"

#: library/operator.rst:390
msgid "Exponentiation"
msgstr "Exponentiation"

#: library/operator.rst:390
msgid "``a ** b``"
msgstr "``a ** b``"

#: library/operator.rst:390
msgid "``pow(a, b)``"
msgstr "``pow(a, b)``"

#: library/operator.rst:392 library/operator.rst:394
msgid "Identity"
msgstr "Identité"

#: library/operator.rst:392
msgid "``a is b``"
msgstr "``a is b``"

#: library/operator.rst:392
msgid "``is_(a, b)``"
msgstr "``is_(a, b)``"

#: library/operator.rst:394
msgid "``a is not b``"
msgstr "``a is not b``"

#: library/operator.rst:394
msgid "``is_not(a, b)``"
msgstr "``is_not(a, b)``"

#: library/operator.rst:396
msgid "Indexed Assignment"
msgstr "Affectation par index"

#: library/operator.rst:396
msgid "``obj[k] = v``"
msgstr "``obj[k] = v``"

#: library/operator.rst:396
msgid "``setitem(obj, k, v)``"
msgstr "``setitem(obj, k, v)``"

#: library/operator.rst:398
msgid "Indexed Deletion"
msgstr "Suppression par index"

#: library/operator.rst:398
msgid "``del obj[k]``"
msgstr "``del obj[k]``"

#: library/operator.rst:398
msgid "``delitem(obj, k)``"
msgstr "``delitem(obj, k)``"

#: library/operator.rst:400
msgid "Indexing"
msgstr "Indexation"

#: library/operator.rst:400
msgid "``obj[k]``"
msgstr "``obj[k]``"

#: library/operator.rst:400
msgid "``getitem(obj, k)``"
msgstr "``getitem(obj, k)``"

#: library/operator.rst:402
msgid "Left Shift"
msgstr "Décalage bit à bit gauche"

#: library/operator.rst:402
msgid "``a << b``"
msgstr "``a << b``"

#: library/operator.rst:402
msgid "``lshift(a, b)``"
msgstr "``lshift(a, b)``"

#: library/operator.rst:404
msgid "Modulo"
msgstr "Modulo"

#: library/operator.rst:404
msgid "``a % b``"
msgstr "``a % b``"

#: library/operator.rst:404
msgid "``mod(a, b)``"
msgstr "``mod(a, b)``"

#: library/operator.rst:406
msgid "Multiplication"
msgstr "Multiplication"

#: library/operator.rst:406
msgid "``a * b``"
msgstr "``a * b``"

#: library/operator.rst:406
msgid "``mul(a, b)``"
msgstr "``mul(a, b)``"

#: library/operator.rst:408
msgid "Matrix Multiplication"
msgstr "Multiplication matricielle"

#: library/operator.rst:408
msgid "``a @ b``"
msgstr "``a @ b``"

#: library/operator.rst:408
msgid "``matmul(a, b)``"
msgstr "``matmul(a, b)``"

#: library/operator.rst:410
msgid "Negation (Arithmetic)"
msgstr "Opposé"

#: library/operator.rst:410
msgid "``- a``"
msgstr "``- a``"

#: library/operator.rst:410
msgid "``neg(a)``"
msgstr "``neg(a)``"

#: library/operator.rst:412
msgid "Negation (Logical)"
msgstr "Négation (logique)"

#: library/operator.rst:412
msgid "``not a``"
msgstr "``not a``"

#: library/operator.rst:412
msgid "``not_(a)``"
msgstr "``not_(a)``"

#: library/operator.rst:414
msgid "Positive"
msgstr "Valeur positive"

#: library/operator.rst:414
msgid "``+ a``"
msgstr "``+ a``"

#: library/operator.rst:414
msgid "``pos(a)``"
msgstr "``pos(a)``"

#: library/operator.rst:416
msgid "Right Shift"
msgstr "Décalage bit à bit droite"

#: library/operator.rst:416
msgid "``a >> b``"
msgstr "``a >> b``"

#: library/operator.rst:416
msgid "``rshift(a, b)``"
msgstr "``rshift(a, b)``"

#: library/operator.rst:418
msgid "Slice Assignment"
msgstr "Affectation par tranche"

#: library/operator.rst:418
msgid "``seq[i:j] = values``"
msgstr "``seq[i:j] = values``"

#: library/operator.rst:418
msgid "``setitem(seq, slice(i, j), values)``"
msgstr "``setitem(seq, slice(i, j), values)``"

#: library/operator.rst:420
msgid "Slice Deletion"
msgstr "Suppression par tranche"

#: library/operator.rst:420
msgid "``del seq[i:j]``"
msgstr "``del seq[i:j]``"

#: library/operator.rst:420
msgid "``delitem(seq, slice(i, j))``"
msgstr "``delitem(seq, slice(i, j))``"

#: library/operator.rst:422
msgid "Slicing"
msgstr "Tranche"

#: library/operator.rst:422
msgid "``seq[i:j]``"
msgstr "``seq[i:j]``"

#: library/operator.rst:422
msgid "``getitem(seq, slice(i, j))``"
msgstr "``getitem(seq, slice(i, j))``"

#: library/operator.rst:424
msgid "String Formatting"
msgstr "Formatage de chaînes de caractères"

#: library/operator.rst:424
msgid "``s % obj``"
msgstr "``s % obj``"

#: library/operator.rst:424
msgid "``mod(s, obj)``"
msgstr "``mod(s, obj)``"

#: library/operator.rst:426
msgid "Subtraction"
msgstr "Soustraction"

#: library/operator.rst:426
msgid "``a - b``"
msgstr "``a - b``"

#: library/operator.rst:426
msgid "``sub(a, b)``"
msgstr "``sub(a, b)``"

#: library/operator.rst:428
msgid "Truth Test"
msgstr "Test de véracité"

#: library/operator.rst:428
msgid "``obj``"
msgstr "``obj``"

#: library/operator.rst:428
msgid "``truth(obj)``"
msgstr "``truth(obj)``"

#: library/operator.rst:430 library/operator.rst:432 library/operator.rst:438
#: library/operator.rst:440
msgid "Ordering"
msgstr "Ordre"

#: library/operator.rst:430
msgid "``a < b``"
msgstr "``a < b``"

#: library/operator.rst:430
msgid "``lt(a, b)``"
msgstr "``lt(a, b)``"

#: library/operator.rst:432
msgid "``a <= b``"
msgstr "``a <= b``"

#: library/operator.rst:432
msgid "``le(a, b)``"
msgstr "``le(a, b)``"

#: library/operator.rst:434
msgid "Equality"
msgstr "Égalité"

#: library/operator.rst:434
msgid "``a == b``"
msgstr "``a == b``"

#: library/operator.rst:434
msgid "``eq(a, b)``"
msgstr "``eq(a, b)``"

#: library/operator.rst:436
msgid "Difference"
msgstr "Inégalité"

#: library/operator.rst:436
msgid "``a != b``"
msgstr "``a != b``"

#: library/operator.rst:436
msgid "``ne(a, b)``"
msgstr "``ne(a, b)``"

#: library/operator.rst:438
msgid "``a >= b``"
msgstr "``a >= b``"

#: library/operator.rst:438
msgid "``ge(a, b)``"
msgstr "``ge(a, b)``"

#: library/operator.rst:440
msgid "``a > b``"
msgstr "``a > b``"

#: library/operator.rst:440
msgid "``gt(a, b)``"
msgstr "``gt(a, b)``"

#: library/operator.rst:444
msgid "In-place Operators"
msgstr "Opérateurs en-place"

#: library/operator.rst:446
msgid ""
"Many operations have an \"in-place\" version.  Listed below are functions "
"providing a more primitive access to in-place operators than the usual "
"syntax does; for example, the :term:`statement` ``x += y`` is equivalent to "
"``x = operator.iadd(x, y)``.  Another way to put it is to say that ``z = "
"operator.iadd(x, y)`` is equivalent to the compound statement ``z = x; z += "
"y``."
msgstr ""
"Beaucoup d'opérations ont une version travaillant « en-place ». Les "
"fonctions listées ci-dessous fournissent un accès plus direct aux opérateurs "
"en-place que la syntaxe Python habituelle ; par exemple, l'expression :term:"
"`statement` ``x += y`` équivaut à ``x = operator.iadd(x, y)``.  Autrement "
"dit, l'expression ``z = operator.iadd(x, y)`` équivaut à l'expression "
"composée ``z = x; z += y``."

#: library/operator.rst:453
msgid ""
"In those examples, note that when an in-place method is called, the "
"computation and assignment are performed in two separate steps.  The in-"
"place functions listed below only do the first step, calling the in-place "
"method.  The second step, assignment, is not handled."
msgstr ""
"Dans ces exemples, notez que lorsqu'une méthode en-place est appelée, le "
"calcul et l'affectation sont effectués en deux étapes distinctes. Les "
"fonctions en-place de la liste ci-dessous ne font que la première, en "
"appelant la méthode en-place. La seconde étape, l'affectation, n'est pas "
"effectuée."

#: library/operator.rst:458
msgid ""
"For immutable targets such as strings, numbers, and tuples, the updated "
"value is computed, but not assigned back to the input variable:"
msgstr ""
"Pour des paramètres non-mutables comme les chaînes de caractères, les "
"nombres et les n-uplets, la nouvelle valeur est calculée, mais pas affectée "
"à la variable d'entrée:"

#: library/operator.rst:467
msgid ""
"For mutable targets such as lists and dictionaries, the in-place method will "
"perform the update, so no subsequent assignment is necessary:"
msgstr ""
"Pour des paramètres mutables comme les listes et les dictionnaires, la "
"méthode en-place modifiera la valeur, aucune affectation ultérieure n'est "
"nécessaire :"

#: library/operator.rst:479
msgid "``a = iadd(a, b)`` is equivalent to ``a += b``."
msgstr "``a = iadd(a, b)`` équivaut à ``a += b``."

#: library/operator.rst:485
msgid "``a = iand(a, b)`` is equivalent to ``a &= b``."
msgstr "``a = iand(a, b)`` équivaut à ``a &= b``."

#: library/operator.rst:491
msgid ""
"``a = iconcat(a, b)`` is equivalent to ``a += b`` for *a* and *b* sequences."
msgstr ""
"``a = iconcat(a, b)`` équivaut à ``a += b`` où *a* et *b* sont des séquences."

#: library/operator.rst:497
msgid "``a = ifloordiv(a, b)`` is equivalent to ``a //= b``."
msgstr "``a = ifloordiv(a, b)``équivaut à ``a //= b``."

#: library/operator.rst:503
msgid "``a = ilshift(a, b)`` is equivalent to ``a <<= b``."
msgstr "``a = ilshift(a, b)`` équivaut à ``a <<= b``."

#: library/operator.rst:509
msgid "``a = imod(a, b)`` is equivalent to ``a %= b``."
msgstr "``a = imod(a, b)`` équivaut à ``a %= b``."

#: library/operator.rst:515
msgid "``a = imul(a, b)`` is equivalent to ``a *= b``."
msgstr "``a = imul(a, b)`` équivaut à ``a *= b``."

#: library/operator.rst:521
msgid "``a = imatmul(a, b)`` is equivalent to ``a @= b``."
msgstr "``a = imatmul(a, b)`` équivaut à ``a @= b``."

#: library/operator.rst:529
msgid "``a = ior(a, b)`` is equivalent to ``a |= b``."
msgstr "``a = ior(a, b)`` équivaut à ``a |= b``."

#: library/operator.rst:535
msgid "``a = ipow(a, b)`` is equivalent to ``a **= b``."
msgstr "``a = ipow(a, b)`` équivaut à ``a **= b``."

#: library/operator.rst:541
msgid "``a = irshift(a, b)`` is equivalent to ``a >>= b``."
msgstr "``a = irshift(a, b)`` équivaut à ``a >>= b``."

#: library/operator.rst:547
msgid "``a = isub(a, b)`` is equivalent to ``a -= b``."
msgstr "``a = isub(a, b)`` équivaut à ``a -= b``."

#: library/operator.rst:553
msgid "``a = itruediv(a, b)`` is equivalent to ``a /= b``."
msgstr "``a = itruediv(a, b)`` équivaut à ``a /= b``."

#: library/operator.rst:559
msgid "``a = ixor(a, b)`` is equivalent to ``a ^= b``."
msgstr "``a = ixor(a, b)`` équivaut à ``a ^= b``."
