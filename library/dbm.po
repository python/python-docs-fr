# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-29 22:40+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: library/dbm.rst:2
msgid ":mod:`!dbm` --- Interfaces to Unix \"databases\""
msgstr ""

#: library/dbm.rst:7
#, fuzzy
msgid "**Source code:** :source:`Lib/dbm/__init__.py`"
msgstr "**Source code:** :source:`Lib/html/__init__.py`"

#: library/dbm.rst:11
msgid ":mod:`dbm` is a generic interface to variants of the DBM database:"
msgstr ""

#: library/dbm.rst:13
msgid ":mod:`dbm.sqlite3`"
msgstr ""

#: library/dbm.rst:14
msgid ":mod:`dbm.gnu`"
msgstr ""

#: library/dbm.rst:15
msgid ":mod:`dbm.ndbm`"
msgstr ""

#: library/dbm.rst:17
msgid ""
"If none of these modules are installed, the slow-but-simple implementation "
"in module :mod:`dbm.dumb` will be used.  There is a `third party interface "
"<https://www.jcea.es/programacion/pybsddb.htm>`_ to the Oracle Berkeley DB."
msgstr ""

#: library/dbm.rst:24
msgid ""
"A tuple containing the exceptions that can be raised by each of the "
"supported modules, with a unique exception also named :exc:`dbm.error` as "
"the first item --- the latter is used when :exc:`dbm.error` is raised."
msgstr ""

#: library/dbm.rst:31
msgid ""
"This function attempts to guess which of the several simple database modules "
"available --- :mod:`dbm.sqlite3`, :mod:`dbm.gnu`, :mod:`dbm.ndbm`, or :mod:"
"`dbm.dumb` --- should be used to open a given file."
msgstr ""

#: library/dbm.rst:35
#, fuzzy
msgid "Return one of the following values:"
msgstr "Le module définit :"

#: library/dbm.rst:37
msgid ""
"``None`` if the file can't be opened because it's unreadable or doesn't exist"
msgstr ""

#: library/dbm.rst:38
msgid "the empty string (``''``) if the file's format can't be guessed"
msgstr ""

#: library/dbm.rst:39
msgid ""
"a string containing the required module name, such as ``'dbm.ndbm'`` or "
"``'dbm.gnu'``"
msgstr ""

#: library/dbm.rst:250 library/dbm.rst:448
msgid "*filename* accepts a :term:`path-like object`."
msgstr ""

#: library/dbm.rst:65
msgid "Open a database and return the corresponding database object."
msgstr ""

#: library/dbm.rst:0
msgid "Parameters"
msgstr ""

#: library/dbm.rst:67
msgid ""
"The database file to open.  If the database file already exists, the :func:"
"`whichdb` function is used to determine its type and the appropriate module "
"is used; if it does not exist, the first submodule listed above that can be "
"imported is used."
msgstr ""

#: library/dbm.rst:222
msgid "The database file to open."
msgstr ""

#: library/dbm.rst:70
msgid ""
"If the database file already exists, the :func:`whichdb` function is used to "
"determine its type and the appropriate module is used; if it does not exist, "
"the first submodule listed above that can be imported is used."
msgstr ""

#: library/dbm.rst:178 library/dbm.rst:353
msgid ""
"* ``'r'`` (default): |flag_r| * ``'w'``: |flag_w| * ``'c'``: |flag_c| * "
"``'n'``: |flag_n|"
msgstr ""

#: library/dbm.rst:180 library/dbm.rst:354
msgid "``'r'`` (default): |flag_r|"
msgstr ""

#: library/dbm.rst:181 library/dbm.rst:355 library/dbm.rst:429
msgid "``'w'``: |flag_w|"
msgstr ""

#: library/dbm.rst:182 library/dbm.rst:356
msgid "``'c'``: |flag_c|"
msgstr ""

#: library/dbm.rst:183 library/dbm.rst:357 library/dbm.rst:431
msgid "``'n'``: |flag_n|"
msgstr ""

#: library/dbm.rst:244 library/dbm.rst:433
msgid "|mode_param_doc|"
msgstr ""

#: library/dbm.rst:84
msgid "*file* accepts a :term:`path-like object`."
msgstr ""

#: library/dbm.rst:87
msgid ""
"The object returned by :func:`~dbm.open` supports the same basic "
"functionality as a :class:`dict`; keys and their corresponding values can be "
"stored, retrieved, and deleted, and the :keyword:`in` operator and the :meth:"
"`!keys` method are available, as well as :meth:`!get` and :meth:`!"
"setdefault` methods."
msgstr ""

#: library/dbm.rst:92
msgid ""
"Key and values are always stored as :class:`bytes`. This means that when "
"strings are used they are implicitly converted to the default encoding "
"before being stored."
msgstr ""

#: library/dbm.rst:96
msgid ""
"These objects also support being used in a :keyword:`with` statement, which "
"will automatically close them when done."
msgstr ""

#: library/dbm.rst:99
msgid ""
":meth:`!get` and :meth:`!setdefault` methods are now available for all :mod:"
"`dbm` backends."
msgstr ""

#: library/dbm.rst:103
msgid ""
"Added native support for the context management protocol to the objects "
"returned by :func:`~dbm.open`."
msgstr ""

#: library/dbm.rst:107
msgid ""
"Deleting a key from a read-only database raises a database module specific "
"exception instead of :exc:`KeyError`."
msgstr ""

#: library/dbm.rst:111
msgid ""
"The following example records some hostnames and a corresponding title,  and "
"then prints out the contents of the database::"
msgstr ""

#: library/dbm.rst:114
msgid ""
"import dbm\n"
"\n"
"# Open database, creating it if necessary.\n"
"with dbm.open('cache', 'c') as db:\n"
"\n"
"    # Record some values\n"
"    db[b'hello'] = b'there'\n"
"    db['www.python.org'] = 'Python Website'\n"
"    db['www.cnn.com'] = 'Cable News Network'\n"
"\n"
"    # Note that the keys are considered bytes now.\n"
"    assert db[b'www.python.org'] == b'Python Website'\n"
"    # Notice how the value is now in bytes.\n"
"    assert db['www.cnn.com'] == b'Cable News Network'\n"
"\n"
"    # Often-used methods of the dict interface work too.\n"
"    print(db.get('python.org', b'not present'))\n"
"\n"
"    # Storing a non-string key or value will raise an exception (most\n"
"    # likely a TypeError).\n"
"    db['www.yahoo.com'] = 4\n"
"\n"
"# db is automatically closed when leaving the with statement."
msgstr ""

#: library/dbm.rst:141
msgid "Module :mod:`shelve`"
msgstr ""

#: library/dbm.rst:142
msgid "Persistence module which stores non-string data."
msgstr ""

#: library/dbm.rst:145
msgid "The individual submodules are described in the following sections."
msgstr ""

#: library/dbm.rst:148
msgid ":mod:`dbm.sqlite3` --- SQLite backend for dbm"
msgstr ""

#: library/dbm.rst:156
#, fuzzy
msgid "**Source code:** :source:`Lib/dbm/sqlite3.py`"
msgstr "**Code source :** :source:`Lib/bdb.py`"

#: library/dbm.rst:160
msgid ""
"This module uses the standard library :mod:`sqlite3` module to provide an "
"SQLite backend for the :mod:`dbm` module. The files created by :mod:`dbm."
"sqlite3` can thus be opened by :mod:`sqlite3`, or any other SQLite browser, "
"including the SQLite CLI."
msgstr ""

#: includes/wasm-mobile-notavail.rst:3 includes/wasm-notavail.rst:3
msgid "Availability"
msgstr ""

#: includes/wasm-notavail.rst:5
msgid ""
"This module does not work or is not available on WebAssembly. See :ref:`wasm-"
"availability` for more information."
msgstr ""

#: library/dbm.rst:169
msgid ""
"Open an SQLite database. The returned object behaves like a :term:`mapping`, "
"implements a :meth:`!close` method, and supports a \"closing\" context "
"manager via the :keyword:`with` keyword."
msgstr ""

#: library/dbm.rst:174
msgid "The path to the database to be opened."
msgstr ""

#: library/dbm.rst:185
msgid ""
"The Unix file access mode of the file (default: octal ``0o666``), used only "
"when the database has to be created."
msgstr ""

#: library/dbm.rst:191
msgid ":mod:`dbm.gnu` --- GNU database manager"
msgstr ""

#: library/dbm.rst:197
#, fuzzy
msgid "**Source code:** :source:`Lib/dbm/gnu.py`"
msgstr "**Code source :** :source:`Lib/bdb.py`"

#: library/dbm.rst:201
msgid ""
"The :mod:`dbm.gnu` module provides an interface to the :abbr:`GDBM (GNU "
"dbm)` library, similar to the :mod:`dbm.ndbm` module, but with additional "
"functionality like crash tolerance."
msgstr ""

#: library/dbm.rst:321
msgid ""
"The file formats created by :mod:`dbm.gnu` and :mod:`dbm.ndbm` are "
"incompatible and can not be used interchangeably."
msgstr ""

#: includes/wasm-mobile-notavail.rst:5
msgid ""
"This module is not supported on :ref:`mobile platforms <mobile-"
"availability>` or :ref:`WebAssembly platforms <wasm-availability>`."
msgstr ""

#: library/dbm.rst:214
msgid ""
"Raised on :mod:`dbm.gnu`-specific errors, such as I/O errors. :exc:"
"`KeyError` is raised for general mapping errors like specifying an incorrect "
"key."
msgstr ""

#: library/dbm.rst:220
msgid "Open a GDBM database and return a :class:`!gdbm` object."
msgstr ""

#: library/dbm.rst:226
msgid ""
"* ``'r'`` (default): |flag_r| * ``'w'``: |flag_w| * ``'c'``: |flag_c| * "
"``'n'``: |flag_n|  The following additional characters may be appended to "
"control how the database is opened:  * ``'f'``: Open the database in fast "
"mode.   Writes to the database will not be synchronized. * ``'s'``: "
"Synchronized mode.   Changes to the database will be written immediately to "
"the file. * ``'u'``: Do not lock database.  Not all flags are valid for all "
"versions of GDBM. See the :data:`open_flags` member for a list of supported "
"flag characters."
msgstr ""

#: library/dbm.rst:232
msgid ""
"The following additional characters may be appended to control how the "
"database is opened:"
msgstr ""

#: library/dbm.rst:235
msgid ""
"``'f'``: Open the database in fast mode. Writes to the database will not be "
"synchronized."
msgstr ""

#: library/dbm.rst:237
msgid ""
"``'s'``: Synchronized mode. Changes to the database will be written "
"immediately to the file."
msgstr ""

#: library/dbm.rst:239
msgid "``'u'``: Do not lock database."
msgstr ""

#: library/dbm.rst:241
msgid ""
"Not all flags are valid for all versions of GDBM. See the :data:`open_flags` "
"member for a list of supported flag characters."
msgstr ""

#: library/dbm.rst:0
msgid "Raises"
msgstr ""

#: library/dbm.rst:247
msgid "If an invalid *flag* argument is passed."
msgstr ""

#: library/dbm.rst:255
msgid ""
"A string of characters the *flag* parameter of :meth:`~dbm.gnu.open` "
"supports."
msgstr ""

#: library/dbm.rst:257
msgid ""
":class:`!gdbm` objects behave similar to :term:`mappings <mapping>`, but :"
"meth:`!items` and :meth:`!values` methods are not supported. The following "
"methods are also provided:"
msgstr ""

#: library/dbm.rst:263
msgid ""
"It's possible to loop over every key in the database using this method  and "
"the :meth:`nextkey` method.  The traversal is ordered by GDBM's internal "
"hash values, and won't be sorted by the key values.  This method returns the "
"starting key."
msgstr ""

#: library/dbm.rst:270
msgid ""
"Returns the key that follows *key* in the traversal.  The following code "
"prints every key in the database ``db``, without having to create a list in "
"memory that contains them all::"
msgstr ""

#: library/dbm.rst:274
msgid ""
"k = db.firstkey()\n"
"while k is not None:\n"
"    print(k)\n"
"    k = db.nextkey(k)"
msgstr ""

#: library/dbm.rst:281
msgid ""
"If you have carried out a lot of deletions and would like to shrink the "
"space used by the GDBM file, this routine will reorganize the database.  :"
"class:`!gdbm` objects will not shorten the length of a database file except "
"by using this reorganization; otherwise, deleted file space will be kept and "
"reused as new (key, value) pairs are added."
msgstr ""

#: library/dbm.rst:289
msgid ""
"When the database has been opened in fast mode, this method forces any "
"unwritten data to be written to the disk."
msgstr ""

#: library/dbm.rst:294
msgid "Close the GDBM database."
msgstr ""

#: library/dbm.rst:298
msgid "Remove all items from the GDBM database."
msgstr ""

#: library/dbm.rst:304
msgid ":mod:`dbm.ndbm` --- New Database Manager"
msgstr ""

#: library/dbm.rst:310
#, fuzzy
msgid "**Source code:** :source:`Lib/dbm/ndbm.py`"
msgstr "**Code source :** :source:`Lib/bdb.py`"

#: library/dbm.rst:314
msgid ""
"The :mod:`dbm.ndbm` module provides an interface to the :abbr:`NDBM (New "
"Database Manager)` library. This module can be used with the \"classic\" "
"NDBM interface or the :abbr:`GDBM (GNU dbm)` compatibility interface."
msgstr ""

#: library/dbm.rst:326
msgid ""
"The NDBM library shipped as part of macOS has an undocumented limitation on "
"the size of values, which can result in corrupted database files when "
"storing values larger than this limit. Reading such corrupted files can "
"result in a hard crash (segmentation fault)."
msgstr ""

#: library/dbm.rst:335
msgid ""
"Raised on :mod:`dbm.ndbm`-specific errors, such as I/O errors. :exc:"
"`KeyError` is raised for general mapping errors like specifying an incorrect "
"key."
msgstr ""

#: library/dbm.rst:341
msgid "Name of the NDBM implementation library used."
msgstr ""

#: library/dbm.rst:346
msgid "Open an NDBM database and return an :class:`!ndbm` object."
msgstr ""

#: library/dbm.rst:348
msgid ""
"The basename of the database file (without the :file:`.dir` or :file:`.pag` "
"extensions)."
msgstr ""

#: library/dbm.rst:362
msgid ""
":class:`!ndbm` objects behave similar to :term:`mappings <mapping>`, but :"
"meth:`!items` and :meth:`!values` methods are not supported. The following "
"methods are also provided:"
msgstr ""

#: library/dbm.rst:366
msgid "Accepts :term:`path-like object` for filename."
msgstr ""

#: library/dbm.rst:371
msgid "Close the NDBM database."
msgstr ""

#: library/dbm.rst:375
msgid "Remove all items from the NDBM database."
msgstr ""

#: library/dbm.rst:381
msgid ":mod:`dbm.dumb` --- Portable DBM implementation"
msgstr ""

#: library/dbm.rst:386
#, fuzzy
msgid "**Source code:** :source:`Lib/dbm/dumb.py`"
msgstr "**Code source :** :source:`Lib/bdb.py`"

#: library/dbm.rst:392
msgid ""
"The :mod:`dbm.dumb` module is intended as a last resort fallback for the :"
"mod:`dbm` module when a more robust module is not available. The :mod:`dbm."
"dumb` module is not written for speed and is not nearly as heavily used as "
"the other database modules."
msgstr ""

#: library/dbm.rst:399
msgid ""
"The :mod:`dbm.dumb` module provides a persistent :class:`dict`-like "
"interface which is written entirely in Python. Unlike other :mod:`dbm` "
"backends, such as :mod:`dbm.gnu`, no external library is required."
msgstr ""

#: library/dbm.rst:404
#, fuzzy
msgid "The :mod:`!dbm.dumb` module defines the following:"
msgstr "Le module définit :"

#: library/dbm.rst:408
msgid ""
"Raised on :mod:`dbm.dumb`-specific errors, such as I/O errors.  :exc:"
"`KeyError` is raised for general mapping errors like specifying an incorrect "
"key."
msgstr ""

#: library/dbm.rst:414
msgid ""
"Open a :mod:`!dbm.dumb` database. The returned database object behaves "
"similar to a :term:`mapping`, in addition to providing :meth:`~dumbdbm.sync` "
"and :meth:`~dumbdbm.close` methods."
msgstr ""

#: library/dbm.rst:419
msgid ""
"The basename of the database file (without extensions). A new database "
"creates the following files:  - :file:`{filename}.dat` - :file:`{filename}."
"dir`"
msgstr ""

#: library/dbm.rst:420
msgid ""
"The basename of the database file (without extensions). A new database "
"creates the following files:"
msgstr ""

#: library/dbm.rst:423
msgid ":file:`{filename}.dat`"
msgstr ""

#: library/dbm.rst:424
msgid ":file:`{filename}.dir`"
msgstr ""

#: library/dbm.rst:427
msgid ""
"* ``'r'``: |flag_r| * ``'w'``: |flag_w| * ``'c'`` (default): |flag_c| * "
"``'n'``: |flag_n|"
msgstr ""

#: library/dbm.rst:428
msgid "``'r'``: |flag_r|"
msgstr ""

#: library/dbm.rst:430
msgid "``'c'`` (default): |flag_c|"
msgstr ""

#: library/dbm.rst:437
#, fuzzy
msgid ""
"It is possible to crash the Python interpreter when loading a database with "
"a sufficiently large/complex entry due to stack depth limitations in "
"Python's AST compiler."
msgstr ""
"Il est possible de faire planter l'interpréteur Python avec des chaînes "
"suffisamment grandes ou complexes lors de la compilation d'un objet AST dû à "
"la limitation de la profondeur de la pile d'appels."

#: library/dbm.rst:441
msgid ""
":func:`~dbm.dumb.open` always creates a new database when *flag* is ``'n'``."
msgstr ""

#: library/dbm.rst:444
msgid ""
"A database opened read-only if *flag* is ``'r'``. A database is not created "
"if it does not exist if *flag* is ``'r'`` or ``'w'``."
msgstr ""

#: library/dbm.rst:451
msgid ""
"In addition to the methods provided by the :class:`collections.abc."
"MutableMapping` class, the following methods are provided:"
msgstr ""

#: library/dbm.rst:457
msgid ""
"Synchronize the on-disk directory and data files.  This method is called by "
"the :meth:`Shelve.sync` method."
msgstr ""

#: library/dbm.rst:462
msgid "Close the database."
msgstr ""

#: library/dbm.rst:388
msgid "databases"
msgstr ""

#~ msgid "Value"
#~ msgstr "Valeur"

#~ msgid "Meaning"
#~ msgstr "Signification"

#~ msgid "``'r'``"
#~ msgstr "``'r'``"

#~ msgid "``'w'``"
#~ msgstr "``'w'``"

#~ msgid "``'c'``"
#~ msgstr "``'c'``"

#~ msgid "``'n'``"
#~ msgstr "``'n'``"

#~ msgid "``'f'``"
#~ msgstr "``'f'``"

#~ msgid "``'s'``"
#~ msgstr "``'s'``"

#~ msgid "``'u'``"
#~ msgstr "``'u'``"
