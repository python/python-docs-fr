# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-29 22:40+0100\n"
"PO-Revision-Date: 2022-11-15 16:17+0100\n"
"Last-Translator: \n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.2\n"

#: library/msvcrt.rst:2
msgid ":mod:`!msvcrt` --- Useful routines from the MS VC++ runtime"
msgstr ""

#: library/msvcrt.rst:12
#, fuzzy
msgid ""
"These functions provide access to some useful capabilities on Windows "
"platforms. Some higher-level modules use these functions to build the "
"Windows implementations of their services. For example, the :mod:`getpass` "
"module uses this in the implementation of the :func:`getpass` function."
msgstr ""
"Ces fonctions permettent d'accéder à certaines capacités utiles sur les "
"plateformes Windows. Certains modules de plus haut niveau utilisent ces "
"fonctions pour construire les implémentations Windows de leurs services.  "
"Par exemple, le module :mod:`getpass` les utilise dans l'implémentation de "
"la fonction :func:`getpass`."

#: library/msvcrt.rst:17
msgid ""
"Further documentation on these functions can be found in the Platform API "
"documentation."
msgstr ""

#: library/msvcrt.rst:20
msgid ""
"The module implements both the normal and wide char variants of the console "
"I/O api. The normal API deals only with ASCII characters and is of limited "
"use for internationalized applications. The wide char API should be used "
"where ever possible."
msgstr ""

#: library/msvcrt.rst:25
msgid ""
"Operations in this module now raise :exc:`OSError` where :exc:`IOError` was "
"raised."
msgstr ""
"Les opérations de ce module lèvent désormais :exc:`OSError` au lieu de :exc:"
"`IOError`."

#: library/msvcrt.rst:33
msgid "File Operations"
msgstr "Opérations sur les fichiers"

#: library/msvcrt.rst:38
msgid ""
"Lock part of a file based on file descriptor *fd* from the C runtime. "
"Raises :exc:`OSError` on failure. The locked region of the file extends from "
"the current file position for *nbytes* bytes, and may continue beyond the "
"end of the file. *mode* must be one of the :const:`!LK_\\*` constants listed "
"below. Multiple regions in a file may be locked at the same time, but may "
"not overlap. Adjacent regions are not merged; they must be unlocked "
"individually."
msgstr ""

#: library/msvcrt.rst:45
msgid ""
"Raises an :ref:`auditing event <auditing>` ``msvcrt.locking`` with arguments "
"``fd``, ``mode``, ``nbytes``."
msgstr ""

#: library/msvcrt.rst:51
#, fuzzy
msgid ""
"Locks the specified bytes. If the bytes cannot be locked, the program "
"immediately tries again after 1 second. If, after 10 attempts, the bytes "
"cannot be locked, :exc:`OSError` is raised."
msgstr ""
"Verrouille les octets spécifiés. Si les octets ne peuvent pas être "
"verrouillés, le programme réessaie immédiatement après 1 seconde.  Si, après "
"10 tentatives, les octets ne peuvent pas être verrouillés, :exc:`OSError` "
"est levée."

#: library/msvcrt.rst:59
msgid ""
"Locks the specified bytes. If the bytes cannot be locked, :exc:`OSError` is "
"raised."
msgstr ""
"Verrouille les octets spécifiés. Si les octets ne peuvent pas être "
"verrouillés, :exc:`OSError` est levée."

#: library/msvcrt.rst:65
msgid "Unlocks the specified bytes, which must have been previously locked."
msgstr ""
"Déverrouille les octets spécifiés, qui doivent avoir été précédemment "
"verrouillés."

#: library/msvcrt.rst:70
msgid ""
"Set the line-end translation mode for the file descriptor *fd*. To set it to "
"text mode, *flags* should be :const:`os.O_TEXT`; for binary, it should be :"
"const:`os.O_BINARY`."
msgstr ""

#: library/msvcrt.rst:77
msgid ""
"Create a C runtime file descriptor from the file handle *handle*. The "
"*flags* parameter should be a bitwise OR of :const:`os.O_APPEND`, :const:`os."
"O_RDONLY`, :const:`os.O_TEXT` and :const:`os.O_NOINHERIT`. The returned file "
"descriptor may be used as a parameter to :func:`os.fdopen` to create a file "
"object."
msgstr ""

#: library/msvcrt.rst:83
msgid ""
"The file descriptor is inheritable by default. Pass :const:`os.O_NOINHERIT` "
"flag to make it non inheritable."
msgstr ""

#: library/msvcrt.rst:86
msgid ""
"Raises an :ref:`auditing event <auditing>` ``msvcrt.open_osfhandle`` with "
"arguments ``handle``, ``flags``."
msgstr ""

#: library/msvcrt.rst:91
msgid ""
"Return the file handle for the file descriptor *fd*. Raises :exc:`OSError` "
"if *fd* is not recognized."
msgstr ""

#: library/msvcrt.rst:94
msgid ""
"Raises an :ref:`auditing event <auditing>` ``msvcrt.get_osfhandle`` with "
"argument ``fd``."
msgstr ""

#: library/msvcrt.rst:100
msgid "Console I/O"
msgstr "Entrées-sorties sur un terminal"

#: library/msvcrt.rst:105
#, fuzzy
msgid ""
"Returns a nonzero value if a keypress is waiting to be read. Otherwise, "
"return 0."
msgstr "Renvoie ``True`` si une touche est en attente de lecture."

#: library/msvcrt.rst:111
msgid ""
"Read a keypress and return the resulting character as a byte string. Nothing "
"is echoed to the console. This call will block if a keypress is not already "
"available, but will not wait for :kbd:`Enter` to be pressed. If the pressed "
"key was a special function key, this will return ``'\\000'`` or ``'\\xe0'``; "
"the next call will return the keycode. The :kbd:`Control-C` keypress cannot "
"be read with this function."
msgstr ""

#: library/msvcrt.rst:121
msgid "Wide char variant of :func:`getch`, returning a Unicode value."
msgstr ""
"Variante de :func:`getch` qui lit un caractère large et renvoie une valeur "
"Unicode."

#: library/msvcrt.rst:126
msgid ""
"Similar to :func:`getch`, but the keypress will be echoed if it represents a "
"printable character."
msgstr ""

#: library/msvcrt.rst:132
msgid "Wide char variant of :func:`getche`, returning a Unicode value."
msgstr ""
"Variante de :func:`getche` qui lit un caractère large et renvoie une valeur "
"Unicode."

#: library/msvcrt.rst:137
msgid "Print the byte string *char* to the console without buffering."
msgstr ""

#: library/msvcrt.rst:142
msgid "Wide char variant of :func:`putch`, accepting a Unicode value."
msgstr ""
"Variante de :func:`putch` qui accepte une valeur Unicode et l'écrit comme "
"caractère large."

#: library/msvcrt.rst:147
msgid ""
"Cause the byte string *char* to be \"pushed back\" into the console buffer; "
"it will be the next character read by :func:`getch` or :func:`getche`."
msgstr ""

#: library/msvcrt.rst:153
msgid "Wide char variant of :func:`ungetch`, accepting a Unicode value."
msgstr ""
"Variante de :func:`ungetch` qui accepte une valeur Unicode et l'écrit comme "
"caractère large."

#: library/msvcrt.rst:159
msgid "Other Functions"
msgstr "Autres fonctions"

#: library/msvcrt.rst:164
msgid ""
"Force the :c:func:`malloc` heap to clean itself up and return unused blocks "
"to the operating system. On failure, this raises :exc:`OSError`."
msgstr ""

#: library/msvcrt.rst:170
msgid ""
"Changes the location where the C runtime writes an error message for an "
"error that might end the program. *mode* must be one of the :const:`!"
"OUT_\\*` constants listed below  or :const:`REPORT_ERRMODE`. Returns the old "
"setting or -1 if an error occurs. Only available in :ref:`debug build of "
"Python <debug-build>`."
msgstr ""

#: library/msvcrt.rst:179
msgid ""
"Error sink is determined by the app's type. Only available in :ref:`debug "
"build of Python <debug-build>`."
msgstr ""

#: library/msvcrt.rst:185
msgid ""
"Error sink is a standard error. Only available in :ref:`debug build of "
"Python <debug-build>`."
msgstr ""

#: library/msvcrt.rst:191
msgid ""
"Error sink is a message box. Only available in :ref:`debug build of Python "
"<debug-build>`."
msgstr ""

#: library/msvcrt.rst:197
msgid ""
"Report the current error mode value. Only available in :ref:`debug build of "
"Python <debug-build>`."
msgstr ""

#: library/msvcrt.rst:203
msgid ""
"Specifies the destination or destinations for a specific report type "
"generated by :c:func:`!_CrtDbgReport` in the MS VC++ runtime. *type* must be "
"one of the :const:`!CRT_\\*` constants listed below. *mode* must be one of "
"the :const:`!CRTDBG_\\*` constants listed below. Only available in :ref:"
"`debug build of Python <debug-build>`."
msgstr ""

#: library/msvcrt.rst:212
msgid ""
"After you use :func:`CrtSetReportMode` to specify :const:`CRTDBG_MODE_FILE`, "
"you can specify the file handle to receive the message text. *type* must be "
"one of the :const:`!CRT_\\*` constants listed below. *file* should be the "
"file handle your want specified. Only available in :ref:`debug build of "
"Python <debug-build>`."
msgstr ""

#: library/msvcrt.rst:221
msgid ""
"Warnings, messages, and information that doesn't need immediate attention."
msgstr ""

#: library/msvcrt.rst:226
msgid ""
"Errors, unrecoverable problems, and issues that require immediate attention."
msgstr ""

#: library/msvcrt.rst:231
msgid "Assertion failures."
msgstr ""

#: library/msvcrt.rst:236
msgid "Writes the message to the debugger's output window."
msgstr ""

#: library/msvcrt.rst:241
msgid ""
"Writes the message to a user-supplied file handle. :func:`CrtSetReportFile` "
"should be called to define the specific file or stream to use as the "
"destination."
msgstr ""

#: library/msvcrt.rst:248
msgid ""
"Creates a message box to display the message along with the ``Abort``, "
"``Retry``, and ``Ignore`` buttons."
msgstr ""

#: library/msvcrt.rst:254
msgid "Returns current *mode* for the specified *type*."
msgstr ""

#: library/msvcrt.rst:259
msgid "The CRT Assembly version, from the :file:`crtassem.h` header file."
msgstr ""

#: library/msvcrt.rst:264
msgid ""
"The VC Assembly public key token, from the :file:`crtassem.h` header file."
msgstr ""

#: library/msvcrt.rst:269
msgid ""
"The Libraries Assembly name prefix, from the :file:`crtassem.h` header file."
msgstr ""
