# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-29 21:40+0100\n"
"PO-Revision-Date: 2024-03-15 22:08+0100\n"
"Last-Translator: Christophe Nanteuil <christophe.nanteuil@gmail.com>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.2.2\n"

#: library/xml.dom.minidom.rst:2
#, fuzzy
msgid ":mod:`!xml.dom.minidom` --- Minimal DOM implementation"
msgstr ":mod:`xml.dom.minidom` — implémentation minimale de DOM"

#: library/xml.dom.minidom.rst:11
msgid "**Source code:** :source:`Lib/xml/dom/minidom.py`"
msgstr "**Code source:** :source:`Lib/xml/dom/minidom.py`"

#: library/xml.dom.minidom.rst:15
msgid ""
":mod:`xml.dom.minidom` is a minimal implementation of the Document Object "
"Model interface, with an API similar to that in other languages.  It is "
"intended to be simpler than the full DOM and also significantly smaller.  "
"Users who are not already proficient with the DOM should consider using the :"
"mod:`xml.etree.ElementTree` module for their XML processing instead."
msgstr ""
":mod:`xml.dom.minidom` est une implémentation minimale de l'interface "
"*Document Object Model*, avec une API similaire à celle d'autres langages. "
"Elle est censée être plus simple que le DOM complet et également nettement "
"plus petite. Les utilisateurs qui ne maîtrisent pas déjà le DOM devraient "
"plutôt envisager d'utiliser le module :mod:`xml.etree.ElementTree` pour leur "
"traitement XML."

# suit un :
#: library/xml.dom.minidom.rst:24
msgid ""
"The :mod:`xml.dom.minidom` module is not secure against maliciously "
"constructed data.  If you need to parse untrusted or unauthenticated data "
"see :ref:`xml-vulnerabilities`."
msgstr ""
"le module :mod:`xml.dom.minidom` n'est pas sécurisé contre les données "
"construites de façon malveillante. Si vous avez besoin d'analyser des "
"données non sécurisées ou non authentifiées, référez-vous à :ref:`xml-"
"vulnerabilities`."

#: library/xml.dom.minidom.rst:29
msgid ""
"DOM applications typically start by parsing some XML into a DOM.  With :mod:"
"`xml.dom.minidom`, this is done through the parse functions::"
msgstr ""
"Les applications DOM commencent généralement par analyser du XML dans un "
"DOM. Avec :mod:`xml.dom.minidom`, cela se fait via les fonctions d'analyse ::"

#: library/xml.dom.minidom.rst:32
msgid ""
"from xml.dom.minidom import parse, parseString\n"
"\n"
"dom1 = parse('c:\\\\temp\\\\mydata.xml')  # parse an XML file by name\n"
"\n"
"datasource = open('c:\\\\temp\\\\mydata.xml')\n"
"dom2 = parse(datasource)  # parse an open file\n"
"\n"
"dom3 = parseString('<myxml>Some data<empty/> some more data</myxml>')"
msgstr ""

#: library/xml.dom.minidom.rst:41
msgid ""
"The :func:`parse` function can take either a filename or an open file object."
msgstr ""
"La fonction :func:`parse` peut prendre soit un nom de fichier, soit un objet "
"fichier ouvert."

#: library/xml.dom.minidom.rst:46
msgid ""
"Return a :class:`Document` from the given input. *filename_or_file* may be "
"either a file name, or a file-like object. *parser*, if given, must be a "
"SAX2 parser object. This function will change the document handler of the "
"parser and activate namespace support; other parser configuration (like "
"setting an entity resolver) must have been done in advance."
msgstr ""
"Renvoie un :class:`Document` à partir de l'entrée donnée. *filename_or_file* "
"peut être soit un nom de fichier, soit un objet simili-fichier. *parser*, "
"s'il est donné, doit être un objet analyseur *SAX2*. Cette fonction modifie "
"le pointeur vers le document de l'analyseur et active la prise en charge des "
"espaces de noms ; les autres configurations de l'analyseur (comme la "
"définition d'un résolveur d'entité) doivent avoir été effectuées à l'avance."

#: library/xml.dom.minidom.rst:52
msgid ""
"If you have XML in a string, you can use the :func:`parseString` function "
"instead:"
msgstr ""
"Si votre XML se trouve dans une chaîne, vous pouvez utiliser la fonction :"
"func:`parseString` à la place :"

#: library/xml.dom.minidom.rst:58
msgid ""
"Return a :class:`Document` that represents the *string*. This method creates "
"an :class:`io.StringIO` object for the string and passes that on to :func:"
"`parse`."
msgstr ""
"Renvoie un :class:`Document` qui représente *string*. Cette méthode crée un "
"objet :class:`io.StringIO` pour la chaîne et le transmet à :func:`parse`."

#: library/xml.dom.minidom.rst:61
msgid ""
"Both functions return a :class:`Document` object representing the content of "
"the document."
msgstr ""
"Les deux fonctions renvoient un objet :class:`Document` représentant le "
"contenu du document."

#: library/xml.dom.minidom.rst:64
msgid ""
"What the :func:`parse` and :func:`parseString` functions do is connect an "
"XML parser with a \"DOM builder\" that can accept parse events from any SAX "
"parser and convert them into a DOM tree.  The name of the functions are "
"perhaps misleading, but are easy to grasp when learning the interfaces.  The "
"parsing of the document will be completed before these functions return; "
"it's simply that these functions do not provide a parser implementation "
"themselves."
msgstr ""
"Ce que font les fonctions :func:`parse` et :func:`parseString`, c'est "
"connecter un analyseur XML avec un « constructeur DOM » qui peut accepter "
"les événements d'analyse de n'importe quel analyseur *SAX* et les convertir "
"en une arborescence DOM. Les noms des fonctions sont peut-être trompeurs, "
"mais sont faciles à comprendre lors de l'apprentissage des interfaces. "
"L'analyse du document sera terminée avant le retour de ces fonctions ; c'est "
"simplement que ces fonctions ne fournissent pas elles-mêmes d'implémentation "
"d'analyseur."

#: library/xml.dom.minidom.rst:71
msgid ""
"You can also create a :class:`Document` by calling a method on a \"DOM "
"Implementation\" object.  You can get this object either by calling the :"
"func:`getDOMImplementation` function in the :mod:`xml.dom` package or the :"
"mod:`xml.dom.minidom` module.  Once you have a :class:`Document`, you can "
"add child nodes to it to populate the DOM::"
msgstr ""
"Vous pouvez également créer un :class:`Document` en appelant une méthode sur "
"un objet « DOM Implementation ». Vous pouvez obtenir cet objet soit en "
"appelant la fonction :func:`getDOMImplementation` du paquet :mod:`xml.dom` "
"ou du module :mod:`xml.dom.minidom`. Une fois que vous avez un :class:"
"`Document`, vous pouvez y ajouter des nœuds enfants pour remplir le DOM ::"

#: library/xml.dom.minidom.rst:77
msgid ""
"from xml.dom.minidom import getDOMImplementation\n"
"\n"
"impl = getDOMImplementation()\n"
"\n"
"newdoc = impl.createDocument(None, \"some_tag\", None)\n"
"top_element = newdoc.documentElement\n"
"text = newdoc.createTextNode('Some textual content.')\n"
"top_element.appendChild(text)"
msgstr ""

#: library/xml.dom.minidom.rst:86
msgid ""
"Once you have a DOM document object, you can access the parts of your XML "
"document through its properties and methods.  These properties are defined "
"in the DOM specification.  The main property of the document object is the :"
"attr:`documentElement` property.  It gives you the main element in the XML "
"document: the one that holds all others.  Here is an example program::"
msgstr ""
"Une fois que vous disposez d'un objet document DOM, vous pouvez accéder aux "
"parties de votre document XML via ses propriétés et méthodes. Ces propriétés "
"sont définies dans la spécification DOM. La propriété principale de l'objet "
"document est la propriété :attr:`documentElement`. Il vous donne l'élément "
"principal du document XML : celui qui contient tous les autres. Voici un "
"exemple de programme ::"

#: library/xml.dom.minidom.rst:92
msgid ""
"dom3 = parseString(\"<myxml>Some data</myxml>\")\n"
"assert dom3.documentElement.tagName == \"myxml\""
msgstr ""

#: library/xml.dom.minidom.rst:95
msgid ""
"When you are finished with a DOM tree, you may optionally call the :meth:"
"`unlink` method to encourage early cleanup of the now-unneeded objects.  :"
"meth:`unlink` is an :mod:`xml.dom.minidom`\\ -specific extension to the DOM "
"API that renders the node and its descendants essentially useless.  "
"Otherwise, Python's garbage collector will eventually take care of the "
"objects in the tree."
msgstr ""
"Lorsque vous avez terminé avec une arborescence DOM, vous pouvez "
"éventuellement appeler la méthode :meth:`unlink` pour favoriser un nettoyage "
"précoce des objets désormais inutiles. :meth:`unlink` est une extension "
"spécifique :mod:`xml.dom.minidom` de l'API DOM qui rend le nœud et ses "
"descendants essentiellement inutiles. Sinon, le ramasse-miettes de Python "
"finira par s'occuper des objets dans l'arborescence."

#: library/xml.dom.minidom.rst:104
msgid ""
"`Document Object Model (DOM) Level 1 Specification <https://www.w3.org/TR/"
"REC-DOM-Level-1/>`_"
msgstr ""
"`Spécification Level 1 Document Object Model (DOM) <https://www.w3.org/TR/"
"REC-DOM-Level-1/>`_"

#: library/xml.dom.minidom.rst:105
msgid "The W3C recommendation for the DOM supported by :mod:`xml.dom.minidom`."
msgstr ""
"La recommandation du *W3C* pour le DOM pris en charge par :mod:`xml.dom."
"minidom`."

#: library/xml.dom.minidom.rst:111
msgid "DOM Objects"
msgstr "Objets DOM"

#: library/xml.dom.minidom.rst:113
msgid ""
"The definition of the DOM API for Python is given as part of the :mod:`xml."
"dom` module documentation.  This section lists the differences between the "
"API and :mod:`xml.dom.minidom`."
msgstr ""
"La définition de l'API DOM pour Python est donnée dans le cadre de la "
"documentation du module :mod:`xml.dom`. Cette section répertorie les "
"différences entre l'API et :mod:`xml.dom.minidom`."

#: library/xml.dom.minidom.rst:120
msgid ""
"Break internal references within the DOM so that it will be garbage "
"collected on versions of Python without cyclic GC.  Even when cyclic GC is "
"available, using this can make large amounts of memory available sooner, so "
"calling this on DOM objects as soon as they are no longer needed is good "
"practice.  This only needs to be called on the :class:`Document` object, but "
"may be called on child nodes to discard children of that node."
msgstr ""
"Casse les références internes dans le DOM afin qu'elles soient récupérées "
"sur les versions de Python sans ramasse-miettes cyclique. Même lorsque le "
"ramasse-miettes cyclique est disponible, son utilisation peut libérer de "
"grandes quantités de mémoire disponibles plus tôt, donc l'appeler sur les "
"objets DOM dès qu'ils ne sont plus nécessaires est une bonne pratique. Il "
"est suffisant de l'appeler sur l'objet :class:`Document`, mais peut être "
"appelée sur les nœuds enfants pour éliminer les enfants de ce nœud."

#: library/xml.dom.minidom.rst:127
msgid ""
"You can avoid calling this method explicitly by using the :keyword:`with` "
"statement. The following code will automatically unlink *dom* when the :"
"keyword:`!with` block is exited::"
msgstr ""
"Vous pouvez éviter d'appeler cette méthode explicitement en utilisant "
"l'instruction :keyword:`with`. Le code suivant dissocie automatiquement "
"*dom* lorsque le bloc :keyword:`!with` est quitté ::"

#: library/xml.dom.minidom.rst:131
msgid ""
"with xml.dom.minidom.parse(datasource) as dom:\n"
"    ... # Work with dom."
msgstr ""

#: library/xml.dom.minidom.rst:138
msgid ""
"Write XML to the writer object.  The writer receives texts but not bytes as "
"input, it should have a :meth:`write` method which matches that of the file "
"object interface.  The *indent* parameter is the indentation of the current "
"node. The *addindent* parameter is the incremental indentation to use for "
"subnodes of the current one.  The *newl* parameter specifies the string to "
"use to terminate newlines."
msgstr ""
"Écrit du XML dans l'objet *writer*. Cet objet reçoit du texte mais pas des "
"octets en entrée, il doit avoir une méthode :meth:`write` qui correspond à "
"celle de l'interface objet fichier. Le paramètre *indent* est l'indentation "
"du nœud actuel. Le paramètre *addindent* est l'indentation incrémentielle à "
"utiliser pour les sous-nœuds du nœud actuel. Le paramètre *newl* spécifie la "
"chaîne à utiliser pour terminer les nouvelles lignes."

#: library/xml.dom.minidom.rst:145
msgid ""
"For the :class:`Document` node, an additional keyword argument *encoding* "
"can be used to specify the encoding field of the XML header."
msgstr ""
"Pour le nœud :class:`Document`, un argument nommé supplémentaire *encoding* "
"peut être utilisé pour spécifier le champ d'encodage de l'en-tête XML."

#: library/xml.dom.minidom.rst:148
msgid ""
"Similarly, explicitly stating the *standalone* argument causes the "
"standalone document declarations to be added to the prologue of the XML "
"document. If the value is set to ``True``, ``standalone=\"yes\"`` is added, "
"otherwise it is set to ``\"no\"``. Not stating the argument will omit the "
"declaration from the document."
msgstr ""
"De même, l'indication explicite de l'argument *standalone* entraîne l'ajout "
"des déclarations de document autonome au prologue du document XML. Si la "
"valeur est définie sur ``True``, ``standalone=\"yes\"`` est ajoutée, sinon "
"elle est définie sur ``\"no\"``. Par défaut la déclaration n'est pas écrite "
"dans le document."

# suit un :
#: library/xml.dom.minidom.rst:155
msgid ""
"The :meth:`writexml` method now preserves the attribute order specified by "
"the user."
msgstr ""
"la méthode :meth:`writexml` préserve désormais l'ordre des attributs "
"spécifié par l'utilisateur."

# suit un :
#: library/xml.dom.minidom.rst:159 library/xml.dom.minidom.rst:180
#: library/xml.dom.minidom.rst:199
msgid "The *standalone* parameter was added."
msgstr "le paramètre *standalone* a été ajouté."

#: library/xml.dom.minidom.rst:164
msgid ""
"Return a string or byte string containing the XML represented by the DOM "
"node."
msgstr ""
"Renvoie une chaîne ou une chaîne d'octets contenant le XML représenté par le "
"nœud DOM."

#: library/xml.dom.minidom.rst:167
msgid ""
"With an explicit *encoding* [1]_ argument, the result is a byte string in "
"the specified encoding. With no *encoding* argument, the result is a Unicode "
"string, and the XML declaration in the resulting string does not specify an "
"encoding. Encoding this string in an encoding other than UTF-8 is likely "
"incorrect, since UTF-8 is the default encoding of XML."
msgstr ""
"Avec un argument explicite *encoding* [1]_, le résultat est une chaîne "
"d'octets dans l'encodage spécifié. Sans argument *encoding*, le résultat est "
"une chaîne Unicode et la déclaration XML dans la chaîne résultante ne "
"spécifie pas d'encodage. Encoder cette chaîne dans un codage autre que UTF-8 "
"est probablement incorrect, puisque UTF-8 est l'encodage par défaut de XML."

#: library/xml.dom.minidom.rst:174 library/xml.dom.minidom.rst:193
msgid "The *standalone* argument behaves exactly as in :meth:`writexml`."
msgstr ""
"L'argument *standalone* se comporte exactement comme dans :meth:`writexml`."

# suit un :
#: library/xml.dom.minidom.rst:176
msgid ""
"The :meth:`toxml` method now preserves the attribute order specified by the "
"user."
msgstr ""
"la méthode :meth:`toxml` préserve désormais l'ordre des attributs spécifié "
"par l'utilisateur."

#: library/xml.dom.minidom.rst:186
msgid ""
"Return a pretty-printed version of the document. *indent* specifies the "
"indentation string and defaults to a tabulator; *newl* specifies the string "
"emitted at the end of each line and defaults to ``\\n``."
msgstr ""
"Renvoie une version du document agréablement mise en forme. *indent* "
"spécifie la chaîne d'indentation et est par défaut une tabulation ; *newl* "
"spécifie la chaîne émise à la fin de chaque ligne et la valeur par défaut "
"est ``\\n``."

#: library/xml.dom.minidom.rst:190
msgid ""
"The *encoding* argument behaves like the corresponding argument of :meth:"
"`toxml`."
msgstr ""
"L'argument *encoding* se comporte comme l'argument correspondant de :meth:"
"`toxml`."

# suit un :
#: library/xml.dom.minidom.rst:195
msgid ""
"The :meth:`toprettyxml` method now preserves the attribute order specified "
"by the user."
msgstr ""
"la méthode :meth:`toprettyxml` préserve désormais l'ordre des attributs "
"spécifié par l'utilisateur."

#: library/xml.dom.minidom.rst:205
msgid "DOM Example"
msgstr "Exemple DOM"

#: library/xml.dom.minidom.rst:207
msgid ""
"This example program is a fairly realistic example of a simple program. In "
"this particular case, we do not take much advantage of the flexibility of "
"the DOM."
msgstr ""
"Cet exemple de programme est un exemple assez réaliste de programme simple. "
"Dans ce cas particulier, nous ne profitons pas beaucoup de la flexibilité du "
"DOM."

#: library/xml.dom.minidom.rst:210
msgid ""
"import xml.dom.minidom\n"
"\n"
"document = \"\"\"\\\n"
"<slideshow>\n"
"<title>Demo slideshow</title>\n"
"<slide><title>Slide title</title>\n"
"<point>This is a demo</point>\n"
"<point>Of a program for processing slides</point>\n"
"</slide>\n"
"\n"
"<slide><title>Another demo slide</title>\n"
"<point>It is important</point>\n"
"<point>To have more than</point>\n"
"<point>one slide</point>\n"
"</slide>\n"
"</slideshow>\n"
"\"\"\"\n"
"\n"
"dom = xml.dom.minidom.parseString(document)\n"
"\n"
"def getText(nodelist):\n"
"    rc = []\n"
"    for node in nodelist:\n"
"        if node.nodeType == node.TEXT_NODE:\n"
"            rc.append(node.data)\n"
"    return ''.join(rc)\n"
"\n"
"def handleSlideshow(slideshow):\n"
"    print(\"<html>\")\n"
"    handleSlideshowTitle(slideshow.getElementsByTagName(\"title\")[0])\n"
"    slides = slideshow.getElementsByTagName(\"slide\")\n"
"    handleToc(slides)\n"
"    handleSlides(slides)\n"
"    print(\"</html>\")\n"
"\n"
"def handleSlides(slides):\n"
"    for slide in slides:\n"
"        handleSlide(slide)\n"
"\n"
"def handleSlide(slide):\n"
"    handleSlideTitle(slide.getElementsByTagName(\"title\")[0])\n"
"    handlePoints(slide.getElementsByTagName(\"point\"))\n"
"\n"
"def handleSlideshowTitle(title):\n"
"    print(f\"<title>{getText(title.childNodes)}</title>\")\n"
"\n"
"def handleSlideTitle(title):\n"
"    print(f\"<h2>{getText(title.childNodes)}</h2>\")\n"
"\n"
"def handlePoints(points):\n"
"    print(\"<ul>\")\n"
"    for point in points:\n"
"        handlePoint(point)\n"
"    print(\"</ul>\")\n"
"\n"
"def handlePoint(point):\n"
"    print(f\"<li>{getText(point.childNodes)}</li>\")\n"
"\n"
"def handleToc(slides):\n"
"    for slide in slides:\n"
"        title = slide.getElementsByTagName(\"title\")[0]\n"
"        print(f\"<p>{getText(title.childNodes)}</p>\")\n"
"\n"
"handleSlideshow(dom)\n"
msgstr ""

#: library/xml.dom.minidom.rst:216
msgid "minidom and the DOM standard"
msgstr "*minidom* et le standard DOM"

#: library/xml.dom.minidom.rst:218
msgid ""
"The :mod:`xml.dom.minidom` module is essentially a DOM 1.0-compatible DOM "
"with some DOM 2 features (primarily namespace features)."
msgstr ""
"Le module :mod:`xml.dom.minidom` est essentiellement une interface vers DOM "
"compatible DOM 1.0 avec certaines fonctionnalités DOM 2 (principalement des "
"fonctionnalités d'espace de noms)."

#: library/xml.dom.minidom.rst:221
msgid ""
"Usage of the DOM interface in Python is straight-forward.  The following "
"mapping rules apply:"
msgstr ""
"L'utilisation de l'interface DOM en Python est simple. Les règles de "
"correspondances suivantes s'appliquent :"

#: library/xml.dom.minidom.rst:224
msgid ""
"Interfaces are accessed through instance objects. Applications should not "
"instantiate the classes themselves; they should use the creator functions "
"available on the :class:`Document` object. Derived interfaces support all "
"operations (and attributes) from the base interfaces, plus any new "
"operations."
msgstr ""
"Les interfaces sont accessibles via des objets d'instance. Les applications "
"ne doivent pas instancier les classes elles-mêmes ; elles doivent utiliser "
"les fonctions de création disponibles sur l'objet :class:`Document`. Les "
"interfaces dérivées prennent en charge toutes les opérations (et attributs) "
"des interfaces de base, ainsi que toutes les nouvelles opérations."

#: library/xml.dom.minidom.rst:229
msgid ""
"Operations are used as methods. Since the DOM uses only :keyword:`in` "
"parameters, the arguments are passed in normal order (from left to right). "
"There are no optional arguments. ``void`` operations return ``None``."
msgstr ""
"Les opérations sont utilisées comme méthodes. Puisque le DOM utilise "
"uniquement les paramètres :keyword:`in`, les arguments sont passés dans "
"l'ordre normal (de gauche à droite). Il n'y a pas d'argument facultatif. Les "
"opérations ``void`` renvoient ``None``."

#: library/xml.dom.minidom.rst:233
msgid ""
"IDL attributes map to instance attributes. For compatibility with the OMG "
"IDL language mapping for Python, an attribute ``foo`` can also be accessed "
"through accessor methods :meth:`_get_foo` and :meth:`_set_foo`.  "
"``readonly`` attributes must not be changed; this is not enforced at runtime."
msgstr ""
"Les attributs *IDL* (*Interface Description Language*) correspondent aux "
"attributs d'instance. Pour des raisons de compatibilité avec la "
"correspondance OMG (*Object Management Group*) du langage *IDL* pour Python, "
"un attribut ``foo`` est également accessible via les méthodes d'accès :meth:"
"`_get_foo` et :meth:`_set_foo`. Les attributs ``readonly`` ne doivent pas "
"être modifiés ; ce n'est pas vérifié au moment de l'exécution."

#: library/xml.dom.minidom.rst:238
msgid ""
"The types ``short int``, ``unsigned int``, ``unsigned long long``, and "
"``boolean`` all map to Python integer objects."
msgstr ""
"Les types ``short int``, ``unsigned int``, ``unsigned long long`` et "
"``boolean`` correspondent tous à des objets entiers Python."

#: library/xml.dom.minidom.rst:241
msgid ""
"The type ``DOMString`` maps to Python strings. :mod:`xml.dom.minidom` "
"supports either bytes or strings, but will normally produce strings. Values "
"of type ``DOMString`` may also be ``None`` where allowed to have the IDL "
"``null`` value by the DOM specification from the W3C."
msgstr ""
"Le type ``DOMString`` correspond aux chaînes Python. :mod:`xml.dom.minidom` "
"prend en charge soit les octets, soit les chaînes, et produit normalement "
"des chaînes. Les valeurs de type ``DOMString`` peuvent également être "
"``None`` là où la valeur *IDL* ``null`` est autorisée par la spécification "
"DOM du W3C."

#: library/xml.dom.minidom.rst:246
msgid ""
"``const`` declarations map to variables in their respective scope (e.g. "
"``xml.dom.minidom.Node.PROCESSING_INSTRUCTION_NODE``); they must not be "
"changed."
msgstr ""
"Les déclarations ``const`` correspondent aux variables dans leur portée "
"respective (par exemple ``xml.dom.minidom.Node."
"PROCESSING_INSTRUCTION_NODE``) ; elles ne doivent pas être modifiées."

#: library/xml.dom.minidom.rst:249
msgid ""
"``DOMException`` is currently not supported in :mod:`xml.dom.minidom`. "
"Instead, :mod:`xml.dom.minidom` uses standard Python exceptions such as :exc:"
"`TypeError` and :exc:`AttributeError`."
msgstr ""
"``DOMException`` n'est actuellement pas pris en charge dans :mod:`xml.dom."
"minidom`. En lieu et place, :mod:`xml.dom.minidom` utilise des exceptions "
"Python standard telles que :exc:`TypeError` et :exc:`AttributeError`."

#: library/xml.dom.minidom.rst:253
msgid ""
":class:`NodeList` objects are implemented using Python's built-in list type. "
"These objects provide the interface defined in the DOM specification, but "
"with earlier versions of Python they do not support the official API.  They "
"are, however, much more \"Pythonic\" than the interface defined in the W3C "
"recommendations."
msgstr ""
"Les objets :class:`NodeList` sont implémentés à l'aide du type de liste "
"natif de Python. Ces objets fournissent l'interface définie dans la "
"spécification DOM, mais avec les versions antérieures de Python, ils ne "
"prennent pas en charge l'API officielle. C'est cependant bien plus "
"« Pythonique » que l’interface définie dans les recommandations du W3C."

#: library/xml.dom.minidom.rst:259
msgid ""
"The following interfaces have no implementation in :mod:`xml.dom.minidom`:"
msgstr ""
"Les interfaces suivantes n'ont aucune implémentation dans :mod:`xml.dom."
"minidom` :"

#: library/xml.dom.minidom.rst:261
msgid ":class:`DOMTimeStamp`"
msgstr ":class:`DOMTimeStamp`"

#: library/xml.dom.minidom.rst:263
msgid ":class:`EntityReference`"
msgstr ":class:`EntityReference`"

#: library/xml.dom.minidom.rst:265
msgid ""
"Most of these reflect information in the XML document that is not of general "
"utility to most DOM users."
msgstr ""
"La plupart d'entre elles reflètent des informations contenues dans le "
"document XML qui ne sont pas d'utilité générale pour la plupart des "
"utilisateurs du DOM."

#: library/xml.dom.minidom.rst:269
msgid "Footnotes"
msgstr "Notes"

#: library/xml.dom.minidom.rst:270
msgid ""
"The encoding name included in the XML output should conform to the "
"appropriate standards. For example, \"UTF-8\" is valid, but \"UTF8\" is not "
"valid in an XML document's declaration, even though Python accepts it as an "
"encoding name. See https://www.w3.org/TR/2006/REC-xml11-20060816/#NT-"
"EncodingDecl and https://www.iana.org/assignments/character-sets/character-"
"sets.xhtml."
msgstr ""
"Le nom de codage inclus dans la sortie XML doit être conforme aux normes "
"appropriées. Par exemple, ``\"UTF-8\"`` est valide, mais ``\"UTF8\"`` ne "
"l'est pas dans la déclaration d'un document XML, même si Python l'accepte "
"comme nom de codage. Voir https://www.w3.org/TR/2006/REC-xml11-20060816/#NT-"
"EncodingDecl et https://www.iana.org/assignments/character-sets/character-"
"sets.xhtml."
