# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-04 11:33+0200\n"
"PO-Revision-Date: 2018-09-29 19:35+0200\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/xml.dom.minidom.rst:2
#, fuzzy
msgid ":mod:`xml.dom.minidom` --- Minimal DOM implementation"
msgstr ":mod:`xml.dom.minidom`: une implémentation minimale de DOM"

#: ../Doc/library/xml.dom.minidom.rst:11
#, fuzzy
msgid "**Source code:** :source:`Lib/xml/dom/minidom.py`"
msgstr "**Code source:** :source:`Lib/xml/dom/__init__.py`"

#: ../Doc/library/xml.dom.minidom.rst:15
msgid ""
":mod:`xml.dom.minidom` is a minimal implementation of the Document Object "
"Model interface, with an API similar to that in other languages.  It is "
"intended to be simpler than the full DOM and also significantly smaller.  "
"Users who are not already proficient with the DOM should consider using the :"
"mod:`xml.etree.ElementTree` module for their XML processing instead."
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:24
#, fuzzy
msgid ""
"The :mod:`xml.dom.minidom` module is not secure against maliciously "
"constructed data.  If you need to parse untrusted or unauthenticated data "
"see :ref:`xml-vulnerabilities`."
msgstr ""
"Le module :mod:`xml.sax` n'est pas sécurisé contre les données construites "
"de façon malveillante. Si vous avez besoin d'analyser des données non "
"sécurisées ou non authentifiées, voir :ref:`xml-vulnerabilities`."

#: ../Doc/library/xml.dom.minidom.rst:29
msgid ""
"DOM applications typically start by parsing some XML into a DOM.  With :mod:"
"`xml.dom.minidom`, this is done through the parse functions::"
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:41
msgid ""
"The :func:`parse` function can take either a filename or an open file object."
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:46
msgid ""
"Return a :class:`Document` from the given input. *filename_or_file* may be "
"either a file name, or a file-like object. *parser*, if given, must be a "
"SAX2 parser object. This function will change the document handler of the "
"parser and activate namespace support; other parser configuration (like "
"setting an entity resolver) must have been done in advance."
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:52
msgid ""
"If you have XML in a string, you can use the :func:`parseString` function "
"instead:"
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:58
msgid ""
"Return a :class:`Document` that represents the *string*. This method creates "
"an :class:`io.StringIO` object for the string and passes that on to :func:"
"`parse`."
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:61
msgid ""
"Both functions return a :class:`Document` object representing the content of "
"the document."
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:64
msgid ""
"What the :func:`parse` and :func:`parseString` functions do is connect an "
"XML parser with a \"DOM builder\" that can accept parse events from any SAX "
"parser and convert them into a DOM tree.  The name of the functions are "
"perhaps misleading, but are easy to grasp when learning the interfaces.  The "
"parsing of the document will be completed before these functions return; "
"it's simply that these functions do not provide a parser implementation "
"themselves."
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:71
msgid ""
"You can also create a :class:`Document` by calling a method on a \"DOM "
"Implementation\" object.  You can get this object either by calling the :"
"func:`getDOMImplementation` function in the :mod:`xml.dom` package or the :"
"mod:`xml.dom.minidom` module.  Once you have a :class:`Document`, you can "
"add child nodes to it to populate the DOM::"
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:86
msgid ""
"Once you have a DOM document object, you can access the parts of your XML "
"document through its properties and methods.  These properties are defined "
"in the DOM specification.  The main property of the document object is the :"
"attr:`documentElement` property.  It gives you the main element in the XML "
"document: the one that holds all others.  Here is an example program::"
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:95
msgid ""
"When you are finished with a DOM tree, you may optionally call the :meth:"
"`unlink` method to encourage early cleanup of the now-unneeded objects.  :"
"meth:`unlink` is an :mod:`xml.dom.minidom`\\ -specific extension to the DOM "
"API that renders the node and its descendants are essentially useless.  "
"Otherwise, Python's garbage collector will eventually take care of the "
"objects in the tree."
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:104
msgid ""
"`Document Object Model (DOM) Level 1 Specification <https://www.w3.org/TR/"
"REC-DOM-Level-1/>`_"
msgstr ""
"`Spécification Level 1 Document Object Model (DOM) <https://www.w3.org/TR/"
"REC-DOM-Level-1/>`_"

#: ../Doc/library/xml.dom.minidom.rst:105
msgid "The W3C recommendation for the DOM supported by :mod:`xml.dom.minidom`."
msgstr ""
"La recommandation du *W3C* pour le DOM supporté par :mod:`xml.dom.minidom`."

#: ../Doc/library/xml.dom.minidom.rst:111
msgid "DOM Objects"
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:113
msgid ""
"The definition of the DOM API for Python is given as part of the :mod:`xml."
"dom` module documentation.  This section lists the differences between the "
"API and :mod:`xml.dom.minidom`."
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:120
msgid ""
"Break internal references within the DOM so that it will be garbage "
"collected on versions of Python without cyclic GC.  Even when cyclic GC is "
"available, using this can make large amounts of memory available sooner, so "
"calling this on DOM objects as soon as they are no longer needed is good "
"practice.  This only needs to be called on the :class:`Document` object, but "
"may be called on child nodes to discard children of that node."
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:127
msgid ""
"You can avoid calling this method explicitly by using the :keyword:`with` "
"statement. The following code will automatically unlink *dom* when the :"
"keyword:`!with` block is exited::"
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:137
msgid ""
"Write XML to the writer object.  The writer receives texts but not bytes as "
"input, it should have a :meth:`write` method which matches that of the file "
"object interface.  The *indent* parameter is the indentation of the current "
"node. The *addindent* parameter is the incremental indentation to use for "
"subnodes of the current one.  The *newl* parameter specifies the string to "
"use to terminate newlines."
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:144
msgid ""
"For the :class:`Document` node, an additional keyword argument *encoding* "
"can be used to specify the encoding field of the XML header."
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:147
msgid ""
"The :meth:`writexml` method now preserves the attribute order specified by "
"the user."
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:153
msgid ""
"Return a string or byte string containing the XML represented by the DOM "
"node."
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:156
msgid ""
"With an explicit *encoding* [1]_ argument, the result is a byte string in "
"the specified encoding. With no *encoding* argument, the result is a Unicode "
"string, and the XML declaration in the resulting string does not specify an "
"encoding. Encoding this string in an encoding other than UTF-8 is likely "
"incorrect, since UTF-8 is the default encoding of XML."
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:163
msgid ""
"The :meth:`toxml` method now preserves the attribute order specified by the "
"user."
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:169
msgid ""
"Return a pretty-printed version of the document. *indent* specifies the "
"indentation string and defaults to a tabulator; *newl* specifies the string "
"emitted at the end of each line and defaults to ``\\n``."
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:173
msgid ""
"The *encoding* argument behaves like the corresponding argument of :meth:"
"`toxml`."
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:176
msgid ""
"The :meth:`toprettyxml` method now preserves the attribute order specified "
"by the user."
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:184
msgid "DOM Example"
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:186
msgid ""
"This example program is a fairly realistic example of a simple program. In "
"this particular case, we do not take much advantage of the flexibility of "
"the DOM."
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:195
msgid "minidom and the DOM standard"
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:197
msgid ""
"The :mod:`xml.dom.minidom` module is essentially a DOM 1.0-compatible DOM "
"with some DOM 2 features (primarily namespace features)."
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:200
msgid ""
"Usage of the DOM interface in Python is straight-forward.  The following "
"mapping rules apply:"
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:203
msgid ""
"Interfaces are accessed through instance objects. Applications should not "
"instantiate the classes themselves; they should use the creator functions "
"available on the :class:`Document` object. Derived interfaces support all "
"operations (and attributes) from the base interfaces, plus any new "
"operations."
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:208
msgid ""
"Operations are used as methods. Since the DOM uses only :keyword:`in` "
"parameters, the arguments are passed in normal order (from left to right). "
"There are no optional arguments. ``void`` operations return ``None``."
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:212
msgid ""
"IDL attributes map to instance attributes. For compatibility with the OMG "
"IDL language mapping for Python, an attribute ``foo`` can also be accessed "
"through accessor methods :meth:`_get_foo` and :meth:`_set_foo`.  "
"``readonly`` attributes must not be changed; this is not enforced at runtime."
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:217
msgid ""
"The types ``short int``, ``unsigned int``, ``unsigned long long``, and "
"``boolean`` all map to Python integer objects."
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:220
msgid ""
"The type ``DOMString`` maps to Python strings. :mod:`xml.dom.minidom` "
"supports either bytes or strings, but will normally produce strings. Values "
"of type ``DOMString`` may also be ``None`` where allowed to have the IDL "
"``null`` value by the DOM specification from the W3C."
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:225
msgid ""
"``const`` declarations map to variables in their respective scope (e.g. "
"``xml.dom.minidom.Node.PROCESSING_INSTRUCTION_NODE``); they must not be "
"changed."
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:228
msgid ""
"``DOMException`` is currently not supported in :mod:`xml.dom.minidom`. "
"Instead, :mod:`xml.dom.minidom` uses standard Python exceptions such as :exc:"
"`TypeError` and :exc:`AttributeError`."
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:232
msgid ""
":class:`NodeList` objects are implemented using Python's built-in list type. "
"These objects provide the interface defined in the DOM specification, but "
"with earlier versions of Python they do not support the official API.  They "
"are, however, much more \"Pythonic\" than the interface defined in the W3C "
"recommendations."
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:238
msgid ""
"The following interfaces have no implementation in :mod:`xml.dom.minidom`:"
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:240
msgid ":class:`DOMTimeStamp`"
msgstr ":class:`DOMTimeStamp`"

#: ../Doc/library/xml.dom.minidom.rst:242
msgid ":class:`EntityReference`"
msgstr ":class:`EntityReference`"

#: ../Doc/library/xml.dom.minidom.rst:244
msgid ""
"Most of these reflect information in the XML document that is not of general "
"utility to most DOM users."
msgstr ""

#: ../Doc/library/xml.dom.minidom.rst:248
msgid "Footnotes"
msgstr "Notes"

#: ../Doc/library/xml.dom.minidom.rst:249
msgid ""
"The encoding name included in the XML output should conform to the "
"appropriate standards. For example, \"UTF-8\" is valid, but \"UTF8\" is not "
"valid in an XML document's declaration, even though Python accepts it as an "
"encoding name. See https://www.w3.org/TR/2006/REC-xml11-20060816/#NT-"
"EncodingDecl and https://www.iana.org/assignments/character-sets/character-"
"sets.xhtml."
msgstr ""

#~ msgid ":class:`DocumentType`"
#~ msgstr ":class:`DocumentType`"

#~ msgid ":class:`DOMImplementation`"
#~ msgstr ":class:`DOMImplementation`"

#~ msgid ":class:`CharacterData`"
#~ msgstr ":class:`CharacterData`"

#~ msgid ":class:`CDATASection`"
#~ msgstr ":class:`CDATASection`"

#~ msgid ":class:`Notation`"
#~ msgstr ":class:`Notation`"

#~ msgid ":class:`Entity`"
#~ msgstr ":class:`Entity`"

#~ msgid ":class:`DocumentFragment`"
#~ msgstr ":class:`DocumentFragment`"
