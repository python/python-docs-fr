# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-04 11:33+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/test.rst:2
msgid ":mod:`test` --- Regression tests package for Python"
msgstr ""

#: ../Doc/library/test.rst:10
msgid ""
"The :mod:`test` package is meant for internal use by Python only. It is "
"documented for the benefit of the core developers of Python. Any use of this "
"package outside of Python's standard library is discouraged as code "
"mentioned here can change or be removed without notice between releases of "
"Python."
msgstr ""

#: ../Doc/library/test.rst:18
msgid ""
"The :mod:`test` package contains all regression tests for Python as well as "
"the modules :mod:`test.support` and :mod:`test.regrtest`. :mod:`test."
"support` is used to enhance your tests while :mod:`test.regrtest` drives the "
"testing suite."
msgstr ""

#: ../Doc/library/test.rst:23
msgid ""
"Each module in the :mod:`test` package whose name starts with ``test_`` is a "
"testing suite for a specific module or feature. All new tests should be "
"written using the :mod:`unittest` or :mod:`doctest` module.  Some older "
"tests are written using a \"traditional\" testing style that compares output "
"printed to ``sys.stdout``; this style of test is considered deprecated."
msgstr ""

#: ../Doc/library/test.rst:33
msgid "Module :mod:`unittest`"
msgstr ""

#: ../Doc/library/test.rst:33
msgid "Writing PyUnit regression tests."
msgstr ""

#: ../Doc/library/test.rst:35
msgid "Module :mod:`doctest`"
msgstr "Module :mod:`doctest`"

#: ../Doc/library/test.rst:36
msgid "Tests embedded in documentation strings."
msgstr ""

#: ../Doc/library/test.rst:42
msgid "Writing Unit Tests for the :mod:`test` package"
msgstr ""

#: ../Doc/library/test.rst:44
msgid ""
"It is preferred that tests that use the :mod:`unittest` module follow a few "
"guidelines. One is to name the test module by starting it with ``test_`` and "
"end it with the name of the module being tested. The test methods in the "
"test module should start with ``test_`` and end with a description of what "
"the method is testing. This is needed so that the methods are recognized by "
"the test driver as test methods. Also, no documentation string for the "
"method should be included. A comment (such as ``# Tests function returns "
"only True or False``) should be used to provide documentation for test "
"methods. This is done because documentation strings get printed out if they "
"exist and thus what test is being run is not stated."
msgstr ""

#: ../Doc/library/test.rst:55
msgid "A basic boilerplate is often used::"
msgstr ""

#: ../Doc/library/test.rst:88
msgid ""
"This code pattern allows the testing suite to be run by :mod:`test."
"regrtest`, on its own as a script that supports the :mod:`unittest` CLI, or "
"via the ``python -m unittest`` CLI."
msgstr ""

#: ../Doc/library/test.rst:92
msgid ""
"The goal for regression testing is to try to break code. This leads to a few "
"guidelines to be followed:"
msgstr ""

#: ../Doc/library/test.rst:95
msgid ""
"The testing suite should exercise all classes, functions, and constants. "
"This includes not just the external API that is to be presented to the "
"outside world but also \"private\" code."
msgstr ""

#: ../Doc/library/test.rst:99
msgid ""
"Whitebox testing (examining the code being tested when the tests are being "
"written) is preferred. Blackbox testing (testing only the published user "
"interface) is not complete enough to make sure all boundary and edge cases "
"are tested."
msgstr ""

#: ../Doc/library/test.rst:104
msgid ""
"Make sure all possible values are tested including invalid ones. This makes "
"sure that not only all valid values are acceptable but also that improper "
"values are handled correctly."
msgstr ""

#: ../Doc/library/test.rst:108
msgid ""
"Exhaust as many code paths as possible. Test where branching occurs and thus "
"tailor input to make sure as many different paths through the code are taken."
msgstr ""

#: ../Doc/library/test.rst:111
msgid ""
"Add an explicit test for any bugs discovered for the tested code. This will "
"make sure that the error does not crop up again if the code is changed in "
"the future."
msgstr ""

#: ../Doc/library/test.rst:115
msgid ""
"Make sure to clean up after your tests (such as close and remove all "
"temporary files)."
msgstr ""

#: ../Doc/library/test.rst:118
msgid ""
"If a test is dependent on a specific condition of the operating system then "
"verify the condition already exists before attempting the test."
msgstr ""

#: ../Doc/library/test.rst:121
msgid ""
"Import as few modules as possible and do it as soon as possible. This "
"minimizes external dependencies of tests and also minimizes possible "
"anomalous behavior from side-effects of importing a module."
msgstr ""

#: ../Doc/library/test.rst:125
msgid ""
"Try to maximize code reuse. On occasion, tests will vary by something as "
"small as what type of input is used. Minimize code duplication by "
"subclassing a basic test class with a class that specifies the input::"
msgstr ""

#: ../Doc/library/test.rst:145
msgid ""
"When using this pattern, remember that all classes that inherit from :class:"
"`unittest.TestCase` are run as tests.  The :class:`Mixin` class in the "
"example above does not have any data and so can't be run by itself, thus it "
"does not inherit from :class:`unittest.TestCase`."
msgstr ""

#: ../Doc/library/test.rst:153
msgid "Test Driven Development"
msgstr ""

#: ../Doc/library/test.rst:154
msgid "A book by Kent Beck on writing tests before code."
msgstr ""

#: ../Doc/library/test.rst:160
msgid "Running tests using the command-line interface"
msgstr ""

#: ../Doc/library/test.rst:162
msgid ""
"The :mod:`test` package can be run as a script to drive Python's regression "
"test suite, thanks to the :option:`-m` option: :program:`python -m test`. "
"Under the hood, it uses :mod:`test.regrtest`; the call :program:`python -m "
"test.regrtest` used in previous Python versions still works.  Running the "
"script by itself automatically starts running all regression tests in the :"
"mod:`test` package. It does this by finding all modules in the package whose "
"name starts with ``test_``, importing them, and executing the function :func:"
"`test_main` if present or loading the tests via unittest.TestLoader."
"loadTestsFromModule if ``test_main`` does not exist.  The names of tests to "
"execute may also be passed to the script. Specifying a single regression "
"test (:program:`python -m test test_spam`) will minimize output and only "
"print whether the test passed or failed."
msgstr ""

#: ../Doc/library/test.rst:175
msgid ""
"Running :mod:`test` directly allows what resources are available for tests "
"to use to be set. You do this by using the ``-u`` command-line option. "
"Specifying ``all`` as the value for the ``-u`` option enables all possible "
"resources: :program:`python -m test -uall`. If all but one resource is "
"desired (a more common case), a comma-separated list of resources that are "
"not desired may be listed after ``all``. The command :program:`python -m "
"test -uall,-audio,-largefile` will run :mod:`test` with all resources except "
"the ``audio`` and ``largefile`` resources. For a list of all resources and "
"more command-line options, run :program:`python -m test -h`."
msgstr ""

#: ../Doc/library/test.rst:186
msgid ""
"Some other ways to execute the regression tests depend on what platform the "
"tests are being executed on. On Unix, you can run :program:`make test` at "
"the top-level directory where Python was built. On Windows, executing :"
"program:`rt.bat` from your :file:`PCbuild` directory will run all regression "
"tests."
msgstr ""

#: ../Doc/library/test.rst:194
msgid ":mod:`test.support` --- Utilities for the Python test suite"
msgstr ""

#: ../Doc/library/test.rst:200
msgid ""
"The :mod:`test.support` module provides support for Python's regression test "
"suite."
msgstr ""

#: ../Doc/library/test.rst:205
msgid ""
":mod:`test.support` is not a public module.  It is documented here to help "
"Python developers write tests.  The API of this module is subject to change "
"without backwards compatibility concerns between releases."
msgstr ""

#: ../Doc/library/test.rst:210
#, fuzzy
msgid "This module defines the following exceptions:"
msgstr "Ce module d√©finit les fonctions suivantes :"

#: ../Doc/library/test.rst:214
msgid ""
"Exception to be raised when a test fails. This is deprecated in favor of :"
"mod:`unittest`\\ -based tests and :class:`unittest.TestCase`'s assertion "
"methods."
msgstr ""

#: ../Doc/library/test.rst:221
msgid ""
"Subclass of :exc:`unittest.SkipTest`. Raised when a resource (such as a "
"network connection) is not available. Raised by the :func:`requires` "
"function."
msgstr ""

#: ../Doc/library/test.rst:226
msgid "The :mod:`test.support` module defines the following constants:"
msgstr ""

#: ../Doc/library/test.rst:230
msgid ""
"``True`` when verbose output is enabled. Should be checked when more "
"detailed information is desired about a running test. *verbose* is set by :"
"mod:`test.regrtest`."
msgstr ""

#: ../Doc/library/test.rst:237
msgid "``True`` if the running interpreter is Jython."
msgstr ""

#: ../Doc/library/test.rst:242
msgid "``True`` if the system is Android."
msgstr ""

#: ../Doc/library/test.rst:247
msgid "Path for shell if not on Windows; otherwise ``None``."
msgstr ""

#: ../Doc/library/test.rst:252
msgid "A non-ASCII character encodable by :func:`os.fsencode`."
msgstr ""

#: ../Doc/library/test.rst:257
msgid ""
"Set to a name that is safe to use as the name of a temporary file.  Any "
"temporary file that is created should be closed and unlinked (removed)."
msgstr ""

#: ../Doc/library/test.rst:263
msgid "Set to a non-ASCII name for a temporary file."
msgstr ""

#: ../Doc/library/test.rst:268
msgid "Set to :func:`sys.getfilesystemencoding`."
msgstr ""

#: ../Doc/library/test.rst:273
msgid ""
"Set to a filename (str type) that should not be able to be encoded by file "
"system encoding in strict mode.  It may be ``None`` if it's not possible to "
"generate such a filename."
msgstr ""

#: ../Doc/library/test.rst:280
msgid ""
"Set to a filename (bytes type) that should not be able to be decoded by file "
"system encoding in strict mode.  It may be ``None`` if it's not possible to "
"generate such a filename."
msgstr ""

#: ../Doc/library/test.rst:287
msgid "Set to a filename containing the :data:`FS_NONASCII` character."
msgstr ""

#: ../Doc/library/test.rst:292
msgid "Set to ``True`` if IPV6 is enabled on this host, ``False`` otherwise."
msgstr ""

#: ../Doc/library/test.rst:297
msgid "Set to :func:`os.getcwd`."
msgstr ""

#: ../Doc/library/test.rst:302
msgid "Set when tests can be skipped when they are not useful for PGO."
msgstr ""

#: ../Doc/library/test.rst:307
msgid ""
"A constant that is likely larger than the underlying OS pipe buffer size, to "
"make writes blocking."
msgstr ""

#: ../Doc/library/test.rst:313
msgid ""
"A constant that is likely larger than the underlying OS socket buffer size, "
"to make writes blocking."
msgstr ""

#: ../Doc/library/test.rst:319
msgid "Set to the top level directory that contains :mod:`test.support`."
msgstr ""

#: ../Doc/library/test.rst:324
msgid "Set to the top level directory for the test package."
msgstr ""

#: ../Doc/library/test.rst:329
msgid "Set to the ``data`` directory within the test package."
msgstr ""

#: ../Doc/library/test.rst:334
msgid "Set to :data:`sys.maxsize` for big memory tests."
msgstr ""

#: ../Doc/library/test.rst:339
msgid ""
"Set by :func:`set_memlimit` as the memory limit for big memory tests. "
"Limited by :data:`MAX_Py_ssize_t`."
msgstr ""

#: ../Doc/library/test.rst:345
msgid ""
"Set by :func:`set_memlimit` as the memory limit for big memory tests.  Not "
"limited by :data:`MAX_Py_ssize_t`."
msgstr ""

#: ../Doc/library/test.rst:351
msgid ""
"Return ``True`` if running on CPython, not on Windows, and configuration not "
"set with ``WITH_DOC_STRINGS``."
msgstr ""

#: ../Doc/library/test.rst:357
msgid "Check for presence of docstrings."
msgstr ""

#: ../Doc/library/test.rst:362
msgid "Define the URL of a dedicated HTTP server for the network tests."
msgstr ""

#: ../Doc/library/test.rst:367
msgid "Object that is equal to anything.  Used to test mixed type comparison."
msgstr ""

#: ../Doc/library/test.rst:372
msgid ""
"Object that is greater than anything (except itself). Used to test mixed "
"type comparison."
msgstr ""

#: ../Doc/library/test.rst:378
msgid ""
"Object that is less than anything (except itself). Used to test mixed type "
"comparison."
msgstr ""

#: ../Doc/library/test.rst:382
#, fuzzy
msgid "The :mod:`test.support` module defines the following functions:"
msgstr "Le module :mod:`pty` expose les fonctions suivantes¬†:"

#: ../Doc/library/test.rst:386
msgid ""
"Remove the module named *module_name* from ``sys.modules`` and delete any "
"byte-compiled files of the module."
msgstr ""

#: ../Doc/library/test.rst:392
msgid "Delete *name* from ``sys.modules``."
msgstr ""

#: ../Doc/library/test.rst:397
msgid ""
"Call :func:`os.unlink` on *filename*.  On Windows platforms, this is wrapped "
"with a wait loop that checks for the existence fo the file."
msgstr ""

#: ../Doc/library/test.rst:403
msgid ""
"Call :func:`os.rmdir` on *filename*.  On Windows platforms, this is wrapped "
"with a wait loop that checks for the existence of the file."
msgstr ""

#: ../Doc/library/test.rst:409
msgid ""
"Call :func:`shutil.rmtree` on *path* or call :func:`os.lstat` and :func:`os."
"rmdir` to remove a path and its contents.  On Windows platforms, this is "
"wrapped with a wait loop that checks for the existence of the files."
msgstr ""

#: ../Doc/library/test.rst:416
msgid ""
"Move a :pep:`3147`/:pep:`488` pyc file to its legacy pyc location and return "
"the file system path to the legacy pyc file.  The *source* value is the file "
"system path to the source file.  It does not need to exist, however the PEP "
"3147/488 pyc file must exist."
msgstr ""

#: ../Doc/library/test.rst:424
msgid ""
"Return ``True`` if *resource* is enabled and available. The list of "
"available resources is only set when :mod:`test.regrtest` is executing the "
"tests."
msgstr ""

#: ../Doc/library/test.rst:431
msgid "Return ``True`` if Python was not built with ``-O0`` or ``-Og``."
msgstr ""

#: ../Doc/library/test.rst:436
msgid "Return :data:`_testcapi.WITH_PYMALLOC`."
msgstr ""

#: ../Doc/library/test.rst:441
msgid ""
"Raise :exc:`ResourceDenied` if *resource* is not available. *msg* is the "
"argument to :exc:`ResourceDenied` if it is raised. Always returns ``True`` "
"if called by a function whose ``__name__`` is ``'__main__'``. Used when "
"tests are executed by :mod:`test.regrtest`."
msgstr ""

#: ../Doc/library/test.rst:449
msgid ""
"Raise :exc:`unittest.SkipTest` on TLS certification validation failures."
msgstr ""

#: ../Doc/library/test.rst:454
msgid "Return a repr of *dict* with keys sorted."
msgstr ""

#: ../Doc/library/test.rst:459
msgid ""
"Return the path to the file named *filename*. If no match is found "
"*filename* is returned. This does not equal a failure since it could be the "
"path to the file."
msgstr ""

#: ../Doc/library/test.rst:463
msgid ""
"Setting *subdir* indicates a relative path to use to find the file rather "
"than looking directly in the path directories."
msgstr ""

#: ../Doc/library/test.rst:469
msgid ""
"Create an empty file with *filename*.  If it already exists, truncate it."
msgstr ""

#: ../Doc/library/test.rst:474
msgid "Count the number of open file descriptors."
msgstr ""

#: ../Doc/library/test.rst:479
msgid "Match *test* to patterns set in :func:`set_match_tests`."
msgstr ""

#: ../Doc/library/test.rst:484
msgid "Define match test with regular expression *patterns*."
msgstr ""

#: ../Doc/library/test.rst:489
msgid ""
"Execute :class:`unittest.TestCase` subclasses passed to the function. The "
"function scans the classes for methods starting with the prefix ``test_`` "
"and executes the tests individually."
msgstr ""

#: ../Doc/library/test.rst:493
msgid ""
"It is also legal to pass strings as parameters; these should be keys in "
"``sys.modules``. Each associated module will be scanned by ``unittest."
"TestLoader.loadTestsFromModule()``. This is usually seen in the following :"
"func:`test_main` function::"
msgstr ""

#: ../Doc/library/test.rst:501
msgid "This will run all tests defined in the named module."
msgstr ""

#: ../Doc/library/test.rst:506
msgid ""
"Run :func:`doctest.testmod` on the given *module*.  Return ``(failure_count, "
"test_count)``."
msgstr ""

#: ../Doc/library/test.rst:509
msgid ""
"If *verbosity* is ``None``, :func:`doctest.testmod` is run with verbosity "
"set to :data:`verbose`.  Otherwise, it is run with verbosity set to "
"``None``.  *optionflags* is passed as ``optionflags`` to :func:`doctest."
"testmod`."
msgstr ""

#: ../Doc/library/test.rst:517
msgid ""
"Set the :func:`sys.setswitchinterval` to the given *interval*.  Defines a "
"minimum interval for Android systems to prevent the system from hanging."
msgstr ""

#: ../Doc/library/test.rst:523
msgid ""
"Use this check to guard CPython's implementation-specific tests or to run "
"them only on the implementations guarded by the arguments::"
msgstr ""

#: ../Doc/library/test.rst:533
msgid ""
"A convenience wrapper for :func:`warnings.catch_warnings()` that makes it "
"easier to test that a warning was correctly raised.  It is approximately "
"equivalent to calling ``warnings.catch_warnings(record=True)`` with :meth:"
"`warnings.simplefilter` set to ``always`` and with the option to "
"automatically validate the results that are recorded."
msgstr ""

#: ../Doc/library/test.rst:539
msgid ""
"``check_warnings`` accepts 2-tuples of the form ``(\"message regexp\", "
"WarningCategory)`` as positional arguments. If one or more *filters* are "
"provided, or if the optional keyword argument *quiet* is ``False``, it "
"checks to make sure the warnings are as expected:  each specified filter "
"must match at least one of the warnings raised by the enclosed code or the "
"test fails, and if any warnings are raised that do not match any of the "
"specified filters the test fails.  To disable the first of these checks, set "
"*quiet* to ``True``."
msgstr ""

#: ../Doc/library/test.rst:548
msgid "If no arguments are specified, it defaults to::"
msgstr ""

#: ../Doc/library/test.rst:552
msgid "In this case all warnings are caught and no errors are raised."
msgstr ""

#: ../Doc/library/test.rst:554
msgid ""
"On entry to the context manager, a :class:`WarningRecorder` instance is "
"returned. The underlying warnings list from :func:`~warnings.catch_warnings` "
"is available via the recorder object's :attr:`warnings` attribute.  As a "
"convenience, the attributes of the object representing the most recent "
"warning can also be accessed directly through the recorder object (see "
"example below).  If no warning has been raised, then any of the attributes "
"that would otherwise be expected on an object representing a warning will "
"return ``None``."
msgstr ""

#: ../Doc/library/test.rst:563
msgid ""
"The recorder object also has a :meth:`reset` method, which clears the "
"warnings list."
msgstr ""

#: ../Doc/library/test.rst:566
msgid "The context manager is designed to be used like this::"
msgstr ""

#: ../Doc/library/test.rst:573
msgid ""
"In this case if either warning was not raised, or some other warning was "
"raised, :func:`check_warnings` would raise an error."
msgstr ""

#: ../Doc/library/test.rst:576
msgid ""
"When a test needs to look more deeply into the warnings, rather than just "
"checking whether or not they occurred, code like this can be used::"
msgstr ""

#: ../Doc/library/test.rst:590
msgid ""
"Here all warnings will be caught, and the test code tests the captured "
"warnings directly."
msgstr ""

#: ../Doc/library/test.rst:593
msgid "New optional arguments *filters* and *quiet*."
msgstr ""

#: ../Doc/library/test.rst:599
msgid ""
"Context manager to check that no :exc:`ResourceWarning` was raised.  You "
"must remove the object which may emit :exc:`ResourceWarning` before the end "
"of the context manager."
msgstr ""

#: ../Doc/library/test.rst:606
msgid ""
"Set the values for :data:`max_memuse` and :data:`real_max_memuse` for big "
"memory tests."
msgstr ""

#: ../Doc/library/test.rst:612
msgid ""
"Store the value from *stdout*.  It is meant to hold the stdout at the time "
"the regrtest began."
msgstr ""

#: ../Doc/library/test.rst:618
msgid ""
"Return the original stdout set by :func:`record_original_stdout` or ``sys."
"stdout`` if it's not set."
msgstr ""

#: ../Doc/library/test.rst:624
msgid ""
"Strip the *stderr* of a Python process from potential debug output emitted "
"by the interpreter.  This will typically be run on the result of :meth:"
"`subprocess.Popen.communicate`."
msgstr ""

#: ../Doc/library/test.rst:631
msgid ""
"Return a list of command line arguments reproducing the current settings in "
"``sys.flags`` and ``sys.warnoptions``."
msgstr ""

#: ../Doc/library/test.rst:637
msgid ""
"Return a list of command line arguments reproducing the current optimization "
"settings in ``sys.flags``."
msgstr ""

#: ../Doc/library/test.rst:645
msgid ""
"A context managers that temporarily replaces the named stream with :class:"
"`io.StringIO` object."
msgstr ""

#: ../Doc/library/test.rst:648
msgid "Example use with output streams::"
msgstr ""

#: ../Doc/library/test.rst:656
msgid "Example use with input stream::"
msgstr ""

#: ../Doc/library/test.rst:668
msgid ""
"A context manager that creates a temporary directory at *path* and yields "
"the directory."
msgstr ""

#: ../Doc/library/test.rst:671
msgid ""
"If *path* is ``None``, the temporary directory is created using :func:"
"`tempfile.mkdtemp`.  If *quiet* is ``False``, the context manager raises an "
"exception on error.  Otherwise, if *path* is specified and cannot be "
"created, only a warning is issued."
msgstr ""

#: ../Doc/library/test.rst:679
msgid ""
"A context manager that temporarily changes the current working directory to "
"*path* and yields the directory."
msgstr ""

#: ../Doc/library/test.rst:682
msgid ""
"If *quiet* is ``False``, the context manager raises an exception on error.  "
"Otherwise, it issues only a warning and keeps the current working directory "
"the same."
msgstr ""

#: ../Doc/library/test.rst:689
msgid ""
"A context manager that temporarily creates a new directory and changes the "
"current working directory (CWD)."
msgstr ""

#: ../Doc/library/test.rst:692
msgid ""
"The context manager creates a temporary directory in the current directory "
"with name *name* before temporarily changing the current working directory.  "
"If *name* is ``None``, the temporary directory is created using :func:"
"`tempfile.mkdtemp`."
msgstr ""

#: ../Doc/library/test.rst:697
msgid ""
"If *quiet* is ``False`` and it is not possible to create or change the CWD, "
"an error is raised.  Otherwise, only a warning is raised and the original "
"CWD is used."
msgstr ""

#: ../Doc/library/test.rst:704
msgid "A context manager that temporarily sets the process umask."
msgstr ""

#: ../Doc/library/test.rst:709
msgid ""
"A context manager that raises :exc:`ResourceDenied` when various issues with "
"the internet connection manifest themselves as exceptions."
msgstr ""

#: ../Doc/library/test.rst:715
msgid "A context manager that replaces ``sys.stderr`` with ``sys.__stderr__``."
msgstr ""

#: ../Doc/library/test.rst:720
msgid ""
"Force as many objects as possible to be collected.  This is needed because "
"timely deallocation is not guaranteed by the garbage collector.  This means "
"that ``__del__`` methods may be called later than expected and weakrefs may "
"remain alive for longer than expected."
msgstr ""

#: ../Doc/library/test.rst:728
msgid ""
"A context manager that disables the garbage collector upon entry and "
"reenables it upon exit."
msgstr ""

#: ../Doc/library/test.rst:734
msgid "Context manager to swap out an attribute with a new object."
msgstr ""

#: ../Doc/library/test.rst:736 ../Doc/library/test.rst:754
#: ../Doc/library/test.rst:1117 ../Doc/library/test.rst:1147
msgid "Usage::"
msgstr "Utilisation¬†::"

#: ../Doc/library/test.rst:741
msgid ""
"This will set ``obj.attr`` to 5 for the duration of the ``with`` block, "
"restoring the old value at the end of the block.  If ``attr`` doesn't exist "
"on ``obj``, it will be created and then deleted at the end of the block."
msgstr ""

#: ../Doc/library/test.rst:746 ../Doc/library/test.rst:764
msgid ""
"The old value (or ``None`` if it doesn't exist) will be assigned to the "
"target of the \"as\" clause, if there is one."
msgstr ""

#: ../Doc/library/test.rst:752
msgid "Context manager to swap out an item with a new object."
msgstr ""

#: ../Doc/library/test.rst:759
msgid ""
"This will set ``obj[\"item\"]`` to 5 for the duration of the ``with`` block, "
"restoring the old value at the end of the block. If ``item`` doesn't exist "
"on ``obj``, it will be created and then deleted at the end of the block."
msgstr ""

#: ../Doc/library/test.rst:770
msgid ""
"Context manager to wait until all threads created in the ``with`` statement "
"exit."
msgstr ""

#: ../Doc/library/test.rst:776
msgid ""
"Context manager to start *threads*.  It attempts to join the threads upon "
"exit."
msgstr ""

#: ../Doc/library/test.rst:782
msgid ""
"Return :func:`struct.calcsize` for ``nP{fmt}0n`` or, if ``gettotalrefcount`` "
"exists, ``2PnP{fmt}0P``."
msgstr ""

#: ../Doc/library/test.rst:788
msgid ""
"Return :func:`struct.calcsize` for ``nPn{fmt}0n`` or, if "
"``gettotalrefcount`` exists, ``2PnPn{fmt}0P``."
msgstr ""

#: ../Doc/library/test.rst:794
msgid ""
"For testcase *test*, assert that the ``sys.getsizeof`` for *o* plus the GC "
"header size equals *size*."
msgstr ""

#: ../Doc/library/test.rst:800
msgid "Return ``True`` if the OS supports symbolic links, ``False`` otherwise."
msgstr ""

#: ../Doc/library/test.rst:806
msgid "Return ``True`` if the OS supports xattr, ``False`` otherwise."
msgstr ""

#: ../Doc/library/test.rst:812
msgid "A decorator for running tests that require support for symbolic links."
msgstr ""

#: ../Doc/library/test.rst:817
msgid "A decorator for running tests that require support for xattr."
msgstr ""

#: ../Doc/library/test.rst:822
msgid ""
"A decorator for running tests that require a functional bind() for Unix "
"sockets."
msgstr ""

#: ../Doc/library/test.rst:828
msgid ""
"A decorator to conditionally mark tests with :func:`unittest."
"expectedFailure`. Any use of this decorator should have an associated "
"comment identifying the relevant tracker issue."
msgstr ""

#: ../Doc/library/test.rst:835
msgid ""
"A decorator for running a function in a different locale, correctly "
"resetting it after it has finished.  *catstr* is the locale category as a "
"string (for example ``\"LC_ALL\"``).  The *locales* passed will be tried "
"sequentially, and the first valid locale will be used."
msgstr ""

#: ../Doc/library/test.rst:843
msgid ""
"A decorator for running a function in a specific timezone, correctly "
"resetting it after it has finished."
msgstr ""

#: ../Doc/library/test.rst:849
msgid ""
"Decorator for the minimum version when running test on FreeBSD.  If the "
"FreeBSD version is less than the minimum, raise :exc:`unittest.SkipTest`."
msgstr ""

#: ../Doc/library/test.rst:855
msgid ""
"Decorator for the minimum version when running test on Linux.  If the Linux "
"version is less than the minimum, raise :exc:`unittest.SkipTest`."
msgstr ""

#: ../Doc/library/test.rst:861
msgid ""
"Decorator for the minimum version when running test on Mac OS X.  If the MAC "
"OS X version is less than the minimum, raise :exc:`unittest.SkipTest`."
msgstr ""

#: ../Doc/library/test.rst:867
msgid "Decorator for skipping tests on non-IEEE 754 platforms."
msgstr ""

#: ../Doc/library/test.rst:872
msgid "Decorator for skipping tests if :mod:`zlib` doesn't exist."
msgstr ""

#: ../Doc/library/test.rst:877
msgid "Decorator for skipping tests if :mod:`gzip` doesn't exist."
msgstr ""

#: ../Doc/library/test.rst:882
msgid "Decorator for skipping tests if :mod:`bz2` doesn't exist."
msgstr ""

#: ../Doc/library/test.rst:887
msgid "Decorator for skipping tests if :mod:`lzma` doesn't exist."
msgstr ""

#: ../Doc/library/test.rst:892
msgid "Decorator for skipping tests if *resource* is not available."
msgstr ""

#: ../Doc/library/test.rst:897
msgid "Decorator for only running the test if :data:`HAVE_DOCSTRINGS`."
msgstr ""

#: ../Doc/library/test.rst:902
msgid "Decorator for tests only applicable to CPython."
msgstr ""

#: ../Doc/library/test.rst:907
msgid ""
"Decorator for invoking :func:`check_impl_detail` on *guards*.  If that "
"returns ``False``, then uses *msg* as the reason for skipping the test."
msgstr ""

#: ../Doc/library/test.rst:913
msgid "Decorator to temporarily turn off tracing for the duration of the test."
msgstr ""

#: ../Doc/library/test.rst:918
msgid ""
"Decorator for tests which involve reference counting.  The decorator does "
"not run the test if it is not run by CPython.  Any trace function is unset "
"for the duration of the test to prevent unexpected refcounts caused by the "
"trace function."
msgstr ""

#: ../Doc/library/test.rst:926
msgid "Decorator to ensure the threads are cleaned up even if the test fails."
msgstr ""

#: ../Doc/library/test.rst:931
msgid "Decorator for bigmem tests."
msgstr ""

#: ../Doc/library/test.rst:933
msgid ""
"*size* is a requested size for the test (in arbitrary, test-interpreted "
"units.)  *memuse* is the number of bytes per unit for the test, or a good "
"estimate of it.  For example, a test that needs two byte buffers, of 4 GiB "
"each, could be decorated with ``@bigmemtest(size=_4G, memuse=2)``."
msgstr ""

#: ../Doc/library/test.rst:938
msgid ""
"The *size* argument is normally passed to the decorated test method as an "
"extra argument.  If *dry_run* is ``True``, the value passed to the test "
"method may be less than the requested value.  If *dry_run* is ``False``, it "
"means the test doesn't support dummy runs when ``-M`` is not specified."
msgstr ""

#: ../Doc/library/test.rst:946
msgid ""
"Decorator for tests that fill the address space.  *f* is the function to "
"wrap."
msgstr ""

#: ../Doc/library/test.rst:952
msgid ""
"Create an invalid file descriptor by opening and closing a temporary file, "
"and returning its descriptor."
msgstr ""

#: ../Doc/library/test.rst:958
msgid ""
"Test for syntax errors in *statement* by attempting to compile *statement*. "
"*testcase* is the :mod:`unittest` instance for the test.  *errtext* is the "
"regular expression which should match the string representation of the "
"raised :exc:`SyntaxError`.  If *lineno* is not ``None``, compares to the "
"line of the exception.  If *offset* is not ``None``, compares to the offset "
"of the exception."
msgstr ""

#: ../Doc/library/test.rst:968
msgid ""
"Test for syntax warning in *statement* by attempting to compile *statement*. "
"Test also that the :exc:`SyntaxWarning` is emitted only once, and that it "
"will be converted to a :exc:`SyntaxError` when turned into error. *testcase* "
"is the :mod:`unittest` instance for the test.  *errtext* is the regular "
"expression which should match the string representation of the emitted :exc:"
"`SyntaxWarning` and raised :exc:`SyntaxError`.  If *lineno* is not ``None``, "
"compares to the line of the warning and exception. If *offset* is not "
"``None``, compares to the offset of the exception."
msgstr ""

#: ../Doc/library/test.rst:982
msgid "Open *url*.  If open fails, raises :exc:`TestFailed`."
msgstr ""

#: ../Doc/library/test.rst:987
msgid ""
"This function imports and returns the named module. Unlike a normal import, "
"this function raises :exc:`unittest.SkipTest` if the module cannot be "
"imported."
msgstr ""

#: ../Doc/library/test.rst:991
msgid ""
"Module and package deprecation messages are suppressed during this import if "
"*deprecated* is ``True``.  If a module is required on a platform but "
"optional for others, set *required_on* to an iterable of platform prefixes "
"which will be compared against :data:`sys.platform`."
msgstr ""

#: ../Doc/library/test.rst:1001
msgid ""
"This function imports and returns a fresh copy of the named Python module by "
"removing the named module from ``sys.modules`` before doing the import. Note "
"that unlike :func:`reload`, the original module is not affected by this "
"operation."
msgstr ""

#: ../Doc/library/test.rst:1006
msgid ""
"*fresh* is an iterable of additional module names that are also removed from "
"the ``sys.modules`` cache before doing the import."
msgstr ""

#: ../Doc/library/test.rst:1009
msgid ""
"*blocked* is an iterable of module names that are replaced with ``None`` in "
"the module cache during the import to ensure that attempts to import them "
"raise :exc:`ImportError`."
msgstr ""

#: ../Doc/library/test.rst:1013
msgid ""
"The named module and any modules named in the *fresh* and *blocked* "
"parameters are saved before starting the import and then reinserted into "
"``sys.modules`` when the fresh import is complete."
msgstr ""

#: ../Doc/library/test.rst:1017
msgid ""
"Module and package deprecation messages are suppressed during this import if "
"*deprecated* is ``True``."
msgstr ""

#: ../Doc/library/test.rst:1020
msgid ""
"This function will raise :exc:`ImportError` if the named module cannot be "
"imported."
msgstr ""

#: ../Doc/library/test.rst:1023 ../Doc/library/test.rst:1264
#, fuzzy
msgid "Example use::"
msgstr "Exemple d'utilisation¬†::"

#: ../Doc/library/test.rst:1037
msgid "Return a copy of :data:`sys.modules`."
msgstr ""

#: ../Doc/library/test.rst:1042
msgid ""
"Remove modules except for *oldmodules* and ``encodings`` in order to "
"preserve internal cache."
msgstr ""

#: ../Doc/library/test.rst:1048
msgid "Return current thread count and copy of dangling threads."
msgstr ""

#: ../Doc/library/test.rst:1053
msgid ""
"Cleanup up threads not specified in *original_values*.  Designed to emit a "
"warning if a test leaves running threads in the background."
msgstr ""

#: ../Doc/library/test.rst:1059
msgid ""
"Join a *thread* within *timeout*.  Raise an :exc:`AssertionError` if thread "
"is still alive after *timeout* seconds."
msgstr ""

#: ../Doc/library/test.rst:1065
msgid ""
"Use this at the end of ``test_main`` whenever sub-processes are started. "
"This will help ensure that no extra children (zombies) stick around to hog "
"resources and create problems when looking for refleaks."
msgstr ""

#: ../Doc/library/test.rst:1072
msgid ""
"Get an attribute, raising :exc:`unittest.SkipTest` if :exc:`AttributeError` "
"is raised."
msgstr ""

#: ../Doc/library/test.rst:1078
msgid ""
"Bind the socket to a free port and return the port number.  Relies on "
"ephemeral ports in order to ensure we are using an unbound port.  This is "
"important as many tests may be running simultaneously, especially in a "
"buildbot environment.  This method raises an exception if the ``sock."
"family`` is :const:`~socket.AF_INET` and ``sock.type`` is :const:`~socket."
"SOCK_STREAM`, and the socket has :const:`~socket.SO_REUSEADDR` or :const:"
"`~socket.SO_REUSEPORT` set on it. Tests should never set these socket "
"options for TCP/IP sockets. The only case for setting these options is "
"testing multicasting via multiple UDP sockets."
msgstr ""

#: ../Doc/library/test.rst:1089
msgid ""
"Additionally, if the :const:`~socket.SO_EXCLUSIVEADDRUSE` socket option is "
"available (i.e. on Windows), it will be set on the socket.  This will "
"prevent anyone else from binding to our host/port for the duration of the "
"test."
msgstr ""

#: ../Doc/library/test.rst:1097
msgid ""
"Bind a unix socket, raising :exc:`unittest.SkipTest` if :exc:"
"`PermissionError` is raised."
msgstr ""

#: ../Doc/library/test.rst:1103
msgid ""
"Context manager catching :class:`threading.Thread` exception using :func:"
"`threading.excepthook`."
msgstr ""

#: ../Doc/library/test.rst:1106
msgid "Attributes set when an exception is catched:"
msgstr ""

#: ../Doc/library/test.rst:1108
msgid "``exc_type``"
msgstr ""

#: ../Doc/library/test.rst:1109
msgid "``exc_value``"
msgstr ""

#: ../Doc/library/test.rst:1110
msgid "``exc_traceback``"
msgstr ""

#: ../Doc/library/test.rst:1111
msgid "``thread``"
msgstr ""

#: ../Doc/library/test.rst:1113
msgid "See :func:`threading.excepthook` documentation."
msgstr ""

#: ../Doc/library/test.rst:1115
msgid "These attributes are deleted at the context manager exit."
msgstr ""

#: ../Doc/library/test.rst:1136
msgid ""
"Context manager catching unraisable exception using :func:`sys."
"unraisablehook`."
msgstr ""

#: ../Doc/library/test.rst:1139
msgid ""
"Storing the exception value (``cm.unraisable.exc_value``) creates a "
"reference cycle. The reference cycle is broken explicitly when the context "
"manager exits."
msgstr ""

#: ../Doc/library/test.rst:1143
msgid ""
"Storing the object (``cm.unraisable.object``) can resurrect it if it is set "
"to an object which is being finalized. Exiting the context manager clears "
"the stored object."
msgstr ""

#: ../Doc/library/test.rst:1164
msgid ""
"Returns an unused port that should be suitable for binding.  This is "
"achieved by creating a temporary socket with the same family and type as the "
"``sock`` parameter (default is :const:`~socket.AF_INET`, :const:`~socket."
"SOCK_STREAM`), and binding it to the specified host address (defaults to "
"``0.0.0.0``) with the port set to 0, eliciting an unused ephemeral port from "
"the OS. The temporary socket is then closed and deleted, and the ephemeral "
"port is returned."
msgstr ""

#: ../Doc/library/test.rst:1173
msgid ""
"Either this method or :func:`bind_port` should be used for any tests where a "
"server socket needs to be bound to a particular port for the duration of the "
"test. Which one to use depends on whether the calling code is creating a "
"Python socket, or if an unused port needs to be provided in a constructor or "
"passed to an external program (i.e. the ``-accept`` argument to openssl's "
"s_server mode).  Always prefer :func:`bind_port` over :func:"
"`find_unused_port` where possible.  Using a hard coded port is discouraged "
"since it can make multiple instances of the test impossible to run "
"simultaneously, which is a problem for buildbots."
msgstr ""

#: ../Doc/library/test.rst:1187
msgid ""
"Generic implementation of the :mod:`unittest` ``load_tests`` protocol for "
"use in test packages.  *pkg_dir* is the root directory of the package; "
"*loader*, *standard_tests*, and *pattern* are the arguments expected by "
"``load_tests``.  In simple cases, the test package's ``__init__.py`` can be "
"the following::"
msgstr ""

#: ../Doc/library/test.rst:1202
msgid "Return ``True`` if the file system for *directory* is case-insensitive."
msgstr ""

#: ../Doc/library/test.rst:1207
msgid ""
"Returns the set of attributes, functions or methods of *ref_api* not found "
"on *other_api*, except for a defined list of items to be ignored in this "
"check specified in *ignore*."
msgstr ""

#: ../Doc/library/test.rst:1211
msgid ""
"By default this skips private attributes beginning with '_' but includes all "
"magic methods, i.e. those starting and ending in '__'."
msgstr ""

#: ../Doc/library/test.rst:1219
msgid ""
"Override *object_to_patch.attr_name* with *new_value*.  Also add cleanup "
"procedure to *test_instance* to restore *object_to_patch* for *attr_name*.  "
"The *attr_name* should be a valid attribute for *object_to_patch*."
msgstr ""

#: ../Doc/library/test.rst:1227
msgid ""
"Run *code* in subinterpreter.  Raise :exc:`unittest.SkipTest` if :mod:"
"`tracemalloc` is enabled."
msgstr ""

#: ../Doc/library/test.rst:1233
msgid "Assert that *iter* is deallocated after iterating."
msgstr ""

#: ../Doc/library/test.rst:1238
msgid ""
"Check for the existence of the compiler executables whose names are listed "
"in *cmd_names* or all the compiler executables when *cmd_names* is empty and "
"return the first missing executable or ``None`` when none is found missing."
msgstr ""

#: ../Doc/library/test.rst:1246
msgid ""
"Assert that the ``__all__`` variable of *module* contains all public names."
msgstr ""

#: ../Doc/library/test.rst:1248
msgid ""
"The module's public names (its API) are detected automatically based on "
"whether they match the public name convention and were defined in *module*."
msgstr ""

#: ../Doc/library/test.rst:1252
msgid ""
"The *name_of_module* argument can specify (as a string or tuple thereof) "
"what module(s) an API could be defined in order to be detected as a public "
"API. One case for this is when *module* imports part of its public API from "
"other modules, possibly a C backend (like ``csv`` and its ``_csv``)."
msgstr ""

#: ../Doc/library/test.rst:1257
msgid ""
"The *extra* argument can be a set of names that wouldn't otherwise be "
"automatically detected as \"public\", like objects without a proper "
"``__module__`` attribute. If provided, it will be added to the automatically "
"detected ones."
msgstr ""

#: ../Doc/library/test.rst:1261
msgid ""
"The *blacklist* argument can be a set of names that must not be treated as "
"part of the public API even though their names indicate otherwise."
msgstr ""

#: ../Doc/library/test.rst:1286
msgid "The :mod:`test.support` module defines the following classes:"
msgstr ""

#: ../Doc/library/test.rst:1290
msgid ""
"Instances are a context manager that raises :exc:`ResourceDenied` if the "
"specified exception type is raised.  Any keyword arguments are treated as "
"attribute/value pairs to be compared against any exception raised within "
"the :keyword:`with` statement.  Only if all pairs match properly against "
"attributes on the exception is :exc:`ResourceDenied` raised."
msgstr ""

#: ../Doc/library/test.rst:1299
msgid ""
"Class used to temporarily set or unset environment variables.  Instances can "
"be used as a context manager and have a complete dictionary interface for "
"querying/modifying the underlying ``os.environ``. After exit from the "
"context manager all changes to environment variables done through this "
"instance will be rolled back."
msgstr ""

#: ../Doc/library/test.rst:1305
msgid "Added dictionary interface."
msgstr ""

#: ../Doc/library/test.rst:1310
msgid ""
"Temporarily set the environment variable ``envvar`` to the value of "
"``value``."
msgstr ""

#: ../Doc/library/test.rst:1316
msgid "Temporarily unset the environment variable ``envvar``."
msgstr ""

#: ../Doc/library/test.rst:1321
msgid ""
"A context manager used to try to prevent crash dialog popups on tests that "
"are expected to crash a subprocess."
msgstr ""

#: ../Doc/library/test.rst:1324
msgid ""
"On Windows, it disables Windows Error Reporting dialogs using `SetErrorMode "
"<https://msdn.microsoft.com/en-us/library/windows/desktop/ms680621.aspx>`_."
msgstr ""

#: ../Doc/library/test.rst:1327
msgid ""
"On UNIX, :func:`resource.setrlimit` is used to set :attr:`resource."
"RLIMIT_CORE`'s soft limit to 0 to prevent coredump file creation."
msgstr ""

#: ../Doc/library/test.rst:1331
msgid "On both platforms, the old value is restored by :meth:`__exit__`."
msgstr ""

#: ../Doc/library/test.rst:1336
msgid ""
"A context manager to force import to return a new module reference.  This is "
"useful for testing module-level behaviors, such as the emission of a "
"DeprecationWarning on import.  Example usage::"
msgstr ""

#: ../Doc/library/test.rst:1346
msgid "A context manager to temporarily add directories to sys.path."
msgstr ""

#: ../Doc/library/test.rst:1348
msgid ""
"This makes a copy of :data:`sys.path`, appends any directories given as "
"positional arguments, then reverts :data:`sys.path` to the copied settings "
"when the context ends."
msgstr ""

#: ../Doc/library/test.rst:1352
msgid ""
"Note that *all* :data:`sys.path` modifications in the body of the context "
"manager, including replacement of the object, will be reverted at the end of "
"the block."
msgstr ""

#: ../Doc/library/test.rst:1359
msgid ""
"Class to save and restore signal handlers registered by the Python signal "
"handler."
msgstr ""

#: ../Doc/library/test.rst:1367
msgid "Try to match a single dict with the supplied arguments."
msgstr ""

#: ../Doc/library/test.rst:1372
msgid "Try to match a single stored value (*dv*) with a supplied value (*v*)."
msgstr ""

#: ../Doc/library/test.rst:1377
msgid ""
"Class used to record warnings for unit tests. See documentation of :func:"
"`check_warnings` above for more details."
msgstr ""

#: ../Doc/library/test.rst:1385
msgid "Run *test* and return the result."
msgstr ""

#: ../Doc/library/test.rst:1390
msgid "Class for logging support."
msgstr ""

#: ../Doc/library/test.rst:1395
msgid ""
"Simple :term:`path-like object`.  It implements the :meth:`__fspath__` "
"method which just returns the *path* argument.  If *path* is an exception, "
"it will be raised in :meth:`!__fspath__`."
msgstr ""

#: ../Doc/library/test.rst:1401
msgid ""
":mod:`test.support.script_helper` --- Utilities for the Python execution "
"tests"
msgstr ""

#: ../Doc/library/test.rst:1407
msgid ""
"The :mod:`test.support.script_helper` module provides support for Python's "
"script execution tests."
msgstr ""

#: ../Doc/library/test.rst:1412
msgid ""
"Return ``True`` if ``sys.executable interpreter`` requires environment "
"variables in order to be able to run at all."
msgstr ""

#: ../Doc/library/test.rst:1415
msgid ""
"This is designed to be used with ``@unittest.skipIf()`` to annotate tests "
"that need to use an ``assert_python*()`` function to launch an isolated mode "
"(``-I``) or no environment mode (``-E``) sub-interpreter process."
msgstr ""

#: ../Doc/library/test.rst:1419
msgid ""
"A normal build & test does not run into this situation but it can happen "
"when trying to run the standard library test suite from an interpreter that "
"doesn't have an obvious home with Python's current home finding logic."
msgstr ""

#: ../Doc/library/test.rst:1423
msgid ""
"Setting :envvar:`PYTHONHOME` is one way to get most of the testsuite to run "
"in that situation.  :envvar:`PYTHONPATH` or :envvar:`PYTHONUSERSITE` are "
"other common environment variables that might impact whether or not the "
"interpreter can start."
msgstr ""

#: ../Doc/library/test.rst:1431
msgid ""
"Set up the environment based on *env_vars* for running the interpreter in a "
"subprocess.  The values can include ``__isolated``, ``__cleanenv``, "
"``__cwd``, and ``TERM``."
msgstr ""

#: ../Doc/library/test.rst:1438
msgid ""
"Assert that running the interpreter with *args* and optional environment "
"variables *env_vars* succeeds (``rc == 0``) and return a ``(return code, "
"stdout, stderr)`` tuple."
msgstr ""

#: ../Doc/library/test.rst:1442
msgid ""
"If the ``__cleanenv`` keyword is set, *env_vars* is used as a fresh "
"environment."
msgstr ""

#: ../Doc/library/test.rst:1445
msgid ""
"Python is started in isolated mode (command line option ``-I``), except if "
"the ``__isolated`` keyword is set to ``False``."
msgstr ""

#: ../Doc/library/test.rst:1451
msgid ""
"Assert that running the interpreter with *args* and optional environment "
"variables *env_vars* fails (``rc != 0``) and return a ``(return code, "
"stdout, stderr)`` tuple."
msgstr ""

#: ../Doc/library/test.rst:1455
msgid "See :func:`assert_python_ok` for more options."
msgstr ""

#: ../Doc/library/test.rst:1460
msgid "Run a Python subprocess with the given arguments."
msgstr ""

#: ../Doc/library/test.rst:1462
msgid ""
"*kw* is extra keyword args to pass to :func:`subprocess.Popen`. Returns a :"
"class:`subprocess.Popen` object."
msgstr ""

#: ../Doc/library/test.rst:1468
msgid ""
"Run the given :class:`subprocess.Popen` process until completion and return "
"stdout."
msgstr ""

#: ../Doc/library/test.rst:1474
msgid ""
"Create script containing *source* in path *script_dir* and "
"*script_basename*. If *omit_suffix* is ``False``, append ``.py`` to the "
"name.  Return the full script path."
msgstr ""

#: ../Doc/library/test.rst:1481
msgid ""
"Create zip file at *zip_dir* and *zip_basename* with extension ``zip`` which "
"contains the files in *script_name*. *name_in_zip* is the archive name. "
"Return a tuple containing ``(full path, full path of archive name)``."
msgstr ""

#: ../Doc/library/test.rst:1488
msgid ""
"Create a directory named *pkg_dir* containing an ``__init__`` file with "
"*init_source* as its contents."
msgstr ""

#: ../Doc/library/test.rst:1495
msgid ""
"Create a zip package directory with a path of *zip_dir* and *zip_basename* "
"containing an empty ``__init__`` file and a file *script_basename* "
"containing the *source*.  If *compiled* is ``True``, both source files will "
"be compiled and added to the zip package.  Return a tuple of the full zip "
"path and the archive name for the zip file."
msgstr ""
