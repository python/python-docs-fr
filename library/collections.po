# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-09-15 21:52+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Last-Translator: \n"
"X-Generator: Poedit 2.1.1\n"

#: ../Doc/library/collections.rst:2
msgid ":mod:`collections` --- Container datatypes"
msgstr "Types de données de conteneurs"

#: ../Doc/library/collections.rst:10
msgid "**Source code:** :source:`Lib/collections/__init__.py`"
msgstr "**Code source :** :source:`Lib/collections/__init__.py`"

#: ../Doc/library/collections.rst:20
msgid ""
"This module implements specialized container datatypes providing "
"alternatives to Python's general purpose built-in containers, :class:"
"`dict`, :class:`list`, :class:`set`, and :class:`tuple`."
msgstr ""
"Ce module implémente des types de données de conteneurs spécialisés qui "
"apportent des alternatives aux conteneurs natifs de Python plus généraux :"
"class:`dict`, :class:`list`, :class:`set`et :class:`tuple`."

#: ../Doc/library/collections.rst:25
msgid ":func:`namedtuple`"
msgstr ":func:`namedtuple`"

#: ../Doc/library/collections.rst:25
msgid "factory function for creating tuple subclasses with named fields"
msgstr ""
"fonction permettant de créer des sous-classes de tuple avec des champs nommés"

#: ../Doc/library/collections.rst:26
msgid ":class:`deque`"
msgstr ":class:`deque`"

#: ../Doc/library/collections.rst:26
msgid "list-like container with fast appends and pops on either end"
msgstr ""
"conteneur se comportant comme une liste avec des ajouts et *pop* rapides à "
"chaque extrémité"

#: ../Doc/library/collections.rst:27
msgid ":class:`ChainMap`"
msgstr ":class:`ChainMap`"

#: ../Doc/library/collections.rst:27
msgid "dict-like class for creating a single view of multiple mappings"
msgstr ""
"classe semblable aux dictionnaires qui crée une unique vue à partir de "
"plusieurs tableaux de correspondance"

#: ../Doc/library/collections.rst:28
msgid ":class:`Counter`"
msgstr ":class:`Counter`"

#: ../Doc/library/collections.rst:28
msgid "dict subclass for counting hashable objects"
msgstr "sous-classe de dictionnaire pour compter les objets hachables"

#: ../Doc/library/collections.rst:29
msgid ":class:`OrderedDict`"
msgstr ":class:`OrderedDict`"

#: ../Doc/library/collections.rst:29
msgid "dict subclass that remembers the order entries were added"
msgstr ""
"sous-classe de dictionnaire qui garde en mémoire l'ordre dans lequel les "
"entrées ont été ajoutées"

#: ../Doc/library/collections.rst:30
msgid ":class:`defaultdict`"
msgstr ":class:`defaultdict`"

#: ../Doc/library/collections.rst:30
msgid "dict subclass that calls a factory function to supply missing values"
msgstr ""
"sous-classe de dictionnaire qui appelle une fonction de fabrication pour "
"fournir les valeurs manquantes"

#: ../Doc/library/collections.rst:31
msgid ":class:`UserDict`"
msgstr ":class:`UserDict`"

#: ../Doc/library/collections.rst:31
msgid "wrapper around dictionary objects for easier dict subclassing"
msgstr ""
"enrobeur autour des objets dictionnaires pour faciliter l'héritage de dict"

#: ../Doc/library/collections.rst:32
msgid ":class:`UserList`"
msgstr ":class:`UserList`"

#: ../Doc/library/collections.rst:32
msgid "wrapper around list objects for easier list subclassing"
msgstr "enrobeur autour des objets listes pour faciliter l'héritage de list"

#: ../Doc/library/collections.rst:33
msgid ":class:`UserString`"
msgstr ":class:`UserString`"

#: ../Doc/library/collections.rst:33
msgid "wrapper around string objects for easier string subclassing"
msgstr ""
"enrobeur autour des objets chaînes de caractères pour faciliter l'héritage "
"de string"

#: ../Doc/library/collections.rst:36
msgid ""
"Moved :ref:`collections-abstract-base-classes` to the :mod:`collections.abc` "
"module. For backwards compatibility, they continue to be visible in this "
"module through Python 3.7.  Subsequently, they will be removed entirely."
msgstr ""
"Les :ref:`collections-abstract-base-classes` ont été déplacées vers le "
"module :mod:`collections.abc`. Pour assurer la rétrocompatibilité, elles "
"sont toujours disponibles dans ce module en Python 3.7 mais seront ensuite "
"totalement supprimées."

#: ../Doc/library/collections.rst:43
msgid ":class:`ChainMap` objects"
msgstr ":class:`ChainMap` objects"

#: ../Doc/library/collections.rst:47
msgid ""
"A :class:`ChainMap` class is provided for quickly linking a number of "
"mappings so they can be treated as a single unit.  It is often much faster "
"than creating a new dictionary and running multiple :meth:`~dict.update` "
"calls."
msgstr ""
"Le module fournit une classe :class:`ChainMap` afin de réunir rapidement un "
"certain nombre de tableaux de correspondance en une unique entité. Cela est "
"souvent plus rapide que de créer un nouveau dictionnaire et d'effectuer "
"plusieurs appels de :meth:`~dict.update`."

#: ../Doc/library/collections.rst:51
msgid ""
"The class can be used to simulate nested scopes and is useful in templating."
msgstr ""
"Cette classe peut être utilisée pour simuler des portées imbriquées et est "
"utile pour le *templating*."

#: ../Doc/library/collections.rst:55
msgid ""
"A :class:`ChainMap` groups multiple dicts or other mappings together to "
"create a single, updateable view.  If no *maps* are specified, a single "
"empty dictionary is provided so that a new chain always has at least one "
"mapping."
msgstr ""
"Un objet :class:`ChainMap` regroupe plusieurs dictionnaires ou autres "
"tableaux de correspondance (*mappings*) en une vue que l'on peut mettre à "
"jour. Si l'on ne pas de *maps*, un dictionnaire vide est fourni de telle "
"manière qu'une nouvelle chaîne possède toujours au moins un *mapping*."

#: ../Doc/library/collections.rst:59
msgid ""
"The underlying mappings are stored in a list.  That list is public and can "
"be accessed or updated using the *maps* attribute.  There is no other state."
msgstr ""
"Les *mappings* sous-jacentes sont stockées dans une liste. Celle-ci est "
"publique et peut être consultée ou mise à jour via l'attribut *maps*. Il n'y "
"a pas d'autre état."

#: ../Doc/library/collections.rst:62
msgid ""
"Lookups search the underlying mappings successively until a key is found.  "
"In contrast, writes, updates, and deletions only operate on the first "
"mapping."
msgstr ""
"Les recherches s'effectuent dans chaque *mapping* successivement jusqu'à la "
"première clé correspondante. En revanche, les écritures, mises à jour et "
"suppressions n'affectent que le premier *mapping*."

#: ../Doc/library/collections.rst:65
msgid ""
"A :class:`ChainMap` incorporates the underlying mappings by reference.  So, "
"if one of the underlying mappings gets updated, those changes will be "
"reflected in :class:`ChainMap`."
msgstr ""
"Un objet :class:`ChainMap` incorpore les *mappings* sous-jacents par leur "
"référence. Ainsi, si une de celles-ci est modifiée, les changements "
"affecteront également la :class:`ChainMap`."

#: ../Doc/library/collections.rst:69
msgid ""
"All of the usual dictionary methods are supported.  In addition, there is a "
"*maps* attribute, a method for creating new subcontexts, and a property for "
"accessing all but the first mapping:"
msgstr ""
"Toutes les méthodes usuelles des dictionnaires sont gérées. De plus, cette "
"classe fournit un attrbiut *maps*, une méthode pour créer de nouveaux sous-"
"contextes et une propriété pour accéder à toutes les *mappings* sous-"
"jacentes exceptés la première :"

#: ../Doc/library/collections.rst:75
msgid ""
"A user updateable list of mappings.  The list is ordered from first-searched "
"to last-searched.  It is the only stored state and can be modified to change "
"which mappings are searched.  The list should always contain at least one "
"mapping."
msgstr ""
"Une liste de *mappings* éditable par l'utilisateur. La liste est ordonnée "
"selon l'ordre de recherche. Il s'agit de l'unique état stocké et peut être "
"modifié pour changer l'ordre de recherche. La liste doit toujours contenir "
"au moins une *mapping*."

#: ../Doc/library/collections.rst:82
msgid ""
"Returns a new :class:`ChainMap` containing a new map followed by all of the "
"maps in the current instance.  If ``m`` is specified, it becomes the new map "
"at the front of the list of mappings; if not specified, an empty dict is "
"used, so that a call to ``d.new_child()`` is equivalent to: ``ChainMap({}, "
"*d.maps)``.  This method is used for creating subcontexts that can be "
"updated without altering values in any of the parent mappings."
msgstr ""
"Renvoie un nouvel objet :class:`ChainMap` contenant une nouvelle *mapping* "
"suivie par toutes les autres de l'instance actuelle. Si ``m`` est spécifié, "
"il devient la nouvelle *mapping* au début de la liste des *mappings* ; "
"sinon, un dictionnaire vide est utilisé, de telle manière qu'appeler ``d."
"new_child()`` équivaut à appeler ``ChainMap({}, *d.maps)``. Cette méthode "
"est utile pour créer des sous-contextes qui peuvent être mis à jour sans "
"altérer les valeurs dans les *mappings parents."

#: ../Doc/library/collections.rst:90
msgid "The optional ``m`` parameter was added."
msgstr "Le paramètre optionnel ``m`` a été ajouté."

#: ../Doc/library/collections.rst:95
msgid ""
"Property returning a new :class:`ChainMap` containing all of the maps in the "
"current instance except the first one.  This is useful for skipping the "
"first map in the search.  Use cases are similar to those for the :keyword:"
"`nonlocal` keyword used in :term:`nested scopes <nested scope>`.  The use "
"cases also parallel those for the built-in :func:`super` function.  A "
"reference to ``d.parents`` is equivalent to: ``ChainMap(*d.maps[1:])``."
msgstr ""
"Une propriété qui renvoie un nouvel objet :class:`ChainMap` contenant toutes "
"les *mappings* de l'instance actuelle à l'exception de la première. Cela est "
"utile pour ignorer la première *mapping* dans les recherches. Les cas "
"d'utilisation sont similaires à ceux du mot clé :keyword:`nonlocal` utilisé "
"pour les :term:`portées imbriquées <nested scope>`. Ils sont également "
"parallèles à ceux de la fontion native :func:`super`. Une référence à ``d."
"parents`` est équivalente à : ``ChainMap(*d.maps[1:])``."

#: ../Doc/library/collections.rst:106
msgid ""
"The `MultiContext class <https://github.com/enthought/codetools/blob/4.0.0/"
"codetools/contexts/multi_context.py>`_ in the Enthought `CodeTools package "
"<https://github.com/enthought/codetools>`_ has options to support writing to "
"any mapping in the chain."
msgstr ""
"La `classe MultiContext <https://github.com/enthought/codetools/blob/4.0.0/"
"codetools/contexts/multi_context.py>`_"

#: ../Doc/library/collections.rst:112
msgid ""
"Django's `Context class <https://github.com/django/django/blob/master/django/"
"template/context.py>`_ for templating is a read-only chain of mappings.  It "
"also features pushing and popping of contexts similar to the :meth:"
"`~collections.ChainMap.new_child` method and the :attr:`~collections."
"ChainMap.parents` property."
msgstr ""
"La `classe de contexte de Django <https://github.com/django/django/blob/"
"master/django/template/context.py>`_ pour la création de modèles est une "
"chaîne de *mappings* en lecture seule. Elle comporte également des poussées "
"et des *poppings* de contextes similaires à la méthode :meth:`~collections."
"ChainMap.new_child` et à la propriété :attr:`~collections.ChainMap.parents`."

#: ../Doc/library/collections.rst:119
msgid ""
"The `Nested Contexts recipe <https://code.activestate.com/recipes/577434/>`_ "
"has options to control whether writes and other mutations apply only to the "
"first mapping or to any mapping in the chain."
msgstr ""
"`La Recette des contextes imbriqués <https://code.activestate.com/"
"recipes/577434/>`_ a des options pour contrôler si les écritures et autres "
"mutations ne s'appliquent qu'à la première *mapping* ou à une autre "
"*mapping* de la chaîne."

#: ../Doc/library/collections.rst:124
msgid ""
"A `greatly simplified read-only version of Chainmap <https://code."
"activestate.com/recipes/305268/>`_."
msgstr ""
"Une `version grandement simplifiée de Chainmap en lecture seule <https://"
"code.activestate.com/recipes/305268/>`_."

#: ../Doc/library/collections.rst:129
msgid ":class:`ChainMap` Examples and Recipes"
msgstr ""

#: ../Doc/library/collections.rst:131
msgid "This section shows various approaches to working with chained maps."
msgstr ""

#: ../Doc/library/collections.rst:134
msgid "Example of simulating Python's internal lookup chain::"
msgstr ""

#: ../Doc/library/collections.rst:139
msgid ""
"Example of letting user specified command-line arguments take precedence "
"over environment variables which in turn take precedence over default "
"values::"
msgstr ""

#: ../Doc/library/collections.rst:156
msgid ""
"Example patterns for using the :class:`ChainMap` class to simulate nested "
"contexts::"
msgstr ""

#: ../Doc/library/collections.rst:175
msgid ""
"The :class:`ChainMap` class only makes updates (writes and deletions) to the "
"first mapping in the chain while lookups will search the full chain.  "
"However, if deep writes and deletions are desired, it is easy to make a "
"subclass that updates keys found deeper in the chain::"
msgstr ""

#: ../Doc/library/collections.rst:206
msgid ":class:`Counter` objects"
msgstr ""

#: ../Doc/library/collections.rst:208
msgid ""
"A counter tool is provided to support convenient and rapid tallies. For "
"example::"
msgstr ""

#: ../Doc/library/collections.rst:227
msgid ""
"A :class:`Counter` is a :class:`dict` subclass for counting hashable "
"objects. It is an unordered collection where elements are stored as "
"dictionary keys and their counts are stored as dictionary values.  Counts "
"are allowed to be any integer value including zero or negative counts.  The :"
"class:`Counter` class is similar to bags or multisets in other languages."
msgstr ""

#: ../Doc/library/collections.rst:233
msgid ""
"Elements are counted from an *iterable* or initialized from another "
"*mapping* (or counter):"
msgstr ""

#: ../Doc/library/collections.rst:241
msgid ""
"Counter objects have a dictionary interface except that they return a zero "
"count for missing items instead of raising a :exc:`KeyError`:"
msgstr ""

#: ../Doc/library/collections.rst:248
msgid ""
"Setting a count to zero does not remove an element from a counter. Use "
"``del`` to remove it entirely:"
msgstr ""

#: ../Doc/library/collections.rst:257
msgid ""
"Counter objects support three methods beyond those available for all "
"dictionaries:"
msgstr ""

#: ../Doc/library/collections.rst:262
msgid ""
"Return an iterator over elements repeating each as many times as its count.  "
"Elements are returned in arbitrary order.  If an element's count is less "
"than one, :meth:`elements` will ignore it."
msgstr ""

#: ../Doc/library/collections.rst:272
msgid ""
"Return a list of the *n* most common elements and their counts from the most "
"common to the least.  If *n* is omitted or ``None``, :meth:`most_common` "
"returns *all* elements in the counter. Elements with equal counts are "
"ordered arbitrarily:"
msgstr ""

#: ../Doc/library/collections.rst:282
msgid ""
"Elements are subtracted from an *iterable* or from another *mapping* (or "
"counter).  Like :meth:`dict.update` but subtracts counts instead of "
"replacing them.  Both inputs and outputs may be zero or negative."
msgstr ""

#: ../Doc/library/collections.rst:294
msgid ""
"The usual dictionary methods are available for :class:`Counter` objects "
"except for two which work differently for counters."
msgstr ""

#: ../Doc/library/collections.rst:299
msgid "This class method is not implemented for :class:`Counter` objects."
msgstr ""

#: ../Doc/library/collections.rst:303
msgid ""
"Elements are counted from an *iterable* or added-in from another *mapping* "
"(or counter).  Like :meth:`dict.update` but adds counts instead of replacing "
"them.  Also, the *iterable* is expected to be a sequence of elements, not a "
"sequence of ``(key, value)`` pairs."
msgstr ""

#: ../Doc/library/collections.rst:308
msgid "Common patterns for working with :class:`Counter` objects::"
msgstr ""

#: ../Doc/library/collections.rst:320
msgid ""
"Several mathematical operations are provided for combining :class:`Counter` "
"objects to produce multisets (counters that have counts greater than zero). "
"Addition and subtraction combine counters by adding or subtracting the "
"counts of corresponding elements.  Intersection and union return the minimum "
"and maximum of corresponding counts.  Each operation can accept inputs with "
"signed counts, but the output will exclude results with counts of zero or "
"less."
msgstr ""

#: ../Doc/library/collections.rst:338
msgid ""
"Unary addition and subtraction are shortcuts for adding an empty counter or "
"subtracting from an empty counter."
msgstr ""

#: ../Doc/library/collections.rst:347
msgid ""
"Added support for unary plus, unary minus, and in-place multiset operations."
msgstr ""

#: ../Doc/library/collections.rst:352
msgid ""
"Counters were primarily designed to work with positive integers to represent "
"running counts; however, care was taken to not unnecessarily preclude use "
"cases needing other types or negative values.  To help with those use cases, "
"this section documents the minimum range and type restrictions."
msgstr ""

#: ../Doc/library/collections.rst:357
msgid ""
"The :class:`Counter` class itself is a dictionary subclass with no "
"restrictions on its keys and values.  The values are intended to be numbers "
"representing counts, but you *could* store anything in the value field."
msgstr ""

#: ../Doc/library/collections.rst:361
msgid ""
"The :meth:`~Counter.most_common` method requires only that the values be "
"orderable."
msgstr ""

#: ../Doc/library/collections.rst:363
msgid ""
"For in-place operations such as ``c[key] += 1``, the value type need only "
"support addition and subtraction.  So fractions, floats, and decimals would "
"work and negative values are supported.  The same is also true for :meth:"
"`~Counter.update` and :meth:`~Counter.subtract` which allow negative and "
"zero values for both inputs and outputs."
msgstr ""

#: ../Doc/library/collections.rst:369
msgid ""
"The multiset methods are designed only for use cases with positive values. "
"The inputs may be negative or zero, but only outputs with positive values "
"are created.  There are no type restrictions, but the value type needs to "
"support addition, subtraction, and comparison."
msgstr ""

#: ../Doc/library/collections.rst:374
msgid ""
"The :meth:`~Counter.elements` method requires integer counts.  It ignores "
"zero and negative counts."
msgstr ""

#: ../Doc/library/collections.rst:379
msgid ""
"`Bag class <https://www.gnu.org/software/smalltalk/manual-base/html_node/Bag."
"html>`_ in Smalltalk."
msgstr ""

#: ../Doc/library/collections.rst:382
msgid ""
"Wikipedia entry for `Multisets <https://en.wikipedia.org/wiki/Multiset>`_."
msgstr ""

#: ../Doc/library/collections.rst:384
msgid ""
"`C++ multisets <http://www.java2s.com/Tutorial/Cpp/0380__set-multiset/"
"Catalog0380__set-multiset.htm>`_ tutorial with examples."
msgstr ""

#: ../Doc/library/collections.rst:387
msgid ""
"For mathematical operations on multisets and their use cases, see *Knuth, "
"Donald. The Art of Computer Programming Volume II, Section 4.6.3, Exercise "
"19*."
msgstr ""

#: ../Doc/library/collections.rst:391
msgid ""
"To enumerate all distinct multisets of a given size over a given set of "
"elements, see :func:`itertools.combinations_with_replacement`::"
msgstr ""

#: ../Doc/library/collections.rst:398
msgid ":class:`deque` objects"
msgstr ""

#: ../Doc/library/collections.rst:402
msgid ""
"Returns a new deque object initialized left-to-right (using :meth:`append`) "
"with data from *iterable*.  If *iterable* is not specified, the new deque is "
"empty."
msgstr ""

#: ../Doc/library/collections.rst:405
msgid ""
"Deques are a generalization of stacks and queues (the name is pronounced "
"\"deck\" and is short for \"double-ended queue\").  Deques support thread-"
"safe, memory efficient appends and pops from either side of the deque with "
"approximately the same O(1) performance in either direction."
msgstr ""

#: ../Doc/library/collections.rst:410
msgid ""
"Though :class:`list` objects support similar operations, they are optimized "
"for fast fixed-length operations and incur O(n) memory movement costs for "
"``pop(0)`` and ``insert(0, v)`` operations which change both the size and "
"position of the underlying data representation."
msgstr ""

#: ../Doc/library/collections.rst:416
msgid ""
"If *maxlen* is not specified or is ``None``, deques may grow to an arbitrary "
"length.  Otherwise, the deque is bounded to the specified maximum length.  "
"Once a bounded length deque is full, when new items are added, a "
"corresponding number of items are discarded from the opposite end.  Bounded "
"length deques provide functionality similar to the ``tail`` filter in Unix. "
"They are also useful for tracking transactions and other pools of data where "
"only the most recent activity is of interest."
msgstr ""

#: ../Doc/library/collections.rst:425
msgid "Deque objects support the following methods:"
msgstr ""

#: ../Doc/library/collections.rst:429
msgid "Add *x* to the right side of the deque."
msgstr ""

#: ../Doc/library/collections.rst:434
msgid "Add *x* to the left side of the deque."
msgstr ""

#: ../Doc/library/collections.rst:439
msgid "Remove all elements from the deque leaving it with length 0."
msgstr ""

#: ../Doc/library/collections.rst:444
msgid "Create a shallow copy of the deque."
msgstr ""

#: ../Doc/library/collections.rst:451
msgid "Count the number of deque elements equal to *x*."
msgstr ""

#: ../Doc/library/collections.rst:458
msgid ""
"Extend the right side of the deque by appending elements from the iterable "
"argument."
msgstr ""

#: ../Doc/library/collections.rst:464
msgid ""
"Extend the left side of the deque by appending elements from *iterable*. "
"Note, the series of left appends results in reversing the order of elements "
"in the iterable argument."
msgstr ""

#: ../Doc/library/collections.rst:471
msgid ""
"Return the position of *x* in the deque (at or after index *start* and "
"before index *stop*).  Returns the first match or raises :exc:`ValueError` "
"if not found."
msgstr ""

#: ../Doc/library/collections.rst:480
msgid "Insert *x* into the deque at position *i*."
msgstr ""

#: ../Doc/library/collections.rst:482
msgid ""
"If the insertion would cause a bounded deque to grow beyond *maxlen*, an :"
"exc:`IndexError` is raised."
msgstr ""

#: ../Doc/library/collections.rst:490
msgid ""
"Remove and return an element from the right side of the deque. If no "
"elements are present, raises an :exc:`IndexError`."
msgstr ""

#: ../Doc/library/collections.rst:496
msgid ""
"Remove and return an element from the left side of the deque. If no elements "
"are present, raises an :exc:`IndexError`."
msgstr ""

#: ../Doc/library/collections.rst:502
msgid ""
"Remove the first occurrence of *value*.  If not found, raises a :exc:"
"`ValueError`."
msgstr ""

#: ../Doc/library/collections.rst:508
msgid "Reverse the elements of the deque in-place and then return ``None``."
msgstr ""

#: ../Doc/library/collections.rst:515
msgid ""
"Rotate the deque *n* steps to the right.  If *n* is negative, rotate to the "
"left."
msgstr ""

#: ../Doc/library/collections.rst:518
msgid ""
"When the deque is not empty, rotating one step to the right is equivalent to "
"``d.appendleft(d.pop())``, and rotating one step to the left is equivalent "
"to ``d.append(d.popleft())``."
msgstr ""

#: ../Doc/library/collections.rst:523
msgid "Deque objects also provide one read-only attribute:"
msgstr ""

#: ../Doc/library/collections.rst:527
msgid "Maximum size of a deque or ``None`` if unbounded."
msgstr ""

#: ../Doc/library/collections.rst:532
msgid ""
"In addition to the above, deques support iteration, pickling, ``len(d)``, "
"``reversed(d)``, ``copy.copy(d)``, ``copy.deepcopy(d)``, membership testing "
"with the :keyword:`in` operator, and subscript references such as "
"``d[-1]``.  Indexed access is O(1) at both ends but slows to O(n) in the "
"middle.  For fast random access, use lists instead."
msgstr ""

#: ../Doc/library/collections.rst:538
msgid ""
"Starting in version 3.5, deques support ``__add__()``, ``__mul__()``, and "
"``__imul__()``."
msgstr ""

#: ../Doc/library/collections.rst:541
msgid "Example:"
msgstr "Exemple :"

#: ../Doc/library/collections.rst:598
msgid ":class:`deque` Recipes"
msgstr ""

#: ../Doc/library/collections.rst:600
msgid "This section shows various approaches to working with deques."
msgstr ""

#: ../Doc/library/collections.rst:602
msgid ""
"Bounded length deques provide functionality similar to the ``tail`` filter "
"in Unix::"
msgstr ""

#: ../Doc/library/collections.rst:610
msgid ""
"Another approach to using deques is to maintain a sequence of recently added "
"elements by appending to the right and popping to the left::"
msgstr ""

#: ../Doc/library/collections.rst:625
msgid ""
"A `round-robin scheduler <https://en.wikipedia.org/wiki/Round-"
"robin_scheduling>`_ can be implemented with input iterators stored in a :"
"class:`deque`.  Values are yielded from the active iterator in position "
"zero.  If that iterator is exhausted, it can be removed with :meth:`~deque."
"popleft`; otherwise, it can be cycled back to the end with the :meth:`~deque."
"rotate` method::"
msgstr ""

#: ../Doc/library/collections.rst:644
msgid ""
"The :meth:`~deque.rotate` method provides a way to implement :class:`deque` "
"slicing and deletion.  For example, a pure Python implementation of ``del "
"d[n]`` relies on the ``rotate()`` method to position elements to be popped::"
msgstr ""

#: ../Doc/library/collections.rst:653
msgid ""
"To implement :class:`deque` slicing, use a similar approach applying :meth:"
"`~deque.rotate` to bring a target element to the left side of the deque. "
"Remove old entries with :meth:`~deque.popleft`, add new entries with :meth:"
"`~deque.extend`, and then reverse the rotation. With minor variations on "
"that approach, it is easy to implement Forth style stack manipulations such "
"as ``dup``, ``drop``, ``swap``, ``over``, ``pick``, ``rot``, and ``roll``."
msgstr ""

#: ../Doc/library/collections.rst:663
msgid ":class:`defaultdict` objects"
msgstr ""

#: ../Doc/library/collections.rst:667
msgid ""
"Returns a new dictionary-like object.  :class:`defaultdict` is a subclass of "
"the built-in :class:`dict` class.  It overrides one method and adds one "
"writable instance variable.  The remaining functionality is the same as for "
"the :class:`dict` class and is not documented here."
msgstr ""

#: ../Doc/library/collections.rst:672
msgid ""
"The first argument provides the initial value for the :attr:"
"`default_factory` attribute; it defaults to ``None``. All remaining "
"arguments are treated the same as if they were passed to the :class:`dict` "
"constructor, including keyword arguments."
msgstr ""

#: ../Doc/library/collections.rst:678
msgid ""
":class:`defaultdict` objects support the following method in addition to the "
"standard :class:`dict` operations:"
msgstr ""

#: ../Doc/library/collections.rst:683
msgid ""
"If the :attr:`default_factory` attribute is ``None``, this raises a :exc:"
"`KeyError` exception with the *key* as argument."
msgstr ""

#: ../Doc/library/collections.rst:686
msgid ""
"If :attr:`default_factory` is not ``None``, it is called without arguments "
"to provide a default value for the given *key*, this value is inserted in "
"the dictionary for the *key*, and returned."
msgstr ""

#: ../Doc/library/collections.rst:690
msgid ""
"If calling :attr:`default_factory` raises an exception this exception is "
"propagated unchanged."
msgstr ""

#: ../Doc/library/collections.rst:693
msgid ""
"This method is called by the :meth:`__getitem__` method of the :class:`dict` "
"class when the requested key is not found; whatever it returns or raises is "
"then returned or raised by :meth:`__getitem__`."
msgstr ""

#: ../Doc/library/collections.rst:697
msgid ""
"Note that :meth:`__missing__` is *not* called for any operations besides :"
"meth:`__getitem__`. This means that :meth:`get` will, like normal "
"dictionaries, return ``None`` as a default rather than using :attr:"
"`default_factory`."
msgstr ""

#: ../Doc/library/collections.rst:703
msgid ":class:`defaultdict` objects support the following instance variable:"
msgstr ""

#: ../Doc/library/collections.rst:708
msgid ""
"This attribute is used by the :meth:`__missing__` method; it is initialized "
"from the first argument to the constructor, if present, or to ``None``, if "
"absent."
msgstr ""

#: ../Doc/library/collections.rst:714
msgid ":class:`defaultdict` Examples"
msgstr ""

#: ../Doc/library/collections.rst:716
msgid ""
"Using :class:`list` as the :attr:`~defaultdict.default_factory`, it is easy "
"to group a sequence of key-value pairs into a dictionary of lists:"
msgstr ""

#: ../Doc/library/collections.rst:727
msgid ""
"When each key is encountered for the first time, it is not already in the "
"mapping; so an entry is automatically created using the :attr:`~defaultdict."
"default_factory` function which returns an empty :class:`list`.  The :meth:"
"`list.append` operation then attaches the value to the new list.  When keys "
"are encountered again, the look-up proceeds normally (returning the list for "
"that key) and the :meth:`list.append` operation adds another value to the "
"list. This technique is simpler and faster than an equivalent technique "
"using :meth:`dict.setdefault`:"
msgstr ""

#: ../Doc/library/collections.rst:742
msgid ""
"Setting the :attr:`~defaultdict.default_factory` to :class:`int` makes the :"
"class:`defaultdict` useful for counting (like a bag or multiset in other "
"languages):"
msgstr ""

#: ../Doc/library/collections.rst:754
msgid ""
"When a letter is first encountered, it is missing from the mapping, so the :"
"attr:`~defaultdict.default_factory` function calls :func:`int` to supply a "
"default count of zero.  The increment operation then builds up the count for "
"each letter."
msgstr ""

#: ../Doc/library/collections.rst:758
msgid ""
"The function :func:`int` which always returns zero is just a special case of "
"constant functions.  A faster and more flexible way to create constant "
"functions is to use a lambda function which can supply any constant value "
"(not just zero):"
msgstr ""

#: ../Doc/library/collections.rst:770
msgid ""
"Setting the :attr:`~defaultdict.default_factory` to :class:`set` makes the :"
"class:`defaultdict` useful for building a dictionary of sets:"
msgstr ""

#: ../Doc/library/collections.rst:783
msgid ":func:`namedtuple` Factory Function for Tuples with Named Fields"
msgstr ""

#: ../Doc/library/collections.rst:785
msgid ""
"Named tuples assign meaning to each position in a tuple and allow for more "
"readable, self-documenting code.  They can be used wherever regular tuples "
"are used, and they add the ability to access fields by name instead of "
"position index."
msgstr ""

#: ../Doc/library/collections.rst:791
msgid ""
"Returns a new tuple subclass named *typename*.  The new subclass is used to "
"create tuple-like objects that have fields accessible by attribute lookup as "
"well as being indexable and iterable.  Instances of the subclass also have a "
"helpful docstring (with typename and field_names) and a helpful :meth:"
"`__repr__` method which lists the tuple contents in a ``name=value`` format."
msgstr ""

#: ../Doc/library/collections.rst:797
msgid ""
"The *field_names* are a sequence of strings such as ``['x', 'y']``. "
"Alternatively, *field_names* can be a single string with each fieldname "
"separated by whitespace and/or commas, for example ``'x y'`` or ``'x, y'``."
msgstr ""

#: ../Doc/library/collections.rst:801
msgid ""
"Any valid Python identifier may be used for a fieldname except for names "
"starting with an underscore.  Valid identifiers consist of letters, digits, "
"and underscores but do not start with a digit or underscore and cannot be a :"
"mod:`keyword` such as *class*, *for*, *return*, *global*, *pass*, or *raise*."
msgstr ""

#: ../Doc/library/collections.rst:807
msgid ""
"If *rename* is true, invalid fieldnames are automatically replaced with "
"positional names.  For example, ``['abc', 'def', 'ghi', 'abc']`` is "
"converted to ``['abc', '_1', 'ghi', '_3']``, eliminating the keyword ``def`` "
"and the duplicate fieldname ``abc``."
msgstr ""

#: ../Doc/library/collections.rst:812
msgid ""
"*defaults* can be ``None`` or an :term:`iterable` of default values. Since "
"fields with a default value must come after any fields without a default, "
"the *defaults* are applied to the rightmost parameters.  For example, if the "
"fieldnames are ``['x', 'y', 'z']`` and the defaults are ``(1, 2)``, then "
"``x`` will be a required argument, ``y`` will default to ``1``, and ``z`` "
"will default to ``2``."
msgstr ""

#: ../Doc/library/collections.rst:819
msgid ""
"If *module* is defined, the ``__module__`` attribute of the named tuple is "
"set to that value."
msgstr ""

#: ../Doc/library/collections.rst:822
msgid ""
"Named tuple instances do not have per-instance dictionaries, so they are "
"lightweight and require no more memory than regular tuples."
msgstr ""

#: ../Doc/library/collections.rst:825
msgid "Added support for *rename*."
msgstr ""

#: ../Doc/library/collections.rst:828
msgid ""
"The *verbose* and *rename* parameters became :ref:`keyword-only arguments "
"<keyword-only_parameter>`."
msgstr ""

#: ../Doc/library/collections.rst:832
msgid "Added the *module* parameter."
msgstr ""

#: ../Doc/library/collections.rst:835
msgid "Remove the *verbose* parameter and the :attr:`_source` attribute."
msgstr ""

#: ../Doc/library/collections.rst:838
msgid ""
"Added the *defaults* parameter and the :attr:`_field_defaults` attribute."
msgstr ""

#: ../Doc/library/collections.rst:858
msgid ""
"Named tuples are especially useful for assigning field names to result "
"tuples returned by the :mod:`csv` or :mod:`sqlite3` modules::"
msgstr ""

#: ../Doc/library/collections.rst:874
msgid ""
"In addition to the methods inherited from tuples, named tuples support three "
"additional methods and two attributes.  To prevent conflicts with field "
"names, the method and attribute names start with an underscore."
msgstr ""

#: ../Doc/library/collections.rst:880
msgid ""
"Class method that makes a new instance from an existing sequence or iterable."
msgstr ""

#: ../Doc/library/collections.rst:890
msgid ""
"Return a new :class:`OrderedDict` which maps field names to their "
"corresponding values:"
msgstr ""

#: ../Doc/library/collections.rst:899
msgid "Returns an :class:`OrderedDict` instead of a regular :class:`dict`."
msgstr ""

#: ../Doc/library/collections.rst:904
msgid ""
"Return a new instance of the named tuple replacing specified fields with new "
"values::"
msgstr ""

#: ../Doc/library/collections.rst:916
msgid ""
"Tuple of strings listing the field names.  Useful for introspection and for "
"creating new named tuple types from existing named tuples."
msgstr ""

#: ../Doc/library/collections.rst:931
msgid "Dictionary mapping field names to default values."
msgstr ""

#: ../Doc/library/collections.rst:941
msgid ""
"To retrieve a field whose name is stored in a string, use the :func:"
"`getattr` function:"
msgstr ""

#: ../Doc/library/collections.rst:947
msgid ""
"To convert a dictionary to a named tuple, use the double-star-operator (as "
"described in :ref:`tut-unpacking-arguments`):"
msgstr ""

#: ../Doc/library/collections.rst:954
msgid ""
"Since a named tuple is a regular Python class, it is easy to add or change "
"functionality with a subclass.  Here is how to add a calculated field and a "
"fixed-width print format:"
msgstr ""

#: ../Doc/library/collections.rst:973
msgid ""
"The subclass shown above sets ``__slots__`` to an empty tuple.  This helps "
"keep memory requirements low by preventing the creation of instance "
"dictionaries."
msgstr ""

#: ../Doc/library/collections.rst:976
msgid ""
"Subclassing is not useful for adding new, stored fields.  Instead, simply "
"create a new named tuple type from the :attr:`~somenamedtuple._fields` "
"attribute:"
msgstr ""

#: ../Doc/library/collections.rst:981
msgid ""
"Docstrings can be customized by making direct assignments to the ``__doc__`` "
"fields:"
msgstr ""

#: ../Doc/library/collections.rst:990
msgid "Property docstrings became writeable."
msgstr ""

#: ../Doc/library/collections.rst:993
msgid ""
"Default values can be implemented by using :meth:`~somenamedtuple._replace` "
"to customize a prototype instance:"
msgstr ""

#: ../Doc/library/collections.rst:1004
msgid ""
"`Recipe for named tuple abstract base class with a metaclass mix-in <https://"
"code.activestate.com/recipes/577629-namedtupleabc-abstract-base-class-mix-in-"
"for-named/>`_ by Jan Kaliszewski.  Besides providing an :term:`abstract base "
"class` for named tuples, it also supports an alternate :term:`metaclass`-"
"based constructor that is convenient for use cases where named tuples are "
"being subclassed."
msgstr ""

#: ../Doc/library/collections.rst:1011
msgid ""
"See :meth:`types.SimpleNamespace` for a mutable namespace based on an "
"underlying dictionary instead of a tuple."
msgstr ""

#: ../Doc/library/collections.rst:1014
msgid ""
"See :meth:`typing.NamedTuple` for a way to add type hints for named tuples."
msgstr ""

#: ../Doc/library/collections.rst:1018
msgid ":class:`OrderedDict` objects"
msgstr ""

#: ../Doc/library/collections.rst:1020
msgid ""
"Ordered dictionaries are just like regular dictionaries but they remember "
"the order that items were inserted.  When iterating over an ordered "
"dictionary, the items are returned in the order their keys were first added."
msgstr ""

#: ../Doc/library/collections.rst:1026
msgid ""
"Return an instance of a dict subclass, supporting the usual :class:`dict` "
"methods.  An *OrderedDict* is a dict that remembers the order that keys were "
"first inserted. If a new entry overwrites an existing entry, the original "
"insertion position is left unchanged.  Deleting an entry and reinserting it "
"will move it to the end."
msgstr ""

#: ../Doc/library/collections.rst:1036
msgid ""
"The :meth:`popitem` method for ordered dictionaries returns and removes a "
"(key, value) pair.  The pairs are returned in :abbr:`LIFO (last-in, first-"
"out)` order if *last* is true or :abbr:`FIFO (first-in, first-out)` order if "
"false."
msgstr ""

#: ../Doc/library/collections.rst:1043
msgid ""
"Move an existing *key* to either end of an ordered dictionary.  The item is "
"moved to the right end if *last* is true (the default) or to the beginning "
"if *last* is false.  Raises :exc:`KeyError` if the *key* does not exist::"
msgstr ""

#: ../Doc/library/collections.rst:1058
msgid ""
"In addition to the usual mapping methods, ordered dictionaries also support "
"reverse iteration using :func:`reversed`."
msgstr ""

#: ../Doc/library/collections.rst:1061
msgid ""
"Equality tests between :class:`OrderedDict` objects are order-sensitive and "
"are implemented as ``list(od1.items())==list(od2.items())``. Equality tests "
"between :class:`OrderedDict` objects and other :class:`~collections.abc."
"Mapping` objects are order-insensitive like regular dictionaries.  This "
"allows :class:`OrderedDict` objects to be substituted anywhere a regular "
"dictionary is used."
msgstr ""

#: ../Doc/library/collections.rst:1068
msgid ""
"The items, keys, and values :term:`views <dictionary view>` of :class:"
"`OrderedDict` now support reverse iteration using :func:`reversed`."
msgstr ""

#: ../Doc/library/collections.rst:1072
msgid ""
"With the acceptance of :pep:`468`, order is retained for keyword arguments "
"passed to the :class:`OrderedDict` constructor and its :meth:`update` method."
msgstr ""

#: ../Doc/library/collections.rst:1078
msgid ":class:`OrderedDict` Examples and Recipes"
msgstr ""

#: ../Doc/library/collections.rst:1080
msgid ""
"Since an ordered dictionary remembers its insertion order, it can be used in "
"conjunction with sorting to make a sorted dictionary::"
msgstr ""

#: ../Doc/library/collections.rst:1098
msgid ""
"The new sorted dictionaries maintain their sort order when entries are "
"deleted.  But when new keys are added, the keys are appended to the end and "
"the sort is not maintained."
msgstr ""

#: ../Doc/library/collections.rst:1102
msgid ""
"It is also straight-forward to create an ordered dictionary variant that "
"remembers the order the keys were *last* inserted. If a new entry overwrites "
"an existing entry, the original insertion position is changed and moved to "
"the end::"
msgstr ""

#: ../Doc/library/collections.rst:1115
msgid ""
"An ordered dictionary can be combined with the :class:`Counter` class so "
"that the counter remembers the order elements are first encountered::"
msgstr ""

#: ../Doc/library/collections.rst:1129
msgid ":class:`UserDict` objects"
msgstr ""

#: ../Doc/library/collections.rst:1131
msgid ""
"The class, :class:`UserDict` acts as a wrapper around dictionary objects. "
"The need for this class has been partially supplanted by the ability to "
"subclass directly from :class:`dict`; however, this class can be easier to "
"work with because the underlying dictionary is accessible as an attribute."
msgstr ""

#: ../Doc/library/collections.rst:1139
msgid ""
"Class that simulates a dictionary.  The instance's contents are kept in a "
"regular dictionary, which is accessible via the :attr:`data` attribute of :"
"class:`UserDict` instances.  If *initialdata* is provided, :attr:`data` is "
"initialized with its contents; note that a reference to *initialdata* will "
"not be kept, allowing it be used for other purposes."
msgstr ""

#: ../Doc/library/collections.rst:1145
msgid ""
"In addition to supporting the methods and operations of mappings, :class:"
"`UserDict` instances provide the following attribute:"
msgstr ""

#: ../Doc/library/collections.rst:1150
msgid ""
"A real dictionary used to store the contents of the :class:`UserDict` class."
msgstr ""

#: ../Doc/library/collections.rst:1156
msgid ":class:`UserList` objects"
msgstr ""

#: ../Doc/library/collections.rst:1158
msgid ""
"This class acts as a wrapper around list objects.  It is a useful base class "
"for your own list-like classes which can inherit from them and override "
"existing methods or add new ones.  In this way, one can add new behaviors to "
"lists."
msgstr ""

#: ../Doc/library/collections.rst:1163
msgid ""
"The need for this class has been partially supplanted by the ability to "
"subclass directly from :class:`list`; however, this class can be easier to "
"work with because the underlying list is accessible as an attribute."
msgstr ""

#: ../Doc/library/collections.rst:1169
msgid ""
"Class that simulates a list.  The instance's contents are kept in a regular "
"list, which is accessible via the :attr:`data` attribute of :class:"
"`UserList` instances.  The instance's contents are initially set to a copy "
"of *list*, defaulting to the empty list ``[]``.  *list* can be any iterable, "
"for example a real Python list or a :class:`UserList` object."
msgstr ""

#: ../Doc/library/collections.rst:1175
msgid ""
"In addition to supporting the methods and operations of mutable sequences, :"
"class:`UserList` instances provide the following attribute:"
msgstr ""

#: ../Doc/library/collections.rst:1180
msgid ""
"A real :class:`list` object used to store the contents of the :class:"
"`UserList` class."
msgstr ""

#: ../Doc/library/collections.rst:1183
msgid ""
"**Subclassing requirements:** Subclasses of :class:`UserList` are expected "
"to offer a constructor which can be called with either no arguments or one "
"argument.  List operations which return a new sequence attempt to create an "
"instance of the actual implementation class.  To do so, it assumes that the "
"constructor can be called with a single parameter, which is a sequence "
"object used as a data source."
msgstr ""

#: ../Doc/library/collections.rst:1190
msgid ""
"If a derived class does not wish to comply with this requirement, all of the "
"special methods supported by this class will need to be overridden; please "
"consult the sources for information about the methods which need to be "
"provided in that case."
msgstr ""

#: ../Doc/library/collections.rst:1196
msgid ":class:`UserString` objects"
msgstr ""

#: ../Doc/library/collections.rst:1198
msgid ""
"The class, :class:`UserString` acts as a wrapper around string objects. The "
"need for this class has been partially supplanted by the ability to subclass "
"directly from :class:`str`; however, this class can be easier to work with "
"because the underlying string is accessible as an attribute."
msgstr ""

#: ../Doc/library/collections.rst:1206
msgid ""
"Class that simulates a string object.  The instance's content is kept in a "
"regular string object, which is accessible via the :attr:`data` attribute "
"of :class:`UserString` instances.  The instance's contents are initially set "
"to a copy of *seq*.  The *seq* argument can be any object which can be "
"converted into a string using the built-in :func:`str` function."
msgstr ""

#: ../Doc/library/collections.rst:1213
msgid ""
"In addition to supporting the methods and operations of strings, :class:"
"`UserString` instances provide the following attribute:"
msgstr ""

#: ../Doc/library/collections.rst:1218
msgid ""
"A real :class:`str` object used to store the contents of the :class:"
"`UserString` class."
msgstr ""

#: ../Doc/library/collections.rst:1221
msgid ""
"New methods ``__getnewargs__``, ``__rmod__``, ``casefold``, ``format_map``, "
"``isprintable``, and ``maketrans``."
msgstr ""
