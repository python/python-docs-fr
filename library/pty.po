# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-23 16:48+0200\n"
"PO-Revision-Date: 2020-03-21 13:08+0100\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Last-Translator: \n"
"X-Generator: Poedit 2.0.6\n"

#: ../Doc/library/pty.rst:2
msgid ":mod:`pty` --- Pseudo-terminal utilities"
msgstr ":mod:`pty` — Outils de manipulation de pseudo-terminaux"

#: ../Doc/library/pty.rst:11
msgid "**Source code:** :source:`Lib/pty.py`"
msgstr "**Code source :** :source:`Lib/pty.py`"

#: ../Doc/library/pty.rst:15
msgid ""
"The :mod:`pty` module defines operations for handling the pseudo-terminal "
"concept: starting another process and being able to write to and read from "
"its controlling terminal programmatically."
msgstr ""
"Le module :mod:`pty` expose des fonctions de manipulation de pseudo-"
"terminaux, il permet d'écrire un programme capable de démarrer un autre "
"processus, d'écrire et de lire depuis son terminal."

#: ../Doc/library/pty.rst:19
msgid ""
"Because pseudo-terminal handling is highly platform dependent, there is code "
"to do it only for Linux. (The Linux code is supposed to work on other "
"platforms, but hasn't been tested yet.)"
msgstr ""
"La gestion de pseudo-terminaux étant très dépendante de la plateforme, ce "
"code ne gère que Linux. (Code supposé fonctionner sur d'autres plateformes, "
"mais sans avoir été testé)."

#: ../Doc/library/pty.rst:23
msgid "The :mod:`pty` module defines the following functions:"
msgstr "Le module :mod:`pty` expose les fonctions suivantes :"

#: ../Doc/library/pty.rst:28
msgid ""
"Fork. Connect the child's controlling terminal to a pseudo-terminal. Return "
"value is ``(pid, fd)``. Note that the child  gets *pid* 0, and the *fd* is "
"*invalid*. The parent's return value is the *pid* of the child, and *fd* is "
"a file descriptor connected to the child's controlling terminal (and also to "
"the child's standard input and output)."
msgstr ""
"*Fork*. Connecte le terminal contrôlé par le fils à un pseudo-terminal. La "
"valeur renvoyée est ``(pid, fd)``. Notez que le fils obtient ``0`` comme "
"*pid* et un *fd* non valide. Le parent obtient le *pid* du fils, et *fd* un "
"descripteur de fichier connecté à un terminal contrôlé par le fils (et donc "
"à l'entrée et la sortie standard du fils)."

#: ../Doc/library/pty.rst:37
msgid ""
"Open a new pseudo-terminal pair, using :func:`os.openpty` if possible, or "
"emulation code for generic Unix systems. Return a pair of file descriptors "
"``(master, slave)``, for the master and the slave end, respectively."
msgstr ""
"Ouvre une nouvelle paire de pseudo-terminaux, en utilisant si possible :func:"
"`os.openpty`, ou du code émulant la fonctionnalité pour des systèmes Unix "
"génériques. Renvoie une paire de descripteurs de fichier ``(master, "
"slave)``, pour le maître et pour l'esclave respectivement."

#: ../Doc/library/pty.rst:44
msgid ""
"Spawn a process, and connect its controlling terminal with the current "
"process's standard io. This is often used to baffle programs which insist on "
"reading from the controlling terminal. It is expected that the process "
"spawned behind the pty will eventually terminate, and when it does *spawn* "
"will return."
msgstr ""
"Crée un nouveau processus et connecte son terminal aux entrées/sorties "
"standard du processus courant. C'est typiquement utilisé pour duper les "
"programmes insistant sur le fait de lire depuis leur terminal."

#: ../Doc/library/pty.rst:50
msgid ""
"The functions *master_read* and *stdin_read* are passed a file descriptor "
"which they should read from, and they should always return a byte string. In "
"order to force spawn to return before the child process exits an :exc:"
"`OSError` should be thrown."
msgstr ""

#: ../Doc/library/pty.rst:55
msgid ""
"The default implementation for both functions will read and return up to "
"1024 bytes each time the function is called. The *master_read* callback is "
"passed the pseudoterminal’s master file descriptor to read output from the "
"child process, and *stdin_read* is passed file descriptor 0, to read from "
"the parent process's standard input."
msgstr ""

#: ../Doc/library/pty.rst:61
msgid ""
"Returning an empty byte string from either callback is interpreted as an end-"
"of-file (EOF) condition, and that callback will not be called after that. If "
"*stdin_read* signals EOF the controlling terminal can no longer communicate "
"with the parent process OR the child process. Unless the child process will "
"quit without any input, *spawn* will then loop forever. If *master_read* "
"signals EOF the same behavior results (on linux at least)."
msgstr ""

#: ../Doc/library/pty.rst:68
msgid ""
"If both callbacks signal EOF then *spawn* will probably never return, unless "
"*select* throws an error on your platform when passed three empty lists. "
"This is a bug, documented in `issue 26228 <https://bugs.python.org/"
"issue26228>`_."
msgstr ""

#: ../Doc/library/pty.rst:73
msgid ""
":func:`spawn` now returns the status value from :func:`os.waitpid` on the "
"child process."
msgstr ""
":func:`spawn` renvoie maintenant la valeur renvoyée par :func:`os.waitpid` "
"sur le processus fils."

#: ../Doc/library/pty.rst:78
msgid "Example"
msgstr "Exemple"

#: ../Doc/library/pty.rst:82
msgid ""
"The following program acts like the Unix command :manpage:`script(1)`, using "
"a pseudo-terminal to record all input and output of a terminal session in a "
"\"typescript\". ::"
msgstr ""
"Le programme suivant se comporte comme la commande Unix :manpage:"
"`script(1)`, utilisant un pseudo-terminal pour enregistrer toutes les "
"entrées et sorties d'une session dans un fichier *typescript*. ::"

#~ msgid ""
#~ "The functions *master_read* and *stdin_read* should be functions which "
#~ "read from a file descriptor. The defaults try to read 1024 bytes each "
#~ "time they are called."
#~ msgstr ""
#~ "Les fonctions *master_read* et *stdin_read* doivent être des fonctions "
#~ "lisant sur un descripteur de fichier. Par défaut elles lisent 1024 octets "
#~ "à chaque fois qu'elles sont appelées."
