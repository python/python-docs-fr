# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-24 09:01+0200\n"
"PO-Revision-Date: 2020-03-25 16:25+0100\n"
"Last-Translator: \n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.0.6\n"

#: library/pty.rst:2
msgid ":mod:`pty` --- Pseudo-terminal utilities"
msgstr ":mod:`pty` — Outils de manipulation de pseudo-terminaux"

#: library/pty.rst:11
msgid "**Source code:** :source:`Lib/pty.py`"
msgstr "**Code source :** :source:`Lib/pty.py`"

#: library/pty.rst:15
msgid ""
"The :mod:`pty` module defines operations for handling the pseudo-terminal "
"concept: starting another process and being able to write to and read from "
"its controlling terminal programmatically."
msgstr ""
"Le module :mod:`pty` expose des fonctions de manipulation de pseudo-"
"terminaux, il permet d'écrire un programme capable de démarrer un autre "
"processus, d'écrire et de lire depuis son terminal."

#: library/pty.rst:19
msgid ""
"Because pseudo-terminal handling is highly platform dependent, there is code "
"to do it only for Linux. (The Linux code is supposed to work on other "
"platforms, but hasn't been tested yet.)"
msgstr ""
"La gestion de pseudo-terminaux étant très dépendante de la plateforme, ce "
"code ne gère que Linux. (Code supposé fonctionner sur d'autres plateformes, "
"mais sans avoir été testé)."

#: library/pty.rst:23
msgid "The :mod:`pty` module defines the following functions:"
msgstr "Le module :mod:`pty` expose les fonctions suivantes :"

#: library/pty.rst:28
msgid ""
"Fork. Connect the child's controlling terminal to a pseudo-terminal. Return "
"value is ``(pid, fd)``. Note that the child  gets *pid* 0, and the *fd* is "
"*invalid*. The parent's return value is the *pid* of the child, and *fd* is "
"a file descriptor connected to the child's controlling terminal (and also to "
"the child's standard input and output)."
msgstr ""
"*Fork*. Connecte le terminal contrôlé par le fils à un pseudo-terminal. La "
"valeur renvoyée est ``(pid, fd)``. Notez que le fils obtient ``0`` comme "
"*pid* et un *fd* non valide. Le parent obtient le *pid* du fils, et *fd* un "
"descripteur de fichier connecté à un terminal contrôlé par le fils (et donc "
"à l'entrée et la sortie standard du fils)."

#: library/pty.rst:37
msgid ""
"Open a new pseudo-terminal pair, using :func:`os.openpty` if possible, or "
"emulation code for generic Unix systems. Return a pair of file descriptors "
"``(master, slave)``, for the master and the slave end, respectively."
msgstr ""
"Ouvre une nouvelle paire de pseudo-terminaux, en utilisant si possible :func:"
"`os.openpty`, ou du code émulant la fonctionnalité pour des systèmes *Unix* "
"génériques. Renvoie une paire de descripteurs de fichier ``(master, "
"slave)``, pour le maître et pour l'esclave respectivement."

#: library/pty.rst:44
msgid ""
"Spawn a process, and connect its controlling terminal with the current "
"process's standard io. This is often used to baffle programs which insist on "
"reading from the controlling terminal. It is expected that the process "
"spawned behind the pty will eventually terminate, and when it does *spawn* "
"will return."
msgstr ""
"Crée un nouveau processus et connecte son terminal aux entrées/sorties "
"standard du processus courant. Cette stratégie est typiquement utilisée pour "
"les programmes qui veulent lire depuis leur propre terminal. Le processus "
"créé utilisant le *pty* est supposé se terminer et, quand il le fera, "
"l'appel de *spawn* terminera."

#: library/pty.rst:50
msgid ""
"The functions *master_read* and *stdin_read* are passed a file descriptor "
"which they should read from, and they should always return a byte string. In "
"order to force spawn to return before the child process exits an :exc:"
"`OSError` should be thrown."
msgstr ""
"Les fonctions `master_read` et `stdin_read` reçoivent un descripteur de "
"fichier qu'elles doivent lire, et elles doivent toujours renvoyer une chaîne "
"d'octets. Afin de forcer le *spawn* à faire un renvoi avant que le processus "
"enfant ne se termine, une exception :exc:`OSError` doit être levée."

#: library/pty.rst:55
msgid ""
"The default implementation for both functions will read and return up to "
"1024 bytes each time the function is called. The *master_read* callback is "
"passed the pseudoterminal’s master file descriptor to read output from the "
"child process, and *stdin_read* is passed file descriptor 0, to read from "
"the parent process's standard input."
msgstr ""
"L'implémentation par défaut pour les deux fonctions lit et renvoie jusqu'à "
"1024 octets à chaque appel de la fonction. La fonction de rappel "
"`master_read` reçoit le descripteur de fichier du pseudo-terminal maître "
"pour lire la sortie du processus enfant, et `stdin_read` reçoit le "
"descripteur de fichier 0, pour lire l'entrée standard du processus parent."

#: library/pty.rst:61
msgid ""
"Returning an empty byte string from either callback is interpreted as an end-"
"of-file (EOF) condition, and that callback will not be called after that. If "
"*stdin_read* signals EOF the controlling terminal can no longer communicate "
"with the parent process OR the child process. Unless the child process will "
"quit without any input, *spawn* will then loop forever. If *master_read* "
"signals EOF the same behavior results (on linux at least)."
msgstr ""
"Le renvoi d'une chaîne d'octets vide à partir de l'un ou l'autre des rappels "
"est interprété comme une condition de fin de fichier (EOF), et ce rappel ne "
"sera pas appelé après cela. Si *stdin_read* signale EOF, le terminal de "
"contrôle ne peut plus communiquer avec le processus parent OU le processus "
"enfant. À moins que le processus enfant ne quitte sans aucune entrée, "
"*spawn* sera lancé dans une boucle infinie. Si `master_read` indique la fin "
"de fichier, on aura le même comportement (sur Linux au moins)."

#: library/pty.rst:68
msgid ""
"If both callbacks signal EOF then *spawn* will probably never return, unless "
"*select* throws an error on your platform when passed three empty lists. "
"This is a bug, documented in `issue 26228 <https://bugs.python.org/"
"issue26228>`_."
msgstr ""
"Si les deux fonctions de rappel indiquent la fin de fichier (*EOF*), alors "
"*spawn* ne fera probablement jamais de renvoi, à moins que *select* ne lance "
"une erreur sur votre plateforme lors du passage de trois listes vides. Il "
"s'agit d'un bogue, renseigné dans `<https://bugs.python.org/issue26228>`_."

#: library/pty.rst:72
#, fuzzy
msgid ""
"Return the exit status value from :func:`os.waitpid` on the child process."
msgstr ""
":func:`spawn` renvoie maintenant la valeur renvoyée par :func:`os.waitpid` "
"sur le processus fils."

#: library/pty.rst:74
msgid ""
":func:`waitstatus_to_exitcode` can be used to convert the exit status into "
"an exit code."
msgstr ""

#: library/pty.rst:78
msgid ""
"Raises an :ref:`auditing event <auditing>` ``pty.spawn`` with argument "
"``argv``."
msgstr ""

#: library/pty.rst:79
msgid ""
":func:`spawn` now returns the status value from :func:`os.waitpid` on the "
"child process."
msgstr ""
":func:`spawn` renvoie maintenant la valeur renvoyée par :func:`os.waitpid` "
"sur le processus fils."

#: library/pty.rst:84
msgid "Example"
msgstr "Exemple"

#: library/pty.rst:88
msgid ""
"The following program acts like the Unix command :manpage:`script(1)`, using "
"a pseudo-terminal to record all input and output of a terminal session in a "
"\"typescript\". ::"
msgstr ""
"Le programme suivant se comporte comme la commande Unix :manpage:"
"`script(1)`, utilisant un pseudo-terminal pour enregistrer toutes les "
"entrées et sorties d'une session dans un fichier *typescript*. ::"
