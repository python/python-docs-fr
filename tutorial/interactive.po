# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-02 22:11+0200\n"
"PO-Revision-Date: 2018-03-01 22:10+0100\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/tutorial/interactive.rst:5
msgid "Interactive Input Editing and History Substitution"
msgstr "Édition interactive des entrées et substitution d'historique"

#: ../Doc/tutorial/interactive.rst:7
msgid ""
"Some versions of the Python interpreter support editing of the current input "
"line and history substitution, similar to facilities found in the Korn shell "
"and the GNU Bash shell.  This is implemented using the `GNU Readline`_ "
"library, which supports various styles of editing.  This library has its own "
"documentation which we won't duplicate here."
msgstr ""
"Certaines versions de l'interpréteur Python prennent en charge l'édition de "
"la ligne d'entrée courante et la substitution d'historique, similaires aux "
"facilités que l'on trouve dans le shell Korn et dans le shell GNU Bash. Ces "
"implémentations utilisent la bibliothèque `GNU Readline`_, qui gère "
"plusieurs styles d'édition. La bibliothèque a sa propre documentation, nous "
"ne la dupliquons pas ici."

#: ../Doc/tutorial/interactive.rst:17
msgid "Tab Completion and History Editing"
msgstr "Complétion automatique et édition de l'historique"

#: ../Doc/tutorial/interactive.rst:19
msgid ""
"Completion of variable and module names is :ref:`automatically enabled "
"<rlcompleter-config>` at interpreter startup so that the :kbd:`Tab` key "
"invokes the completion function; it looks at Python statement names, the "
"current local variables, and the available module names.  For dotted "
"expressions such as ``string.a``, it will evaluate the expression up to the "
"final ``'.'`` and then suggest completions from the attributes of the "
"resulting object.  Note that this may execute application-defined code if an "
"object with a :meth:`__getattr__` method is part of the expression.  The "
"default configuration also saves your history into a file named :file:`."
"python_history` in your user directory. The history will be available again "
"during the next interactive interpreter session."
msgstr ""
"La complétion de noms de variables et de modules est :ref:`automatiquement "
"activée <rlcompleter-config>` au démarrage de l'interpréteur. Ainsi, la "
"touche :kbd:`Tab` invoque la fonction de complétion ; la recherche "
"s'effectue dans les noms d'instructions Python, les noms des variables "
"locales et les noms de modules disponibles. Pour les expressions pointées "
"telles que ``string.a``, l'expression est évaluée jusqu'au dernier ``'.'`` "
"avant de suggérer les options disponibles à partir des attributs de l'objet "
"résultant de cette évaluation. Notez bien que ceci peut exécuter une partie "
"du code de l'application si un objet disposant d'une méthode :meth:"
"`__getattr__` fait partie de l'expression. La configuration par défaut "
"sauvegarde l'historique dans un fichier nommé :file:`.python_history` dans "
"votre dossier d'utilisateur. L'historique est ainsi conservé entre les "
"sessions interactives successives."

#: ../Doc/tutorial/interactive.rst:36
msgid "Alternatives to the Interactive Interpreter"
msgstr "Alternatives à l'interpréteur interactif"

#: ../Doc/tutorial/interactive.rst:38
msgid ""
"This facility is an enormous step forward compared to earlier versions of "
"the interpreter; however, some wishes are left: It would be nice if the "
"proper indentation were suggested on continuation lines (the parser knows if "
"an indent token is required next).  The completion mechanism might use the "
"interpreter's symbol table.  A command to check (or even suggest) matching "
"parentheses, quotes, etc., would also be useful."
msgstr ""
"Cette facilité constitue un énorme pas en avant comparé aux versions "
"précédentes de l'interpréteur. Toutefois, il reste des fonctions à "
"implémenter comme l'indentation correcte sur les lignes de continuation "
"(l'analyseur sait si une indentation doit suivre) ; le mécanisme de "
"complétion devrait utiliser la table de symboles de l'interpréteur. Une "
"commande pour vérifier (ou même suggérer) les correspondances de "
"parenthèses, de guillemets, etc., serait également utile."

#: ../Doc/tutorial/interactive.rst:45
msgid ""
"One alternative enhanced interactive interpreter that has been around for "
"quite some time is IPython_, which features tab completion, object "
"exploration and advanced history management.  It can also be thoroughly "
"customized and embedded into other applications.  Another similar enhanced "
"interactive environment is bpython_."
msgstr ""
"Une alternative améliorée de l'interpréteur interactif est développée depuis "
"maintenant quelques temps : IPython_. Il fournit la complétion, "
"l'exploration d'objets et une gestion avancée de l'historique. Il peut "
"également être personnalisé en profondeur et embarqué dans d'autres "
"applications. Un autre environnement interactif amélioré similaire est "
"bpython_."
