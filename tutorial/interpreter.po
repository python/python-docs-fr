# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-11-15 18:54+0100\n"
"PO-Revision-Date: 2019-12-13 23:42+0100\n"
"Last-Translator: Jules Lasne <jules.lasne@gmail.com>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.2.1\n"

#: ../Doc/tutorial/interpreter.rst:5
msgid "Using the Python Interpreter"
msgstr "Mode d'emploi de l'interpréteur Python"

#: ../Doc/tutorial/interpreter.rst:11
msgid "Invoking the Interpreter"
msgstr "Lancement de l'interpréteur"

#: ../Doc/tutorial/interpreter.rst:13
msgid ""
"The Python interpreter is usually installed as :file:`/usr/local/bin/"
"python3.8` on those machines where it is available; putting :file:`/usr/"
"local/bin` in your Unix shell's search path makes it possible to start it by "
"typing the command:"
msgstr ""
"L'interpréteur Python se trouve en général comme :file:`/usr/local/bin/"
"python3.8` sur ces machines où il est disponible ; ajoutez :file:`/usr/local/"
"bin` au chemin de recherche de votre shell Unix afin de pouvoir le lancer en "
"tapant la commande : ::"

#: ../Doc/tutorial/interpreter.rst:21
msgid ""
"to the shell. [#]_ Since the choice of the directory where the interpreter "
"lives is an installation option, other places are possible; check with your "
"local Python guru or system administrator.  (E.g., :file:`/usr/local/python` "
"is a popular alternative location.)"
msgstr ""
"dans le shell. [#]_ Le choix du répertoire où se trouve l'interpréteur étant "
"une option d'installation, d'autres chemins sont possibles ; voyez avec "
"votre gourou Python local ou votre administrateur système (par exemple, :"
"file:`/usr/local/python` est un endroit courant)."

#: ../Doc/tutorial/interpreter.rst:26
msgid ""
"On Windows machines where you have installed Python from the :ref:`Microsoft "
"Store <windows-store>`, the :file:`python3.8` command will be available. If "
"you have the :ref:`py.exe launcher <launcher>` installed, you can use the :"
"file:`py` command. See :ref:`setting-envvars` for other ways to launch "
"Python."
msgstr ""
"Sur les machines Windows sur lesquelles vous avez installé Python à partir "
"du :ref:`Microsoft Store <windows-store>`, la commande :file:`python3.8` "
"sera disponible. Si le :ref:`py.exe launcher <launcher>` est installé, vous "
"pouvez utiliser la commande :file:`py`. Voir :ref:`setting-envvars` pour "
"d'autres façons de lancer Python."

#: ../Doc/tutorial/interpreter.rst:31
msgid ""
"Typing an end-of-file character (:kbd:`Control-D` on Unix, :kbd:`Control-Z` "
"on Windows) at the primary prompt causes the interpreter to exit with a zero "
"exit status.  If that doesn't work, you can exit the interpreter by typing "
"the following command: ``quit()``."
msgstr ""
"Tapez un caractère de fin de fichier (:kbd:`Ctrl-D` sous Unix, :kbd:`Ctrl-Z` "
"sous Windows) dans une invite de commande primaire provoque la fermeture de "
"l'interpréteur avec un code de sortie nul. Si cela ne fonctionne pas, vous "
"pouvez fermer l'interpréteur en tapant la commande ``quit()``."

#: ../Doc/tutorial/interpreter.rst:36
#, fuzzy
msgid ""
"The interpreter's line-editing features include interactive editing, history "
"substitution and code completion on systems that support the `GNU Readline "
"<https://tiswww.case.edu/php/chet/readline/rltop.html>`_ library. Perhaps "
"the quickest check to see whether command line editing is supported is "
"typing :kbd:`Control-P` to the first Python prompt you get.  If it beeps, "
"you have command line editing; see Appendix :ref:`tut-interacting` for an "
"introduction to the keys.  If nothing appears to happen, or if ``^P`` is "
"echoed, command line editing isn't available; you'll only be able to use "
"backspace to remove characters from the current line."
msgstr ""
"Les fonctionnalités d'édition de l'interpréteur comprennent l'édition "
"interactive, la substitution depuis l'historique et la complétion sur les "
"systèmes qui gèrent *readline*. Un moyen rapide de tester comment est gérée "
"l'édition de la ligne de commande, c'est de taper :kbd:`Control-P` à la "
"première invite de commande que vous rencontrez. Si cela bipe, vous disposez "
"de l'édition de la ligne de commande ; lisez l'appendice :ref:`tut-"
"interacting` pour une introduction aux touches. Si rien ne semble se "
"produire ou si ``^P`` s'affiche, l'édition de la ligne de commande n'est pas "
"disponible ; vous serez seulement en mesure d'utiliser la touche retour "
"arrière pour supprimer des caractères de la ligne courante."

#: ../Doc/tutorial/interpreter.rst:46
msgid ""
"The interpreter operates somewhat like the Unix shell: when called with "
"standard input connected to a tty device, it reads and executes commands "
"interactively; when called with a file name argument or with a file as "
"standard input, it reads and executes a *script* from that file."
msgstr ""
"L'interpréteur fonctionne de façon similaire au shell Unix : lorsqu'il est "
"appelé avec l'entrée standard connectée à un périphérique tty, il lit et "
"exécute les commandes de façon interactive ; lorsqu'il est appelé avec un "
"nom de fichier en argument ou avec un fichier comme entrée standard, il lit "
"et exécute un *script* depuis ce fichier."

#: ../Doc/tutorial/interpreter.rst:51
msgid ""
"A second way of starting the interpreter is ``python -c command [arg] ...``, "
"which executes the statement(s) in *command*, analogous to the shell's :"
"option:`-c` option.  Since Python statements often contain spaces or other "
"characters that are special to the shell, it is usually advised to quote "
"*command* in its entirety with single quotes."
msgstr ""
"Une autre façon de lancer l'interpréteur est ``python -c commande [arg] ..."
"``. Cela exécute les instructions de *commande* de façon analogue à "
"l'option :option:`-c` du shell. Parce que les instructions Python "
"contiennent souvent des espaces et d'autres caractères spéciaux pour le "
"shell, il est généralement conseillé de mettre *commande* entre guillemets "
"simples."

#: ../Doc/tutorial/interpreter.rst:57
msgid ""
"Some Python modules are also useful as scripts.  These can be invoked using "
"``python -m module [arg] ...``, which executes the source file for *module* "
"as if you had spelled out its full name on the command line."
msgstr ""
"Certains modules Python sont aussi utiles en tant que scripts. Ils peuvent "
"être appelés avec ``python -m module [arg] ...`` qui exécute le fichier "
"source de *module* comme si vous aviez tapé son nom complet dans la ligne de "
"commande."

#: ../Doc/tutorial/interpreter.rst:61
msgid ""
"When a script file is used, it is sometimes useful to be able to run the "
"script and enter interactive mode afterwards.  This can be done by passing :"
"option:`-i` before the script."
msgstr ""
"Quand un fichier de script est utilisé, il est parfois utile de pouvoir "
"lancer le script puis d'entrer dans le mode interactif après coup. Cela est "
"possible en passant :option:`-i` avant le script."

#: ../Doc/tutorial/interpreter.rst:65
msgid "All command line options are described in :ref:`using-on-general`."
msgstr ""
"Tous les paramètres utilisables en ligne de commande sont documentés dans :"
"ref:`using-on-general`."

#: ../Doc/tutorial/interpreter.rst:71
msgid "Argument Passing"
msgstr "Passage d'arguments"

#: ../Doc/tutorial/interpreter.rst:73
msgid ""
"When known to the interpreter, the script name and additional arguments "
"thereafter are turned into a list of strings and assigned to the ``argv`` "
"variable in the ``sys`` module.  You can access this list by executing "
"``import sys``.  The length of the list is at least one; when no script and "
"no arguments are given, ``sys.argv[0]`` is an empty string.  When the script "
"name is given as ``'-'`` (meaning  standard input), ``sys.argv[0]`` is set "
"to ``'-'``.  When :option:`-c` *command* is used, ``sys.argv[0]`` is set to "
"``'-c'``.  When :option:`-m` *module* is used, ``sys.argv[0]``  is set to "
"the full name of the located module.  Options found after  :option:`-c` "
"*command* or :option:`-m` *module* are not consumed  by the Python "
"interpreter's option processing but left in ``sys.argv`` for  the command or "
"module to handle."
msgstr ""
"Lorsqu'ils sont connus de l'interpréteur, le nom du script et les arguments "
"additionnels sont représentés sous forme d'une liste assignée à la variable "
"``argv`` du module ``sys``. Vous pouvez y accéder en exécutant ``import "
"sys``. La liste contient au minimum un élément ; quand aucun script ni aucun "
"argument n'est donné, ``sys.argv[0]`` est une chaine vide. Quand ``'-'`` "
"(qui représente l'entrée standard) est passé comme nom de script, ``sys."
"argv[0]`` contient ``'-'``. Quand :option:`-c` *commande* est utilisé, ``sys."
"argv[0]`` contient ``'-c'``. Enfin, quand :option:`-m` *module* est utilisé, "
"le nom complet du module est assigné à ``sys.argv[0]``. Les options trouvées "
"après :option:`-c` *commande* ou :option:`-m` *module* ne sont pas lues "
"comme options de l'interpréteur Python mais laissées dans ``sys.argv`` pour "
"être utilisées par le module ou la commande."

#: ../Doc/tutorial/interpreter.rst:89
msgid "Interactive Mode"
msgstr "Mode interactif"

#: ../Doc/tutorial/interpreter.rst:91
msgid ""
"When commands are read from a tty, the interpreter is said to be in "
"*interactive mode*.  In this mode it prompts for the next command with the "
"*primary prompt*, usually three greater-than signs (``>>>``); for "
"continuation lines it prompts with the *secondary prompt*, by default three "
"dots (``...``). The interpreter prints a welcome message stating its version "
"number and a copyright notice before printing the first prompt:"
msgstr ""
"Lorsque des commandes sont lues depuis un tty, l'interpréteur est dit être "
"en *mode interactif*. Dans ce mode, il demande la commande suivante avec le "
"*prompt primaire*, en général trois signes plus-grand-que (``>>>``) ; pour "
"les lignes de continuation, il affiche le *prompt secondaire*, par défaut "
"trois points (``...``). L'interpréteur affiche un message de bienvenue "
"indiquant son numéro de version et une notice de copyright avant d'afficher "
"le premier prompt :"

#: ../Doc/tutorial/interpreter.rst:108
msgid ""
"Continuation lines are needed when entering a multi-line construct. As an "
"example, take a look at this :keyword:`if` statement::"
msgstr ""
"Les lignes de continuation sont nécessaires pour entrer une construction "
"multi-lignes. Par exemple, regardez cette instruction :keyword:`if` ::"

#: ../Doc/tutorial/interpreter.rst:118
msgid "For more on interactive mode, see :ref:`tut-interac`."
msgstr ""
"Pour plus d'informations sur le mode interactif, voir :ref:`tut-interac`."

#: ../Doc/tutorial/interpreter.rst:124
msgid "The Interpreter and Its Environment"
msgstr "L'interpréteur et son environnement"

#: ../Doc/tutorial/interpreter.rst:130
msgid "Source Code Encoding"
msgstr "Encodage du code source"

#: ../Doc/tutorial/interpreter.rst:132
msgid ""
"By default, Python source files are treated as encoded in UTF-8.  In that "
"encoding, characters of most languages in the world can be used "
"simultaneously in string literals, identifiers and comments --- although the "
"standard library only uses ASCII characters for identifiers, a convention "
"that any portable code should follow.  To display all these characters "
"properly, your editor must recognize that the file is UTF-8, and it must use "
"a font that supports all the characters in the file."
msgstr ""
"Par défaut, Python considère que ses fichiers sources sont encodés en UTF-8. "
"Dans cet encodage, les caractères de la plupart des langues peuvent être "
"utilisés ensemble dans les chaînes de caractères, identifiants et "
"commentaires. Notez que la bibliothèque standard n'utilise que des "
"caractères ASCII dans ses identifiants et que nous considérons que c'est une "
"bonne habitude que tout code portable devrait suivre. Pour afficher "
"correctement tous ces caractères, votre éditeur doit reconnaître que le "
"fichier est en UTF-8 et utiliser une police qui comprend tous les caractères "
"utilisés dans le fichier."

#: ../Doc/tutorial/interpreter.rst:140
msgid ""
"To declare an encoding other than the default one, a special comment line "
"should be added as the *first* line of the file.  The syntax is as follows::"
msgstr ""
"Pour annoncer un encodage différent de l'encodage par défaut, une ligne de "
"commentaire particulière doit être ajoutée en tant que *première* ligne du "
"fichier.  Sa syntaxe est la suivante ::"

#: ../Doc/tutorial/interpreter.rst:145
msgid "where *encoding* is one of the valid :mod:`codecs` supported by Python."
msgstr "où *encoding* est un des :mod:`codecs` supporté par Python."

#: ../Doc/tutorial/interpreter.rst:147
msgid ""
"For example, to declare that Windows-1252 encoding is to be used, the first "
"line of your source code file should be::"
msgstr ""
"Par exemple, pour déclarer un encodage *Windows-1252*, la première ligne de "
"votre code source doit être ::"

#: ../Doc/tutorial/interpreter.rst:152
msgid ""
"One exception to the *first line* rule is when the source code starts with "
"a :ref:`UNIX \"shebang\" line <tut-scripts>`.  In this case, the encoding "
"declaration should be added as the second line of the file.  For example::"
msgstr ""
"Une exception à la règle *première ligne* est lorsque la première ligne est "
"un :ref:`shebang UNIX <tut-scripts>`. Dans ce cas, la déclaration de "
"l'encodage doit être placée sur la deuxième ligne du fichier. Par exemple ::"

#: ../Doc/tutorial/interpreter.rst:160
msgid "Footnotes"
msgstr "Notes"

#: ../Doc/tutorial/interpreter.rst:161
msgid ""
"On Unix, the Python 3.x interpreter is by default not installed with the "
"executable named ``python``, so that it does not conflict with a "
"simultaneously installed Python 2.x executable."
msgstr ""
"Sous Unix, par défaut, l'interpréteur Python 3.x n'est pas installé sous le "
"nom de ``python`` afin de ne pas entrer en conflit avec une éventuelle "
"installation de Python 2.x."

#~ msgid ""
#~ "On Windows machines, the Python installation is usually placed in :file:"
#~ "`C:\\\\Python37`, though you can change this when you're running the "
#~ "installer.  To add this directory to your path,  you can type the "
#~ "following command into :ref:`a command prompt window <faq-run-program-"
#~ "under-windows>`::"
#~ msgstr ""
#~ "Sur les machines Windows, Python est habituellement installé dans :file:"
#~ "`C:\\\\Python37`, même si vous pouvez changer cela lorsque vous lancez "
#~ "l'installateur. Pour ajouter ce dossier à votre chemin de recherche, vous "
#~ "pouvez taper la commande suivante dans :ref:`une invite de commande "
#~ "Windows <faq-run-program-under-windows>` ::"

#~ msgid ""
#~ "It is also possible to specify a different encoding for source files.  In "
#~ "order to do this, put one more special comment line right after the ``#!"
#~ "`` line to define the source file encoding::"
#~ msgstr ""
#~ "Il est possible d'utiliser un autre encodage dans un fichier source "
#~ "Python. La meilleure façon de faire est de placer un commentaire spécial "
#~ "supplémentaire juste après le ``#!`` pour définir l'encodage du fichier "
#~ "source ::"

#~ msgid ""
#~ "With that declaration, everything in the source file will be treated as "
#~ "having the encoding *encoding* instead of UTF-8.  The list of possible "
#~ "encodings can be found in the Python Library Reference, in the section "
#~ "on :mod:`codecs`."
#~ msgstr ""
#~ "Avec cette déclaration, tous les caractères du fichier source sont "
#~ "traités comme étant dans l'encodage *encoding* au lieu d'UTF-8. La liste "
#~ "des encodages disponibles peut être trouvée dans la référence de la "
#~ "bibliothèque Python dans la partie à propos de :mod:`codecs`."

#~ msgid ""
#~ "For example, if your editor of choice does not support UTF-8 encoded "
#~ "files and insists on using some other encoding, say Windows-1252, you can "
#~ "write::"
#~ msgstr ""
#~ "Par exemple, si votre éditeur de gère pas l'UTF-8 et insiste pour "
#~ "utiliser un autre encodage, disons Windows-1252, vous pouvez écrire ::"

#~ msgid ""
#~ "and still use all characters in the Windows-1252 character set in the "
#~ "source files.  The special encoding comment must be in the *first or "
#~ "second* line within the file."
#~ msgstr ""
#~ "et continuer d'utiliser tous les caractères de Windows-1252 dans votre "
#~ "code. Ce commentaire spécial spécifiant l'encodage doit être à *la "
#~ "première ou deuxième* ligne du fichier."
