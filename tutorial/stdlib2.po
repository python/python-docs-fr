# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-29 21:40+0100\n"
"PO-Revision-Date: 2019-06-18 22:06+0200\n"
"Last-Translator: Julien Palard <julien@palard.fr>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.0.2\n"

#: tutorial/stdlib2.rst:5
msgid "Brief Tour of the Standard Library --- Part II"
msgstr "Survol de la bibliothèque standard -- Deuxième partie"

#: tutorial/stdlib2.rst:7
msgid ""
"This second tour covers more advanced modules that support professional "
"programming needs.  These modules rarely occur in small scripts."
msgstr ""
"Cette deuxième partie aborde des modules plus à destination des programmeurs "
"professionnels. Ces modules sont rarement nécessaires dans de petits scripts."

#: tutorial/stdlib2.rst:14
msgid "Output Formatting"
msgstr "Formatage de l'affichage"

#: tutorial/stdlib2.rst:16
msgid ""
"The :mod:`reprlib` module provides a version of :func:`repr` customized for "
"abbreviated displays of large or deeply nested containers::"
msgstr ""
"Le module :mod:`reprlib` est une variante de la fonction :func:`repr`, "
"spécialisé dans l'affichage concis de conteneurs volumineux ou fortement "
"imbriqués ::"

#: tutorial/stdlib2.rst:19
msgid ""
">>> import reprlib\n"
">>> reprlib.repr(set('supercalifragilisticexpialidocious'))\n"
"\"{'a', 'c', 'd', 'e', 'f', 'g', ...}\""
msgstr ""

#: tutorial/stdlib2.rst:23
msgid ""
"The :mod:`pprint` module offers more sophisticated control over printing "
"both built-in and user defined objects in a way that is readable by the "
"interpreter. When the result is longer than one line, the \"pretty printer\" "
"adds line breaks and indentation to more clearly reveal data structure::"
msgstr ""
"Le module :mod:`pprint` propose un contrôle plus fin de l'affichage des "
"objets, aussi bien natifs que ceux définis par l'utilisateur, de manière à "
"être lisible par l'interpréteur. Lorsque le résultat fait plus d'une ligne, "
"il est séparé sur plusieurs lignes et est indenté pour rendre la structure "
"plus visible ::"

#: tutorial/stdlib2.rst:28
msgid ""
">>> import pprint\n"
">>> t = [[[['black', 'cyan'], 'white', ['green', 'red']], [['magenta',\n"
"...     'yellow'], 'blue']]]\n"
"...\n"
">>> pprint.pprint(t, width=30)\n"
"[[[['black', 'cyan'],\n"
"   'white',\n"
"   ['green', 'red']],\n"
"  [['magenta', 'yellow'],\n"
"   'blue']]]"
msgstr ""

#: tutorial/stdlib2.rst:39
msgid ""
"The :mod:`textwrap` module formats paragraphs of text to fit a given screen "
"width::"
msgstr ""
"Le module :mod:`textwrap` formate des paragraphes de texte pour tenir sur un "
"écran d'une largeur donnée ::"

#: tutorial/stdlib2.rst:42
msgid ""
">>> import textwrap\n"
">>> doc = \"\"\"The wrap() method is just like fill() except that it "
"returns\n"
"... a list of strings instead of one big string with newlines to separate\n"
"... the wrapped lines.\"\"\"\n"
"...\n"
">>> print(textwrap.fill(doc, width=40))\n"
"The wrap() method is just like fill()\n"
"except that it returns a list of strings\n"
"instead of one big string with newlines\n"
"to separate the wrapped lines."
msgstr ""

#: tutorial/stdlib2.rst:53
msgid ""
"The :mod:`locale` module accesses a database of culture specific data "
"formats. The grouping attribute of locale's format function provides a "
"direct way of formatting numbers with group separators::"
msgstr ""
"Le module :mod:`locale` utilise une base de données des formats spécifiques "
"à chaque région pour les dates, nombres, etc. L'attribut ``grouping`` de la "
"fonction de formatage permet de formater directement des nombres avec un "
"séparateur ::"

#: tutorial/stdlib2.rst:57
msgid ""
">>> import locale\n"
">>> locale.setlocale(locale.LC_ALL, 'English_United States.1252')\n"
"'English_United States.1252'\n"
">>> conv = locale.localeconv()          # get a mapping of conventions\n"
">>> x = 1234567.8\n"
">>> locale.format_string(\"%d\", x, grouping=True)\n"
"'1,234,567'\n"
">>> locale.format_string(\"%s%.*f\", (conv['currency_symbol'],\n"
"...                      conv['frac_digits'], x), grouping=True)\n"
"'$1,234,567.80'"
msgstr ""

#: tutorial/stdlib2.rst:72
msgid "Templating"
msgstr "Gabarits (*templates* en anglais)"

#: tutorial/stdlib2.rst:74
msgid ""
"The :mod:`string` module includes a versatile :class:`~string.Template` "
"class with a simplified syntax suitable for editing by end-users.  This "
"allows users to customize their applications without having to alter the "
"application."
msgstr ""
"Le module :mod:`string` contient une classe polyvalente : :class:`~string."
"Template`. Elle permet d'écrire des gabarits (*templates* en anglais) avec "
"une syntaxe simple, dans le but d'être utilisable par des non-développeurs. "
"Ainsi, vos utilisateurs peuvent personnaliser leur application sans la "
"modifier."

#: tutorial/stdlib2.rst:78
msgid ""
"The format uses placeholder names formed by ``$`` with valid Python "
"identifiers (alphanumeric characters and underscores).  Surrounding the "
"placeholder with braces allows it to be followed by more alphanumeric "
"letters with no intervening spaces.  Writing ``$$`` creates a single escaped "
"``$``::"
msgstr ""
"Le format utilise des marqueurs formés d'un ``$`` suivi d'un identifiant "
"Python valide (caractères alphanumériques et tirets-bas). Entourer le "
"marqueur d'accolades permet de lui coller d'autres caractères "
"alphanumériques sans intercaler une espace. Écrire ``$$`` produit un simple "
"``$`` ::"

#: tutorial/stdlib2.rst:83
msgid ""
">>> from string import Template\n"
">>> t = Template('${village}folk send $$10 to $cause.')\n"
">>> t.substitute(village='Nottingham', cause='the ditch fund')\n"
"'Nottinghamfolk send $10 to the ditch fund.'"
msgstr ""

#: tutorial/stdlib2.rst:88
msgid ""
"The :meth:`~string.Template.substitute` method raises a :exc:`KeyError` when "
"a placeholder is not supplied in a dictionary or a keyword argument.  For "
"mail-merge style applications, user supplied data may be incomplete and the :"
"meth:`~string.Template.safe_substitute` method may be more appropriate --- "
"it will leave placeholders unchanged if data is missing::"
msgstr ""
"La méthode :meth:`~string.Template.substitute` lève une exception :exc:"
"`KeyError` lorsqu'un marqueur n'a pas été fourni, ni dans un dictionnaire, "
"ni sous forme d'un paramètre nommé. Dans certains cas, lorsque la donnée à "
"appliquer peut n'être fournie que partiellement par l'utilisateur, la "
"méthode :meth:`~string.Template.safe_substitute` est plus appropriée car "
"elle laisse tels quels les marqueurs manquants ::"

#: tutorial/stdlib2.rst:94
msgid ""
">>> t = Template('Return the $item to $owner.')\n"
">>> d = dict(item='unladen swallow')\n"
">>> t.substitute(d)\n"
"Traceback (most recent call last):\n"
"  ...\n"
"KeyError: 'owner'\n"
">>> t.safe_substitute(d)\n"
"'Return the unladen swallow to $owner.'"
msgstr ""

#: tutorial/stdlib2.rst:103
msgid ""
"Template subclasses can specify a custom delimiter.  For example, a batch "
"renaming utility for a photo browser may elect to use percent signs for "
"placeholders such as the current date, image sequence number, or file "
"format::"
msgstr ""
"Les classes filles de ``Template`` peuvent définir leur propre délimiteur. "
"Typiquement, un script de renommage de photos par lots peut choisir le "
"symbole pourcent comme marqueur pour les champs tels que la date actuelle, "
"le numéro de l'image ou son format ::"

#: tutorial/stdlib2.rst:107
msgid ""
">>> import time, os.path\n"
">>> photofiles = ['img_1074.jpg', 'img_1076.jpg', 'img_1077.jpg']\n"
">>> class BatchRename(Template):\n"
"...     delimiter = '%'\n"
"...\n"
">>> fmt = input('Enter rename style (%d-date %n-seqnum %f-format):  ')\n"
"Enter rename style (%d-date %n-seqnum %f-format):  Ashley_%n%f\n"
"\n"
">>> t = BatchRename(fmt)\n"
">>> date = time.strftime('%d%b%y')\n"
">>> for i, filename in enumerate(photofiles):\n"
"...     base, ext = os.path.splitext(filename)\n"
"...     newname = t.substitute(d=date, n=i, f=ext)\n"
"...     print('{0} --> {1}'.format(filename, newname))\n"
"\n"
"img_1074.jpg --> Ashley_0.jpg\n"
"img_1076.jpg --> Ashley_1.jpg\n"
"img_1077.jpg --> Ashley_2.jpg"
msgstr ""

#: tutorial/stdlib2.rst:126
msgid ""
"Another application for templating is separating program logic from the "
"details of multiple output formats.  This makes it possible to substitute "
"custom templates for XML files, plain text reports, and HTML web reports."
msgstr ""
"Une autre utilisation des gabarits consiste à séparer la logique métier des "
"détails spécifiques à chaque format de sortie. Il est ainsi possible de "
"générer des gabarits spécifiques pour les fichiers XML, texte, HTML…"

#: tutorial/stdlib2.rst:134
msgid "Working with Binary Data Record Layouts"
msgstr "Traitement des données binaires"

#: tutorial/stdlib2.rst:136
msgid ""
"The :mod:`struct` module provides :func:`~struct.pack` and :func:`~struct."
"unpack` functions for working with variable length binary record formats.  "
"The following example shows how to loop through header information in a ZIP "
"file without using the :mod:`zipfile` module.  Pack codes ``\"H\"`` and "
"``\"I\"`` represent two and four byte unsigned numbers respectively.  The "
"``\"<\"`` indicates that they are standard size and in little-endian byte "
"order::"
msgstr ""
"Le module :mod:`struct` expose les fonctions :func:`~struct.pack` et :func:"
"`~struct.unpack` permettant de travailler avec des données binaires. "
"L'exemple suivant montre comment parcourir un entête de fichier ZIP sans "
"recourir au module :mod:`zipfile`. Les marqueurs ``\"H\"`` et ``\"I\"`` "
"représentent des nombres entiers non signés, stockés respectivement sur deux "
"et quatre octets. Le ``\"<\"`` indique qu'ils ont une taille standard et "
"utilisent la convention petit-boutiste ::"

#: tutorial/stdlib2.rst:144
msgid ""
"import struct\n"
"\n"
"with open('myfile.zip', 'rb') as f:\n"
"    data = f.read()\n"
"\n"
"start = 0\n"
"for i in range(3):                      # show the first 3 file headers\n"
"    start += 14\n"
"    fields = struct.unpack('<IIIHH', data[start:start+16])\n"
"    crc32, comp_size, uncomp_size, filenamesize, extra_size = fields\n"
"\n"
"    start += 16\n"
"    filename = data[start:start+filenamesize]\n"
"    start += filenamesize\n"
"    extra = data[start:start+extra_size]\n"
"    print(filename, hex(crc32), comp_size, uncomp_size)\n"
"\n"
"    start += extra_size + comp_size     # skip to the next header"
msgstr ""

#: tutorial/stdlib2.rst:167
msgid "Multi-threading"
msgstr "Fils d'exécution"

#: tutorial/stdlib2.rst:169
msgid ""
"Threading is a technique for decoupling tasks which are not sequentially "
"dependent.  Threads can be used to improve the responsiveness of "
"applications that accept user input while other tasks run in the "
"background.  A related use case is running I/O in parallel with computations "
"in another thread."
msgstr ""
"Des tâches indépendantes peuvent être exécutées de manière non séquentielle "
"en utilisant des fils d'exécution (*threading* en anglais). Les fils "
"d'exécution peuvent être utilisés pour améliorer la réactivité d'une "
"application qui interagit avec l'utilisateur pendant que d'autres "
"traitements sont exécutés en arrière-plan. Une autre utilisation typique est "
"de séparer sur deux fils d'exécution distincts les entrées / sorties et le "
"calcul."

#: tutorial/stdlib2.rst:174
msgid ""
"The following code shows how the high level :mod:`threading` module can run "
"tasks in background while the main program continues to run::"
msgstr ""
"Le code suivant donne un exemple d'utilisation du module :mod:`threading` "
"exécutant des tâches en arrière-plan pendant que le programme principal "
"continue de s'exécuter ::"

#: tutorial/stdlib2.rst:177
msgid ""
"import threading, zipfile\n"
"\n"
"class AsyncZip(threading.Thread):\n"
"    def __init__(self, infile, outfile):\n"
"        threading.Thread.__init__(self)\n"
"        self.infile = infile\n"
"        self.outfile = outfile\n"
"\n"
"    def run(self):\n"
"        f = zipfile.ZipFile(self.outfile, 'w', zipfile.ZIP_DEFLATED)\n"
"        f.write(self.infile)\n"
"        f.close()\n"
"        print('Finished background zip of:', self.infile)\n"
"\n"
"background = AsyncZip('mydata.txt', 'myarchive.zip')\n"
"background.start()\n"
"print('The main program continues to run in foreground.')\n"
"\n"
"background.join()    # Wait for the background task to finish\n"
"print('Main program waited until background was done.')"
msgstr ""

#: tutorial/stdlib2.rst:198
msgid ""
"The principal challenge of multi-threaded applications is coordinating "
"threads that share data or other resources.  To that end, the threading "
"module provides a number of synchronization primitives including locks, "
"events, condition variables, and semaphores."
msgstr ""
"Le principal défi des applications avec plusieurs fils d'exécution consiste "
"à coordonner ces fils qui partagent des données ou des ressources. Pour ce "
"faire, le module ``threading`` expose quelques outils dédiés à la "
"synchronisation comme les verrous (*locks* en anglais), les événements "
"(*events* en anglais), les variables conditionnelles (*condition variables* "
"en anglais) et les sémaphores (*semaphore* en anglais)."

#: tutorial/stdlib2.rst:203
msgid ""
"While those tools are powerful, minor design errors can result in problems "
"that are difficult to reproduce.  So, the preferred approach to task "
"coordination is to concentrate all access to a resource in a single thread "
"and then use the :mod:`queue` module to feed that thread with requests from "
"other threads. Applications using :class:`~queue.Queue` objects for inter-"
"thread communication and coordination are easier to design, more readable, "
"and more reliable."
msgstr ""
"Bien que ces outils soient puissants, de petites erreurs de conception "
"peuvent engendrer des problèmes difficiles à reproduire. Donc, l'approche "
"classique pour coordonner des tâches est de restreindre l'accès d'une "
"ressource à un seul fil d'exécution et d'utiliser le module :mod:`queue` "
"pour alimenter ce fil d'exécution en requêtes venant d'autres fils "
"d'exécution. Les applications utilisant des :class:`~queue.Queue` pour leurs "
"communication et coordination entre fils d'exécution sont plus simples à "
"concevoir, plus lisibles et plus fiables."

#: tutorial/stdlib2.rst:214
msgid "Logging"
msgstr "Journalisation"

#: tutorial/stdlib2.rst:216
msgid ""
"The :mod:`logging` module offers a full featured and flexible logging "
"system. At its simplest, log messages are sent to a file or to ``sys."
"stderr``::"
msgstr ""
"Le module :mod:`logging` est un système de journalisation complet. Dans son "
"utilisation la plus élémentaire, les messages sont simplement envoyés dans "
"un fichier ou sur ``sys.stderr`` ::"

#: tutorial/stdlib2.rst:219
msgid ""
"import logging\n"
"logging.debug('Debugging information')\n"
"logging.info('Informational message')\n"
"logging.warning('Warning:config file %s not found', 'server.conf')\n"
"logging.error('Error occurred')\n"
"logging.critical('Critical error -- shutting down')"
msgstr ""

#: tutorial/stdlib2.rst:226
msgid "This produces the following output:"
msgstr "Cela produit l'affichage suivant :"

#: tutorial/stdlib2.rst:228
msgid ""
"WARNING:root:Warning:config file server.conf not found\n"
"ERROR:root:Error occurred\n"
"CRITICAL:root:Critical error -- shutting down"
msgstr ""

#: tutorial/stdlib2.rst:234
msgid ""
"By default, informational and debugging messages are suppressed and the "
"output is sent to standard error.  Other output options include routing "
"messages through email, datagrams, sockets, or to an HTTP Server.  New "
"filters can select different routing based on message priority: :const:"
"`~logging.DEBUG`, :const:`~logging.INFO`, :const:`~logging.WARNING`, :const:"
"`~logging.ERROR`, and :const:`~logging.CRITICAL`."
msgstr ""
"Par défaut, les messages d'information et de débogage sont ignorés, les "
"autres sont envoyés vers la sortie standard. Il est aussi possible d'envoyer "
"les messages par courriel, datagrammes, en utilisant des connecteurs réseau "
"ou vers un serveur HTTP. Des nouveaux filtres permettent d'utiliser des "
"sorties différentes en fonction de la priorité du message : :const:`~logging."
"DEBUG`, :const:`~logging.INFO`, :const:`~logging.WARNING`, :const:`~logging."
"ERROR` et :const:`~logging.CRITICAL`."

#: tutorial/stdlib2.rst:241
msgid ""
"The logging system can be configured directly from Python or can be loaded "
"from a user editable configuration file for customized logging without "
"altering the application."
msgstr ""
"La configuration de la journalisation peut être effectuée directement dans "
"le code Python ou peut être chargée depuis un fichier de configuration, "
"permettant de personnaliser la journalisation sans modifier l'application."

#: tutorial/stdlib2.rst:249
msgid "Weak References"
msgstr "Références faibles"

#: tutorial/stdlib2.rst:251
msgid ""
"Python does automatic memory management (reference counting for most objects "
"and :term:`garbage collection` to eliminate cycles).  The memory is freed "
"shortly after the last reference to it has been eliminated."
msgstr ""
"Python gère lui-même la mémoire (par comptage des références pour la plupart "
"des objets et en utilisant un :term:`ramasse-miettes` (*garbage collector* "
"en anglais) pour éliminer les cycles). La mémoire est libérée rapidement "
"lorsque sa dernière référence est supprimée."

#: tutorial/stdlib2.rst:255
msgid ""
"This approach works fine for most applications but occasionally there is a "
"need to track objects only as long as they are being used by something else. "
"Unfortunately, just tracking them creates a reference that makes them "
"permanent. The :mod:`weakref` module provides tools for tracking objects "
"without creating a reference.  When the object is no longer needed, it is "
"automatically removed from a weakref table and a callback is triggered for "
"weakref objects.  Typical applications include caching objects that are "
"expensive to create::"
msgstr ""
"Cette approche fonctionne bien pour la majorité des applications mais, "
"parfois, il est nécessaire de surveiller un objet seulement durant son "
"utilisation par quelque chose d'autre. Malheureusement, le simple fait de le "
"suivre crée une référence qui rend l'objet permanent. Le module :mod:"
"`weakref` expose des outils pour suivre les objets sans pour autant créer "
"une référence. Lorsqu'un objet n'est pas utilisé, il est automatiquement "
"supprimé du tableau des références faibles et une fonction de rappel "
"(*callback* en anglais) est appelée. Un exemple typique est le cache "
"d'objets coûteux à créer ::"

#: tutorial/stdlib2.rst:263
msgid ""
">>> import weakref, gc\n"
">>> class A:\n"
"...     def __init__(self, value):\n"
"...         self.value = value\n"
"...     def __repr__(self):\n"
"...         return str(self.value)\n"
"...\n"
">>> a = A(10)                   # create a reference\n"
">>> d = weakref.WeakValueDictionary()\n"
">>> d['primary'] = a            # does not create a reference\n"
">>> d['primary']                # fetch the object if it is still alive\n"
"10\n"
">>> del a                       # remove the one reference\n"
">>> gc.collect()                # run garbage collection right away\n"
"0\n"
">>> d['primary']                # entry was automatically removed\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"    d['primary']                # entry was automatically removed\n"
"  File \"C:/python312/lib/weakref.py\", line 46, in __getitem__\n"
"    o = self.data[key]()\n"
"KeyError: 'primary'"
msgstr ""

#: tutorial/stdlib2.rst:290
msgid "Tools for Working with Lists"
msgstr "Outils pour les listes"

#: tutorial/stdlib2.rst:292
msgid ""
"Many data structure needs can be met with the built-in list type. However, "
"sometimes there is a need for alternative implementations with different "
"performance trade-offs."
msgstr ""
"Beaucoup de structures de données peuvent être représentées avec les listes "
"natives. Cependant, d'autres besoins peuvent émerger pour des structures "
"ayant des caractéristiques différentes, typiquement en termes de performance."

#: tutorial/stdlib2.rst:296
#, fuzzy
msgid ""
"The :mod:`array` module provides an :class:`~array.array` object that is "
"like a list that stores only homogeneous data and stores it more compactly.  "
"The following example shows an array of numbers stored as two byte unsigned "
"binary numbers (typecode ``\"H\"``) rather than the usual 16 bytes per entry "
"for regular lists of Python int objects::"
msgstr ""
"Le module :mod:`array` fournit un objet :class:`~array.array()` ne "
"permettant de stocker que des listes homogènes mais d'une manière plus "
"compacte. L'exemple suivant montre une liste de nombres stockés chacun sur "
"deux octets non signés (marqueur ``\"H\"``) plutôt que d'utiliser 16 octets "
"comme l'aurait fait une liste classique ::"

#: tutorial/stdlib2.rst:302
msgid ""
">>> from array import array\n"
">>> a = array('H', [4000, 10, 700, 22222])\n"
">>> sum(a)\n"
"26932\n"
">>> a[1:3]\n"
"array('H', [10, 700])"
msgstr ""

#: tutorial/stdlib2.rst:309
#, fuzzy
msgid ""
"The :mod:`collections` module provides a :class:`~collections.deque` object "
"that is like a list with faster appends and pops from the left side but "
"slower lookups in the middle. These objects are well suited for implementing "
"queues and breadth first tree searches::"
msgstr ""
"Le module :mod:`collections` fournit la classe :class:`~collections."
"deque()`. Elle ressemble à une liste mais est plus rapide pour l'insertion "
"ou l'extraction des éléments par la gauche et plus lente pour accéder aux "
"éléments du milieu. Ces objets sont particulièrement adaptés pour construire "
"des queues ou des algorithmes de parcours d'arbres en largeur (ou BFS, pour "
"*Breadth First Search* en anglais) ::"

#: tutorial/stdlib2.rst:314
msgid ""
">>> from collections import deque\n"
">>> d = deque([\"task1\", \"task2\", \"task3\"])\n"
">>> d.append(\"task4\")\n"
">>> print(\"Handling\", d.popleft())\n"
"Handling task1"
msgstr ""

#: tutorial/stdlib2.rst:322
msgid ""
"unsearched = deque([starting_node])\n"
"def breadth_first_search(unsearched):\n"
"    node = unsearched.popleft()\n"
"    for m in gen_moves(node):\n"
"        if is_goal(m):\n"
"            return m\n"
"        unsearched.append(m)"
msgstr ""

#: tutorial/stdlib2.rst:330
msgid ""
"In addition to alternative list implementations, the library also offers "
"other tools such as the :mod:`bisect` module with functions for manipulating "
"sorted lists::"
msgstr ""
"En plus de fournir des implémentations de listes alternatives, la "
"bibliothèque fournit des outils tels que :mod:`bisect`, un module contenant "
"des fonctions de manipulation de listes triées ::"

#: tutorial/stdlib2.rst:334
msgid ""
">>> import bisect\n"
">>> scores = [(100, 'perl'), (200, 'tcl'), (400, 'lua'), (500, 'python')]\n"
">>> bisect.insort(scores, (300, 'ruby'))\n"
">>> scores\n"
"[(100, 'perl'), (200, 'tcl'), (300, 'ruby'), (400, 'lua'), (500, 'python')]"
msgstr ""

#: tutorial/stdlib2.rst:340
msgid ""
"The :mod:`heapq` module provides functions for implementing heaps based on "
"regular lists.  The lowest valued entry is always kept at position zero.  "
"This is useful for applications which repeatedly access the smallest element "
"but do not want to run a full list sort::"
msgstr ""
"Le module :mod:`heapq` permet d'implémenter des tas (*heap* en anglais) à "
"partir de simples listes. La valeur la plus faible est toujours à la "
"première position (indice 0). C'est utile dans les cas où l'application "
"accède souvent à l'élément le plus petit mais sans vouloir classer "
"entièrement la liste ::"

#: tutorial/stdlib2.rst:345
msgid ""
">>> from heapq import heapify, heappop, heappush\n"
">>> data = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]\n"
">>> heapify(data)                      # rearrange the list into heap order\n"
">>> heappush(data, -5)                 # add a new entry\n"
">>> [heappop(data) for i in range(3)]  # fetch the three smallest entries\n"
"[-5, 0, 1]"
msgstr ""

#: tutorial/stdlib2.rst:356
#, fuzzy
msgid "Decimal Floating-Point Arithmetic"
msgstr "Arithmétique décimale à virgule flottante"

#: tutorial/stdlib2.rst:358
#, fuzzy
msgid ""
"The :mod:`decimal` module offers a :class:`~decimal.Decimal` datatype for "
"decimal floating-point arithmetic.  Compared to the built-in :class:`float` "
"implementation of binary floating point, the class is especially helpful for"
msgstr ""
"Le module :mod:`decimal` exporte la classe :class:`~decimal.Decimal` : elle "
"est spécialisée dans le calcul de nombres décimaux représentés en virgule "
"flottante. Par rapport à la classe native :class:`float`, elle est "
"particulièrement utile pour :"

#: tutorial/stdlib2.rst:362
msgid ""
"financial applications and other uses which require exact decimal "
"representation,"
msgstr ""
"les applications traitant de finance et autres utilisations nécessitant une "
"représentation décimale exacte,"

#: tutorial/stdlib2.rst:364
msgid "control over precision,"
msgstr "le contrôle de la précision,"

#: tutorial/stdlib2.rst:365
msgid "control over rounding to meet legal or regulatory requirements,"
msgstr ""
"le contrôle sur les arrondis pour répondre à des obligations légales ou "
"réglementaires,"

#: tutorial/stdlib2.rst:366
msgid "tracking of significant decimal places, or"
msgstr "suivre les décimales significatives, ou"

#: tutorial/stdlib2.rst:367
msgid ""
"applications where the user expects the results to match calculations done "
"by hand."
msgstr ""
"les applications pour lesquelles l'utilisateur attend des résultats "
"identiques aux calculs faits à la main."

#: tutorial/stdlib2.rst:370
msgid ""
"For example, calculating a 5% tax on a 70 cent phone charge gives different "
"results in decimal floating point and binary floating point. The difference "
"becomes significant if the results are rounded to the nearest cent::"
msgstr ""
"Par exemple, calculer 5 % de taxe sur une facture de 70 centimes donne un "
"résultat différent en nombre à virgule flottante binaire et décimale. La "
"différence devient significative lorsqu'on arrondit le résultat au centime "
"près ::"

#: tutorial/stdlib2.rst:374
msgid ""
">>> from decimal import *\n"
">>> round(Decimal('0.70') * Decimal('1.05'), 2)\n"
"Decimal('0.74')\n"
">>> round(.70 * 1.05, 2)\n"
"0.73"
msgstr ""

#: tutorial/stdlib2.rst:380
msgid ""
"The :class:`~decimal.Decimal` result keeps a trailing zero, automatically "
"inferring four place significance from multiplicands with two place "
"significance.  Decimal reproduces mathematics as done by hand and avoids "
"issues that can arise when binary floating point cannot exactly represent "
"decimal quantities."
msgstr ""
"Le résultat d'un calcul donné par :class:`~decimal.Decimal` conserve les "
"zéros non-significatifs. La classe conserve automatiquement quatre décimales "
"significatives pour des opérandes à deux décimales significatives. La classe "
"``Decimal`` imite les mathématiques telles qu'elles pourraient être "
"effectuées à la main, évitant les problèmes typiques de l'arithmétique "
"binaire à virgule flottante qui n'est pas capable de représenter exactement "
"certaines quantités décimales."

#: tutorial/stdlib2.rst:386
msgid ""
"Exact representation enables the :class:`~decimal.Decimal` class to perform "
"modulo calculations and equality tests that are unsuitable for binary "
"floating point::"
msgstr ""
"La représentation exacte de la classe :class:`~decimal.Decimal` lui permet "
"de faire des calculs de modulo ou des tests d'égalité qui ne seraient pas "
"possibles avec une représentation à virgule flottante binaire ::"

#: tutorial/stdlib2.rst:390
msgid ""
">>> Decimal('1.00') % Decimal('.10')\n"
"Decimal('0.00')\n"
">>> 1.00 % 0.10\n"
"0.09999999999999995\n"
"\n"
">>> sum([Decimal('0.1')]*10) == Decimal('1.0')\n"
"True\n"
">>> 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 == 1.0\n"
"False"
msgstr ""

#: tutorial/stdlib2.rst:400
msgid ""
"The :mod:`decimal` module provides arithmetic with as much precision as "
"needed::"
msgstr ""
"Le module :mod:`decimal` permet de faire des calculs avec autant de "
"précision que nécessaire ::"

#: tutorial/stdlib2.rst:402
msgid ""
">>> getcontext().prec = 36\n"
">>> Decimal(1) / Decimal(7)\n"
"Decimal('0.142857142857142857142857142857142857')"
msgstr ""
