# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-17 16:05+0100\n"
"PO-Revision-Date: 2020-12-17 21:41+0100\n"
"Last-Translator: Mathieu Dupuy <deronnax@gmail.com>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.3\n"

#: howto/descriptor.rst:5
msgid "Descriptor HowTo Guide"
msgstr "Guide pour l'utilisation des descripteurs"

#: howto/descriptor.rst:0
msgid "Author"
msgstr "Auteur"

#: howto/descriptor.rst:7
msgid "Raymond Hettinger"
msgstr "Raymond Hettinger"

#: howto/descriptor.rst:0
msgid "Contact"
msgstr "Contact"

#: howto/descriptor.rst:8
msgid "<python at rcn dot com>"
msgstr "<python at rcn dot com>"

#: howto/descriptor.rst:11
msgid "Contents"
msgstr "Sommaire"

#: howto/descriptor.rst:13
msgid ""
":term:`Descriptors <descriptor>` let objects customize attribute lookup, "
"storage, and deletion."
msgstr ""

#: howto/descriptor.rst:16
msgid "This guide has four major sections:"
msgstr ""

#: howto/descriptor.rst:18
msgid ""
"The \"primer\" gives a basic overview, moving gently from simple examples, "
"adding one feature at a time.  Start here if you're new to descriptors."
msgstr ""

#: howto/descriptor.rst:21
msgid ""
"The second section shows a complete, practical descriptor example.  If you "
"already know the basics, start there."
msgstr ""

#: howto/descriptor.rst:24
msgid ""
"The third section provides a more technical tutorial that goes into the "
"detailed mechanics of how descriptors work.  Most people don't need this "
"level of detail."
msgstr ""

#: howto/descriptor.rst:28
msgid ""
"The last section has pure Python equivalents for built-in descriptors that "
"are written in C.  Read this if you're curious about how functions turn into "
"bound methods or about the implementation of common tools like :func:"
"`classmethod`, :func:`staticmethod`, :func:`property`, and :term:`__slots__`."
msgstr ""

#: howto/descriptor.rst:36
msgid "Primer"
msgstr ""

#: howto/descriptor.rst:38
msgid ""
"In this primer, we start with the most basic possible example and then we'll "
"add new capabilities one by one."
msgstr ""

#: howto/descriptor.rst:43
msgid "Simple example: A descriptor that returns a constant"
msgstr ""

#: howto/descriptor.rst:45
msgid ""
"The :class:`Ten` class is a descriptor that always returns the constant "
"``10`` from its :meth:`__get__` method:"
msgstr ""

#: howto/descriptor.rst:54
msgid ""
"To use the descriptor, it must be stored as a class variable in another "
"class:"
msgstr ""

#: howto/descriptor.rst:62
msgid ""
"An interactive session shows the difference between normal attribute lookup "
"and descriptor lookup:"
msgstr ""

#: howto/descriptor.rst:73
msgid ""
"In the ``a.x`` attribute lookup, the dot operator finds the key ``x`` and "
"the value ``5`` in the class dictionary.  In the ``a.y`` lookup, the dot "
"operator finds a descriptor instance, recognized by its ``__get__`` method, "
"and calls that method which returns ``10``."
msgstr ""

#: howto/descriptor.rst:78
msgid ""
"Note that the value ``10`` is not stored in either the class dictionary or "
"the instance dictionary.  Instead, the value ``10`` is computed on demand."
msgstr ""

#: howto/descriptor.rst:81
msgid ""
"This example shows how a simple descriptor works, but it isn't very useful. "
"For retrieving constants, normal attribute lookup would be better."
msgstr ""

#: howto/descriptor.rst:84
msgid ""
"In the next section, we'll create something more useful, a dynamic lookup."
msgstr ""

#: howto/descriptor.rst:88
msgid "Dynamic lookups"
msgstr ""

#: howto/descriptor.rst:90
msgid ""
"Interesting descriptors typically run computations instead of returning "
"constants:"
msgstr ""

#: howto/descriptor.rst:109
msgid ""
"An interactive session shows that the lookup is dynamic â€” it computes "
"different, updated answers each time::"
msgstr ""

#: howto/descriptor.rst:122
msgid ""
"Besides showing how descriptors can run computations, this example also "
"reveals the purpose of the parameters to :meth:`__get__`.  The *self* "
"parameter is *size*, an instance of *DirectorySize*.  The *obj* parameter is "
"either *g* or *s*, an instance of *Directory*.  It is the *obj* parameter "
"that lets the :meth:`__get__` method learn the target directory.  The "
"*objtype* parameter is the class *Directory*."
msgstr ""

#: howto/descriptor.rst:131
msgid "Managed attributes"
msgstr ""

#: howto/descriptor.rst:133
msgid ""
"A popular use for descriptors is managing access to instance data.  The "
"descriptor is assigned to a public attribute in the class dictionary while "
"the actual data is stored as a private attribute in the instance "
"dictionary.  The descriptor's :meth:`__get__` and :meth:`__set__` methods "
"are triggered when the public attribute is accessed."
msgstr ""

#: howto/descriptor.rst:139
msgid ""
"In the following example, *age* is the public attribute and *_age* is the "
"private attribute.  When the public attribute is accessed, the descriptor "
"logs the lookup or update:"
msgstr ""

#: howto/descriptor.rst:172
msgid ""
"An interactive session shows that all access to the managed attribute *age* "
"is logged, but that the regular attribute *name* is not logged:"
msgstr ""

#: howto/descriptor.rst:206
msgid ""
"One major issue with this example is that the private name *_age* is "
"hardwired in the *LoggedAgeAccess* class.  That means that each instance can "
"only have one logged attribute and that its name is unchangeable.  In the "
"next example, we'll fix that problem."
msgstr ""

#: howto/descriptor.rst:213
msgid "Customized names"
msgstr ""

#: howto/descriptor.rst:215
msgid ""
"When a class uses descriptors, it can inform each descriptor about which "
"variable name was used."
msgstr ""

#: howto/descriptor.rst:218
msgid ""
"In this example, the :class:`Person` class has two descriptor instances, "
"*name* and *age*.  When the :class:`Person` class is defined, it makes a "
"callback to :meth:`__set_name__` in *LoggedAccess* so that the field names "
"can be recorded, giving each descriptor its own *public_name* and "
"*private_name*:"
msgstr ""

#: howto/descriptor.rst:256
msgid ""
"An interactive session shows that the :class:`Person` class has called :meth:"
"`__set_name__` so that the field names would be recorded.  Here we call :"
"func:`vars` to look up the descriptor without triggering it:"
msgstr ""

#: howto/descriptor.rst:267
msgid "The new class now logs access to both *name* and *age*:"
msgstr ""

#: howto/descriptor.rst:284
msgid "The two *Person* instances contain only the private names::"
msgstr ""

#: howto/descriptor.rst:293
msgid "Closing thoughts"
msgstr ""

#: howto/descriptor.rst:295
msgid ""
"A :term:`descriptor` is what we call any object that defines :meth:"
"`__get__`, :meth:`__set__`, or :meth:`__delete__`."
msgstr ""

#: howto/descriptor.rst:298
msgid ""
"Optionally, descriptors can have a :meth:`__set_name__` method.  This is "
"only used in cases where a descriptor needs to know either the class where "
"it was created or the name of class variable it was assigned to.  (This "
"method, if present, is called even if the class is not a descriptor.)"
msgstr ""

#: howto/descriptor.rst:303
msgid ""
"Descriptors get invoked by the dot \"operator\" during attribute lookup.  If "
"a descriptor is accessed indirectly with ``vars(some_class)"
"[descriptor_name]``, the descriptor instance is returned without invoking it."
msgstr ""

#: howto/descriptor.rst:307
msgid ""
"Descriptors only work when used as class variables.  When put in instances, "
"they have no effect."
msgstr ""

#: howto/descriptor.rst:310
msgid ""
"The main motivation for descriptors is to provide a hook allowing objects "
"stored in class variables to control what happens during attribute lookup."
msgstr ""

#: howto/descriptor.rst:313
msgid ""
"Traditionally, the calling class controls what happens during lookup. "
"Descriptors invert that relationship and allow the data being looked-up to "
"have a say in the matter."
msgstr ""

#: howto/descriptor.rst:317
msgid ""
"Descriptors are used throughout the language.  It is how functions turn into "
"bound methods.  Common tools like :func:`classmethod`, :func:"
"`staticmethod`, :func:`property`, and :func:`functools.cached_property` are "
"all implemented as descriptors."
msgstr ""

#: howto/descriptor.rst:324
msgid "Complete Practical Example"
msgstr ""

#: howto/descriptor.rst:326
msgid ""
"In this example, we create a practical and powerful tool for locating "
"notoriously hard to find data corruption bugs."
msgstr ""

#: howto/descriptor.rst:331
msgid "Validator class"
msgstr ""

#: howto/descriptor.rst:333
msgid ""
"A validator is a descriptor for managed attribute access.  Prior to storing "
"any data, it verifies that the new value meets various type and range "
"restrictions.  If those restrictions aren't met, it raises an exception to "
"prevent data corruption at its source."
msgstr ""

#: howto/descriptor.rst:338
msgid ""
"This :class:`Validator` class is both an :term:`abstract base class` and a "
"managed attribute descriptor:"
msgstr ""

#: howto/descriptor.rst:361
msgid ""
"Custom validators need to inherit from :class:`Validator` and must supply a :"
"meth:`validate` method to test various restrictions as needed."
msgstr ""

#: howto/descriptor.rst:366
msgid "Custom validators"
msgstr ""

#: howto/descriptor.rst:368
msgid "Here are three practical data validation utilities:"
msgstr ""

#: howto/descriptor.rst:370
msgid ""
":class:`OneOf` verifies that a value is one of a restricted set of options."
msgstr ""

#: howto/descriptor.rst:372
msgid ""
":class:`Number` verifies that a value is either an :class:`int` or :class:"
"`float`.  Optionally, it verifies that a value is between a given minimum or "
"maximum."
msgstr ""

#: howto/descriptor.rst:376
msgid ""
":class:`String` verifies that a value is a :class:`str`.  Optionally, it "
"validates a given minimum or maximum length.  It can validate a user-defined "
"`predicate <https://en.wikipedia.org/wiki/Predicate_(mathematical_logic)>`_ "
"as well."
msgstr ""

#: howto/descriptor.rst:435
msgid "Practical application"
msgstr ""

#: howto/descriptor.rst:437
msgid "Here's how the data validators can be used in a real class:"
msgstr ""

#: howto/descriptor.rst:452
msgid "The descriptors prevent invalid instances from being created:"
msgstr ""

#: howto/descriptor.rst:479
msgid "Technical Tutorial"
msgstr ""

#: howto/descriptor.rst:481
msgid ""
"What follows is a more technical tutorial for the mechanics and details of "
"how descriptors work."
msgstr ""

#: howto/descriptor.rst:486
msgid "Abstract"
msgstr "RÃ©sumÃ©"

#: howto/descriptor.rst:488
msgid ""
"Defines descriptors, summarizes the protocol, and shows how descriptors are "
"called.  Provides an example showing how object relational mappings work."
msgstr ""

#: howto/descriptor.rst:491
#, fuzzy
msgid ""
"Learning about descriptors not only provides access to a larger toolset, it "
"creates a deeper understanding of how Python works."
msgstr ""
"L'apprentissage des descripteurs permet non seulement d'accÃ©der Ã  un "
"ensemble d'outils plus vaste, mais aussi de mieux comprendre le "
"fonctionnement de Python et d'apprÃ©cier l'Ã©lÃ©gance de sa conception."

#: howto/descriptor.rst:496
#, fuzzy
msgid "Definition and introduction"
msgstr "DÃ©finition et introduction"

#: howto/descriptor.rst:498
#, fuzzy
msgid ""
"In general, a descriptor is an attribute value that has one of the methods "
"in the descriptor protocol.  Those methods are :meth:`__get__`, :meth:"
"`__set__`, and :meth:`__delete__`.  If any of those methods are defined for "
"an the attribute, it is said to be a :term:`descriptor`."
msgstr ""
"En gÃ©nÃ©ral, un descripteur est un attribut objet avec un \"comportement "
"contraignant\", dont l'accÃ¨s Ã  l'attribut a Ã©tÃ© remplacÃ© par des mÃ©thodes "
"dans le protocole du descripteur.  Ces mÃ©thodes sont : :meth:`__get__`, :"
"meth:`__set__`, et :meth:`__delete__`.  Si l'une de ces mÃ©thodes est dÃ©finie "
"pour un objet, il s'agit d'un descripteur."

#: howto/descriptor.rst:503
#, fuzzy
msgid ""
"The default behavior for attribute access is to get, set, or delete the "
"attribute from an object's dictionary.  For instance, ``a.x`` has a lookup "
"chain starting with ``a.__dict__['x']``, then ``type(a).__dict__['x']``, and "
"continuing through the method resolution order of ``type(a)``. If the looked-"
"up value is an object defining one of the descriptor methods, then Python "
"may override the default behavior and invoke the descriptor method instead. "
"Where this occurs in the precedence chain depends on which descriptor "
"methods were defined."
msgstr ""
"Le comportement par dÃ©faut pour l'accÃ¨s aux attributs consiste Ã  obtenir, "
"dÃ©finir ou supprimer l'attribut du dictionnaire d'un objet.  Par exemple, "
"``a. x`` a une chaÃ®ne de recherche commenÃ§ant par ``a. __dict__ ['x']``, "
"puis ``type (a). __dict__ ['x']``, et continuant Ã  travers les classes de "
"base de ``type (a)`` Ã€ l'exclusion des sous-classes. Si la valeur recherchÃ©e "
"est un objet dÃ©finissant l'une des mÃ©thodes de descripteur, Python peut "
"substituer le comportement par dÃ©faut et appeler Ã  la place la mÃ©thode "
"Descriptor. Lorsque cela se produit dans la chaÃ®ne de prÃ©cÃ©dence dÃ©pend de "
"quelles mÃ©thodes descripteur ont Ã©tÃ© dÃ©finies."

#: howto/descriptor.rst:512
#, fuzzy
msgid ""
"Descriptors are a powerful, general purpose protocol.  They are the "
"mechanism behind properties, methods, static methods, class methods, and :"
"func:`super()`.  They are used throughout Python itself.  Descriptors "
"simplify the underlying C code and offer a flexible set of new tools for "
"everyday Python programs."
msgstr ""
"Les descripteurs sont un protocole puissant et Ã  usage gÃ©nÃ©ral.  Ils sont le "
"mÃ©canisme derriÃ¨re les propriÃ©tÃ©s, les mÃ©thodes, les mÃ©thodes statiques, les "
"mÃ©thodes de classes et :func:`super()`. Ils sont utilisÃ©s dans tout Python "
"lui-mÃªme pour implÃ©menter les nouvelles classes de style introduites dans la "
"version 2.2.  Les descripteurs simplifient le code C sous-jacent et offrent "
"un ensemble flexible de nouveaux outils pour les programmes Python "
"quotidiens."

#: howto/descriptor.rst:520
#, fuzzy
msgid "Descriptor protocol"
msgstr "Protocole descripteur"

#: howto/descriptor.rst:522
msgid "``descr.__get__(self, obj, type=None) -> value``"
msgstr "``descr.__get__(self, obj, type=None) -> value``"

#: howto/descriptor.rst:524
msgid "``descr.__set__(self, obj, value) -> None``"
msgstr "``descr.__set__(self, obj, value) -> None``"

#: howto/descriptor.rst:526
msgid "``descr.__delete__(self, obj) -> None``"
msgstr "``descr.__delete__(self, obj) -> None``"

#: howto/descriptor.rst:528
msgid ""
"That is all there is to it.  Define any of these methods and an object is "
"considered a descriptor and can override default behavior upon being looked "
"up as an attribute."
msgstr ""
"C'est tout ce qu'il y a Ã  faire.  DÃ©finissez n'importe laquelle de ces "
"mÃ©thodes et un objet est considÃ©rÃ© comme un descripteur et peut remplacer le "
"comportement par dÃ©faut lorsqu'il est recherchÃ© comme un attribut."

#: howto/descriptor.rst:532
#, fuzzy
msgid ""
"If an object defines :meth:`__set__` or :meth:`__delete__`, it is considered "
"a data descriptor.  Descriptors that only define :meth:`__get__` are called "
"non-data descriptors (they are often used for methods but other uses are "
"possible)."
msgstr ""
"Si un objet dÃ©finit :meth:`__set__` ou :meth:`__delete__`, il est considÃ©rÃ© "
"comme un descripteur de donnÃ©es.  Les descripteurs qui ne dÃ©finissent que :"
"meth:`__get__` sont appelÃ©s descripteurs *non-data* (ils sont gÃ©nÃ©ralement "
"utilisÃ©s pour des mÃ©thodes mais d'autres utilisations sont possibles)."

#: howto/descriptor.rst:537
msgid ""
"Data and non-data descriptors differ in how overrides are calculated with "
"respect to entries in an instance's dictionary.  If an instance's dictionary "
"has an entry with the same name as a data descriptor, the data descriptor "
"takes precedence.  If an instance's dictionary has an entry with the same "
"name as a non-data descriptor, the dictionary entry takes precedence."
msgstr ""
"Les descripteurs de donnÃ©es et les descripteurs *non-data* diffÃ¨rent dans la "
"faÃ§on dont les dÃ©rogations sont calculÃ©es en ce qui concerne les entrÃ©es du "
"dictionnaire d'une instance.  Si le dictionnaire d'une instance comporte une "
"entrÃ©e portant le mÃªme nom qu'un descripteur de donnÃ©es, le descripteur de "
"donnÃ©es est prioritaire.  Si le dictionnaire d'une instance comporte une "
"entrÃ©e portant le mÃªme nom qu'un descripteur *non-data*, l'entrÃ©e du "
"dictionnaire a la prioritÃ©."

#: howto/descriptor.rst:543
msgid ""
"To make a read-only data descriptor, define both :meth:`__get__` and :meth:"
"`__set__` with the :meth:`__set__` raising an :exc:`AttributeError` when "
"called.  Defining the :meth:`__set__` method with an exception raising "
"placeholder is enough to make it a data descriptor."
msgstr ""
"Pour faire un descripteur de donnÃ©es en lecture seule, dÃ©finissez Ã  la fois :"
"meth:`__get__` et :meth:`__set__` avec :meth:`__set__` levant une erreur :"
"exc:`AttributeError` quand il est appelÃ©.  DÃ©finir la mÃ©thode :meth:"
"`__set__set__` avec une exception Ã©levant le caractÃ¨re gÃ©nÃ©rique est "
"suffisant pour en faire un descripteur de donnÃ©es."

#: howto/descriptor.rst:550
msgid "Overview of descriptor invocation"
msgstr ""

#: howto/descriptor.rst:552
#, fuzzy
msgid ""
"A descriptor can be called directly with ``desc.__get__(obj)`` or ``desc."
"__get__(None, cls)``."
msgstr ""
"Un descripteur peut Ãªtre appelÃ© directement par son nom de mÃ©thode.  Par "
"exemple, ``d.__get__(obj)``."

#: howto/descriptor.rst:555
msgid ""
"But it is more common for a descriptor to be invoked automatically from "
"attribute access."
msgstr ""

#: howto/descriptor.rst:558
msgid ""
"The expression ``obj.x`` looks up the attribute ``x`` in the chain of "
"namespaces for ``obj``.  If the search finds a descriptor outside of the "
"instance ``__dict__``, its :meth:`__get__` method is invoked according to "
"the precedence rules listed below."
msgstr ""

#: howto/descriptor.rst:563
#, fuzzy
msgid ""
"The details of invocation depend on whether ``obj`` is an object, class, or "
"instance of super."
msgstr ""
"Les dÃ©tails de l'invocation dÃ©pendent du fait que ``obj`` est un objet ou "
"une classe."

#: howto/descriptor.rst:568
msgid "Invocation from an instance"
msgstr ""

#: howto/descriptor.rst:570
msgid ""
"Instance lookup scans through a chain of namespaces giving data descriptors "
"the highest priority, followed by instance variables, then non-data "
"descriptors, then class variables, and lastly :meth:`__getattr__` if it is "
"provided."
msgstr ""

#: howto/descriptor.rst:575
msgid ""
"If a descriptor is found for ``a.x``, then it is invoked with: ``desc."
"__get__(a, type(a))``."
msgstr ""

#: howto/descriptor.rst:578
msgid ""
"The logic for a dotted lookup is in :meth:`object.__getattribute__`.  Here "
"is a pure Python equivalent:"
msgstr ""

#: howto/descriptor.rst:698
msgid ""
"Interestingly, attribute lookup doesn't call :meth:`object.__getattribute__` "
"directly.  Instead, both the dot operator and the :func:`getattr` function "
"perform attribute lookup by way of a helper function:"
msgstr ""

#: howto/descriptor.rst:713
msgid ""
"So if :meth:`__getattr__` exists, it is called whenever :meth:"
"`__getattribute__` raises :exc:`AttributeError` (either directly or in one "
"of the descriptor calls)."
msgstr ""

#: howto/descriptor.rst:716
msgid ""
"Also, if a user calls :meth:`object.__getattribute__` directly, the :meth:"
"`__getattr__` hook is bypassed entirely."
msgstr ""

#: howto/descriptor.rst:721
#, fuzzy
msgid "Invocation from a class"
msgstr "AppelÃ© depuis un Classe"

#: howto/descriptor.rst:723
msgid ""
"The logic for a dotted lookup such as ``A.x`` is in :meth:`type."
"__getattribute__`.  The steps are similar to those for :meth:`object."
"__getattribute__` but the instance dictionary lookup is replaced by a search "
"through the class's :term:`method resolution order`."
msgstr ""

#: howto/descriptor.rst:728
msgid "If a descriptor is found, it is invoked with ``desc.__get__(None, A)``."
msgstr ""

#: howto/descriptor.rst:730
msgid ""
"The full C implementation can be found in :c:func:`type_getattro()` and :c:"
"func:`_PyType_Lookup()` in :source:`Objects/typeobject.c`."
msgstr ""

#: howto/descriptor.rst:735
msgid "Invocation from super"
msgstr ""

#: howto/descriptor.rst:737
msgid ""
"The logic for super's dotted lookup is in the :meth:`__getattribute__` "
"method for object returned by :class:`super()`."
msgstr ""

#: howto/descriptor.rst:740
#, fuzzy
msgid ""
"A dotted lookup such as ``super(A, obj).m`` searches ``obj.__class__."
"__mro__`` for the base class ``B`` immediately following ``A`` and then "
"returns ``B.__dict__['m'].__get__(obj, A)``.  If not a descriptor, ``m`` is "
"returned unchanged."
msgstr ""
"L'objet renvoyÃ© par ``super()`` a Ã©galement une mÃ©thode personnalisÃ©e :meth:"
"`__getattribute__` pour invoquer des descripteurs. La recherche d'attribut "
"``super(B, obj).m`` recherche dans ``obj.__class__.__mro__`` la classe qui "
"suit immÃ©diatement B, appelons la A, et renvoie ``A.__dict__['m']."
"__get__(obj, B)``. Si ce n'est pas un descripteur, ``m`` est renvoyÃ© "
"inchangÃ©. S'il n'est pas dans le dictionnaire, la recherche de ``m`` revient "
"Ã  une recherche utilisant :meth:`object.__getattribute__`."

#: howto/descriptor.rst:745
#, fuzzy
msgid ""
"The full C implementation can be found in :c:func:`super_getattro()` in :"
"source:`Objects/typeobject.c`.  A pure Python equivalent can be found in "
"`Guido's Tutorial <https://www.python.org/download/releases/2.2.3/descrintro/"
"#cooperation>`_."
msgstr ""
"Les dÃ©tails d'implÃ©mentation sont dans :c:func:`super_getattro()` dans :"
"source:`Objects/typeobject.c` et un Ã©quivalent Python pur peut Ãªtre trouvÃ© "
"dans `Guido's Tutorial`_."

#: howto/descriptor.rst:752
msgid "Summary of invocation logic"
msgstr ""

#: howto/descriptor.rst:754
msgid ""
"The mechanism for descriptors is embedded in the :meth:`__getattribute__()` "
"methods for :class:`object`, :class:`type`, and :func:`super`."
msgstr ""

#: howto/descriptor.rst:757
msgid "The important points to remember are:"
msgstr "Les points importants Ã  retenir sont :"

#: howto/descriptor.rst:759
#, fuzzy
msgid "Descriptors are invoked by the :meth:`__getattribute__` method."
msgstr "les descripteurs sont appelÃ©s par la mÃ©thode :meth:`__getattribute__`"

#: howto/descriptor.rst:761
msgid ""
"Classes inherit this machinery from :class:`object`, :class:`type`, or :func:"
"`super`."
msgstr ""

#: howto/descriptor.rst:764
#, fuzzy
msgid ""
"Overriding :meth:`__getattribute__` prevents automatic descriptor calls "
"because all the descriptor logic is in that method."
msgstr ""
"redÃ©finir :meth:`__getattribute____` empÃªche les appels automatiques de "
"descripteurs"

#: howto/descriptor.rst:767
#, fuzzy
msgid ""
":meth:`object.__getattribute__` and :meth:`type.__getattribute__` make "
"different calls to :meth:`__get__`.  The first includes the instance and may "
"include the class.  The second puts in ``None`` for the instance and always "
"includes the class."
msgstr ""
":meth:`objet.__getattribute__` et :meth:`type.__getattribute__` font "
"diffÃ©rents appels Ã  :meth:`__get__`."

#: howto/descriptor.rst:772
#, fuzzy
msgid "Data descriptors always override instance dictionaries."
msgstr ""
"les descripteurs de donnÃ©es remplacent toujours les dictionnaires "
"d'instances."

#: howto/descriptor.rst:774
#, fuzzy
msgid "Non-data descriptors may be overridden by instance dictionaries."
msgstr ""
"les descripteurs *non-data* peuvent Ãªtre remplacÃ©s par des dictionnaires "
"d'instance."

#: howto/descriptor.rst:778
msgid "Automatic name notification"
msgstr ""

#: howto/descriptor.rst:780
msgid ""
"Sometimes it is desirable for a descriptor to know what class variable name "
"it was assigned to.  When a new class is created, the :class:`type` "
"metaclass scans the dictionary of the new class.  If any of the entries are "
"descriptors and if they define :meth:`__set_name__`, that method is called "
"with two arguments.  The *owner* is the class where the descriptor is used, "
"and the *name* is the class variable the descriptor was assigned to."
msgstr ""

#: howto/descriptor.rst:787
#, fuzzy
msgid ""
"The implementation details are in :c:func:`type_new()` and :c:func:"
"`set_names()` in :source:`Objects/typeobject.c`."
msgstr ""
"Les dÃ©tails d'implÃ©mentation sont dans :c:func:`super_getattro()` dans :"
"source:`Objects/typeobject.c` et un Ã©quivalent Python pur peut Ãªtre trouvÃ© "
"dans `Guido's Tutorial`_."

#: howto/descriptor.rst:790
msgid ""
"Since the update logic is in :meth:`type.__new__`, notifications only take "
"place at the time of class creation.  If descriptors are added to the class "
"afterwards, :meth:`__set_name__` will need to be called manually."
msgstr ""

#: howto/descriptor.rst:796
msgid "ORM example"
msgstr ""

#: howto/descriptor.rst:798
msgid ""
"The following code is simplified skeleton showing how data descriptors could "
"be used to implement an `object relational mapping <https://en.wikipedia.org/"
"wiki/Object%E2%80%93relational_mapping>`_."
msgstr ""

#: howto/descriptor.rst:802
msgid ""
"The essential idea is that the data is stored in an external database.  The "
"Python instances only hold keys to the database's tables.  Descriptors take "
"care of lookups or updates:"
msgstr ""

#: howto/descriptor.rst:821
msgid ""
"We can use the :class:`Field` class to define `models <https://en.wikipedia."
"org/wiki/Database_model>`_ that describe the schema for each table in a "
"database:"
msgstr ""

#: howto/descriptor.rst:846
msgid "To use the models, first connect to the database::"
msgstr ""

#: howto/descriptor.rst:851
msgid ""
"An interactive session shows how data is retrieved from the database and how "
"it can be updated:"
msgstr ""

#: howto/descriptor.rst:896
msgid "Pure Python Equivalents"
msgstr ""

#: howto/descriptor.rst:898
#, fuzzy
msgid ""
"The descriptor protocol is simple and offers exciting possibilities.  "
"Several use cases are so common that they have been prepackaged into built-"
"in tools. Properties, bound methods, static methods, class methods, and \\_"
"\\_slots\\_\\_ are all based on the descriptor protocol."
msgstr ""
"Le protocole est simple et offre des possibilitÃ©s passionnantes. Plusieurs "
"cas d'utilisation sont si courants qu'ils ont Ã©tÃ© regroupÃ©s en appels de "
"fonction individuels. Les propriÃ©tÃ©s, les mÃ©thodes liÃ©es, les mÃ©thodes "
"statiques et les mÃ©thodes de classe sont toutes basÃ©es sur le protocole du "
"descripteur."

#: howto/descriptor.rst:905
msgid "Properties"
msgstr "PropriÃ©tÃ©s"

#: howto/descriptor.rst:907
#, fuzzy
msgid ""
"Calling :func:`property` is a succinct way of building a data descriptor "
"that triggers a function call upon access to an attribute.  Its signature "
"is::"
msgstr ""
"Appeler :func:`property` est une faÃ§on succincte de construire un "
"descripteur de donnÃ©es qui dÃ©clenche des appels de fonction lors de l'accÃ¨s "
"Ã  un attribut.  Sa signature estÂ ::"

#: howto/descriptor.rst:912
#, fuzzy
msgid ""
"The documentation shows a typical use to define a managed attribute ``x``:"
msgstr ""
"La documentation montre une utilisation typique pour dÃ©finir un attribut "
"gÃ©rÃ© ``x``Â ::"

#: howto/descriptor.rst:922
#, fuzzy
msgid ""
"To see how :func:`property` is implemented in terms of the descriptor "
"protocol, here is a pure Python equivalent:"
msgstr ""
"Pour voir comment :func:`property` est implÃ©mentÃ© dans le protocole du "
"descripteur, voici un un Ã©quivalent Python purÂ ::"

#: howto/descriptor.rst:1015
msgid ""
"The :func:`property` builtin helps whenever a user interface has granted "
"attribute access and then subsequent changes require the intervention of a "
"method."
msgstr ""
"La fonction native :func:`property` aide chaque fois qu'une interface "
"utilisateur a accordÃ© l'accÃ¨s Ã  un attribut et que des modifications "
"ultÃ©rieures nÃ©cessitent l'intervention d'une mÃ©thode."

#: howto/descriptor.rst:1019
#, fuzzy
msgid ""
"For instance, a spreadsheet class may grant access to a cell value through "
"``Cell('b10').value``. Subsequent improvements to the program require the "
"cell to be recalculated on every access; however, the programmer does not "
"want to affect existing client code accessing the attribute directly.  The "
"solution is to wrap access to the value attribute in a property data "
"descriptor:"
msgstr ""
"Par exemple, une classe de tableur peut donner accÃ¨s Ã  une valeur de cellule "
"via ``Cell('b10').value``. Les amÃ©liorations ultÃ©rieures du programme "
"exigent que la cellule soit recalculÃ©e Ã  chaque accÃ¨s ; cependant, le "
"programmeur ne veut pas affecter le code client existant accÃ©dant "
"directement Ã  l'attribut.  La solution consiste Ã  envelopper l'accÃ¨s Ã  "
"l'attribut de valeur dans un descripteur de donnÃ©es de propriÃ©tÃ©Â ::"

#: howto/descriptor.rst:1036
msgid ""
"Either the built-in :func:`property` or our :func:`Property` equivalent "
"would work in this example."
msgstr ""

#: howto/descriptor.rst:1041
#, fuzzy
msgid "Functions and methods"
msgstr "Fonctions et mÃ©thodes"

#: howto/descriptor.rst:1043
msgid ""
"Python's object oriented features are built upon a function based "
"environment. Using non-data descriptors, the two are merged seamlessly."
msgstr ""
"Les fonctionnalitÃ©s orientÃ©es objet de Python sont construites sur un "
"environnement basÃ© sur des fonctions. Ã€ l'aide de descripteurs *non-data*, "
"les deux sont fusionnÃ©s de faÃ§on transparente."

#: howto/descriptor.rst:1046
#, fuzzy
msgid ""
"Functions stored in class dictionaries get turned into methods when invoked. "
"Methods only differ from regular functions in that the object instance is "
"prepended to the other arguments.  By convention, the instance is called "
"*self* but could be called *this* or any other variable name."
msgstr ""
"Les dictionnaires de classes stockent les mÃ©thodes sous forme de fonctions.  "
"Dans une dÃ©finition de classe, les mÃ©thodes sont Ã©crites en utilisant :"
"keyword:`def` ou :keyword:`lambda`, les outils habituels pour crÃ©er des "
"fonctions.  Les mÃ©thodes ne diffÃ¨rent des fonctions rÃ©guliÃ¨res que par le "
"fait que le premier argument est rÃ©servÃ© Ã  l'instance de l'objet.  Par "
"convention Python, la rÃ©fÃ©rence de l'instance est appelÃ©e *self* mais peut "
"Ãªtre appelÃ©e *this* ou tout autre nom de variable."

#: howto/descriptor.rst:1051
msgid ""
"Methods can be created manually with :class:`types.MethodType` which is "
"roughly equivalent to:"
msgstr ""

#: howto/descriptor.rst:1068
#, fuzzy
msgid ""
"To support automatic creation of methods, functions include the :meth:"
"`__get__` method for binding methods during attribute access.  This means "
"that functions are non-data descriptors that return bound methods during "
"dotted lookup from an instance.  Here's how it works:"
msgstr ""
"Pour prendre en charge les appels de mÃ©thodes, les fonctions incluent la "
"mÃ©thode :meth:`__get__` pour lier les mÃ©thodes pendant l'accÃ¨s aux "
"attributs.  Cela signifie que toutes les fonctions sont des descripteurs "
"*non-data* qui renvoient des mÃ©thodes liÃ©es lorsqu'elles sont appelÃ©es "
"depuis un objet. En Python pur, il fonctionne comme ceciÂ ::"

#: howto/descriptor.rst:1084
#, fuzzy
msgid ""
"Running the following class in the interpreter shows how the function "
"descriptor works in practice:"
msgstr ""
"L'exÃ©cution de l'interprÃ©teur montre comment le descripteur de fonction se "
"comporte dans la pratiqueÂ ::"

#: howto/descriptor.rst:1093
msgid ""
"The function has a :term:`qualified name` attribute to support introspection:"
msgstr ""

#: howto/descriptor.rst:1100
msgid ""
"Accessing the function through the class dictionary does not invoke :meth:"
"`__get__`.  Instead, it just returns the underlying function object::"
msgstr ""

#: howto/descriptor.rst:1106
msgid ""
"Dotted access from a class calls :meth:`__get__` which just returns the "
"underlying function unchanged::"
msgstr ""

#: howto/descriptor.rst:1112
msgid ""
"The interesting behavior occurs during dotted access from an instance.  The "
"dotted lookup calls :meth:`__get__` which returns a bound method object::"
msgstr ""

#: howto/descriptor.rst:1119
msgid ""
"Internally, the bound method stores the underlying function and the bound "
"instance::"
msgstr ""

#: howto/descriptor.rst:1128
msgid ""
"If you have ever wondered where *self* comes from in regular methods or "
"where *cls* comes from in class methods, this is it!"
msgstr ""

#: howto/descriptor.rst:1133
#, fuzzy
msgid "Static methods"
msgstr "mÃ©thode statique"

#: howto/descriptor.rst:1135
msgid ""
"Non-data descriptors provide a simple mechanism for variations on the usual "
"patterns of binding functions into methods."
msgstr ""
"Les descripteurs *non-data* fournissent un mÃ©canisme simple pour les "
"variations des patrons habituels des fonctions de liaison dans les mÃ©thodes."

#: howto/descriptor.rst:1138
#, fuzzy
msgid ""
"To recap, functions have a :meth:`__get__` method so that they can be "
"converted to a method when accessed as attributes.  The non-data descriptor "
"transforms an ``obj.f(*args)`` call into ``f(obj, *args)``.  Calling ``cls."
"f(*args)`` becomes ``f(*args)``."
msgstr ""
"Pour rÃ©sumer, les fonctions ont une mÃ©thode :meth:`__get__` pour qu'elles "
"puissent Ãªtre converties en mÃ©thode lorsqu'on y accÃ¨de comme attributs. Le "
"descripteur *non-data* transforme un appel ``obj.f(*args)``en ``f(obj, "
"*args)``.  Appeler ``klass.f(*args)`` devient ``f(*args)``."

#: howto/descriptor.rst:1143
msgid "This chart summarizes the binding and its two most useful variants:"
msgstr ""
"Ce tableau rÃ©sume le lien (*binding*) et ses deux variantes les plus "
"utilesÂ ::"

#: howto/descriptor.rst:1146
msgid "Transformation"
msgstr "Transformation"

#: howto/descriptor.rst:1146
#, fuzzy
msgid "Called from an object"
msgstr "AppelÃ© depuis un Objet"

#: howto/descriptor.rst:1146
#, fuzzy
msgid "Called from a class"
msgstr "AppelÃ© depuis un Classe"

#: howto/descriptor.rst:1149
msgid "function"
msgstr "fonction"

#: howto/descriptor.rst:1149
msgid "f(obj, \\*args)"
msgstr "f(obj, \\*args)"

#: howto/descriptor.rst:1151
msgid "f(\\*args)"
msgstr "f(\\*args)"

#: howto/descriptor.rst:1151
msgid "staticmethod"
msgstr "mÃ©thode statique"

#: howto/descriptor.rst:1153
msgid "classmethod"
msgstr "mÃ©thode de classe"

#: howto/descriptor.rst:1153
msgid "f(type(obj), \\*args)"
msgstr "f(type(obj), \\*args)"

#: howto/descriptor.rst:1153
msgid "f(cls, \\*args)"
msgstr "f(cls, \\*args)"

#: howto/descriptor.rst:1156
msgid ""
"Static methods return the underlying function without changes.  Calling "
"either ``c.f`` or ``C.f`` is the equivalent of a direct lookup into ``object."
"__getattribute__(c, \"f\")`` or ``object.__getattribute__(C, \"f\")``. As a "
"result, the function becomes identically accessible from either an object or "
"a class."
msgstr ""
"Les mÃ©thodes statiques renvoient la fonction sous-jacente sans "
"modifications.  Appeler ``c.f`` ou ``C.f`` est l'Ã©quivalent d'une recherche "
"directe dans ``objet.__getattribute__(c, \"f\")`` ou ``objet."
"__getattribute__(C, \"f\")``. Par consÃ©quent, la fonction devient accessible "
"de maniÃ¨re identique Ã  partir d'un objet ou d'une classe."

#: howto/descriptor.rst:1162
msgid ""
"Good candidates for static methods are methods that do not reference the "
"``self`` variable."
msgstr ""
"Les bonnes candidates pour Ãªtre mÃ©thode statique sont des mÃ©thodes qui ne "
"font pas rÃ©fÃ©rence Ã  la variable ``self``."

#: howto/descriptor.rst:1165
msgid ""
"For instance, a statistics package may include a container class for "
"experimental data.  The class provides normal methods for computing the "
"average, mean, median, and other descriptive statistics that depend on the "
"data. However, there may be useful functions which are conceptually related "
"but do not depend on the data.  For instance, ``erf(x)`` is handy conversion "
"routine that comes up in statistical work but does not directly depend on a "
"particular dataset. It can be called either from an object or the class:  "
"``s.erf(1.5) --> .9332`` or ``Sample.erf(1.5) --> .9332``."
msgstr ""
"Par exemple, un paquet traitant de statistiques peut inclure une classe qui "
"est un conteneur pour des donnÃ©es expÃ©rimentales.  La classe fournit les "
"mÃ©thodes normales pour calculer la moyenne, la moyenne, la mÃ©diane et "
"d'autres statistiques descriptives qui dÃ©pendent des donnÃ©es. Cependant, il "
"peut y avoir des fonctions utiles qui sont conceptuellement liÃ©es mais qui "
"ne dÃ©pendent pas des donnÃ©es. Par exemple, ``erf(x)`` est une routine de "
"conversion pratique qui apparaÃ®t dans le travail statistique mais qui ne "
"dÃ©pend pas directement d'un ensemble de donnÃ©es particulier. Elle peut Ãªtre "
"appelÃ©e Ã  partir d'un objet ou de la classe :  ``s.erf(1.5) --> .9332``` ou "
"``Sample.erf(1.5) --> .9332``."

#: howto/descriptor.rst:1174
#, fuzzy
msgid ""
"Since static methods return the underlying function with no changes, the "
"example calls are unexciting:"
msgstr ""
"Depuis que les mÃ©thodes statiques renvoient la fonction sous-jacente sans "
"changement, les exemples dâ€™appels ne sont pas excitantsÂ ::"

#: howto/descriptor.rst:1191
#, fuzzy
msgid ""
"Using the non-data descriptor protocol, a pure Python version of :func:"
"`staticmethod` would look like this:"
msgstr ""
"En utilisant le protocole de descripteur *non-data*, une version Python pure "
"de :func:`staticmethod` ressemblerait Ã  ceciÂ ::"

#: howto/descriptor.rst:1207
#, fuzzy
msgid "Class methods"
msgstr "mÃ©thode de classe"

#: howto/descriptor.rst:1209
#, fuzzy
msgid ""
"Unlike static methods, class methods prepend the class reference to the "
"argument list before calling the function.  This format is the same for "
"whether the caller is an object or a class:"
msgstr ""
"Contrairement aux mÃ©thodes statiques, les mÃ©thodes de classe prÃ©chargent la "
"rÃ©fÃ©rence de classe dans la liste d'arguments avant d'appeler la fonction.  "
"Ce format est le mÃªme que l'appelant soit un objet ou une classeÂ ::"

#: howto/descriptor.rst:1227
#, fuzzy
msgid ""
"This behavior is useful whenever the method only needs to have a class "
"reference and does not rely on data stored in a specific instance.  One use "
"for class methods is to create alternate class constructors.  For example, "
"the classmethod :func:`dict.fromkeys` creates a new dictionary from a list "
"of keys.  The pure Python equivalent is:"
msgstr ""
"Ce comportement est utile lorsque la fonction n'a besoin que d'une rÃ©fÃ©rence "
"de classe et ne se soucie pas des donnÃ©es sous-jacentes.  Une des "
"utilisations des mÃ©thodes de classe est de crÃ©er d'autres constructeurs de "
"classe.  En Python 2.3, la mÃ©thode de classe :func:`dict.fromkeys` crÃ©e un "
"nouveau dictionnaire Ã  partir d'une liste de clÃ©s.  L'Ã©quivalent Python pur "
"estÂ ::"

#: howto/descriptor.rst:1244
#, fuzzy
msgid "Now a new dictionary of unique keys can be constructed like this:"
msgstr ""
"Maintenant un nouveau dictionnaire de clÃ©s uniques peut Ãªtre construit comme "
"ceciÂ ::"

#: howto/descriptor.rst:1254
#, fuzzy
msgid ""
"Using the non-data descriptor protocol, a pure Python version of :func:"
"`classmethod` would look like this:"
msgstr ""
"En utilisant le protocole de descripteur *non-data*, une version Python pure "
"de :func:`classmethod` ressemblerait Ã  ceciÂ ::"

#: howto/descriptor.rst:1292
msgid ""
"The code path for ``hasattr(obj, '__get__')`` was added in Python 3.9 and "
"makes it possible for :func:`classmethod` to support chained decorators. For "
"example, a classmethod and property could be chained together:"
msgstr ""

#: howto/descriptor.rst:1311
msgid "Member objects and __slots__"
msgstr ""

#: howto/descriptor.rst:1313
msgid ""
"When a class defines ``__slots__``, it replaces instance dictionaries with a "
"fixed-length array of slot values.  From a user point of view that has "
"several effects:"
msgstr ""

#: howto/descriptor.rst:1317
msgid ""
"1. Provides immediate detection of bugs due to misspelled attribute "
"assignments.  Only attribute names specified in ``__slots__`` are allowed:"
msgstr ""

#: howto/descriptor.rst:1333
msgid ""
"2. Helps create immutable objects where descriptors manage access to private "
"attributes stored in ``__slots__``:"
msgstr ""

#: howto/descriptor.rst:1368
msgid ""
"3. Saves memory.  On a 64-bit Linux build, an instance with two attributes "
"takes 48 bytes with ``__slots__`` and 152 bytes without.  This `flyweight "
"design pattern <https://en.wikipedia.org/wiki/Flyweight_pattern>`_ likely "
"only matters when a large number of instances are going to be created."
msgstr ""

#: howto/descriptor.rst:1373
msgid ""
"4. Blocks tools like :func:`functools.cached_property` which require an "
"instance dictionary to function correctly:"
msgstr ""

#: howto/descriptor.rst:1395
msgid ""
"It is not possible to create an exact drop-in pure Python version of "
"``__slots__`` because it requires direct access to C structures and control "
"over object memory allocation.  However, we can build a mostly faithful "
"simulation where the actual C structure for slots is emulated by a private "
"``_slotvalues`` list.  Reads and writes to that private structure are "
"managed by member descriptors:"
msgstr ""

#: howto/descriptor.rst:1438
msgid ""
"The :meth:`type.__new__` method takes care of adding member objects to class "
"variables:"
msgstr ""

#: howto/descriptor.rst:1454
msgid ""
"The :meth:`object.__new__` method takes care of creating instances that have "
"slots instead of an instance dictionary.  Here is a rough simulation in pure "
"Python:"
msgstr ""

#: howto/descriptor.rst:1489
msgid ""
"To use the simulation in a real class, just inherit from :class:`Object` and "
"set the :term:`metaclass` to :class:`Type`:"
msgstr ""

#: howto/descriptor.rst:1503
msgid ""
"At this point, the metaclass has loaded member objects for *x* and *y*::"
msgstr ""

#: howto/descriptor.rst:1524
msgid ""
"When instances are created, they have a ``slot_values`` list where the "
"attributes are stored:"
msgstr ""

#: howto/descriptor.rst:1536
msgid "Misspelled or unassigned attributes will raise an exception:"
msgstr ""

#~ msgid ""
#~ "Defines descriptors, summarizes the protocol, and shows how descriptors "
#~ "are called.  Examines a custom descriptor and several built-in Python "
#~ "descriptors including functions, properties, static methods, and class "
#~ "methods.  Shows how each works by giving a pure Python equivalent and a "
#~ "sample application."
#~ msgstr ""
#~ "DÃ©finit les descripteurs, rÃ©sume le protocole et montre comment les "
#~ "descripteurs sont appelÃ©s.  Examine un descripteur personnalisÃ© et "
#~ "plusieurs descripteurs Python intÃ©grÃ©s, y compris les fonctions, les "
#~ "propriÃ©tÃ©s, les mÃ©thodes statiques et les mÃ©thodes de classe.  Montre "
#~ "comment chacun fonctionne en donnant un Ã©quivalent Python pur et un "
#~ "exemple d'application."

#~ msgid "Invoking Descriptors"
#~ msgstr "Invocation des descripteurs"

#~ msgid ""
#~ "Alternatively, it is more common for a descriptor to be invoked "
#~ "automatically upon attribute access.  For example, ``obj.d`` looks up "
#~ "``d`` in the dictionary of ``obj``.  If ``d`` defines the method :meth:"
#~ "`__get__`, then ``d.__get__(obj)`` is invoked according to the precedence "
#~ "rules listed below."
#~ msgstr ""
#~ "Alternativement, il est plus courant qu'un descripteur soit invoquÃ© "
#~ "automatiquement lors de l'accÃ¨s aux attributs.  Par exemple, ``obj.d`` "
#~ "recherche ``d`` dans le dictionnaire de ``obj.d``.  Si ``d`` dÃ©finit la "
#~ "mÃ©thode :meth:`__get__`, alors ``d.__get__(obj)`` est invoquÃ© selon les "
#~ "rÃ¨gles de prioritÃ© Ã©numÃ©rÃ©es ci-dessous."

#~ msgid ""
#~ "For objects, the machinery is in :meth:`object.__getattribute__` which "
#~ "transforms ``b.x`` into ``type(b).__dict__['x'].__get__(b, type(b))``.  "
#~ "The implementation works through a precedence chain that gives data "
#~ "descriptors priority over instance variables, instance variables priority "
#~ "over non-data descriptors, and assigns lowest priority to :meth:"
#~ "`__getattr__` if provided. The full C implementation can be found in :c:"
#~ "func:`PyObject_GenericGetAttr()` in :source:`Objects/object.c`."
#~ msgstr ""
#~ "Pour les objets, la machinerie est dans :meth:`object.__getattribute__` "
#~ "qui transforme ``b.x`` en ``type(b).__dict__['x'].__get__(b, type(b)]``.  "
#~ "L'implÃ©mentation fonctionne Ã  travers une chaÃ®ne de prioritÃ© qui donne la "
#~ "prioritÃ© aux descripteurs de donnÃ©es sur les variables d'instance, la "
#~ "prioritÃ© aux variables d'instance sur les descripteurs *non-data*, et "
#~ "attribue la prioritÃ© la plus faible Ã  :meth:`__getattr__` si fourni. "
#~ "L'implÃ©mentation complÃ¨te en C peut Ãªtre trouvÃ©e dans :c:func:"
#~ "`PyObject_GenericGetAttr()` dans :source:`Objects/object.c`."

#~ msgid ""
#~ "For classes, the machinery is in :meth:`type.__getattribute__` which "
#~ "transforms ``B.x`` into ``B.__dict__['x'].__get__(None, B)``.  In pure "
#~ "Python, it looks like::"
#~ msgstr ""
#~ "Pour les classes, la machinerie est dans :meth:`type.__getattribute__` "
#~ "qui transforme ``B.x`` en ``B.__dict__['x'].__get__(None, B)``.  En "
#~ "Python pur, cela ressemble Ã Â ::"

#~ msgid ""
#~ "The details above show that the mechanism for descriptors is embedded in "
#~ "the :meth:`__getattribute__()` methods for :class:`object`, :class:"
#~ "`type`, and :func:`super`.  Classes inherit this machinery when they "
#~ "derive from :class:`object` or if they have a meta-class providing "
#~ "similar functionality. Likewise, classes can turn-off descriptor "
#~ "invocation by overriding :meth:`__getattribute__()`."
#~ msgstr ""
#~ "Les dÃ©tails ci-dessus montrent que le mÃ©canisme des descripteurs est "
#~ "intÃ©grÃ© dans les mÃ©thodes :meth:`__getattribute__()` pour :class:"
#~ "`object`, :class:`type` et :func:`super`. Les classes hÃ©ritent de cette "
#~ "machinerie lorsqu'elles dÃ©rivent de :class:`object` ou si elles ont une "
#~ "mÃ©ta-classe fournissant des fonctionnalitÃ©s similaires. De mÃªme, les "
#~ "classes peuvent dÃ©sactiver l'appel de descripteurs en remplaÃ§ant :meth:"
#~ "`__getattribute__()`."

#~ msgid "Descriptor Example"
#~ msgstr "Exemple de descripteur"

#~ msgid ""
#~ "The following code creates a class whose objects are data descriptors "
#~ "which print a message for each get or set.  Overriding :meth:"
#~ "`__getattribute__` is alternate approach that could do this for every "
#~ "attribute.  However, this descriptor is useful for monitoring just a few "
#~ "chosen attributes::"
#~ msgstr ""
#~ "Le code suivant crÃ©e une classe dont les objets sont des descripteurs de "
#~ "donnÃ©es qui affichent un message pour chaque lecture ou Ã©criture.  "
#~ "RedÃ©finir :meth:`__getattribute__` est une approche alternative qui "
#~ "pourrait le faire pour chaque attribut.  Cependant, ce descripteur n'est "
#~ "utile que pour le suivi de quelques attributs choisisÂ ::"

#~ msgid "Static Methods and Class Methods"
#~ msgstr "MÃ©thodes statiques et mÃ©thodes de classe"
