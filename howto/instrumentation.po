# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-29 21:40+0100\n"
"PO-Revision-Date: 2021-11-06 19:31+0100\n"
"Last-Translator: Jean Abou Samra <jean@abou-samra.fr>\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0\n"

#: howto/instrumentation.rst:7
msgid "Instrumenting CPython with DTrace and SystemTap"
msgstr "Instrumenter CPython avec DTrace et SystemTap"

#: howto/instrumentation.rst:0
msgid "author"
msgstr "auteur"

#: howto/instrumentation.rst:9
msgid "David Malcolm"
msgstr "David Malcolm"

#: howto/instrumentation.rst:10
msgid "Łukasz Langa"
msgstr "Łukasz Langa"

#: howto/instrumentation.rst:12
msgid ""
"DTrace and SystemTap are monitoring tools, each providing a way to inspect "
"what the processes on a computer system are doing.  They both use domain-"
"specific languages allowing a user to write scripts which:"
msgstr ""
"*DTrace* et *SystemTap* sont des outils de surveillance, chacun fournissant "
"un moyen de d'inspecter ce que font les processus d'un système informatique. "
"Ils utilisent tous les deux des langages dédiés permettant à un utilisateur "
"d'écrire des scripts qui permettent de :"

#: howto/instrumentation.rst:16
msgid "filter which processes are to be observed"
msgstr "Filtrer les processus à observer."

#: howto/instrumentation.rst:17
msgid "gather data from the processes of interest"
msgstr "Recueillir des données sur le processus choisi."

#: howto/instrumentation.rst:18
msgid "generate reports on the data"
msgstr "Générer des rapports sur les données."

#: howto/instrumentation.rst:20
msgid ""
"As of Python 3.6, CPython can be built with embedded \"markers\", also known "
"as \"probes\", that can be observed by a DTrace or SystemTap script, making "
"it easier to monitor what the CPython processes on a system are doing."
msgstr ""
"À partir de Python 3.6, CPython peut être compilé avec des « marqueurs » "
"intégrés, aussi appelés « sondes », qui peuvent être observés par un script "
"*DTrace* ou *SystemTap*, ce qui facilite le suivi des processus CPython."

#: howto/instrumentation.rst:27
msgid ""
"DTrace markers are implementation details of the CPython interpreter. No "
"guarantees are made about probe compatibility between versions of CPython. "
"DTrace scripts can stop working or work incorrectly without warning when "
"changing CPython versions."
msgstr ""
"Les marqueurs DTrace sont des détails d'implémentation de l'interpréteur "
"CPython. Aucune garantie n'est donnée quant à la compatibilité des sondes "
"entre les versions de CPython. Les scripts DTrace peuvent s'arrêter de "
"fonctionner ou fonctionner incorrectement sans avertissement lors du "
"changement de version de CPython."

#: howto/instrumentation.rst:34
msgid "Enabling the static markers"
msgstr "Activer les marqueurs statiques"

#: howto/instrumentation.rst:36
msgid ""
"macOS comes with built-in support for DTrace.  On Linux, in order to build "
"CPython with the embedded markers for SystemTap, the SystemTap development "
"tools must be installed."
msgstr ""
"macOS est livré avec un support intégré pour *DTrace*. Sous Linux, pour "
"construire CPython avec les marqueurs embarqués pour *SystemTap*, les outils "
"de développement *SystemTap* doivent être installés."

#: howto/instrumentation.rst:40
msgid "On a Linux machine, this can be done via::"
msgstr "Sur une machine Linux, cela se fait via ::"

#: howto/instrumentation.rst:42
msgid "$ yum install systemtap-sdt-devel"
msgstr ""

#: howto/instrumentation.rst:44
msgid "or::"
msgstr "ou ::"

#: howto/instrumentation.rst:46
msgid "$ sudo apt-get install systemtap-sdt-dev"
msgstr ""

#: howto/instrumentation.rst:49
msgid ""
"CPython must then be :option:`configured with the --with-dtrace option <--"
"with-dtrace>`:"
msgstr "CPython doit être configuré avec l'option :option:`--with-dtrace` :"

#: howto/instrumentation.rst:52
msgid "checking for --with-dtrace... yes"
msgstr ""

#: howto/instrumentation.rst:56
msgid ""
"On macOS, you can list available DTrace probes by running a Python process "
"in the background and listing all probes made available by the Python "
"provider::"
msgstr ""
"Sous macOS, vous pouvez lister les sondes *DTrace* disponibles en exécutant "
"un processus Python en arrière-plan et en listant toutes les sondes mises à "
"disposition par le fournisseur Python ::"

#: howto/instrumentation.rst:60
msgid ""
"$ python3.6 -q &\n"
"$ sudo dtrace -l -P python$!  # or: dtrace -l -m python3.6\n"
"\n"
"   ID   PROVIDER            MODULE                          FUNCTION NAME\n"
"29564 python18035        python3.6          _PyEval_EvalFrameDefault "
"function-entry\n"
"29565 python18035        python3.6             dtrace_function_entry "
"function-entry\n"
"29566 python18035        python3.6          _PyEval_EvalFrameDefault "
"function-return\n"
"29567 python18035        python3.6            dtrace_function_return "
"function-return\n"
"29568 python18035        python3.6                           collect gc-"
"done\n"
"29569 python18035        python3.6                           collect gc-"
"start\n"
"29570 python18035        python3.6          _PyEval_EvalFrameDefault line\n"
"29571 python18035        python3.6                 maybe_dtrace_line line"
msgstr ""

#: howto/instrumentation.rst:73
msgid ""
"On Linux, you can verify if the SystemTap static markers are present in the "
"built binary by seeing if it contains a \".note.stapsdt\" section."
msgstr ""
"Sous Linux, pour vérifier que les marqueurs statiques *SystemTap* sont "
"présents dans le binaire compilé, il suffit de regarder s'il contient une "
"section ``.note.stapsdt``."

#: howto/instrumentation.rst:78
msgid ""
"$ readelf -S ./python | grep .note.stapsdt\n"
"[30] .note.stapsdt        NOTE         0000000000000000 00308d78"
msgstr ""

#: howto/instrumentation.rst:81
msgid ""
"If you've built Python as a shared library (with the :option:`--enable-"
"shared` configure option), you need to look instead within the shared "
"library.  For example::"
msgstr ""
"Si vous avez compilé Python en tant que bibliothèque partagée (avec "
"l'option :option:`--enable-shared` du script ``configure``), vous devez "
"plutôt regarder dans la bibliothèque partagée. Par exemple ::"

#: howto/instrumentation.rst:85
msgid ""
"$ readelf -S libpython3.3dm.so.1.0 | grep .note.stapsdt\n"
"[29] .note.stapsdt        NOTE         0000000000000000 00365b68"
msgstr ""

#: howto/instrumentation.rst:88
msgid "Sufficiently modern readelf can print the metadata::"
msgstr ""
"Une version suffisamment moderne de *readelf* peut afficher les "
"métadonnées ::"

#: howto/instrumentation.rst:90
msgid ""
"$ readelf -n ./python\n"
"\n"
"Displaying notes found at file offset 0x00000254 with length 0x00000020:\n"
"    Owner                 Data size          Description\n"
"    GNU                  0x00000010          NT_GNU_ABI_TAG (ABI version "
"tag)\n"
"        OS: Linux, ABI: 2.6.32\n"
"\n"
"Displaying notes found at file offset 0x00000274 with length 0x00000024:\n"
"    Owner                 Data size          Description\n"
"    GNU                  0x00000014          NT_GNU_BUILD_ID (unique build "
"ID bitstring)\n"
"        Build ID: df924a2b08a7e89f6e11251d4602022977af2670\n"
"\n"
"Displaying notes found at file offset 0x002d6c30 with length 0x00000144:\n"
"    Owner                 Data size          Description\n"
"    stapsdt              0x00000031          NT_STAPSDT (SystemTap probe "
"descriptors)\n"
"        Provider: python\n"
"        Name: gc__start\n"
"        Location: 0x00000000004371c3, Base: 0x0000000000630ce2, Semaphore: "
"0x00000000008d6bf6\n"
"        Arguments: -4@%ebx\n"
"    stapsdt              0x00000030          NT_STAPSDT (SystemTap probe "
"descriptors)\n"
"        Provider: python\n"
"        Name: gc__done\n"
"        Location: 0x00000000004374e1, Base: 0x0000000000630ce2, Semaphore: "
"0x00000000008d6bf8\n"
"        Arguments: -8@%rax\n"
"    stapsdt              0x00000045          NT_STAPSDT (SystemTap probe "
"descriptors)\n"
"        Provider: python\n"
"        Name: function__entry\n"
"        Location: 0x000000000053db6c, Base: 0x0000000000630ce2, Semaphore: "
"0x00000000008d6be8\n"
"        Arguments: 8@%rbp 8@%r12 -4@%eax\n"
"    stapsdt              0x00000046          NT_STAPSDT (SystemTap probe "
"descriptors)\n"
"        Provider: python\n"
"        Name: function__return\n"
"        Location: 0x000000000053dba8, Base: 0x0000000000630ce2, Semaphore: "
"0x00000000008d6bea\n"
"        Arguments: 8@%rbp 8@%r12 -4@%eax"
msgstr ""

#: howto/instrumentation.rst:125
#, fuzzy
msgid ""
"The above metadata contains information for SystemTap describing how it can "
"patch strategically placed machine code instructions to enable the tracing "
"hooks used by a SystemTap script."
msgstr ""
"Les métadonnées ci-dessus contiennent des informations pour *SystemTap* "
"décrivant comment il peut mettre à jour des instructions de code machine "
"stratégiquement placées pour activer les crochets de traçage utilisés par un "
"script *SystemTap*."

#: howto/instrumentation.rst:131
msgid "Static DTrace probes"
msgstr "Sondes DTrace statiques"

#: howto/instrumentation.rst:133
msgid ""
"The following example DTrace script can be used to show the call/return "
"hierarchy of a Python script, only tracing within the invocation of a "
"function called \"start\". In other words, import-time function invocations "
"are not going to be listed:"
msgstr ""
"L'exemple suivant de script *DTrace* montre la hiérarchie d'appel/retour "
"d'un script Python, en ne traçant que l'invocation d'une fonction ``start``. "
"En d'autres termes, les appels de fonctions lors de la phase d'import ne "
"seront pas répertoriées :"

#: howto/instrumentation.rst:138
msgid ""
"self int indent;\n"
"\n"
"python$target:::function-entry\n"
"/copyinstr(arg1) == \"start\"/\n"
"{\n"
"        self->trace = 1;\n"
"}\n"
"\n"
"python$target:::function-entry\n"
"/self->trace/\n"
"{\n"
"        printf(\"%d\\t%*s:\", timestamp, 15, probename);\n"
"        printf(\"%*s\", self->indent, \"\");\n"
"        printf(\"%s:%s:%d\\n\", basename(copyinstr(arg0)), copyinstr(arg1), "
"arg2);\n"
"        self->indent++;\n"
"}\n"
"\n"
"python$target:::function-return\n"
"/self->trace/\n"
"{\n"
"        self->indent--;\n"
"        printf(\"%d\\t%*s:\", timestamp, 15, probename);\n"
"        printf(\"%*s\", self->indent, \"\");\n"
"        printf(\"%s:%s:%d\\n\", basename(copyinstr(arg0)), copyinstr(arg1), "
"arg2);\n"
"}\n"
"\n"
"python$target:::function-return\n"
"/copyinstr(arg1) == \"start\"/\n"
"{\n"
"        self->trace = 0;\n"
"}"
msgstr ""

#: howto/instrumentation.rst:230
msgid "It can be invoked like this::"
msgstr "Il peut être utilisé de cette manière ::"

#: howto/instrumentation.rst:174
msgid "$ sudo dtrace -q -s call_stack.d -c \"python3.6 script.py\""
msgstr ""

#: howto/instrumentation.rst:236
msgid "The output looks like this:"
msgstr "La sortie ressemble à ceci :"

#: howto/instrumentation.rst:178
msgid ""
"156641360502280  function-entry:call_stack.py:start:23\n"
"156641360518804  function-entry: call_stack.py:function_1:1\n"
"156641360532797  function-entry:  call_stack.py:function_3:9\n"
"156641360546807 function-return:  call_stack.py:function_3:10\n"
"156641360563367 function-return: call_stack.py:function_1:2\n"
"156641360578365  function-entry: call_stack.py:function_2:5\n"
"156641360591757  function-entry:  call_stack.py:function_1:1\n"
"156641360605556  function-entry:   call_stack.py:function_3:9\n"
"156641360617482 function-return:   call_stack.py:function_3:10\n"
"156641360629814 function-return:  call_stack.py:function_1:2\n"
"156641360642285 function-return: call_stack.py:function_2:6\n"
"156641360656770  function-entry: call_stack.py:function_3:9\n"
"156641360669707 function-return: call_stack.py:function_3:10\n"
"156641360687853  function-entry: call_stack.py:function_4:13\n"
"156641360700719 function-return: call_stack.py:function_4:14\n"
"156641360719640  function-entry: call_stack.py:function_5:18\n"
"156641360732567 function-return: call_stack.py:function_5:21\n"
"156641360747370 function-return:call_stack.py:start:28"
msgstr ""

#: howto/instrumentation.rst:201
msgid "Static SystemTap markers"
msgstr "Marqueurs statiques *SystemTap*"

#: howto/instrumentation.rst:203
msgid ""
"The low-level way to use the SystemTap integration is to use the static "
"markers directly.  This requires you to explicitly state the binary file "
"containing them."
msgstr ""
"La façon la plus simple d'utiliser l'intégration *SystemTap* est d'utiliser "
"directement les marqueurs statiques. Pour cela vous devez pointer "
"explicitement le fichier binaire qui les contient."

#: howto/instrumentation.rst:207
msgid ""
"For example, this SystemTap script can be used to show the call/return "
"hierarchy of a Python script:"
msgstr ""
"Par exemple, ce script *SystemTap* peut être utilisé pour afficher la "
"hiérarchie d'appel/retour d'un script Python :"

#: howto/instrumentation.rst:210
msgid ""
"probe process(\"python\").mark(\"function__entry\") {\n"
"     filename = user_string($arg1);\n"
"     funcname = user_string($arg2);\n"
"     lineno = $arg3;\n"
"\n"
"     printf(\"%s => %s in %s:%d\\\\n\",\n"
"            thread_indent(1), funcname, filename, lineno);\n"
"}\n"
"\n"
"probe process(\"python\").mark(\"function__return\") {\n"
"    filename = user_string($arg1);\n"
"    funcname = user_string($arg2);\n"
"    lineno = $arg3;\n"
"\n"
"    printf(\"%s <= %s in %s:%d\\\\n\",\n"
"           thread_indent(-1), funcname, filename, lineno);\n"
"}"
msgstr ""

#: howto/instrumentation.rst:232
msgid ""
"$ stap \\\n"
"  show-call-hierarchy.stp \\\n"
"  -c \"./python test.py\""
msgstr ""

#: howto/instrumentation.rst:238
msgid ""
"11408 python(8274):        => __contains__ in Lib/_abcoll.py:362\n"
"11414 python(8274):         => __getitem__ in Lib/os.py:425\n"
"11418 python(8274):          => encode in Lib/os.py:490\n"
"11424 python(8274):          <= encode in Lib/os.py:493\n"
"11428 python(8274):         <= __getitem__ in Lib/os.py:426\n"
"11433 python(8274):        <= __contains__ in Lib/_abcoll.py:366"
msgstr ""

#: howto/instrumentation.rst:247
msgid "where the columns are:"
msgstr "où les colonnes sont :"

#: howto/instrumentation.rst:249
msgid "time in microseconds since start of script"
msgstr "temps en microsecondes depuis le début du script"

#: howto/instrumentation.rst:250
msgid "name of executable"
msgstr "nom de l'exécutable"

#: howto/instrumentation.rst:251
msgid "PID of process"
msgstr "PID du processus"

#: howto/instrumentation.rst:253
msgid ""
"and the remainder indicates the call/return hierarchy as the script executes."
msgstr ""
"et le reste indique la hiérarchie d'appel/retour lorsque le script s'exécute."

#: howto/instrumentation.rst:255
msgid ""
"For a :option:`--enable-shared` build of CPython, the markers are contained "
"within the libpython shared library, and the probe's dotted path needs to "
"reflect this. For example, this line from the above example:"
msgstr ""
"Pour une compilation :option:`--enable-shared` de CPython, les marqueurs "
"sont contenus dans la bibliothèque partagée *libpython*, et le chemin du "
"module de la sonde doit le refléter. Par exemple, la ligne de l'exemple ci-"
"dessus :"

#: howto/instrumentation.rst:259
msgid "probe process(\"python\").mark(\"function__entry\") {"
msgstr ""

#: howto/instrumentation.rst:263
msgid "should instead read:"
msgstr "doit plutôt se lire comme :"

#: howto/instrumentation.rst:265
msgid ""
"probe process(\"python\").library(\"libpython3.6dm.so.1.0\")."
"mark(\"function__entry\") {"
msgstr ""

#: howto/instrumentation.rst:269
msgid "(assuming a :ref:`debug build <debug-build>` of CPython 3.6)"
msgstr ""
"(en supposant une version de CPython 3.6 compilée avec le :ref:`débogage "
"<debug-build>` activé)"

#: howto/instrumentation.rst:273
msgid "Available static markers"
msgstr "Marqueurs statiques disponibles"

#: howto/instrumentation.rst:277
msgid ""
"This marker indicates that execution of a Python function has begun. It is "
"only triggered for pure-Python (bytecode) functions."
msgstr ""
"Ce marqueur indique que l'exécution d'une fonction Python a commencé. Il "
"n'est déclenché que pour les fonctions en Python pur (code intermédiaire)."

#: howto/instrumentation.rst:280
msgid ""
"The filename, function name, and line number are provided back to the "
"tracing script as positional arguments, which must be accessed using "
"``$arg1``, ``$arg2``, ``$arg3``:"
msgstr ""
"Le nom de fichier, le nom de la fonction et le numéro de ligne sont renvoyés "
"au script de traçage sous forme d'arguments positionnels, auxquels il faut "
"accéder en utilisant ``$arg1``, ``$arg2``, ``$arg3`` :"

#: howto/instrumentation.rst:284
msgid ""
"``$arg1`` : ``(const char *)`` filename, accessible using "
"``user_string($arg1)``"
msgstr ""
"``$arg1`` : ``(const char *)`` nom de fichier, accessible via "
"``user_string($arg1)``"

#: howto/instrumentation.rst:286
msgid ""
"``$arg2`` : ``(const char *)`` function name, accessible using "
"``user_string($arg2)``"
msgstr ""
"``$arg2`` : ``(const char *)`` nom de la fonction, accessible via "
"``user_string($arg2)``"

#: howto/instrumentation.rst:289
msgid "``$arg3`` : ``int`` line number"
msgstr "``$arg3`` : numéro de ligne ``int``"

#: howto/instrumentation.rst:293
#, fuzzy
msgid ""
"This marker is the converse of :c:func:`!function__entry`, and indicates "
"that execution of a Python function has ended (either via ``return``, or via "
"an exception).  It is only triggered for pure-Python (bytecode) functions."
msgstr ""
"Ce marqueur est l'inverse de :c:func:`function__entry`, et indique que "
"l'exécution d'une fonction Python est terminée (soit via ``return``, soit "
"via une exception). Il n'est déclenché que pour les fonctions en Python pur "
"(code intermédiaire)."

#: howto/instrumentation.rst:297
#, fuzzy
msgid "The arguments are the same as for :c:func:`!function__entry`"
msgstr "Les arguments sont les mêmes que pour :c:func:`function__entry`"

#: howto/instrumentation.rst:301
msgid ""
"This marker indicates a Python line is about to be executed.  It is the "
"equivalent of line-by-line tracing with a Python profiler.  It is not "
"triggered within C functions."
msgstr ""
"Ce marqueur indique qu'une ligne Python est sur le point d'être exécutée. "
"C'est l'équivalent du traçage ligne par ligne avec un profileur Python. Il "
"n'est pas déclenché dans les fonctions C."

#: howto/instrumentation.rst:305
#, fuzzy
msgid "The arguments are the same as for :c:func:`!function__entry`."
msgstr "Les arguments sont les mêmes que pour :c:func:`function__entry`."

#: howto/instrumentation.rst:309
#, fuzzy
msgid ""
"Fires when the Python interpreter starts a garbage collection cycle. "
"``arg0`` is the generation to scan, like :func:`gc.collect`."
msgstr ""
"Fonction appelée lorsque l'interpréteur Python lance un cycle de collecte du "
"ramasse-miettes. ``arg0`` est la génération à scanner, comme :func:`gc."
"collect()`."

#: howto/instrumentation.rst:314
msgid ""
"Fires when the Python interpreter finishes a garbage collection cycle. "
"``arg0`` is the number of collected objects."
msgstr ""
"Fonction appelée lorsque l'interpréteur Python termine un cycle de collecte "
"du ramasse-miettes. ``Arg0`` est le nombre d'objets collectés."

#: howto/instrumentation.rst:319
msgid ""
"Fires before :mod:`importlib` attempts to find and load the module. ``arg0`` "
"is the module name."
msgstr ""
"Fonction appelée avant que :mod:`importlib` essaye de trouver et de charger "
"le module. ``arg0`` est le nom du module."

#: howto/instrumentation.rst:326
msgid ""
"Fires after :mod:`importlib`'s find_and_load function is called. ``arg0`` is "
"the module name, ``arg1`` indicates if module was successfully loaded."
msgstr ""
"Fonction appelée après que la fonction ``find_and_load`` du module :mod:"
"`importlib` soit appelée. ``arg0`` est le nom du module, ``arg1`` indique si "
"le module a été chargé avec succès."

#: howto/instrumentation.rst:335
msgid ""
"Fires when :func:`sys.audit` or :c:func:`PySys_Audit` is called. ``arg0`` is "
"the event name as C string, ``arg1`` is a :c:type:`PyObject` pointer to a "
"tuple object."
msgstr ""
"Fonction appelée quand les fonctions :func:`sys.audit` ou :c:func:"
"`PySys_Audit` sont appelées. ``arg0`` est le nom de l'évènement de type "
"chaîne de caractère C. ``arg1`` est un pointeur sur un *n*-uplet d'objet de "
"type :c:type:`PyObject`."

#: howto/instrumentation.rst:343
msgid "SystemTap Tapsets"
msgstr "*Tapsets* de *SystemTap*"

#: howto/instrumentation.rst:345
msgid ""
"The higher-level way to use the SystemTap integration is to use a "
"\"tapset\": SystemTap's equivalent of a library, which hides some of the "
"lower-level details of the static markers."
msgstr ""
"La façon la plus simple d'utiliser l'intégration *SystemTap* est d'utiliser "
"un *« tapset »*. L'équivalent pour *SystemTap* d'une bibliothèque, qui "
"permet de masquer les détails de niveau inférieur des marqueurs statiques."

#: howto/instrumentation.rst:349
msgid "Here is a tapset file, based on a non-shared build of CPython:"
msgstr ""
"Voici un fichier *tapset*, basé sur une version non partagée compilée de "
"CPython :"

#: howto/instrumentation.rst:351
msgid ""
"/*\n"
"   Provide a higher-level wrapping around the function__entry and\n"
"   function__return markers:\n"
" \\*/\n"
"probe python.function.entry = process(\"python\").mark(\"function__entry\")\n"
"{\n"
"    filename = user_string($arg1);\n"
"    funcname = user_string($arg2);\n"
"    lineno = $arg3;\n"
"    frameptr = $arg4\n"
"}\n"
"probe python.function.return = process(\"python\")."
"mark(\"function__return\")\n"
"{\n"
"    filename = user_string($arg1);\n"
"    funcname = user_string($arg2);\n"
"    lineno = $arg3;\n"
"    frameptr = $arg4\n"
"}"
msgstr ""

#: howto/instrumentation.rst:372
msgid ""
"If this file is installed in SystemTap's tapset directory (e.g. ``/usr/share/"
"systemtap/tapset``), then these additional probepoints become available:"
msgstr ""
"Si ce fichier est installé dans le répertoire *tapset* de *SystemTap* (par "
"exemple ``/usr/share/systemtap/tapset``), alors ces sondes supplémentaires "
"deviennent disponibles :"

#: howto/instrumentation.rst:378
msgid ""
"This probe point indicates that execution of a Python function has begun. It "
"is only triggered for pure-Python (bytecode) functions."
msgstr ""
"Cette sonde indique que l'exécution d'une fonction Python a commencé. Elle "
"n'est déclenchée que pour les fonctions en Python pur (code intermédiaire)."

#: howto/instrumentation.rst:383
msgid ""
"This probe point is the converse of ``python.function.return``, and "
"indicates that execution of a Python function has ended (either via "
"``return``, or via an exception).  It is only triggered for pure-Python "
"(bytecode) functions."
msgstr ""
"Cette sonde est l'inverse de ``python.function.return``, et indique que "
"l'exécution d'une fonction Python est terminée (soit via ``return``, soit "
"via une exception). Elle est uniquement déclenchée pour les fonctions en "
"Python pur (code intermédiaire ou *bytecode*)."

#: howto/instrumentation.rst:390
msgid "Examples"
msgstr "Exemples"

#: howto/instrumentation.rst:391
msgid ""
"This SystemTap script uses the tapset above to more cleanly implement the "
"example given above of tracing the Python function-call hierarchy, without "
"needing to directly name the static markers:"
msgstr ""
"Ce script *SystemTap* utilise le *tapset* ci-dessus pour implémenter plus "
"proprement l'exemple précédent de traçage de la hiérarchie des appels de "
"fonctions Python, sans avoir besoin de nommer directement les marqueurs "
"statiques :"

#: howto/instrumentation.rst:395
msgid ""
"probe python.function.entry\n"
"{\n"
"  printf(\"%s => %s in %s:%d\\n\",\n"
"         thread_indent(1), funcname, filename, lineno);\n"
"}\n"
"\n"
"probe python.function.return\n"
"{\n"
"  printf(\"%s <= %s in %s:%d\\n\",\n"
"         thread_indent(-1), funcname, filename, lineno);\n"
"}"
msgstr ""

#: howto/instrumentation.rst:410
#, fuzzy
msgid ""
"The following script uses the tapset above to provide a top-like view of all "
"running CPython code, showing the top 20 most frequently entered bytecode "
"frames, each second, across the whole system:"
msgstr ""
"Le script suivant utilise le *tapset* ci-dessus pour fournir une vue de "
"l'ensemble du code CPython en cours d'exécution, montrant les 20 cadres de "
"la pile d'appel (*stack frames*) les plus fréquemment utilisées du code "
"intermédiaire, chaque seconde, sur l'ensemble du système :"

#: howto/instrumentation.rst:414
msgid ""
"global fn_calls;\n"
"\n"
"probe python.function.entry\n"
"{\n"
"    fn_calls[pid(), filename, funcname, lineno] += 1;\n"
"}\n"
"\n"
"probe timer.ms(1000) {\n"
"    printf(\"\\033[2J\\033[1;1H\") /* clear screen \\*/\n"
"    printf(\"%6s %80s %6s %30s %6s\\n\",\n"
"           \"PID\", \"FILENAME\", \"LINE\", \"FUNCTION\", \"CALLS\")\n"
"    foreach ([pid, filename, funcname, lineno] in fn_calls- limit 20) {\n"
"        printf(\"%6d %80s %6d %30s %6d\\n\",\n"
"            pid, filename, lineno, funcname,\n"
"            fn_calls[pid, filename, funcname, lineno]);\n"
"    }\n"
"    delete fn_calls;\n"
"}"
msgstr ""
